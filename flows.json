[
    {
        "id": "845e1abd965019b2",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c5651ddd0c24ddf4",
        "type": "tab",
        "label": "FileConversion",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "31ab9164236cebec",
        "type": "tab",
        "label": "Ping",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d97e10b66dcfec69",
        "type": "tab",
        "label": "RDV test",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "68b965bc92482715",
        "type": "tab",
        "label": "TempScheduler",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "6706bca3af779f31",
        "type": "tab",
        "label": "Delivery QA fail Email",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e4049991eaeb177a",
        "type": "tab",
        "label": "Survey Email",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3e2ac01fe73e3c6a",
        "type": "tab",
        "label": "SurveyResearch",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "069222a25fd75e28",
        "type": "tab",
        "label": "EquipmentAllocationWork",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "75a9fd38f6b46ffa",
        "type": "tab",
        "label": "Indusoft стандартизация",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7789b9bd921d5983",
        "type": "tab",
        "label": "Выпуск",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ee18062312a58cf2",
        "type": "tab",
        "label": "RFID операции",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a216597345f740e6",
        "type": "tab",
        "label": "БП по RFID",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dddcaf8ac15798b1",
        "type": "tab",
        "label": "AutoOuttake",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "35d28987f569ce61",
        "type": "tab",
        "label": "ProcessByNumberSAP",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "97e1a989e145c1f8",
        "type": "tab",
        "label": "Номер партии",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f6f0e22b5d52cde1",
        "type": "tab",
        "label": "Shipment status",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e504da0640e31740",
        "type": "tab",
        "label": "Indusoft варки",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "8de0de88b224a7ef",
        "type": "tab",
        "label": "Indusoft варки",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "02903af110ba6e1e",
        "type": "tab",
        "label": "Авто значения Insplot",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d26eaeaa60be6fc5",
        "type": "tab",
        "label": "Образцы QA",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "170b6645847ae20d",
        "type": "tab",
        "label": "Settings and Utilities",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bdcac5c6aa044a98",
        "type": "tab",
        "label": "Telegrams",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "47c2ae891192ea78",
        "type": "tab",
        "label": "RFID Terminal",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c04c67beef3f4f91",
        "type": "tab",
        "label": "/api/ping",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "94584107e700975b",
        "type": "tab",
        "label": "Reception volume",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "da8ae9bd33a4e199",
        "type": "tab",
        "label": "Process  changed",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3080ea5fd0475deb",
        "type": "tab",
        "label": "Curd",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a91bf94969659a0b",
        "type": "tab",
        "label": "Milkoscan",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "eb52e8f2691be09e",
        "type": "tab",
        "label": "Intake",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f1cf6febbf29252b",
        "type": "tab",
        "label": "ВесКластер",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8a82633e8612364f",
        "type": "tab",
        "label": "UserActivityOnEquipment",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c764d88e569893de",
        "type": "tab",
        "label": "OEE Terminal",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "453361abcae0776c",
        "type": "tab",
        "label": "DegustationDuplicates",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "def1857dcad7e99b",
        "type": "tab",
        "label": "Backup NR",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "852151fb0c2db6c2",
        "type": "tab",
        "label": "UserActionsLog",
        "disabled": false,
        "info": "Логирование действий пользователей по изменению мастер-данных",
        "env": []
    },
    {
        "id": "266f5e7038bdea8e",
        "type": "tab",
        "label": "PeriodicalControlTasksForInspectionLots",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c58b75e0f3f386f8",
        "type": "tab",
        "label": "Print",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "110961a95f601ab7",
        "type": "tab",
        "label": "Delivery status",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d72dfa0634828aca",
        "type": "tab",
        "label": "FileConversion",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "056ccbd5a38f655b",
        "type": "tab",
        "label": "UserTaskEventHub",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "011c53b11af439eb",
        "type": "tab",
        "label": "Нормализация",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "41c936a05a44db83",
        "type": "tab",
        "label": "Варки",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "01b1d63d2a62703b",
        "type": "tab",
        "label": "CheckToken",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3a2b12ac853420a3",
        "type": "tab",
        "label": "ScanLog",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5247ec0d7c2c38bb",
        "type": "tab",
        "label": "Board",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1d4b73c50ceee9e5",
        "type": "tab",
        "label": "ProcessMaterialRedeclare",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e5230b0e29472dd4",
        "type": "tab",
        "label": "Terminal",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c2cffd502b9dd43b",
        "type": "tab",
        "label": "Универсальный справочник",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4dade99a66dcc028",
        "type": "tab",
        "label": "ReceptionBatch",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1599604f489b25c7",
        "type": "tab",
        "label": "Допуск по молоку",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1a2e5283742c6999",
        "type": "tab",
        "label": "CompleteShipment",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e08887c0e6e05d68",
        "type": "tab",
        "label": "CycleControlRule&ProductionCycle",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1f4d96a137cd98c2",
        "type": "tab",
        "label": "QualityPeriodicalValues",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d777152b3003d7b9",
        "type": "tab",
        "label": "FileManager",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bffde752cab0f07d",
        "type": "tab",
        "label": "ReverseBatch",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fca5a13dcb9d9826",
        "type": "tab",
        "label": "QA Email",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2d0368e857414e1b",
        "type": "subflow",
        "name": "get token",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "0fe3c1157ad5016c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 80,
                "wires": [
                    {
                        "id": "ebe93f1ea01cdd18",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "aa052c6ee73f6582",
        "type": "subflow",
        "name": "GetFileList",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "c82605c3a9ad3c57"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1140,
                "y": 900,
                "wires": [
                    {
                        "id": "d19883bb947842e5",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1000,
                "y": 900,
                "wires": [
                    {
                        "id": "555e762edb85965d",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5ea520ab175b1ce2",
        "type": "subflow",
        "name": "FileProcessingSubFlow",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 80,
                "wires": [
                    {
                        "id": "ca2ba212dc72c854"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1320,
                "y": 80,
                "wires": [
                    {
                        "id": "c3e67e39d498c139",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b5263af018a59806",
        "type": "subflow",
        "name": "Subflow 2",
        "info": "",
        "in": [
            {
                "x": 460,
                "y": 500,
                "wires": [
                    {
                        "id": "f8e72cb1b03dd873"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1180,
                "y": 100,
                "wires": [
                    {
                        "id": "adec8271fb7e8e0f",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "f8fc59a8d3d93ef9",
        "type": "subflow",
        "name": "Save Catch Data",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "5753220c94cfa05f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 80,
                "wires": [
                    {
                        "id": "5753220c94cfa05f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "30b0a1122a464303",
        "type": "subflow",
        "name": "Get Service User OLD",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "13719150828b58e0"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 860,
                "y": 40,
                "wires": [
                    {
                        "id": "fff63376d220836a",
                        "port": 0
                    }
                ]
            },
            {
                "x": 430,
                "y": 100,
                "wires": [
                    {
                        "id": "7c9af12d200df640",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "",
            "Catch Error Data"
        ]
    },
    {
        "id": "f2924807aef52857",
        "type": "subflow",
        "name": "Get Token OLD",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "6034e9ee6d6fd564"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 40,
                "wires": [
                    {
                        "id": "37de9aab2821425a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "",
            "Catch Error Data"
        ]
    },
    {
        "id": "036aca90e53023a9",
        "type": "subflow",
        "name": "Save Deliveries Supplies",
        "info": "",
        "category": "Deliveries Supplies",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "8f3a07389e6175c9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1020,
                "y": 160,
                "wires": [
                    {
                        "id": "3380ef25c8492abe",
                        "port": 0
                    }
                ]
            },
            {
                "x": 430,
                "y": 280,
                "wires": [
                    {
                        "id": "fea0698942503171",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "",
            "Catch Error Data"
        ]
    },
    {
        "id": "53324788122345c3",
        "type": "subflow",
        "name": "Send Telegram to MES",
        "info": "",
        "category": "Hochland Telegrams",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "5baa6103ea80fcc6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1660,
                "y": 40,
                "wires": [
                    {
                        "id": "08dd7fb0bc29c6da",
                        "port": 0
                    }
                ]
            },
            {
                "x": 370,
                "y": 600,
                "wires": [
                    {
                        "id": "a68919cccae5164b",
                        "port": 0
                    },
                    {
                        "id": "aea90857fb116358",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "",
            "Catch Error Data"
        ],
        "status": {
            "x": 300,
            "y": 520,
            "wires": [
                {
                    "id": "3aa365cfa01eb879",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "ca94f48e1f18b542",
        "type": "subflow",
        "name": "Config",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "bc9409e657983d6a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 80,
                "wires": [
                    {
                        "id": "bc9409e657983d6a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "AuthUrl",
                "type": "str",
                "value": "http://10.70.6.61:52431"
            },
            {
                "name": "BatchUrl",
                "type": "str",
                "value": "http://10.70.6.61:52448"
            },
            {
                "name": "ProductionUrl",
                "type": "str",
                "value": "http://10.70.6.61:52449"
            },
            {
                "name": "WorkflowUrl",
                "type": "str",
                "value": "http://10.70.6.61:52438"
            },
            {
                "name": "SqlMasterIp",
                "type": "str",
                "value": "10.70.6.61"
            },
            {
                "name": "SqlRuntimeIp",
                "type": "str",
                "value": "10.70.6.61"
            },
            {
                "name": "ChecklistUrl",
                "type": "str",
                "value": "http://10.70.6.61:52435"
            },
            {
                "name": "QAUrl",
                "type": "str",
                "value": "http://10.70.6.61:52433"
            },
            {
                "name": "BaseClassifiersUrl",
                "type": "str",
                "value": "http://10.70.6.61:52432"
            },
            {
                "name": "ReceptionUrl",
                "type": "str",
                "value": "http://10.70.6.61:52461"
            },
            {
                "name": "LabEquipmentUrl",
                "type": "str",
                "value": "http://10.70.6.61:52441"
            },
            {
                "name": "MesCoreUrl",
                "type": "str",
                "value": "http://10.70.6.61:5280"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c5b8559825b247a0",
        "type": "subflow",
        "name": "Get Service User",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "595e1a54863fd6df"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1160,
                "y": 40,
                "wires": [
                    {
                        "id": "41b74c93b41f2c1f",
                        "port": 0
                    }
                ]
            },
            {
                "x": 430,
                "y": 160,
                "wires": [
                    {
                        "id": "9a8df06d251018ba",
                        "port": 0
                    },
                    {
                        "id": "595e1a54863fd6df",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "",
            "Catch Error Data"
        ]
    },
    {
        "id": "37b786771d50fd31",
        "type": "subflow",
        "name": "Get Token",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "5c25f971ea7f3fbf"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 40,
                "wires": [
                    {
                        "id": "649b4c8d54dc2a38",
                        "port": 0
                    }
                ]
            },
            {
                "x": 430,
                "y": 160,
                "wires": [
                    {
                        "id": "6af15775feb114af",
                        "port": 0
                    },
                    {
                        "id": "5c25f971ea7f3fbf",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "",
            "Catch Error Data"
        ]
    },
    {
        "id": "87d42e36227889f6",
        "type": "subflow",
        "name": "Telegram 19 Get",
        "info": "",
        "category": "Hochland Telegrams",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "a22b2285eded3d48"
                    },
                    {
                        "id": "3a855e90b3b6b732"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 100,
                "wires": [
                    {
                        "id": "cf54c9802cc0db16",
                        "port": 0
                    }
                ]
            },
            {
                "x": 430,
                "y": 220,
                "wires": [
                    {
                        "id": "5ac898080dbd6177",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "",
            "Catch Error Data"
        ],
        "status": {
            "x": 1040,
            "y": 280,
            "wires": [
                {
                    "id": "c7ac7b709078516d",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "7f6a1556900e92ac",
        "type": "subflow",
        "name": "Telegram 19 Save",
        "info": "",
        "category": "Hochland Telegrams",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "0285bdc5264bf738"
                    },
                    {
                        "id": "e9cf5f4dcb5fe58f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1080,
                "y": 220,
                "wires": [
                    {
                        "id": "b8ce50adf15323e4",
                        "port": 0
                    }
                ]
            },
            {
                "x": 430,
                "y": 340,
                "wires": [
                    {
                        "id": "7280b9f5ba61ab94",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "",
            "Catch Error Data"
        ],
        "status": {
            "x": 1080,
            "y": 400,
            "wires": [
                {
                    "id": "c6e733540f15fc48",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "addf8ba3468e2efd",
        "type": "subflow",
        "name": "Telegram 17 Save",
        "info": "",
        "category": "Hochland Telegrams",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "8e646ea3f8f6b22f"
                    },
                    {
                        "id": "ccef5c50637af4de"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1080,
                "y": 160,
                "wires": [
                    {
                        "id": "40300669c96b389d",
                        "port": 0
                    }
                ]
            },
            {
                "x": 430,
                "y": 280,
                "wires": [
                    {
                        "id": "01f92551dfb0761c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "",
            "Catch Error Data"
        ],
        "status": {
            "x": 1080,
            "y": 340,
            "wires": [
                {
                    "id": "fbb3c59035795dae",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "af3d54f9caaa27a3",
        "type": "subflow",
        "name": "Send Telegram to MES API / DBTable",
        "info": "",
        "category": "Hochland Telegrams",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "6ad2a02dd5776e47"
                    },
                    {
                        "id": "1604488b8e3c36ce"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1960,
                "y": 40,
                "wires": [
                    {
                        "id": "e68faa777aa58bb4",
                        "port": 0
                    }
                ]
            },
            {
                "x": 370,
                "y": 600,
                "wires": [
                    {
                        "id": "b3847c21d0a3e1de",
                        "port": 0
                    },
                    {
                        "id": "8d6622abb13008f1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "",
            "Catch Error Data"
        ],
        "status": {
            "x": 300,
            "y": 520,
            "wires": [
                {
                    "id": "e52e84d62da1e443",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "dc9e44bd90b8f5e8",
        "type": "subflow",
        "name": "Telegram 10 Get",
        "info": "",
        "category": "Hochland Telegrams",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "8386439291964386"
                    },
                    {
                        "id": "8cef7b18717b50e0"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 100,
                "wires": [
                    {
                        "id": "1a3449195e234283",
                        "port": 0
                    }
                ]
            },
            {
                "x": 430,
                "y": 220,
                "wires": [
                    {
                        "id": "d4ef8f4a608d703a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "",
            "Catch Error Data"
        ],
        "status": {
            "x": 1040,
            "y": 280,
            "wires": [
                {
                    "id": "fc5d26ea064373c7",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "a5012ab9e1074fde",
        "type": "subflow",
        "name": "Telegram 10 Save",
        "info": "",
        "category": "Hochland Telegrams",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "60a56946b67bb0b7"
                    },
                    {
                        "id": "f2c7313ebcaaa676"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1080,
                "y": 160,
                "wires": [
                    {
                        "id": "3d8184074b688c7c",
                        "port": 0
                    }
                ]
            },
            {
                "x": 430,
                "y": 280,
                "wires": [
                    {
                        "id": "968b8aa9b8f402a5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "",
            "Catch Error Data"
        ],
        "status": {
            "x": 1080,
            "y": 340,
            "wires": [
                {
                    "id": "c08503dada5a58b2",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "4e2c42794684d256",
        "type": "subflow",
        "name": "Telegram 15 Save",
        "info": "",
        "category": "Hochland Telegrams",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "64f022795029f77d"
                    },
                    {
                        "id": "ef32e1096e934cd3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1080,
                "y": 160,
                "wires": [
                    {
                        "id": "0cfe2f91e74bacbd",
                        "port": 0
                    }
                ]
            },
            {
                "x": 430,
                "y": 280,
                "wires": [
                    {
                        "id": "cdb9298579dfa1ca",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "",
            "Catch Error Data"
        ],
        "status": {
            "x": 1080,
            "y": 340,
            "wires": [
                {
                    "id": "5992b2dd78714981",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "2fcbd622bb75a545",
        "type": "subflow",
        "name": "Send Telegram 13 to MES",
        "info": "",
        "category": "Hochland Telegrams",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "f54cb9614181da59"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1960,
                "y": 40,
                "wires": [
                    {
                        "id": "81a8a2f67a42219d",
                        "port": 0
                    }
                ]
            },
            {
                "x": 370,
                "y": 1040,
                "wires": [
                    {
                        "id": "cd5f8631a5d18fe0",
                        "port": 0
                    },
                    {
                        "id": "821a4e19edc63e70",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "",
            "Catch Error Data"
        ],
        "status": {
            "x": 300,
            "y": 960,
            "wires": [
                {
                    "id": "da7f59a652c928b3",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "b09434461726d60e",
        "type": "subflow",
        "name": "Send Telegram 15 to MES",
        "info": "",
        "category": "Hochland Telegrams",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "45d56667af1eb63a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1960,
                "y": 40,
                "wires": [
                    {
                        "id": "28c386194a0c9be6",
                        "port": 0
                    }
                ]
            },
            {
                "x": 410,
                "y": 1080,
                "wires": [
                    {
                        "id": "f5cf0ad3957156a0",
                        "port": 0
                    },
                    {
                        "id": "b3417c08a20d62d1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "",
            "Catch Error Data"
        ],
        "status": {
            "x": 300,
            "y": 980,
            "wires": [
                {
                    "id": "a71b9d33f83ebdf2",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "5919f716f21fdce1",
        "type": "subflow",
        "name": "Telegram 14 Save",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "1a8fb0b6ed6bc964"
                    },
                    {
                        "id": "4bd5da1b7995b551"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1200,
                "y": 220,
                "wires": [
                    {
                        "id": "cc6baaf81d805708",
                        "port": 0
                    }
                ]
            },
            {
                "x": 380,
                "y": 340,
                "wires": [
                    {
                        "id": "62170f5e8986dad3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 1200,
            "y": 380,
            "wires": [
                {
                    "id": "0652f6e56caeebbd",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "eab6334d31d45c68",
        "type": "subflow",
        "name": "GetFileListP",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 70,
                "y": 120,
                "wires": [
                    {
                        "id": "69af1230df48dcad"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1560,
                "y": 280,
                "wires": [
                    {
                        "id": "15f056c6b917026f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "20dffe6ac0526b37",
        "type": "subflow",
        "name": "FileProcessingSubFlowP",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 120,
                "wires": [
                    {
                        "id": "4a719cdef805d404"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1060,
                "y": 120,
                "wires": [
                    {
                        "id": "189af50584c4d6d9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e593d58e62761e62",
        "type": "subflow",
        "name": "LabEquipmentHandler",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 260,
                "wires": [
                    {
                        "id": "7f2f5c0417dd0ccb"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 140,
                "wires": [
                    {
                        "id": "4268b76ee76c1421",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "05971e2c4fad3c6f",
        "type": "subflow",
        "name": "FileProcessingSubFlowNew",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 260,
                "y": 460,
                "wires": [
                    {
                        "id": "6b4551078bc6f9bd"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 520,
                "wires": [
                    {
                        "id": "8f93ead8e5156572",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f158519c0d8786f6",
        "type": "subflow",
        "name": "GetFileListLumex",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 140,
                "wires": [
                    {
                        "id": "2da2adf6a20e5824"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1700,
                "y": 300,
                "wires": [
                    {
                        "id": "e2eac8f836ab2c4a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a3392fd4e2fe8625",
        "type": "subflow",
        "name": "httpRequest&loop",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 500,
                "y": 240,
                "wires": [
                    {
                        "id": "08608d855b285b97"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1420,
                "y": 340,
                "wires": [
                    {
                        "id": "91a6f29f99e2f0ac",
                        "port": 0
                    },
                    {
                        "id": "238933e314770dfd",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e3884960e2be6a63",
        "type": "subflow",
        "name": "GetFileListBruker",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 260,
                "y": 400,
                "wires": [
                    {
                        "id": "072e7e1fd2056f84"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 860,
                "y": 480,
                "wires": [
                    {
                        "id": "b60ed3d75603715e",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "30daf455e2857de4",
        "type": "subflow",
        "name": "Handler_2.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 280,
                "y": 340,
                "wires": [
                    {
                        "id": "d538c74665d5dd49"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7fa7f34a762d9673",
        "type": "subflow",
        "name": "CheckToken",
        "info": "",
        "category": "Вспомогательные",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "ebd84dd36ff87919"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1080,
                "y": 120,
                "wires": [
                    {
                        "id": "51c72a2eb3d4a742",
                        "port": 0
                    }
                ]
            },
            {
                "x": 430,
                "y": 260,
                "wires": [
                    {
                        "id": "19fbb44e88ae0e73",
                        "port": 0
                    }
                ]
            },
            {
                "x": 800,
                "y": 60,
                "wires": [
                    {
                        "id": "bc996b09a056137c",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "",
            "Catch Error Data"
        ]
    },
    {
        "id": "6bff06d7846d79c6",
        "type": "subflow",
        "name": "Обработка токена доступа",
        "info": "",
        "category": "Вспомогательные",
        "in": [
            {
                "x": 480,
                "y": 60,
                "wires": [
                    {
                        "id": "7ff7cd91f65d9efa"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1420,
                "y": 140,
                "wires": [
                    {
                        "id": "92ddc585f04fbb43",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "0a0d93428c00a77c",
        "type": "subflow",
        "name": "Конкретные таргеты",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 180,
                "wires": [
                    {
                        "id": "8315aa8fa1837293"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 140,
                "wires": [
                    {
                        "id": "1967ea07d8143679",
                        "port": 0
                    }
                ]
            },
            {
                "x": 520,
                "y": 220,
                "wires": [
                    {
                        "id": "8315aa8fa1837293",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a9425dc4a51ddbde",
        "type": "subflow",
        "name": "Telegram 13 Save",
        "info": "",
        "category": "Hochland Telegrams",
        "in": [
            {
                "x": 340,
                "y": 280,
                "wires": [
                    {
                        "id": "8a23a6bd370a186d"
                    },
                    {
                        "id": "4117967be6d271a1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1500,
                "y": 520,
                "wires": [
                    {
                        "id": "b990a779ffd95241",
                        "port": 0
                    }
                ]
            },
            {
                "x": 730,
                "y": 640,
                "wires": [
                    {
                        "id": "6f65ece993c5ca70",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "",
            "Catch Error Data"
        ],
        "status": {
            "x": 1500,
            "y": 700,
            "wires": [
                {
                    "id": "39a7e62d11e413cf",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "56467187de39c9ba",
        "type": "subflow",
        "name": "SAPRepite",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 20,
                "y": 220,
                "wires": [
                    {
                        "id": "2f14710e68315094"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1140,
                "y": 180,
                "wires": [
                    {
                        "id": "0fcf913121d5048d",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1120,
                "y": 260,
                "wires": [
                    {
                        "id": "0fcf913121d5048d",
                        "port": 1
                    },
                    {
                        "id": "e4b7652d8f2a8616",
                        "port": 0
                    },
                    {
                        "id": "05513f96c1ad0402",
                        "port": 0
                    },
                    {
                        "id": "fdfe9dc55aa74f5e",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "0a91e0b9498a5583",
        "type": "group",
        "z": "da8ae9bd33a4e199",
        "name": "Выпуск 1к1",
        "style": {
            "label": true,
            "fill": "#ffefbf",
            "fill-opacity": "0.5",
            "color": "#000000"
        },
        "nodes": [
            "50b886ef3edac2ae",
            "8156e1f19f6ed6a8",
            "450e75fc8aa06ddc",
            "e0c68448901af3c9",
            "6ce8bc80fb481202"
        ],
        "x": 714,
        "y": 679,
        "w": 1132,
        "h": 82
    },
    {
        "id": "478f8ed0060973d1",
        "type": "group",
        "z": "da8ae9bd33a4e199",
        "name": "Outtake воды при стопе варки и Intake по BOM",
        "style": {
            "fill": "#e3f3d3",
            "fill-opacity": "0.5",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "2328c98a67319fa4",
            "eec1a6ed5866513c",
            "b1c8e2f619d3cd6b",
            "bee26de4fbc1080a",
            "c3243d37c57ef6c7",
            "ecd216283153df6b",
            "b658bb6e0f375ef9",
            "6e59586fb3ea7087",
            "3f3fe390cc5817fd",
            "4e6f67d1b11f8c76",
            "c46a89fa7f3e6f9d"
        ],
        "x": 54,
        "y": 779,
        "w": 1372,
        "h": 162
    },
    {
        "id": "c06981d5c23f52fa",
        "type": "group",
        "z": "da8ae9bd33a4e199",
        "name": "Outtake из ОТ и Буферов",
        "style": {
            "fill": "#bfdbef",
            "fill-opacity": "0.5",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "d9593d1139f73662",
            "d7a1ee88eb4db8d5",
            "b25c752966d1c617",
            "54d9da4f7e2d164a",
            "21bffa78b4c8a00a",
            "ebb2c431d54ab00f",
            "fd1d155cc093f0a6",
            "a922d4cc213f6fd4",
            "2f505a6cebe7a1df"
        ],
        "x": 714,
        "y": 459,
        "w": 1312,
        "h": 162
    },
    {
        "id": "ccf22ab32adf050a",
        "type": "group",
        "z": "da8ae9bd33a4e199",
        "name": "Старт процесса",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#ffefbf"
        },
        "nodes": [
            "9319d3a66e367fe2",
            "b4d0eb5a4284684e",
            "2bacfca646459c62",
            "5f1db55f912a1894",
            "c5c1918eccc8c9c5",
            "1b203e4bcd90fdbf",
            "a3483c713918e46c"
        ],
        "x": 854,
        "y": 59,
        "w": 1132,
        "h": 122
    },
    {
        "id": "3a855e90b3b6b732",
        "type": "junction",
        "z": "87d42e36227889f6",
        "x": 120,
        "y": 280,
        "wires": [
            [
                "c7ac7b709078516d"
            ]
        ]
    },
    {
        "id": "158e1546d8998dcf",
        "type": "junction",
        "z": "87d42e36227889f6",
        "x": 720,
        "y": 40,
        "wires": [
            [
                "cf54c9802cc0db16"
            ]
        ]
    },
    {
        "id": "a02acc848a55848a",
        "type": "junction",
        "z": "87d42e36227889f6",
        "x": 720,
        "y": 160,
        "wires": [
            [
                "cf54c9802cc0db16"
            ]
        ]
    },
    {
        "id": "0285bdc5264bf738",
        "type": "junction",
        "z": "7f6a1556900e92ac",
        "x": 120,
        "y": 400,
        "wires": [
            [
                "c6e733540f15fc48"
            ]
        ]
    },
    {
        "id": "a071dafbf651a1d6",
        "type": "junction",
        "z": "7f6a1556900e92ac",
        "x": 760,
        "y": 40,
        "wires": [
            [
                "b8ce50adf15323e4"
            ]
        ]
    },
    {
        "id": "91e974ba02333b08",
        "type": "junction",
        "z": "7f6a1556900e92ac",
        "x": 760,
        "y": 100,
        "wires": [
            [
                "b8ce50adf15323e4"
            ]
        ]
    },
    {
        "id": "c64ff498cef45668",
        "type": "junction",
        "z": "7f6a1556900e92ac",
        "x": 760,
        "y": 280,
        "wires": [
            [
                "b8ce50adf15323e4"
            ]
        ]
    },
    {
        "id": "8e646ea3f8f6b22f",
        "type": "junction",
        "z": "addf8ba3468e2efd",
        "x": 120,
        "y": 340,
        "wires": [
            [
                "fbb3c59035795dae"
            ]
        ]
    },
    {
        "id": "e773ebb5a524234d",
        "type": "junction",
        "z": "addf8ba3468e2efd",
        "x": 760,
        "y": 40,
        "wires": [
            [
                "40300669c96b389d"
            ]
        ]
    },
    {
        "id": "70080508cfbf01a9",
        "type": "junction",
        "z": "addf8ba3468e2efd",
        "x": 760,
        "y": 100,
        "wires": [
            [
                "40300669c96b389d"
            ]
        ]
    },
    {
        "id": "a801a806f7c7394d",
        "type": "junction",
        "z": "addf8ba3468e2efd",
        "x": 760,
        "y": 220,
        "wires": [
            [
                "40300669c96b389d"
            ]
        ]
    },
    {
        "id": "9397640c167a8337",
        "type": "junction",
        "z": "af3d54f9caaa27a3",
        "x": 1620,
        "y": 280,
        "wires": [
            [
                "e68faa777aa58bb4"
            ]
        ]
    },
    {
        "id": "d522736b54f6b6e0",
        "type": "junction",
        "z": "af3d54f9caaa27a3",
        "x": 1420,
        "y": 240,
        "wires": [
            [
                "c63cbfe32878a609"
            ]
        ]
    },
    {
        "id": "2bbf70234bbe1c56",
        "type": "junction",
        "z": "af3d54f9caaa27a3",
        "x": 1460,
        "y": 160,
        "wires": [
            [
                "d45a00f0e7ba4a5a"
            ]
        ]
    },
    {
        "id": "56a8d896cd848039",
        "type": "junction",
        "z": "af3d54f9caaa27a3",
        "x": 740,
        "y": 160,
        "wires": [
            [
                "d45a00f0e7ba4a5a"
            ]
        ]
    },
    {
        "id": "f276b42a47e469de",
        "type": "junction",
        "z": "af3d54f9caaa27a3",
        "x": 880,
        "y": 380,
        "wires": [
            [
                "bf8214e92bcad1aa"
            ]
        ]
    },
    {
        "id": "8cef7b18717b50e0",
        "type": "junction",
        "z": "dc9e44bd90b8f5e8",
        "x": 120,
        "y": 280,
        "wires": [
            [
                "fc5d26ea064373c7"
            ]
        ]
    },
    {
        "id": "df6116670cc19afe",
        "type": "junction",
        "z": "dc9e44bd90b8f5e8",
        "x": 720,
        "y": 40,
        "wires": [
            [
                "1a3449195e234283"
            ]
        ]
    },
    {
        "id": "59c71e35b2e8096e",
        "type": "junction",
        "z": "dc9e44bd90b8f5e8",
        "x": 720,
        "y": 160,
        "wires": [
            [
                "1a3449195e234283"
            ]
        ]
    },
    {
        "id": "60a56946b67bb0b7",
        "type": "junction",
        "z": "a5012ab9e1074fde",
        "x": 120,
        "y": 340,
        "wires": [
            [
                "c08503dada5a58b2"
            ]
        ]
    },
    {
        "id": "bd8b368e84f9a832",
        "type": "junction",
        "z": "a5012ab9e1074fde",
        "x": 760,
        "y": 40,
        "wires": [
            [
                "3d8184074b688c7c"
            ]
        ]
    },
    {
        "id": "53a02682940b168d",
        "type": "junction",
        "z": "a5012ab9e1074fde",
        "x": 760,
        "y": 220,
        "wires": [
            [
                "3d8184074b688c7c"
            ]
        ]
    },
    {
        "id": "517921a3ab040a07",
        "type": "junction",
        "z": "a5012ab9e1074fde",
        "x": 760,
        "y": 100,
        "wires": [
            [
                "3d8184074b688c7c"
            ]
        ]
    },
    {
        "id": "b37755adfd385ba5",
        "type": "junction",
        "z": "170b6645847ae20d",
        "x": 620,
        "y": 480,
        "wires": [
            [
                "b42189316d6e237a"
            ]
        ]
    },
    {
        "id": "c15d0f6ebbef0dfa",
        "type": "junction",
        "z": "170b6645847ae20d",
        "x": 620,
        "y": 520,
        "wires": [
            [
                "b42189316d6e237a"
            ]
        ]
    },
    {
        "id": "ef32e1096e934cd3",
        "type": "junction",
        "z": "4e2c42794684d256",
        "x": 120,
        "y": 340,
        "wires": [
            [
                "5992b2dd78714981"
            ]
        ]
    },
    {
        "id": "5dae6e257854f301",
        "type": "junction",
        "z": "4e2c42794684d256",
        "x": 760,
        "y": 40,
        "wires": [
            [
                "0cfe2f91e74bacbd"
            ]
        ]
    },
    {
        "id": "07bebfcaeeb00127",
        "type": "junction",
        "z": "4e2c42794684d256",
        "x": 760,
        "y": 100,
        "wires": [
            [
                "0cfe2f91e74bacbd"
            ]
        ]
    },
    {
        "id": "ab9c146f2823a9c5",
        "type": "junction",
        "z": "4e2c42794684d256",
        "x": 760,
        "y": 220,
        "wires": [
            [
                "0cfe2f91e74bacbd"
            ]
        ]
    },
    {
        "id": "04f274fb97a87c3f",
        "type": "junction",
        "z": "170b6645847ae20d",
        "x": 620,
        "y": 360,
        "wires": [
            [
                "b42189316d6e237a"
            ]
        ]
    },
    {
        "id": "42b274eb50cc8a0f",
        "type": "junction",
        "z": "2fcbd622bb75a545",
        "x": 1620,
        "y": 280,
        "wires": [
            [
                "81a8a2f67a42219d"
            ]
        ]
    },
    {
        "id": "6e1548e972ef27a1",
        "type": "junction",
        "z": "2fcbd622bb75a545",
        "x": 1420,
        "y": 240,
        "wires": [
            [
                "f55000565788daa6"
            ]
        ]
    },
    {
        "id": "590d4f93d0585661",
        "type": "junction",
        "z": "2fcbd622bb75a545",
        "x": 1460,
        "y": 160,
        "wires": [
            [
                "0c3273885d46a4e6"
            ]
        ]
    },
    {
        "id": "ac43c8567d5ca1ea",
        "type": "junction",
        "z": "2fcbd622bb75a545",
        "x": 740,
        "y": 160,
        "wires": [
            [
                "0c3273885d46a4e6"
            ]
        ]
    },
    {
        "id": "813e8972cafb41a6",
        "type": "junction",
        "z": "2fcbd622bb75a545",
        "x": 880,
        "y": 380,
        "wires": [
            [
                "97f30008fbb289a0"
            ]
        ]
    },
    {
        "id": "b887a5b14e88d2a0",
        "type": "junction",
        "z": "2fcbd622bb75a545",
        "x": 1500,
        "y": 700,
        "wires": [
            [
                "b5ea597693130a15"
            ]
        ]
    },
    {
        "id": "ed6ab6a3ec2a0365",
        "type": "junction",
        "z": "2fcbd622bb75a545",
        "x": 1260,
        "y": 740,
        "wires": [
            [
                "4ce873fff57c0c7a"
            ]
        ]
    },
    {
        "id": "4a0af21e32de29ca",
        "type": "junction",
        "z": "2fcbd622bb75a545",
        "x": 1500,
        "y": 620,
        "wires": [
            [
                "b5ea597693130a15"
            ]
        ]
    },
    {
        "id": "b5e9a7f13db27cd8",
        "type": "junction",
        "z": "2fcbd622bb75a545",
        "x": 1500,
        "y": 860,
        "wires": [
            [
                "b5ea597693130a15"
            ]
        ]
    },
    {
        "id": "80c3c1410529399b",
        "type": "junction",
        "z": "2fcbd622bb75a545",
        "x": 1440,
        "y": 820,
        "wires": [
            [
                "491a2d3f752c3c09"
            ]
        ]
    },
    {
        "id": "e63540c5de651982",
        "type": "junction",
        "z": "2fcbd622bb75a545",
        "x": 1500,
        "y": 780,
        "wires": [
            [
                "b5ea597693130a15"
            ]
        ]
    },
    {
        "id": "0a69964bffcf823a",
        "type": "junction",
        "z": "2fcbd622bb75a545",
        "x": 1380,
        "y": 660,
        "wires": [
            [
                "f2a4723f3319754a"
            ]
        ]
    },
    {
        "id": "439cc95bc4cefd50",
        "type": "junction",
        "z": "2fcbd622bb75a545",
        "x": 1500,
        "y": 420,
        "wires": [
            [
                "b5ea597693130a15"
            ]
        ]
    },
    {
        "id": "58c9500937274a9b",
        "type": "junction",
        "z": "2fcbd622bb75a545",
        "x": 1500,
        "y": 480,
        "wires": [
            [
                "b5ea597693130a15"
            ]
        ]
    },
    {
        "id": "50bc99e6def3ff6b",
        "type": "junction",
        "z": "2fcbd622bb75a545",
        "x": 1200,
        "y": 580,
        "wires": [
            [
                "cc9b1a35d80b4515"
            ]
        ]
    },
    {
        "id": "c8b8945b7796f1ab",
        "type": "junction",
        "z": "b09434461726d60e",
        "x": 1420,
        "y": 240,
        "wires": [
            [
                "9eec4dd15f6b3280"
            ]
        ]
    },
    {
        "id": "6318aa9c653f5b7d",
        "type": "junction",
        "z": "b09434461726d60e",
        "x": 1460,
        "y": 160,
        "wires": [
            [
                "f252e265beb248ac"
            ]
        ]
    },
    {
        "id": "e2967c9ce56a4925",
        "type": "junction",
        "z": "b09434461726d60e",
        "x": 740,
        "y": 160,
        "wires": [
            [
                "f252e265beb248ac"
            ]
        ]
    },
    {
        "id": "6e33e9075d77e1e8",
        "type": "junction",
        "z": "b09434461726d60e",
        "x": 880,
        "y": 380,
        "wires": [
            [
                "2057fd2a1c71954b"
            ]
        ]
    },
    {
        "id": "f080039836e7452f",
        "type": "junction",
        "z": "b09434461726d60e",
        "x": 1360,
        "y": 420,
        "wires": [
            [
                "5644a0ede0d76440"
            ]
        ]
    },
    {
        "id": "70b8f6738ecbb7da",
        "type": "junction",
        "z": "b09434461726d60e",
        "x": 1360,
        "y": 460,
        "wires": [
            [
                "ddefb91d4c993da4"
            ]
        ]
    },
    {
        "id": "2127d98571eda9b9",
        "type": "junction",
        "z": "b09434461726d60e",
        "x": 1360,
        "y": 500,
        "wires": [
            [
                "5644a0ede0d76440"
            ]
        ]
    },
    {
        "id": "2e0c16f208760ba4",
        "type": "junction",
        "z": "b09434461726d60e",
        "x": 1100,
        "y": 740,
        "wires": [
            [
                "4ada8998d1db3ce8"
            ]
        ]
    },
    {
        "id": "c3a1ac9349e30812",
        "type": "junction",
        "z": "ee18062312a58cf2",
        "x": 180,
        "y": 320,
        "wires": [
            [
                "cb7699a83609b6c0"
            ]
        ]
    },
    {
        "id": "4bd5da1b7995b551",
        "type": "junction",
        "z": "5919f716f21fdce1",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "0652f6e56caeebbd"
            ]
        ]
    },
    {
        "id": "bd44472e9034d1cf",
        "type": "junction",
        "z": "5919f716f21fdce1",
        "x": 880,
        "y": 40,
        "wires": [
            [
                "cc6baaf81d805708"
            ]
        ]
    },
    {
        "id": "007115c20a9b84d5",
        "type": "junction",
        "z": "5919f716f21fdce1",
        "x": 880,
        "y": 100,
        "wires": [
            [
                "cc6baaf81d805708"
            ]
        ]
    },
    {
        "id": "37b5a4a256d0151d",
        "type": "junction",
        "z": "5919f716f21fdce1",
        "x": 880,
        "y": 280,
        "wires": [
            [
                "cc6baaf81d805708"
            ]
        ]
    },
    {
        "id": "8a23a6bd370a186d",
        "type": "junction",
        "z": "a9425dc4a51ddbde",
        "x": 420,
        "y": 700,
        "wires": [
            [
                "39a7e62d11e413cf"
            ]
        ]
    },
    {
        "id": "72eaacd7f857a515",
        "type": "junction",
        "z": "a9425dc4a51ddbde",
        "x": 1180,
        "y": 340,
        "wires": [
            [
                "b990a779ffd95241"
            ]
        ]
    },
    {
        "id": "516ac95b64d9f059",
        "type": "junction",
        "z": "a9425dc4a51ddbde",
        "x": 1180,
        "y": 400,
        "wires": [
            [
                "b990a779ffd95241"
            ]
        ]
    },
    {
        "id": "0eb43726f89c5de0",
        "type": "junction",
        "z": "a9425dc4a51ddbde",
        "x": 1180,
        "y": 580,
        "wires": [
            [
                "b990a779ffd95241"
            ]
        ]
    },
    {
        "id": "1fa71e94a3ba3b6a",
        "type": "junction",
        "z": "a9425dc4a51ddbde",
        "x": 1180,
        "y": 460,
        "wires": [
            [
                "b990a779ffd95241"
            ]
        ]
    },
    {
        "id": "222c41f74918bbe8",
        "type": "websocket-listener",
        "path": "/ws/ping",
        "wholemsg": "false"
    },
    {
        "id": "6d82fe123d0812e0",
        "type": "websocket-listener",
        "path": "/ws/checkweight",
        "wholemsg": "false"
    },
    {
        "id": "644cc6226b950a71",
        "type": "websocket-listener",
        "path": "/ws/updatingUserActivityOnEquipmentByTime",
        "wholemsg": "false"
    },
    {
        "id": "c7f2a4669e750ffc",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "9ee1a639280f2d58",
        "type": "global-config",
        "name": "global-config",
        "env": []
    },
    {
        "id": "6797e8f5ccec93cf",
        "type": "amqp-broker",
        "name": "prod rmq",
        "host": "localhost",
        "port": "5672",
        "vhost": "",
        "tls": false,
        "credsFromSettings": false
    },
    {
        "id": "2f76d8b874d08554",
        "type": "amqp-broker",
        "name": "RMQ",
        "host": "localhost",
        "port": "5672",
        "vhost": "/",
        "tls": false,
        "credsFromSettings": false
    },
    {
        "id": "8ef9824f1e7254c9",
        "type": "amqp-broker",
        "name": "226",
        "host": "10.70.7.226",
        "port": "5672",
        "vhost": "/",
        "tls": false,
        "credsFromSettings": false
    },
    {
        "id": "dd2d446f52636e01",
        "type": "http-ntlm-req-config",
        "name": "test",
        "user": "administrator",
        "pass": "ProAdmin777",
        "doman": ""
    },
    {
        "id": "a0513bd15284c98d",
        "type": "MSSQL-CN",
        "tdsVersion": "7_4",
        "name": "10.70.6.61_1",
        "server": "localhost",
        "port": "1433",
        "encyption": true,
        "trustServerCertificate": true,
        "database": "",
        "useUTC": true,
        "connectTimeout": "15000",
        "requestTimeout": "25000",
        "cancelTimeout": "5000",
        "pool": "5",
        "parseJSON": false,
        "enableArithAbort": true,
        "readOnlyIntent": false
    },
    {
        "id": "ded20dff97a51247",
        "type": "MSSQL-CN",
        "tdsVersion": "7_4",
        "name": "BaseClassifiers",
        "server": "localhost",
        "port": "1433",
        "encyption": true,
        "trustServerCertificate": true,
        "database": "",
        "useUTC": true,
        "connectTimeout": "15000",
        "requestTimeout": "15000",
        "cancelTimeout": "5000",
        "pool": "5",
        "parseJSON": false,
        "enableArithAbort": true,
        "readOnlyIntent": false
    },
    {
        "id": "7e5114f542cff14f",
        "type": "MSSQL-CN",
        "tdsVersion": "7_4",
        "name": "HochlandSQLServer",
        "server": "localhost",
        "port": "1433",
        "encyption": true,
        "trustServerCertificate": true,
        "database": "",
        "useUTC": true,
        "connectTimeout": "15000",
        "requestTimeout": "15000",
        "cancelTimeout": "5000",
        "pool": "5",
        "parseJSON": false,
        "enableArithAbort": true,
        "readOnlyIntent": false
    },
    {
        "id": "ee9e2bd745da9976",
        "type": "MSSQL-CN",
        "tdsVersion": "7_4",
        "name": "10.70.6.61",
        "server": "localhost",
        "port": "1433",
        "encyption": true,
        "trustServerCertificate": true,
        "database": "",
        "useUTC": true,
        "connectTimeout": "15000",
        "requestTimeout": "150000",
        "cancelTimeout": "5000",
        "pool": "5",
        "parseJSON": false,
        "enableArithAbort": true,
        "readOnlyIntent": false
    },
    {
        "id": "6c4551b7b08b27f9",
        "type": "MSSQL-CN",
        "tdsVersion": "7_4",
        "name": "10.70.6.61_1",
        "server": "localhost",
        "port": "1433",
        "encyption": true,
        "trustServerCertificate": true,
        "database": "",
        "useUTC": true,
        "connectTimeout": "15000",
        "requestTimeout": "15000",
        "cancelTimeout": "5000",
        "pool": "5",
        "parseJSON": false,
        "enableArithAbort": true,
        "readOnlyIntent": false
    },
    {
        "id": "b4d4fed8c8768eee",
        "type": "MSSQL-CN",
        "tdsVersion": "7_4",
        "name": "10.70.6.61_2",
        "server": "localhost",
        "port": "1433",
        "encyption": true,
        "trustServerCertificate": true,
        "database": "",
        "useUTC": true,
        "connectTimeout": "15000",
        "requestTimeout": "15000",
        "cancelTimeout": "5000",
        "pool": "5",
        "parseJSON": false,
        "enableArithAbort": true,
        "readOnlyIntent": false
    },
    {
        "id": "4dc6d7677dad14e8",
        "type": "MSSQL-CN",
        "tdsVersion": "7_4",
        "name": "",
        "server": "10.70.7.228",
        "port": "1433",
        "encyption": true,
        "trustServerCertificate": true,
        "database": "",
        "useUTC": true,
        "connectTimeout": "15000",
        "requestTimeout": "15000",
        "cancelTimeout": "5000",
        "pool": "5",
        "parseJSON": false,
        "enableArithAbort": true,
        "readOnlyIntent": false
    },
    {
        "id": "a30baf6b0cf8132b",
        "type": "MSSQL-CN",
        "tdsVersion": "7_4",
        "name": "",
        "server": "10.70.7.228",
        "port": "1433",
        "encyption": true,
        "trustServerCertificate": true,
        "database": "",
        "useUTC": true,
        "connectTimeout": "15000",
        "requestTimeout": "15000",
        "cancelTimeout": "5000",
        "pool": "5",
        "parseJSON": false,
        "enableArithAbort": true,
        "readOnlyIntent": false
    },
    {
        "id": "7cc2bf3fe74edae1",
        "type": "MSSQL-CN",
        "tdsVersion": "7_4",
        "name": "10.197.4.27_4",
        "server": "10.197.4.27",
        "port": "1433",
        "encyption": true,
        "trustServerCertificate": true,
        "database": "",
        "useUTC": true,
        "connectTimeout": "15000",
        "requestTimeout": "15000",
        "cancelTimeout": "5000",
        "pool": "5",
        "parseJSON": false,
        "enableArithAbort": true,
        "readOnlyIntent": false
    },
    {
        "id": "2b9761b3e07a03cc",
        "type": "MSSQL-CN",
        "tdsVersion": "7_4",
        "name": "10.197.4.23",
        "server": "10.197.4.23",
        "port": "1433",
        "encyption": true,
        "trustServerCertificate": true,
        "database": "",
        "useUTC": true,
        "connectTimeout": "15000",
        "requestTimeout": "15000",
        "cancelTimeout": "5000",
        "pool": "5",
        "parseJSON": false,
        "enableArithAbort": true,
        "readOnlyIntent": false
    },
    {
        "id": "1bbd10324c27c31e",
        "type": "MSSQL-CN",
        "tdsVersion": "7_4",
        "name": "Logs",
        "server": "MESDBSERVER",
        "port": "1433",
        "encyption": true,
        "trustServerCertificate": true,
        "database": "MESDashboards",
        "useUTC": true,
        "connectTimeout": "15000",
        "requestTimeout": "15000",
        "cancelTimeout": "5000",
        "pool": "5",
        "parseJSON": false,
        "enableArithAbort": true,
        "readOnlyIntent": false
    },
    {
        "id": "fc8e25614c1c8f1d",
        "type": "MSSQL-CN",
        "tdsVersion": "7_4",
        "name": "UberQuery",
        "server": "localhost",
        "port": "1433",
        "encyption": true,
        "trustServerCertificate": true,
        "database": "NRInserts",
        "useUTC": true,
        "connectTimeout": "15000",
        "requestTimeout": "15000",
        "cancelTimeout": "5000",
        "pool": "5",
        "parseJSON": false,
        "enableArithAbort": true,
        "readOnlyIntent": false
    },
    {
        "id": "a68c9f523b695218",
        "type": "MSSQL-CN",
        "tdsVersion": "7_4",
        "name": "UberQuery",
        "server": "localhost",
        "port": "1433",
        "encyption": true,
        "trustServerCertificate": true,
        "database": "NRInserts",
        "useUTC": true,
        "connectTimeout": "15000",
        "requestTimeout": "15000",
        "cancelTimeout": "5000",
        "pool": "5",
        "parseJSON": false,
        "enableArithAbort": true,
        "readOnlyIntent": false
    },
    {
        "id": "215d4d3b792fbfe3",
        "type": "smb config",
        "z": "30daf455e2857de4",
        "name": "hlrurad263",
        "share": "\\\\10.36.96.70\\Log",
        "domain": "Hochland"
    },
    {
        "id": "402adcd7c9fd9548",
        "type": "smb config",
        "z": "30daf455e2857de4",
        "name": "hlrurad231",
        "share": "\\\\10.36.96.52\\Log",
        "domain": "Hochland"
    },
    {
        "id": "bff394667e4d7a7e",
        "type": "smb config",
        "z": "30daf455e2857de4",
        "name": "hlrurad199",
        "share": "\\\\10.36.96.122\\Log",
        "domain": "Hochland"
    },
    {
        "id": "5f7a5f9954426220",
        "type": "smb config",
        "name": "",
        "share": "C:\\Log",
        "domain": "Hochland"
    },
    {
        "id": "94067491407153d6",
        "type": "smb config",
        "z": "eab6334d31d45c68",
        "name": "hlrurad263",
        "share": "\\\\10.36.96.70\\Log",
        "domain": "Hochland"
    },
    {
        "id": "13adc71cb9109d5d",
        "type": "smb config",
        "z": "eab6334d31d45c68",
        "name": "hlrurad231",
        "share": "\\\\10.36.96.52\\Log",
        "domain": "Hochland"
    },
    {
        "id": "fc52c3b78b1b9bec",
        "type": "smb config",
        "z": "eab6334d31d45c68",
        "name": "hlrurad199",
        "share": "\\\\10.36.96.122\\Log",
        "domain": "Hochland"
    },
    {
        "id": "a64df35521da0350",
        "type": "telegram bot",
        "botname": "HochlandControl_bot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "pollinterval": "1000",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "1747653260eb100c",
        "type": "sqlitedb",
        "db": "C:\\Jenkins\\ping\\ping.db",
        "mode": "RWC"
    },
    {
        "id": "53ef21ee93608bb9",
        "type": "FlowHubCfg",
        "apiToken": "git@github.com:DRAGONIL123/Hoch.git",
        "apiTokenType": "cred",
        "fullname": "",
        "email": "",
        "flowid": "31ab9164236cebec",
        "flowrevision": "Hoch",
        "notab": true,
        "pushcomment": "",
        "pushnewflows": true,
        "forcepush": true,
        "tokens": [
            {
                "name": "Main",
                "type": "cred",
                "val": "fhb_WyJDdzEybUtwNzYwbUlueEcvRWhKaHV3PT0iLCJTSXFQUk9xNDJyUWNreHFnVFhZU2tzaU0wbDNzdHRVSmV0TW5WQ05SdE9TZWFSYkVFUDlzMCtkaDFET0pOVzFYT1BOZzl6dElNNVF2VlowZnpUcWMySGRjbktoL3BnYXRHNEJsTFBsOFBkQm1QUENEN2lYaWQ1Y043aXhxQU5TQmd2MmEvRmNBK3A0TFlpdFptTkVnanROaWs2N3p2cnAzIl0"
            }
        ],
        "flowrevisions": {
            "845e1abd965019b2": "97295480673b4dd0ed1df78512b2c016832ce68c",
            "31ab9164236cebec": "3147c752ae569964ad4319d8a62e6e70cf0c3639"
        }
    },
    {
        "id": "b04dee56cff4ce4a",
        "type": "http request",
        "z": "2d0368e857414e1b",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:52431/connect/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Content-Type",
                "valueType": "other",
                "valueValue": "application/x-www-form-urlencoded"
            }
        ],
        "x": 370,
        "y": 80,
        "wires": [
            [
                "ebe93f1ea01cdd18"
            ]
        ]
    },
    {
        "id": "ebe93f1ea01cdd18",
        "type": "function",
        "z": "2d0368e857414e1b",
        "name": "msg.token = ..",
        "func": "msg.token =  \"Bearer \" + msg.payload.access_token;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "0fe3c1157ad5016c",
        "type": "template",
        "z": "2d0368e857414e1b",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "grant_type=client_credentials&client_id=Node-Red.Workflow&client_secret=7d15928b-9fe7-4cc1-a7f2-c42e14894d8d",
        "output": "str",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "b04dee56cff4ce4a"
            ]
        ]
    },
    {
        "id": "1e914d1227a07cb0",
        "type": "debug",
        "z": "2d0368e857414e1b",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 120,
        "wires": []
    },
    {
        "id": "c82605c3a9ad3c57",
        "type": "subflow:2d0368e857414e1b",
        "z": "aa052c6ee73f6582",
        "name": "",
        "x": 220,
        "y": 80,
        "wires": [
            [
                "54d770cbdbc7dc7f"
            ]
        ]
    },
    {
        "id": "5c3ddb7265bdffe4",
        "type": "function",
        "z": "aa052c6ee73f6582",
        "name": "CheckInputFiles",
        "func": "//msg.list = msg.list.filter(f => !f.startsWith('Error/') && !f.startsWith('Success/'));\nlet newList = [];\nmsg.allFileNames = [];\nmsg.allFileNames = msg.list;\n\n\n// msg.list.forEach(function(element, index) {\n\n// //ограничение на количество файлов временное\n// //&& element.includes('bez napolnit 1_12_2022')\n//     if (true //index <= 35\n//        // && (element.includes('bez napolnit 1_10_2022')) //.log\n//     // && (element.includes('bez napolnit 1_12_2022')\n//     //     || element.includes('bez napolnit_01_2021'))\n//     )\n//     {    \n//         if (!element.startsWith('Error/') && !element.startsWith('Success/'))\n//         {\n//             let result = element.replaceAll('/', '\\\\');\n//             newList.push(result);\n\n//             let cur = result.split('\\\\').pop();\n//             msg.allFileNames.push(cur); //.split('.') \n\n//             //msg.destinationFileName = curName;\n\n//             //msg.some = msg.currentFileName.split('\\\\').pop().split('.');\n//             //msg.fileOutputName = msg.config.outputPath + '/' + curName.split('.')[0] + \".json\";\n            \n//         }\n//     }\n\n// });\n// msg.list = newList;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 640,
        "wires": [
            [
                "c3e6df14617ef320"
            ]
        ]
    },
    {
        "id": "c3e6df14617ef320",
        "type": "file in",
        "z": "aa052c6ee73f6582",
        "name": "Read data",
        "filename": "dataPath",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 750,
        "y": 720,
        "wires": [
            [
                "9e86dd1475d08ff8"
            ]
        ]
    },
    {
        "id": "9e86dd1475d08ff8",
        "type": "function",
        "z": "aa052c6ee73f6582",
        "name": "GetData",
        "func": "\nlet rawdata = JSON.parse(msg.payload);\nlet curData = [];\nfor (let i = 0; i < rawdata.length; i++) {\n    const element = rawdata[i];\n\n    if (msg.allFileNames.find(f=>f == element.Name))\n    {\n        curData.push(element);\n    }\n}\n\nfor (let i = 0; i < msg.allFileNames.length; i++) {\n    //console.log(\"!!! -> \" + msg.allFileNames[i]);\n    const element = msg.allFileNames[i];\n    if (!rawdata.find(f=>f.Name==element)){\n        curData.push(\n            {\n                Name: element,\n                Date: new Date(),\n                LastPosition: 0,\n                LastState: 'Initial',\n                ErrorObject: null,\n                Scheme: undefined,\n                IgnoreFirstLine: undefined\n            }\n        )\n    }    \n}\n\nmsg.errorResult = [];\n\nmsg.data=curData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 720,
        "wires": [
            [
                "555e762edb85965d",
                "fccfc37f71f8c94a"
            ]
        ]
    },
    {
        "id": "8c85adba36d20af9",
        "type": "catch",
        "z": "aa052c6ee73f6582",
        "name": "",
        "scope": [
            "c3e6df14617ef320"
        ],
        "uncaught": false,
        "x": 140,
        "y": 720,
        "wires": [
            [
                "b44f90909c8b2c0a"
            ]
        ]
    },
    {
        "id": "b44f90909c8b2c0a",
        "type": "function",
        "z": "aa052c6ee73f6582",
        "name": "NewData",
        "func": "node.warn(\"CREATE NEW DATA.JSON\");\nlet objects = [];\nfor (let i = 0; i < msg.allFileNames.length; i++) {\n    const element = msg.allFileNames[i];\n    var obj = {\n            Name: element,\n            Date: new Date(),\n            LastPosition: 0,\n            LastState: 'Initial',\n            ErrorObject: null\n    }\n    \n    objects.push(obj)\n}\n\nmsg.payload = objects;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 720,
        "wires": [
            [
                "86a6eff4c565b8e4"
            ]
        ]
    },
    {
        "id": "86a6eff4c565b8e4",
        "type": "file",
        "z": "aa052c6ee73f6582",
        "name": "Write data.json",
        "filename": "dataPath",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 520,
        "y": 720,
        "wires": [
            [
                "c3e6df14617ef320"
            ]
        ]
    },
    {
        "id": "555e762edb85965d",
        "type": "switch",
        "z": "aa052c6ee73f6582",
        "name": "",
        "property": "allFileNames.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 820,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "fccfc37f71f8c94a",
        "type": "debug",
        "z": "aa052c6ee73f6582",
        "name": "debug 3",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "allFolders",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 700,
        "wires": []
    },
    {
        "id": "eda239abb9381cc7",
        "type": "debug",
        "z": "aa052c6ee73f6582",
        "name": "Folder",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 500,
        "wires": []
    },
    {
        "id": "453df522e3f27569",
        "type": "function",
        "z": "aa052c6ee73f6582",
        "name": "SetCurrentFileFullPath",
        "func": "msg.currentFileFullPath = msg.netDrive + '\\\\' + msg.payload + '\\\\';\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 420,
        "wires": [
            [
                "83b916b275180e4f"
            ]
        ]
    },
    {
        "id": "4b2feef617c2d461",
        "type": "debug",
        "z": "aa052c6ee73f6582",
        "name": "Files",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "list",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 360,
        "wires": []
    },
    {
        "id": "172b219d7122b371",
        "type": "function",
        "z": "aa052c6ee73f6582",
        "name": "function 2",
        "func": "//new Date(tempDate.getDate() - 3)\nlet last365days = new Date(new Date().getTime() - (2 * 24 * 60 * 60 * 1000));\n\nif (msg.stats < last365days)\n{\n    //node.warn(\"Ignore\");\n}\nelse\n{\n    let res = msg.currentFileFullPath + '\\\\' + msg.payload;\n    if(msg.payload.indexOf('caliber') == -1)         \n        msg.list.push(res);    \n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 560,
        "wires": [
            [
                "949ca81a3e9feee2"
            ]
        ]
    },
    {
        "id": "d6c50869a9dfb709",
        "type": "function",
        "z": "aa052c6ee73f6582",
        "name": "function 5",
        "func": "//node.warn(msg.allFolders);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 60,
        "wires": [
            [
                "226f5c8dabbd0a57"
            ]
        ]
    },
    {
        "id": "449afe22a7570702",
        "type": "switch",
        "z": "aa052c6ee73f6582",
        "name": "",
        "property": "netPath",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "\\\\10.36.96.70\\\\Log\\\\",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "\\\\10.36.96.52\\\\Log\\\\",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "\\\\10.36.96.122\\\\Log\\\\",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 410,
        "y": 80,
        "wires": [
            [
                "e85a31c2c8ba0f57"
            ],
            [
                "c047ee0214a8ecc2"
            ],
            [
                "183fba4e737d07b1"
            ]
        ]
    },
    {
        "id": "0506f6ecfef9cdc2",
        "type": "debug",
        "z": "aa052c6ee73f6582",
        "name": "debug 7",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 140,
        "wires": []
    },
    {
        "id": "c95c7aa47d01093c",
        "type": "catch",
        "z": "aa052c6ee73f6582",
        "name": "NetCatcher",
        "scope": [
            "31179182c848ca02",
            "4ef64400c92a9d72",
            "8593411efb62a8fa",
            "56cf63abf7a73612"
        ],
        "uncaught": false,
        "x": 1070,
        "y": 220,
        "wires": [
            [
                "08ca840267d17271"
            ]
        ]
    },
    {
        "id": "398817c61ffb36b1",
        "type": "catch",
        "z": "aa052c6ee73f6582",
        "name": "FsListCatcher",
        "scope": [
            "9a3da7e91eb0a4fd"
        ],
        "uncaught": false,
        "x": 1030,
        "y": 280,
        "wires": [
            [
                "8fdeaab4515c65cc"
            ]
        ]
    },
    {
        "id": "d01bfe551fa78e44",
        "type": "debug",
        "z": "aa052c6ee73f6582",
        "name": "netPathDebug",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 220,
        "wires": []
    },
    {
        "id": "08ca840267d17271",
        "type": "function",
        "z": "aa052c6ee73f6582",
        "name": "function 9",
        "func": "node.warn(\"!!!NetConnection FAILED---->\");\nnode.warn(msg.error);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 180,
        "wires": [
            [
                "d01bfe551fa78e44"
            ]
        ]
    },
    {
        "id": "8fdeaab4515c65cc",
        "type": "function",
        "z": "aa052c6ee73f6582",
        "name": "function 10",
        "func": "node.warn(\"!!!FsListCatcher\");\nnode.warn(msg.error);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "a15dfaa9f4885398",
        "type": "function",
        "z": "aa052c6ee73f6582",
        "name": "listInit",
        "func": "//node.warn('ListInit after Net connection');\n//node.warn(msg.payload);\nmsg.list = [];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 100,
        "wires": [
            [
                "8f83b7888b6be3c9"
            ]
        ]
    },
    {
        "id": "6f9a94388d14da12",
        "type": "exec",
        "z": "aa052c6ee73f6582",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Map Net Drive",
        "x": 140,
        "y": 340,
        "wires": [
            [
                "a15dfaa9f4885398"
            ],
            [
                "1131604e7a927a61"
            ],
            [
                "1131604e7a927a61"
            ]
        ]
    },
    {
        "id": "c7f52d0d97fa52ea",
        "type": "function",
        "z": "aa052c6ee73f6582",
        "name": "function 11",
        "func": "msg.payload = \"net use \" + msg.netDrive + \" \" + msg.netPathTempl + \" /user:\"+msg.netPathLogin+\" \"+msg.netPathPassword +\"\";\n//node.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 260,
        "wires": [
            [
                "6f9a94388d14da12"
            ]
        ]
    },
    {
        "id": "1131604e7a927a61",
        "type": "debug",
        "z": "aa052c6ee73f6582",
        "name": "debug 10",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 300,
        "wires": []
    },
    {
        "id": "5e8851d71f7373d4",
        "type": "debug",
        "z": "aa052c6ee73f6582",
        "name": "debug 11",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 200,
        "wires": []
    },
    {
        "id": "54d770cbdbc7dc7f",
        "type": "function",
        "z": "aa052c6ee73f6582",
        "name": "function 12",
        "func": "msg.payload = \"net use \" + msg.netDrive + \" /DELETE\";\n//node.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 140,
        "wires": [
            [
                "7703922f11a5dab0",
                "0506f6ecfef9cdc2"
            ]
        ]
    },
    {
        "id": "7703922f11a5dab0",
        "type": "exec",
        "z": "aa052c6ee73f6582",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Net Map Delete",
        "x": 160,
        "y": 200,
        "wires": [
            [
                "c7f52d0d97fa52ea",
                "5e8851d71f7373d4"
            ],
            [],
            []
        ]
    },
    {
        "id": "d19883bb947842e5",
        "type": "fs-remove",
        "z": "aa052c6ee73f6582",
        "path": "dataPath",
        "pathType": "msg",
        "filename": "filename",
        "filenameType": "msg",
        "recursive": true,
        "exist": false,
        "name": "Remove Data.json",
        "x": 1070,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "83b916b275180e4f",
        "type": "fs-list",
        "z": "aa052c6ee73f6582",
        "name": "",
        "path": "currentFileFullPath",
        "pathType": "msg",
        "pattern": "*",
        "patternType": "str",
        "filter": "files",
        "recursive": false,
        "follow": true,
        "property": "folderFileList",
        "propertyType": "msg",
        "x": 900,
        "y": 420,
        "wires": [
            [
                "949ca81a3e9feee2"
            ]
        ]
    },
    {
        "id": "8f83b7888b6be3c9",
        "type": "fs-list",
        "z": "aa052c6ee73f6582",
        "name": "FSListNet",
        "path": "netPath",
        "pathType": "msg",
        "pattern": "*",
        "patternType": "str",
        "filter": "folders",
        "recursive": false,
        "follow": true,
        "property": "allFolders",
        "propertyType": "msg",
        "x": 1040,
        "y": 80,
        "wires": [
            [
                "d6c50869a9dfb709"
            ]
        ]
    },
    {
        "id": "2d6c1470718a02ef",
        "type": "fs-stats",
        "z": "aa052c6ee73f6582",
        "name": "",
        "path": "currentFileFullPath",
        "pathType": "msg",
        "filename": "payload",
        "filenameType": "msg",
        "attr": "mtime",
        "follow": true,
        "property": "stats",
        "propertyType": "msg",
        "x": 1220,
        "y": 420,
        "wires": [
            [
                "172b219d7122b371"
            ]
        ]
    },
    {
        "id": "226f5c8dabbd0a57",
        "type": "loop",
        "z": "aa052c6ee73f6582",
        "name": "FoldersLoop",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "allFolders",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 290,
        "y": 420,
        "wires": [
            [
                "5c3ddb7265bdffe4",
                "4b2feef617c2d461"
            ],
            [
                "453df522e3f27569",
                "eda239abb9381cc7"
            ]
        ]
    },
    {
        "id": "949ca81a3e9feee2",
        "type": "loop",
        "z": "aa052c6ee73f6582",
        "name": "FilesInFolderLoop",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "folderFileList",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-last",
        "x": 750,
        "y": 620,
        "wires": [
            [
                "226f5c8dabbd0a57"
            ],
            [
                "2d6c1470718a02ef"
            ]
        ]
    },
    {
        "id": "e85a31c2c8ba0f57",
        "type": "SMB",
        "z": "aa052c6ee73f6582",
        "name": "hlrurad263",
        "config": "215d4d3b792fbfe3",
        "operation": "read-dir",
        "path": "",
        "path_new": "",
        "format": "string",
        "x": 620,
        "y": 60,
        "wires": [
            [
                "a15dfaa9f4885398"
            ]
        ]
    },
    {
        "id": "183fba4e737d07b1",
        "type": "SMB",
        "z": "aa052c6ee73f6582",
        "name": "hlrurad199",
        "config": "bff394667e4d7a7e",
        "operation": "read-dir",
        "path": "",
        "path_new": "",
        "format": "string",
        "x": 630,
        "y": 140,
        "wires": [
            [
                "a15dfaa9f4885398"
            ]
        ]
    },
    {
        "id": "c047ee0214a8ecc2",
        "type": "SMB",
        "z": "aa052c6ee73f6582",
        "name": "hlrurad231",
        "config": "402adcd7c9fd9548",
        "operation": "read-dir",
        "path": "",
        "path_new": "",
        "format": "string",
        "x": 630,
        "y": 100,
        "wires": [
            [
                "a15dfaa9f4885398"
            ]
        ]
    },
    {
        "id": "ca2ba212dc72c854",
        "type": "function",
        "z": "5ea520ab175b1ce2",
        "name": "DefineFullPathes",
        "func": "msg.currentFileName = msg.loop.value;\n//let fileName = msg.currentFileName;\n//msg.fileInputName = msg.config.inputPath + fileName;\n//let curName = msg.currentFileName.split('\\\\').pop(); //.split('.') \n\n//msg.destinationFileName = curName;\n\n//msg.fileOutputName = msg.config.outputPath + '/' + curName.split('.')[0] + \".json\";\nmsg.currentObjIndex = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 80,
        "wires": [
            [
                "e0d8414ab3e73cd3"
            ]
        ]
    },
    {
        "id": "e0d8414ab3e73cd3",
        "type": "file in",
        "z": "5ea520ab175b1ce2",
        "name": "ReadInputFile",
        "filename": "currentFileName",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 520,
        "y": 80,
        "wires": [
            [
                "265e0d5b15b0edae"
            ]
        ]
    },
    {
        "id": "265e0d5b15b0edae",
        "type": "csv",
        "z": "5ea520ab175b1ce2",
        "name": "CSV2",
        "sep": ";",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 710,
        "y": 80,
        "wires": [
            [
                "6b2fdb8a79eb18f1"
            ]
        ]
    },
    {
        "id": "6b2fdb8a79eb18f1",
        "type": "function",
        "z": "5ea520ab175b1ce2",
        "name": "getLength",
        "func": "msg.currentFieldLength = Object.keys(msg.payload[0]).length;\n\nvar result = [];\nlet curData = msg.data.find(f => f.Name == msg.currentFileName);\nlet dataIndex = msg.data.indexOf(curData);\nif (curData.LastPosition == msg.payload.length) {    \n    msg.hasChanges = \"false\";\n}\nelse {\n    msg.hasChanges = \"true\";    \n}\n\nmsg.currentObjIndex = curData.LastPosition;\nmsg.zeroCountStart = curData.LastPosition == 0 ? true : false;\nmsg.curData = curData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 80,
        "wires": [
            [
                "63188308996faba0"
            ]
        ]
    },
    {
        "id": "97ac67720ef63535",
        "type": "catch",
        "z": "5ea520ab175b1ce2",
        "name": "",
        "scope": [
            "265e0d5b15b0edae",
            "e0d8414ab3e73cd3"
        ],
        "uncaught": false,
        "x": 220,
        "y": 160,
        "wires": [
            [
                "58e29f67ddfb6f78"
            ]
        ]
    },
    {
        "id": "58e29f67ddfb6f78",
        "type": "function",
        "z": "5ea520ab175b1ce2",
        "name": "function 3",
        "func": "throw 'Ошибка конвертации файла! ' + msg.currentFileName;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "c3e67e39d498c139",
        "type": "function",
        "z": "5ea520ab175b1ce2",
        "name": "Main",
        "func": "var result = [];\nfor (var i = msg.curData.LastPosition; i < msg.payload.length; i++) {\n    let obj = msg.payload[i];\n    let j = 0;\n\n    var item = {\n        SampleId: \"\",\n        LotId: undefined,\n        LaboratoryEquipmentId: msg.EquipmentId,\n        SampledAt: undefined,\n        SampleValues: []\n    };\n\n    for (var key in obj) {        \n        if (obj.hasOwnProperty(key)) {\n            let some = obj[key];\n            if(j==0){\n                item.SampledAt = new Date(obj['col1'] + ' ' + obj['col2']);\n            }\n\n            let ind = (some).indexOf('OrderNr: ');\n            let lotId = (some).substring(ind + 9);\n\n            \n            if (ind!=-1){\n                item.LotId = lotId // some.slice(ind + some.length);\n                // let index = (msg.payload[i].col4).indexOf(':');\n                // let lotId = (msg.payload[i].col4).substring(index + 2);\n            }\n\n            let Translation = undefined;\n            for (let DictionaryIndex = 0; (!Translation) && (DictionaryIndex < msg.Dictionary?.length); DictionaryIndex++)\n            {\n                if (some.indexOf(msg.Dictionary[DictionaryIndex].Origin) == 0) Translation = msg.Dictionary[DictionaryIndex];\n            }\n            \n            if (Translation && !item.SampleValues.find(f => f[some]?.ParameterCode == some?.toUpperCase()))\n            {\n                item.SampleValues.push({\n                    ParameterCode: Translation.Translate,\n                    Value: obj[`col${j + 2}`]\n                })\n            }\n\n            /*if ((some.indexOf(\"dry_m\")|| some.indexOf(\"fat\") == 0 || some.indexOf(\"protein\") == 0)\n                && !item.SampleValues.find(f => f[some]?.ParameterCode == some?.toUpperCase())){\n                item.SampleValues.push( {\n                    ParameterCode: some.indexOf(\"dry_m\") == 0 ? \"Сух. вещ.\" : some.indexOf(\"fat\") == 0 ? \"Жир абс.\" : (some.indexOf(\"protein\") == 0 ? \"Белок\" : some),\n                    Value: obj[`col${j+2}`]\n                })\n            }*/\n\n            //new Date(msg.payload[i].col1 + ' ' + msg.payload[i].col2)\n            //node.warn(\"key: \" + key);\n            //node.warn(\"some: \" + some);\n\n        }\n        j++;\n    }\n\n    result.push(item);\n   // node.warn(item);\n    //node.warn(msg.payload[i]);\n        /*let index = (msg.payload[i].col4).indexOf(':');\n        let lotId = (msg.payload[i].col4).substring(index + 2);\n        var item = {\n            SampleId : \"\",\n            LotId : lotId,\n            LaboratoryEquipmentId : msg.config.laboratoryEquipmentId,\n            SampleAt : new Date(msg.payload[i].col1 + ' ' + msg.payload[i].col2),\n            SampleValues : [\n                {\n                    ParameterCode: undefined,\n                    Value: undefined \n                },\n                {\n                    ParameterCode: (msg.payload[i].col6)?.toUpperCase(), \n                    Value: msg.payload[i]?.col7;\n                }\n            ]\n        };\n        \n        result.push(item);\n        */\n        //node.warn('Before: ' + msg.payload[i].col4 + '. After: ' + item.LotId);   \n}\nmsg.objects = result;\n\n\n\n// msg.payload = msg.data;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7f7cdec7564a3e97",
        "type": "file in",
        "z": "5ea520ab175b1ce2",
        "name": "",
        "filename": "F:\\MESSync\\Dictionary.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 880,
        "y": 20,
        "wires": [
            [
                "1b9a35e4ea5749fc"
            ]
        ]
    },
    {
        "id": "1b9a35e4ea5749fc",
        "type": "csv",
        "z": "5ea520ab175b1ce2",
        "name": "",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\r\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": true,
        "x": 1110,
        "y": 20,
        "wires": [
            [
                "33235d7790be9b2c"
            ]
        ]
    },
    {
        "id": "63188308996faba0",
        "type": "function",
        "z": "5ea520ab175b1ce2",
        "name": "Save payload",
        "func": "msg.PayloadCopy = msg.payload;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 20,
        "wires": [
            [
                "7f7cdec7564a3e97"
            ]
        ]
    },
    {
        "id": "33235d7790be9b2c",
        "type": "function",
        "z": "5ea520ab175b1ce2",
        "name": "Save Dictionary and Restore payload",
        "func": "msg.Dictionary = msg.payload;\nmsg.payload = msg.PayloadCopy;\ndelete msg.PayloadCopy;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 20,
        "wires": [
            [
                "c3e67e39d498c139"
            ]
        ]
    },
    {
        "id": "a10effaf688a0d3c",
        "type": "function",
        "z": "b5263af018a59806",
        "name": "setNetPathes",
        "func": "msg.netPathes = [\n    '\\\\\\\\10.36.96.70\\\\\\\\Log\\\\\\\\',\n    '\\\\\\\\10.36.96.52\\\\\\\\Log\\\\\\\\',\n    '\\\\\\\\10.36.96.113\\\\\\\\Log\\\\\\\\'\n]\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 260,
        "wires": [
            [
                "b397e8eda1936e41"
            ]
        ]
    },
    {
        "id": "0196ff0ede2d8320",
        "type": "catch",
        "z": "b5263af018a59806",
        "name": "",
        "scope": [
            "f8e72cb1b03dd873"
        ],
        "uncaught": false,
        "x": 330,
        "y": 80,
        "wires": [
            [
                "0580a4a7f50a1a1d"
            ]
        ]
    },
    {
        "id": "0580a4a7f50a1a1d",
        "type": "function",
        "z": "b5263af018a59806",
        "name": "netPathExceptionLog",
        "func": "node.warn('Net path not available');\nnode.warn(msg.error);\nnode.warn(msg.netPath);\nnode.warn(msg);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "42245bf480f9a121",
        "type": "catch",
        "z": "b5263af018a59806",
        "name": "",
        "scope": [
            "7823356fd70cce46",
            "cd2206d4863f7eed",
            "e7b5fef5a1610784",
            "9598524f16d8b350"
        ],
        "uncaught": false,
        "x": 580,
        "y": 700,
        "wires": [
            [
                "1c011ca5b9deed54",
                "3d964bf99d8255e4"
            ]
        ]
    },
    {
        "id": "70547c4041be9d46",
        "type": "debug",
        "z": "b5263af018a59806",
        "name": "CheckInputFile",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "loop.value",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 560,
        "wires": []
    },
    {
        "id": "1c011ca5b9deed54",
        "type": "debug",
        "z": "b5263af018a59806",
        "name": "CatchedException",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "loop.value",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 720,
        "wires": []
    },
    {
        "id": "e8e09e2cd6f3b71d",
        "type": "debug",
        "z": "b5263af018a59806",
        "name": "DebugFinish",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "{\t    \"Result\" : \"Success\",\t    \"SuccessFiles\": msg.successFiles,    \t    \"ErrorFiles\": msg.errorFiles,\t    \"SuccessRequestCount\": msg.successRequestCount,    \t    \"ErrorRequestCount\": msg.errorRequestCount\t}\t",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 520,
        "wires": []
    },
    {
        "id": "55fbf0f54a938ba6",
        "type": "function",
        "z": "b5263af018a59806",
        "name": "SuccesCounter",
        "func": "if (!msg.successFiles.find(f => f == msg.currentFileName)\n    && !msg.errorFiles.find(f => f == msg.currentFileName)\n)\n    msg.successFiles.push(msg.currentFileName);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 560,
        "wires": [
            [
                "7dea27a086214962"
            ]
        ]
    },
    {
        "id": "3d964bf99d8255e4",
        "type": "function",
        "z": "b5263af018a59806",
        "name": "ErrorCounter",
        "func": "msg.errorFiles.push(msg.loop.value);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 680,
        "wires": [
            [
                "7dea27a086214962"
            ]
        ]
    },
    {
        "id": "d911024f3260160f",
        "type": "http request",
        "z": "b5263af018a59806",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.70.6.61:52441/api/LaboratoryDataAssignment/createSample",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Initiator-user",
                "valueType": "other",
                "valueValue": "b234cfcd-609c-4b3f-b814-cf93bf9c8829"
            }
        ],
        "x": 1370,
        "y": 940,
        "wires": [
            [
                "2fcdb81e36726a46",
                "8497f39a0613e024",
                "9d1e9e8e69ad9ef3"
            ]
        ]
    },
    {
        "id": "8b324daac4f5b758",
        "type": "catch",
        "z": "b5263af018a59806",
        "name": "",
        "scope": [
            "8ae8734f66842463",
            "d911024f3260160f",
            "f5f8a5d2aebd59b1"
        ],
        "uncaught": false,
        "x": 200,
        "y": 760,
        "wires": [
            [
                "f14359681435e986",
                "3b363dba9541b62b"
            ]
        ]
    },
    {
        "id": "f14359681435e986",
        "type": "function",
        "z": "b5263af018a59806",
        "name": "RequestErrorCounter",
        "func": "msg.errorRequestCount = msg.errorRequestCount + 1;\nmsg.payload.errors = \"error\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 780,
        "wires": [
            [
                "fca03747f0dafafd"
            ]
        ]
    },
    {
        "id": "2fcdb81e36726a46",
        "type": "function",
        "z": "b5263af018a59806",
        "name": "RequestSuccessCounter",
        "func": "if (msg.payload.errors != undefined && msg.payload.errors != null)\n{\n    msg.errorRequestCount = msg.errorRequestCount + 1;    \n    //msg.errorResult.push(msg.currentPayload)    \n\n    let item = msg.errorResult.find(f => f.fileName == msg.fileInputName);\n    if (msg.errorResult.length==0 || item == undefined){\n        let obj = {\n            fileName: msg.fileInputName,\n            item: msg.currentPayload,\n            error: JSON.stringify(msg.payload.errors)\n        }\n        msg.errorResult.push(obj);    \n        msg.errorFiles.push(msg.currentFileName);\n    }\n    else {\n        let index = msg.errorResult.indexOf(item);\n        item.items.push(msg.currentPayload);\n        msg.errorResult[index]=item;\n    }\n}\nelse\n{\n   // console.log('SuccesRequest happened. ' + msg.fileInputName)\n    msg.successRequestCount = msg.successRequestCount + 1;\n    msg.currentObjIndex = msg.currentObjIndex + 1;\n    //msg.currentObjIndex = msg.currentObjIndex + 1;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1080,
        "wires": [
            [
                "fca03747f0dafafd"
            ]
        ]
    },
    {
        "id": "7823356fd70cce46",
        "type": "file",
        "z": "b5263af018a59806",
        "name": "Update data.json",
        "filename": "dataPath",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 430,
        "y": 620,
        "wires": [
            [
                "55fbf0f54a938ba6"
            ]
        ]
    },
    {
        "id": "cfd813b53a251676",
        "type": "debug",
        "z": "b5263af018a59806",
        "name": "httpresult ",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 1000,
        "wires": []
    },
    {
        "id": "9d1e9e8e69ad9ef3",
        "type": "debug",
        "z": "b5263af018a59806",
        "name": "httprequest",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 860,
        "wires": []
    },
    {
        "id": "3b363dba9541b62b",
        "type": "debug",
        "z": "b5263af018a59806",
        "name": "CatchedRequestException",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "loop.value",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 700,
        "wires": []
    },
    {
        "id": "cd2206d4863f7eed",
        "type": "switch",
        "z": "b5263af018a59806",
        "name": "HasChanges",
        "property": "hasChanges",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1110,
        "y": 720,
        "wires": [
            [
                "8ae8734f66842463"
            ],
            [
                "7dea27a086214962"
            ]
        ]
    },
    {
        "id": "7dea27a086214962",
        "type": "function",
        "z": "b5263af018a59806",
        "name": "preloop",
        "func": "//console.log(\"====>\" + msg.loop)\n\n\n// node.warn('All count: ' + msg.list.length + '. LAST file:' \n//     + msg.list[msg.list.length-1] + '. Current: ' + msg.currentFileName + '. Index: ' + msg.list.indexOf(msg.currentFileName) \n//     + '. Next file: ' + msg.list[msg.list.indexOf(msg.currentFileName)+1]);\n\n\n//msg.list.indexOf(msg.currentFileName) == msg.list.length - 1\n\nif (msg.list.indexOf(msg.currentFileName) == msg.list.length-1){\n    msg.isLoopCompleted = true;\n//    node.warn(\"msg.isLoopCompleted = true;\");    \n}\nelse {\n    msg.isLoopCompleted = false;\n  //  node.warn(\"msg.isLoopCompleted = false;\");    \n}\n\n\n\n//console.log(msg.loop)\n//чтобы не слать все\n//msg.list = [msg.list[0], msg.list[1], msg.list[2], msg.list[3]]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 580,
        "wires": [
            [
                "509891e5e72b3688",
                "f67bc9adec892b5b"
            ]
        ]
    },
    {
        "id": "b24212cf05129471",
        "type": "function",
        "z": "b5263af018a59806",
        "name": "Email presend",
        "func": "msg.topic = \"FileConversion flow inforamtion\";\nlet payload = JSON.stringify(\n    msg.errorResult\n)\n\n\nlet summary = JSON.stringify(\n    {\n        \"Result\" : \"Success\",\n        \"SuccessFiles\": msg.successFiles,\n        \"ErrorFiles\": msg.errorFiles,\n        \"SuccessRequestCount\": msg.successRequestCount,\n        \"ErrorRequestCount\": msg.errorRequestCount \n    }\n)\t\n\nlet errorObjects = JSON.stringify(msg.errorObjectNumber)    \n\nmsg.payload = payload + \n\"\\r\\n\" + \"\\r\\n\"  + summary +\n\"\\r\\n\" + \"\\r\\n\" + errorObjects;\nmsg.from ='RURA-MESLabTrace@hochland.com';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 140,
        "wires": [
            [
                "c6596f1efd333890"
            ]
        ]
    },
    {
        "id": "83df9044262d7fcd",
        "type": "function",
        "z": "b5263af018a59806",
        "name": "curPayload",
        "func": "msg.currentPayload = msg.payload; \n// msg.payload = {\n//     Name: \"Test\",\n//     LotId: \"Test2\"\n// }\n\n//node.warn(\"Object to send\");\n//msg.payload = JSON.stringify(msg.payload); \n//node.warn(JSON.parse(JSON.stringify(msg.payload)));\n//msg.currentObjIndex = msg.currentObjIndex + 1;\n\n// if (msg.payload.LotId == '20586488')\n//     {\n//         node.warn(\"Object to send\");\n//     node.warn(msg.payload);\n//     }\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 880,
        "wires": [
            [
                "47d90f02681733c0"
            ]
        ]
    },
    {
        "id": "86ad00dbd923513f",
        "type": "switch",
        "z": "b5263af018a59806",
        "name": "",
        "property": "emailSending",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1230,
        "y": 200,
        "wires": [
            [
                "b24212cf05129471"
            ]
        ]
    },
    {
        "id": "adec8271fb7e8e0f",
        "type": "function",
        "z": "b5263af018a59806",
        "name": "IsEmailSending",
        "func": "msg.emailSending = msg.errorResult.length > 0 \n|| msg.errorFiles.length > 0\n|| msg.errorObjectNumber.length > 0;\n\n//node.warn('Is EMAIL SENDING Required?: ' + msg.emailSending);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 200,
        "wires": [
            [
                "86ad00dbd923513f"
            ]
        ]
    },
    {
        "id": "fca03747f0dafafd",
        "type": "switch",
        "z": "b5263af018a59806",
        "name": "",
        "property": "payload.errors",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 860,
        "wires": [
            [
                "3911dacf8320290a"
            ],
            [
                "8ae8734f66842463"
            ]
        ]
    },
    {
        "id": "3911dacf8320290a",
        "type": "function",
        "z": "b5263af018a59806",
        "name": "dataPreupdate",
        "func": "//node.warn('HasRequestErrors');\n//node.warn((msg.payload.errors));\n//let item = msg.data.find(f => f.Name == msg.destinationFileName);\nlet item = msg.data.find(f => f.Name == msg.currentFileName);\n\nmsg.data.forEach(function(element) {\n  //  console.log('=>' + element.Name);\n});\n\n\nlet index = msg.data.indexOf(item);\n\nitem.LastPosition = \n    msg.zeroCountStart \n        ? msg.currentObjIndex  \n        : msg.currentObjIndex ;\n\nlet hasErrorObject = msg.payload.errors != null && msg.payload.errors != undefined    \nitem.LastState = hasErrorObject \n    ? 'RequestError'\n    : 'RequestSuccess';\n\nitem.ErrorObject = hasErrorObject \n?  JSON.stringify(msg.payload.errors)\n: undefined;\n\nmsg.payload.errors = null;\nmsg.data[index] = item;\nmsg.payload = msg.data;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 800,
        "wires": [
            [
                "7823356fd70cce46",
                "a7ccb4e8d096fc12"
            ]
        ]
    },
    {
        "id": "a7ccb4e8d096fc12",
        "type": "debug",
        "z": "b5263af018a59806",
        "name": "debug 2",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "currentObjIndex",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 780,
        "wires": []
    },
    {
        "id": "39f50455699767d8",
        "type": "debug",
        "z": "b5263af018a59806",
        "name": "index",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "currentObjIndex",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 920,
        "wires": []
    },
    {
        "id": "47d90f02681733c0",
        "type": "switch",
        "z": "b5263af018a59806",
        "name": "",
        "property": "payload.LotId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 1130,
        "y": 860,
        "wires": [
            [
                "a6a339e846737a38"
            ],
            [
                "826067a28cd53615"
            ],
            [
                "d911024f3260160f",
                "18d15ad0e99aa178"
            ]
        ]
    },
    {
        "id": "a6a339e846737a38",
        "type": "function",
        "z": "b5263af018a59806",
        "name": "increment",
        "func": "msg.currentObjIndex = msg.currentObjIndex + 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 960,
        "wires": [
            [
                "8ae8734f66842463"
            ]
        ]
    },
    {
        "id": "f67bc9adec892b5b",
        "type": "debug",
        "z": "b5263af018a59806",
        "name": "debug 5",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 420,
        "wires": []
    },
    {
        "id": "8497f39a0613e024",
        "type": "switch",
        "z": "b5263af018a59806",
        "name": "",
        "property": "payload.errors",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1530,
        "y": 1040,
        "wires": [
            [
                "cfd813b53a251676"
            ],
            [
                "cfd813b53a251676"
            ]
        ]
    },
    {
        "id": "e7b5fef5a1610784",
        "type": "subflow:5ea520ab175b1ce2",
        "z": "b5263af018a59806",
        "name": "FileProcessingSubFlow",
        "x": 1170,
        "y": 620,
        "wires": [
            [
                "cd2206d4863f7eed"
            ]
        ]
    },
    {
        "id": "f8e72cb1b03dd873",
        "type": "subflow:aa052c6ee73f6582",
        "z": "b5263af018a59806",
        "name": "GetFileList",
        "x": 610,
        "y": 500,
        "wires": [
            [
                "7dea27a086214962"
            ],
            [
                "7dea27a086214962"
            ]
        ]
    },
    {
        "id": "509891e5e72b3688",
        "type": "switch",
        "z": "b5263af018a59806",
        "name": "",
        "property": "isLoopCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 500,
        "wires": [
            [
                "adec8271fb7e8e0f"
            ],
            [
                "9598524f16d8b350"
            ]
        ]
    },
    {
        "id": "826067a28cd53615",
        "type": "function",
        "z": "b5263af018a59806",
        "name": "LotUndefined",
        "func": "//msg.currentObjIndex = msg.currentObjIndex + 1;\n//node.warn(\"LotUndefined\");\n//node.warn(msg.payload);\n\nmsg.errorObjectNumber.push(msg.currentFileName  + ' => ' + msg.currentObjIndex)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 960,
        "wires": [
            [
                "a6a339e846737a38"
            ]
        ]
    },
    {
        "id": "18d15ad0e99aa178",
        "type": "debug",
        "z": "b5263af018a59806",
        "name": "rbody",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 860,
        "wires": []
    },
    {
        "id": "9b8a6c2facfce148",
        "type": "json",
        "z": "b5263af018a59806",
        "name": "",
        "property": "config",
        "action": "obj",
        "pretty": false,
        "x": 430,
        "y": 320,
        "wires": [
            [
                "02a89b03f3289465"
            ]
        ]
    },
    {
        "id": "02a89b03f3289465",
        "type": "function",
        "z": "b5263af018a59806",
        "name": "SetConfig",
        "func": "//node.warn(\"TEST\");\nmsg.config=JSON.parse(msg.payload);\n\nswitch (msg.config.lastPathIndex) {\n    case 0:\n        msg.config.lastPathIndex = 1;\n        break;\n    case 1:\n        msg.config.lastPathIndex = 2;\n        break;\n    case 2:\n        msg.config.lastPathIndex = 0;\n        break;\ndefault:\n        msg.config.lastPathIndex = 0;\n        break;\n} \n\n//msg.netPathes\n\n//msg.config.lastPathIndex++; \nmsg.payload = msg.config;\n//msg.list = [];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 320,
        "wires": [
            [
                "25d129f2967fe7fa"
            ]
        ]
    },
    {
        "id": "25d129f2967fe7fa",
        "type": "file",
        "z": "b5263af018a59806",
        "name": "Update config.json",
        "filename": "configPath",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 770,
        "y": 320,
        "wires": [
            [
                "656f2747ca53eefd"
            ]
        ]
    },
    {
        "id": "656f2747ca53eefd",
        "type": "function",
        "z": "b5263af018a59806",
        "name": "function 8",
        "func": "//msg.payload = msg.tmpPayload;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "b397e8eda1936e41",
        "type": "file in",
        "z": "b5263af018a59806",
        "name": "Read config",
        "filename": "configPath",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 490,
        "y": 260,
        "wires": [
            [
                "9b8a6c2facfce148"
            ]
        ]
    },
    {
        "id": "9598524f16d8b350",
        "type": "loop",
        "z": "b5263af018a59806",
        "name": "Loop",
        "kind": "enum",
        "count": "2",
        "initial": "0",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "list",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 930,
        "y": 580,
        "wires": [
            [
                "e8e09e2cd6f3b71d",
                "adec8271fb7e8e0f"
            ],
            [
                "e7b5fef5a1610784",
                "70547c4041be9d46"
            ]
        ]
    },
    {
        "id": "8ae8734f66842463",
        "type": "loop",
        "z": "b5263af018a59806",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "objects",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 730,
        "y": 880,
        "wires": [
            [
                "3911dacf8320290a"
            ],
            [
                "83df9044262d7fcd"
            ]
        ]
    },
    {
        "id": "c6596f1efd333890",
        "type": "e-mail",
        "z": "b5263af018a59806",
        "server": "hl-smtp.hochland.com",
        "port": "25",
        "authtype": "NONE",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": false,
        "tls": false,
        "name": "a.aksenov@vekas-automation.ru",
        "dname": "VekasTestEmail",
        "x": 1620,
        "y": 400,
        "wires": []
    },
    {
        "id": "5753220c94cfa05f",
        "type": "function",
        "z": "f8fc59a8d3d93ef9",
        "name": "Save Catch Data",
        "func": "var ErrorInCatchFunction = undefined;\n\ntry\n{\n    var FilePath = \"C:\\\\NRLogs\\\\\";\n    var FlowName = env.get(\"NR_FLOW_NAME\");\n    var FlowFileName = FlowName.replaceAll(/[\"'\\{\\}#@,;:<>\\*\\^\\|\\?\\/\\\\\\[\\]\\.\\$&% ]/g, \"_\");\n    var Timestamp = new Date();\n    var TimestampDate = Timestamp.getFullYear().toString() + \".\"\n        + ('0' + (Timestamp.getMonth() + 1).toString()).slice(-2) + \".\"\n        + ('0' + Timestamp.getDate().toString()).slice(-2);\n    var TimestampTime = ('0' + Timestamp.getHours().toString()).slice(-2) + \":\"\n        + ('0' + Timestamp.getMinutes().toString()).slice(-2) + \":\"\n        + ('0' + Timestamp.getSeconds().toString()).slice(-2) + \".\"\n        + ('00' + Timestamp.getMilliseconds().toString()).slice(-3);\n    var FileName = FlowFileName + \"_\"\n        + Timestamp.getFullYear().toString()\n        + ('0' + (Timestamp.getMonth() + 1).toString()).slice(-2)\n        + ('0' + Timestamp.getDate().toString()).slice(-2)\n        + \".log\";\n    var FullFileName = FilePath + FileName;\n    var Header = \"Timestamp\\tFlow Name\\tNode Id\\tNode Type\\tNode Name\\tThrow Count\\tMessage\\r\\n\";\n    var ErrorLine = TimestampDate + \" T \" + TimestampTime + \"\\t\";\n\n    ErrorLine = ErrorLine + (FlowName || \"-\") + \"\\t\";\n    ErrorLine = ErrorLine + (msg.error?.source?.id || \"-\") + \"\\t\";\n    ErrorLine = ErrorLine + (msg.error?.source?.type || \"-\") + \"\\t\";\n    ErrorLine = ErrorLine + (msg.error?.source?.name || \"-\") + \"\\t\";\n    ErrorLine = ErrorLine + (msg.error?.source?.count || \"-\") + \"\\t\";\n    ErrorLine = ErrorLine + (msg.error?.message || \"-\") + \"\\r\\n\";\n\n    var fs = global.get(\"fsextra\");\n    fs.mkdirsSync(FilePath);\n    if (fs.pathExistsSync(FilePath))\n    {\n        if (!fs.existsSync(FullFileName)) fs.appendFileSync(FullFileName, Header);\n        fs.appendFileSync(FullFileName, ErrorLine);\n    }\n    else\n    {\n        ErrorInCatchFunction =\n        {\n            Flow: FlowName,\n            NodeName: node.name,\n            ExceptionName: \"Directory error\",\n            ExceptionMessage: \"Directory \\\"\" + FilePath + \"\\\" does not exist and cannot be created\",\n            ExceptionStack: \"\",\n            Exception: \"\"\n        };\n    };\n}\ncatch (ex)\n{\n    ErrorInCatchFunction =\n    {\n        Flow: FlowName,\n        NodeName: node.name,\n        ExceptionName: ex.name,\n        ExceptionMessage: ex.message,\n        ExceptionStack: ex.stack,\n        Exception: ex.toString()\n    };\n}\n\nif (ErrorInCatchFunction)\n{\n    msg.payload = ErrorInCatchFunction;\n    node.warn(ErrorInCatchFunction);\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "13719150828b58e0",
        "type": "function",
        "z": "30b0a1122a464303",
        "name": "Prepare Request",
        "func": "msg.headers = {};\nmsg.headers[\"Authorization\"] = msg.Token;\nmsg.headers[\"Content-Type\"] = \"application/json; charset=utf-8\";\n\nmsg.payload = {};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 40,
        "wires": [
            [
                "cfe7bca73eb1b071"
            ]
        ]
    },
    {
        "id": "cfe7bca73eb1b071",
        "type": "http request",
        "z": "30b0a1122a464303",
        "name": "GET ServiceUser",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.70.6.61/api/User/ServiceUser",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 40,
        "wires": [
            [
                "fff63376d220836a"
            ]
        ]
    },
    {
        "id": "fff63376d220836a",
        "type": "function",
        "z": "30b0a1122a464303",
        "name": "Prepare Response",
        "func": "msg.ServiceUserIsSuccess = false;\n\nif (msg.statusCode == 200)\n{\n    msg.ServiceUserId = msg.payload.id;\n    msg.ServiceUserIsSuccess = true;\n}\nelse\n{\n    var ErrorMessage = \"Get Service User: \" + msg.statusCode + \": \";\n    if ([\"ECONNRESET\", \"ETIMEDOUT\"].includes(msg.statusCode)) ErrorMessage = ErrorMessage + msg.payload;\n    else ErrorMessage = ErrorMessage + JSON.stringify(msg.payload);\n    msg.ServiceUserError = ErrorMessage;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "7c9af12d200df640",
        "type": "catch",
        "z": "30b0a1122a464303",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 200,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "a72c556f073cd1a5",
        "type": "http request",
        "z": "f2924807aef52857",
        "name": "POST Token",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.197.4.28:52431/connect/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "37de9aab2821425a",
        "type": "function",
        "z": "f2924807aef52857",
        "name": "Prepare Response",
        "func": "msg.TokenIsSuccess = false;\n\nif (msg.statusCode == 200)\n{\n    msg.Token = \"Bearer \" + msg.payload.access_token;\n    msg.TokenIsSuccess = true;\n}\n//else\n//{\n//    var ErrorMessage = \"Get Token: \" + msg.statusCode + \": \";\n //   if ([\"ECONNRESET\", \"ETIMEDOUT\"].includes(msg.statusCode)) ErrorMessage = ErrorMessage + msg.payload;\n //   else ErrorMessage = ErrorMessage + JSON.stringify(msg.payload);\n //   msg.TokenError = ErrorMessage;\n//}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "6034e9ee6d6fd564",
        "type": "function",
        "z": "f2924807aef52857",
        "name": "Prepare Request",
        "func": "msg.headers = {};\nmsg.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n\nmsg.payload =\n{\n    grant_type: \"password\",\n    client_id: \"ProleiT.Desktop\",\n    client_secret: \"secret\",\n    username: \"SYSTEM_NR\",\n    password: \"ProAdmin777\"\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 40,
        "wires": [
            [
                "5c8bd5138ddcb862"
            ]
        ]
    },
    {
        "id": "5c8bd5138ddcb862",
        "type": "http request",
        "z": "f2924807aef52857",
        "name": "POST Token",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.70.6.61:52431/connect/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 40,
        "wires": [
            [
                "37de9aab2821425a"
            ]
        ]
    },
    {
        "id": "8f3a07389e6175c9",
        "type": "function",
        "z": "036aca90e53023a9",
        "name": "Check Data and SQLRequest Prepare",
        "func": "//Структура ответа на запрос от SAP\nmsg.Response =\n{\n    Value: {},\n    Messages : [],\n    IsSuccess : false\n};\n\nmsg.SAPData =\n{\n    PlantId: null,\n    PlantGuid: null,\n    WarehouseId: null,\n    WarehouseGuid: null,\n    SupplierId: null,\n    SupplierGuid: null,\n    Waybill: null,\n    Materials: [],\n    MaterialIdError: false,\n    SupplierIdError: false,\n    WarehouseIdError: false,\n    MSSQLError: false,\n    WriteFileError: false\n};\n\nif (\"plantid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.plantid && (msg.SAPRequest.Data.plantid != \"\")) msg.SAPData.PlantId = msg.SAPRequest.Data.plantid;\n    else msg.Response.Messages.push(\"Поле plantid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле plantid отсутствует\");\n\nif (\"warehouseid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.warehouseid && (msg.SAPRequest.Data.warehouseid != \"\")) msg.SAPData.WarehouseId = msg.SAPRequest.Data.warehouseid;\n    else msg.Response.Messages.push(\"Поле warehouseid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле warehouseid отсутствует\");\n\nif (\"supplierid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.supplierid && (msg.SAPRequest.Data.supplierid != \"\")) msg.SAPData.SupplierId = msg.SAPRequest.Data.supplierid;\n    else msg.Response.Messages.push(\"Поле supplierid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле supplierid отсутствует\");\n\nif (\"waybill\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.waybill && (msg.SAPRequest.Data.waybill != \"\")) msg.SAPData.Waybill = msg.SAPRequest.Data.waybill;\n}\n\nvar MaterialIdsString = \"\";\nif (\"pallets\" in msg.SAPRequest?.Data)\n{\n    if (Array.isArray(msg.SAPRequest.Data.pallets))\n    {\n        if (msg.SAPRequest.Data.pallets.length > 0)\n        {\n            for (let i = 0; i < msg.SAPRequest.Data.pallets.length; i++)\n            {\n                var MaterialData = undefined;\n                var BatchData = undefined;\n                var PalletData =\n                {\n                    BatchSupplier: null,\n                    SSCC: undefined,\n                    SSCCComment: \"\",\n                    Amount: undefined,\n                    ProdDate: undefined,\n                    ExpDate: null\n                };\n                var PalletDataValid = true;\n\n                if (\"materialid\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].materialid && (msg.SAPRequest.Data.pallets[i].materialid != \"\"))\n                    {\n                        MaterialData = msg.SAPData.Materials.find(el => el.MaterialId.toLowerCase() == msg.SAPRequest.Data.pallets[i].materialid.toLowerCase());\n                        if (!MaterialData)\n                        {\n                            MaterialData =\n                            {\n                                MaterialId: msg.SAPRequest.Data.pallets[i].materialid,\n                                MaterialGuid: null,\n                                Batches: []\n                            };\n                            msg.SAPData.Materials.push(MaterialData);\n                            if (MaterialIdsString != \"\") MaterialIdsString = MaterialIdsString + \", \";\n                            MaterialIdsString = MaterialIdsString + \"N'\" + MaterialData.MaterialId.toString() + \"'\";\n                        }\n                    }\n                    else msg.Response.Messages.push(\"Поле materialid должно иметь значение (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле materialid отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n\n                if (\"batchid\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].batchid && (msg.SAPRequest.Data.pallets[i].batchid != \"\"))\n                    {\n                        if (MaterialData)\n                        {\n                            BatchData = MaterialData.Batches.find(el => el.BatchId.toLowerCase() == msg.SAPRequest.Data.pallets[i].batchid.toLowerCase());\n                            if (!BatchData)\n                            {\n                                BatchData =\n                                {\n                                    BatchId: msg.SAPRequest.Data.pallets[i].batchid,\n                                    Pallets: []\n                                };\n                                MaterialData.Batches.push(BatchData);\n                            }\n                        }\n                    }\n                    else msg.Response.Messages.push(\"Поле batchid должно иметь значение (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле batchid отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                PalletDataValid = PalletDataValid && (BatchData != undefined);\n\n                if (\"amount\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].amount && (!isNaN(parseFloat(msg.SAPRequest.Data.pallets[i].amount)))) PalletData.Amount = parseFloat(msg.SAPRequest.Data.pallets[i].amount);\n                    else msg.Response.Messages.push(\"Поле amount должно иметь числовое значение (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле amount отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                PalletDataValid = PalletDataValid && (PalletData.Amount != undefined);\n\n                if (\"batchsupplier\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].batchsupplier && (msg.SAPRequest.Data.pallets[i].batchsupplier != \"\")) PalletData.BatchSupplier = msg.SAPRequest.Data.pallets[i].batchsupplier;\n                }\n\n                if (\"sscc\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].sscc && (msg.SAPRequest.Data.pallets[i].sscc != \"\")) PalletData.SSCC = msg.SAPRequest.Data.pallets[i].sscc;\n                    else msg.Response.Messages.push(\"Поле sscc должно иметь значение (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле sscc отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                PalletDataValid = PalletDataValid && (PalletData.SSCC != undefined);\n\n                if (\"ssccComment\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].ssccComment) PalletData.SSCCComment = msg.SAPRequest.Data.pallets[i].ssccComment;\n                }\n\n                if (\"prodDate\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].prodDate && (!isNaN(Date.parse(msg.SAPRequest.Data.pallets[i].prodDate))))\n                    {\n                        var DateTemp1 = new Date(msg.SAPRequest.Data.pallets[i].prodDate);\n                        if (DateTemp1?.toISOString()?.startsWith(msg.SAPRequest.Data.pallets[i].prodDate)) PalletData.ProdDate = msg.SAPRequest.Data.pallets[i].prodDate;\n                    }\n                    if (!PalletData.ProdDate) msg.Response.Messages.push(\"Поле prodDate должно иметь значение даты формата YYYY-MM-DD (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                    PalletDataValid = PalletDataValid && (PalletData.ProdDate != undefined); //Временно добавлено до момента внедрения поля в запрос\n                }\n                // Руцкий 30.01.2024\n                // временно отключается проверка присутствия поля prodDate\n//                else msg.Response.Messages.push(\"Поле prodDate отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                //PalletDataValid = PalletDataValid && (PalletData.ProdDate != undefined); //Временно закоментировано до момента внедрения поля в запрос\n                \n                if (\"expDate\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].expDate && (msg.SAPRequest.Data.pallets[i].expDate != \"\"))\n                    {\n                        if (!isNaN(Date.parse(msg.SAPRequest.Data.pallets[i].expDate)))\n                        {\n                            var DateTemp2 = new Date(msg.SAPRequest.Data.pallets[i].expDate);\n                            if (DateTemp2?.toISOString()?.startsWith(msg.SAPRequest.Data.pallets[i].expDate)) PalletData.ExpDate = msg.SAPRequest.Data.pallets[i].expDate;\n                        }\n                        if (!PalletData.ExpDate) msg.Response.Messages.push(\"Поле expDate должно иметь значение даты формата YYYY-MM-DD (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                        PalletDataValid = PalletDataValid && (PalletData.ExpDate != null);\n                    }\n                }\n\n                if (PalletDataValid) BatchData.Pallets.push(PalletData);\n            }\n        }\n        else msg.Response.Messages.push(\"Поле pallets имеет нулевую длину\");\n    }\n    else msg.Response.Messages.push(\"pallets должен быть типа Array\");\n}\nelse msg.Response.Messages.push(\"Поле pallets отсутствует\");\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nvar SQLRequest = \"\";\nif (msg.Response.IsSuccess)\n{\n    //Поиск Guid для PlantId\n    SQLRequest = SQLRequest +\n        \"SELECT\\n\\t\" +\n            \"'0' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"NULL AS 'EquipmentType',\\n\\t\" +\n            \"NULL AS 'Description'\\n\" +\n        \"FROM [BaseClassifiers].[dbo].[tblEquipmentTree]\\n\" +\n        \"WHERE ([szNumberSAP] = N'\" + msg.SAPData.PlantId + \"')\\n\" +\n    //Поиск Guid для SupplierId\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'1' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szCode] AS 'Id',\\n\\t\" +\n            \"NULL AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"NULL AS 'EquipmentType',\\n\\t\" +\n            \"NULL AS 'Description'\\n\" +\n        \"FROM [BaseClassifiers].[dbo].[tblCounterparty]\\n\" +\n        \"WHERE ([szCode] = '\" + msg.SAPData.SupplierId + \"')\\n\" +\n    //Поиск Guid для materialId\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'2' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"NULL AS 'EquipmentType',\\n\\t\" +\n            \"NULL AS 'Description'\\n\" +\n        \"FROM [BaseClassifiers].[dbo].[tblMaterial]\\n\" +\n        \"WHERE ([szName] IN (\" + MaterialIdsString + \"))\\n\" +\n    //Поиск Guid для warehouseid\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'3' AS 'Type',\\n\\t\" +\n            \"Storage.[gId] AS 'Guid',\\n\\t\" +\n            \"Storage.[szExternalSystemSapLink] AS 'Id',\\n\\t\" +\n            \"Vertex.[gEquipmentTreeId] AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"NULL AS 'EquipmentType',\\n\\t\" +\n            \"NULL AS 'Description'\\n\" +\n        \"FROM [HLRURASAP99].[BatchManagementDb].[dbo].[tblStorageLocation] AS Storage\\n\\t\" +\n            \"INNER JOIN [BaseClassifiers].[dbo].[tblExternalVertex] AS Vertex ON ((Vertex.[gExternalObjectId] = Storage.[gId]) AND (Vertex.[gExternalObjectId] IS NOT NULL))\\n\" +\n        \"WHERE (Storage.[szExternalSystemSapLink] = '\" + msg.SAPData.WarehouseId + \"')\\n\" +\n    //Получение дерева оборудования\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'4' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szNumberSAP] AS 'Id',\\n\\t\" +\n            \"[gEquipmentTreeId] AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"[nType] AS 'EquipmentType',\\n\\t\" +\n            \"[szDescription] AS 'Description'\\n\" +\n        \"FROM [BaseClassifiers].[dbo].[tblEquipmentTree]\\n\";\n}\nmsg.SQLCheckRequest = SQLRequest;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 40,
        "wires": [
            [
                "53b93a51a8311285"
            ]
        ]
    },
    {
        "id": "53b93a51a8311285",
        "type": "switch",
        "z": "036aca90e53023a9",
        "name": "IsSuccess == true",
        "property": "Response.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 40,
        "wires": [
            [
                "c97a295197717903"
            ],
            [
                "3380ef25c8492abe"
            ]
        ]
    },
    {
        "id": "3380ef25c8492abe",
        "type": "function",
        "z": "036aca90e53023a9",
        "name": "Create Response",
        "func": "if (msg.SubflowError?.message)\n{\n    var Response =\n    {\n        Value: {},\n        Messages: [],\n        IsSuccess: false\n    };\n    var ErrorMessage = msg.SubflowError?.message;\n    if (msg.SubflowError?.source?.name) ErrorMessage = msg.SubflowError.source.name + \": \" + ErrorMessage;\n    if (msg.SubflowError?.source?.type) ErrorMessage = msg.SubflowError.source.type + \": \" + ErrorMessage;\n    Response.Messages.push(\"Subflow: \" + ErrorMessage);\n    msg.Response = Response;\n    msg.statusCode = 500;\n}\nelse\n{\n    if (msg.SAPData.MaterialIdError) msg.statusCode = 401;\n    else\n    {\n        if (msg.SAPData.SupplierIdError) msg.statusCode = 402;\n        else\n        {\n            if (msg.SAPData.WarehouseIdError) msg.statusCode = 403;\n            else\n            {\n                if (msg.SAPData.MSSQLError || msg.SAPData.WriteFileError) msg.statusCode = 500;\n                else\n                {\n                    if (msg.Response.IsSuccess) msg.statusCode = 200;\n                    else msg.statusCode = 400;\n                }\n            }\n        }\n    }\n}\n\nmsg.payload = msg.Response;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "8f3be6ef7431c154",
        "type": "function",
        "z": "036aca90e53023a9",
        "name": "Check Data",
        "func": "msg.SQLCheckRequestError = msg.error;\n\nif (msg.SQLCheckRequestError?.details)\n{\n    msg.Response.Messages.push(\"Check Data: \" + msg.SQLCheckRequestError.details);\n    msg.SAPData.MSSQLError = true;\n}\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nif (msg.Response.IsSuccess)\n{\n    var PlantId = msg.SQLCheckRequestData.filter(el => el.Type == 0);\n    if (PlantId.length > 0)\n    {\n        if (PlantId.length > 1) msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" имеет дубликаты\");\n        else\n        {\n            msg.SAPData.PlantGuid = PlantId[0].Guid;\n            var EquipmentTree = msg.SQLCheckRequestData.filter(el => el.Type == 4);\n            if (EquipmentTree.length > 0)\n            {\n                var WarehouseIds = msg.SQLCheckRequestData.filter(el => el.Type == 3);\n                if (WarehouseIds.length > 0)\n                {\n                    for (let i = 0; (!msg.SAPData.WarehouseGuid) && (i < WarehouseIds.length); i++)\n                    {\n                        var Warehouse = EquipmentTree.find(el => el.Guid?.toLowerCase() == WarehouseIds[i].TreeGuid_ParentGuid?.toLowerCase());\n                        if (Warehouse)\n                        {\n                            var Equipment = Warehouse;\n                            var j = 0;\n                            for (j = 0; Equipment && (Equipment?.TreeGuid_ParentGuid || (Equipment?.EquipmentType != 1)) && (j < 1000); j++)\n                            {\n                                var ParentGuid = Equipment.TreeGuid_ParentGuid?.toLowerCase();\n                                Equipment = EquipmentTree.find(el => el.Guid?.toLowerCase() == ParentGuid);\n                            }\n                            if (j < 1000)\n                            {\n                                if (Equipment)\n                                {\n                                    if (Equipment.Guid?.toLowerCase() == PlantId[0].Guid.toLowerCase()) msg.SAPData.WarehouseGuid = WarehouseIds[i].Guid;\n                                }\n                            }\n                            else msg.Response.Messages.push(\"Для оборудование с ID = \" + WarehouseIds[i].Guid + \" больше 1000 проходов в дереве\");\n                        }\n                        else msg.Response.Messages.push(\"Оборудование с ID = \" + WarehouseIds[i].Guid + \" не найдено в дереве\");\n                    };\n                    if (!msg.SAPData.WarehouseGuid) msg.Response.Messages.push(\"Для предприятия с ID = \" + msg.SAPData.PlantId + \" не найден склад с ID = \" + msg.SAPData.WarehouseId);\n                }\n                else msg.Response.Messages.push(\"Склады с ID = \" + msg.SAPData.WarehouseId + \" не найдены\");\n                msg.SAPData.WarehouseIdError = (!msg.SAPData.WarehouseGuid);\n            }\n            else msg.Response.Messages.push(\"Дерево оборудования пустое\");\n        }\n    }\n    else msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" не найден\");\n    \n\n    var SupplierId = msg.SQLCheckRequestData.filter(el => el.Type == 1);\n    if (SupplierId.length > 0)\n    {\n        if (SupplierId.length > 1) msg.Response.Messages.push(\"Поставщик с ID = \" + msg.SAPData.SupplierId + \" имеет дубликаты\");\n        else msg.SAPData.SupplierGuid = SupplierId[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Поставщик с ID = \" + msg.SAPData.SupplierId + \" не найден\");\n    msg.SAPData.SupplierIdError = (!msg.SAPData.SupplierGuid);\n\n    var MaterialIds = msg.SQLCheckRequestData.filter(el => el.Type == 2);\n    if (MaterialIds.length > 0)\n    {\n        for (let i = 0; i < msg.SAPData.Materials.length; i++)\n        {\n            var Material = MaterialIds.filter(el => el.Id == msg.SAPData.Materials[i].MaterialId);\n            if (Material.length > 0)\n            {\n                if (Material.length > 1) msg.Response.Messages.push(\"Материал с ID = \" + msg.SAPData.Materials[i].MaterialId + \" имеет дубликаты\");\n                else msg.SAPData.Materials[i].MaterialGuid = Material[0].Guid;\n            }\n            else\n            {\n                msg.Response.Messages.push(\"Материал с ID = \" + msg.SAPData.Materials[i].MaterialId + \" не найден\");\n                msg.SAPData.MaterialIdError = true;\n            }\n        };\n    }\n    else\n    {\n        msg.Response.Messages.push(\"Ни один из материалов не найден\");\n        msg.SAPData.MaterialIdError = true;\n    }\n\n    msg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 100,
        "wires": [
            [
                "3abfe0646f0f2cb9"
            ]
        ]
    },
    {
        "id": "3abfe0646f0f2cb9",
        "type": "switch",
        "z": "036aca90e53023a9",
        "name": "IsSuccess == true",
        "property": "Response.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 100,
        "wires": [
            [
                "96164cd254be0760"
            ],
            [
                "3380ef25c8492abe"
            ]
        ]
    },
    {
        "id": "96164cd254be0760",
        "type": "function",
        "z": "036aca90e53023a9",
        "name": "Save Batches Data",
        "func": "var fs = global.get(\"fsextra\");\nvar DeliveriesSuppliesSettings = global.get(\"DeliveriesSuppliesSettings\");\nvar FilesFolder = DeliveriesSuppliesSettings?.FilesFolder; //Каталог хранения кучи файлов поставок\nvar FileNameSuffix = \"Delivery\"; //Суффикс файлов запроса и ответа (без нижнего подчёркивания)\nvar FileCount = 0; //Количество обработанных файлов\nvar ErrorCount = 0; //Количество полученных ошибок\nvar StartDateTime = new Date(); //Дата и время начала создания файлов\nvar StartDateTimeString = StartDateTime.getFullYear()\n    + ('0' + (StartDateTime.getMonth() + 1)).slice(-2)\n    + ('0' + StartDateTime.getDate()).slice(-2);\nvar StartDateTimeString_log = StartDateTime.getFullYear()\n    + ('0' + (StartDateTime.getMonth() + 1)).slice(-2)\n    + ('0' + StartDateTime.getDate()).slice(-2) + \"_\"\n    + ('0' + StartDateTime.getHours()).slice(-2)\n    + ('0' + StartDateTime.getMinutes()).slice(-2)\n    + ('0' + StartDateTime.getSeconds()).slice(-2);\nmsg.StartDateTime = StartDateTime;\nmsg.StartDateTimeString = StartDateTimeString;\n\n//Проверка каталога хранения кучи файлов поставок\nif (DeliveriesSuppliesSettings && DeliveriesSuppliesSettings?.FilesFolder && (DeliveriesSuppliesSettings?.FilesFolder != \"\"))\n{\n    if (fs.pathExistsSync(FilesFolder))\n    {\n        var IsSuccess = true;\n        for (let i = 0; (i < msg.SAPData.Materials.length) && IsSuccess; i++)\n        {\n            var Material = msg.SAPData.Materials[i];\n            for (let j = 0; (j <Material.Batches.length) && IsSuccess; j++)\n            {\n                var Batch = Material.Batches[j];\n                var BatchData =\n                {\n                    CounterpartyId: msg.SAPData.SupplierGuid,\n                    MaterialId: Material.MaterialGuid,\n                    ExternalBatchNumber: Batch.BatchId,\n                    SupplierNumber: msg.SAPData.Waybill,\n                    Status: 10,\n                    ActualDelivery: StartDateTime.toISOString(),\n                    StorageLocationId: msg.SAPData.WarehouseGuid,\n                    Items: []\n                };\n                for (var Pallet of Batch.Pallets)\n                {\n                    var PalletData =\n                    {\n                        Date: StartDateTimeString_log,\n                        BatchNumber: Pallet.SSCC,\n                        ExternalBatchNumber: Batch.BatchId,\n                        SupplierNumber: Pallet.BatchSupplier,\n                        Quantity: Pallet.Amount,\n                        PackagingDate: Pallet.ProdDate,\n                        Expiration: Pallet.ExpDate,\n                        Comment: Pallet.SSCCComment\n                    };\n                    BatchData.Items.push(PalletData);\n                }\n                var FileName = FileNameSuffix + \"_\" + StartDateTimeString + \"_\" + Material.MaterialId + \"_\" + Batch.BatchId + \".json\";\n                var FileNameFull = FilesFolder + FileName;\n                var FileData = JSON.stringify(BatchData, null, \"\\t\");\n                IsSuccess = false;\n                //Запись данных во временный файл с расширением .tmp\n                try\n                {\n                    fs.appendFile(FileNameFull + \".tmp\", FileData);\n                }\n                catch (ex)\n                {\n                    msg.Response.Messages.push(\"Ошибка записи данных во временный файл \" + FileName + \".tmp (\" + ex + \")\");\n                }\n                //Проверка существования файла с расширением .tmp\n                if (fs.existsSync(FileNameFull + \".tmp\"))\n                {\n                    //Переименование файла в оригинальное имя\n                    try\n                    {\n                        fs.renameSync(FileNameFull + \".tmp\", FileNameFull);\n                    }\n                    catch (ex)\n                    {\n                        msg.Response.Messages.push(\"Ошибка переименования временного файла \" + FileName + \".tmp (\" + ex + \")\");\n                    }\n                    //Проверка существования конечного файла\n                    if (fs.existsSync(FileNameFull)) IsSuccess = true;\n                    else msg.Response.Messages.push(\"Конечный файл \" + FileName + \" не существует\");\n                }\n                else msg.Response.Messages.push(\"Временный файл \" + FileName + \".tmp не существует\");\n                msg.SAPData.WriteFileError = (!IsSuccess);\n            }\n        }\n    }\n    else msg.Response.Messages.push(\"Каталог приёма поставок на существует\");\n}\nelse msg.Response.Messages.push(\"Настройки модуля приёма поставок на заданы\");\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 160,
        "wires": [
            [
                "3380ef25c8492abe"
            ]
        ]
    },
    {
        "id": "fea0698942503171",
        "type": "catch",
        "z": "036aca90e53023a9",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 200,
        "y": 220,
        "wires": [
            [
                "83fea4ed11200802"
            ]
        ]
    },
    {
        "id": "83fea4ed11200802",
        "type": "function",
        "z": "036aca90e53023a9",
        "name": "Save Error Data",
        "func": "msg.SubflowError = msg.error;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 220,
        "wires": [
            [
                "3380ef25c8492abe"
            ]
        ]
    },
    {
        "id": "c97a295197717903",
        "type": "MSSQL",
        "z": "036aca90e53023a9",
        "mssqlCN": "ded20dff97a51247",
        "name": "Check Data",
        "outField": "SQLCheckRequestData",
        "returnType": 0,
        "throwErrors": "0",
        "query": "--Если запись заказов из таблицы tblCtSData\r\nSELECT * FROM [tblCtSDataHistory]\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "SQLCheckRequest",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 190,
        "y": 100,
        "wires": [
            [
                "8f3be6ef7431c154"
            ]
        ]
    },
    {
        "id": "5baa6103ea80fcc6",
        "type": "function",
        "z": "53324788122345c3",
        "name": "Prepare Telegram Files Data",
        "func": "//Состояние подпотока\nvar SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: undefined\n    }\n};\n\n//Проверка занятости данного блока в случае большого количества файлов, которые могут не успеть обработать за интервал вызова функции\nvar IsBusy = context.get(\"IsBusy\");\nif (!IsBusy)\n{\n    context.set(\"IsBusy\", true);\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"Processing\" });\n    SubflowStatus.payload.text = \"Processing: Start\";\n    node.send([null, SubflowStatus, null]);\n    var fs = global.get(\"fsextra\");\n    msg.Errors =\n    {\n        PrepareFilesData: [],\n        GetToken: [],\n        GetServiceUser: [],\n        FileProcessing: []\n    };\n    msg.ErrorCount = 0; //Количество полученных ошибок\n    msg.TelegramFiles = []; //Файлы поставок, отправляемые в MES\n    msg.FilesCount = 0; //Количество обрабатываемых файлов\n    msg.FileNumber = 0; //Номер обрабатываемого файла\n    msg.FilesFolder = msg.Telegram?.Folder?.FilesFolder?.Path; //Каталог временного хранения\n    msg.ArchiveOKFolder = msg.Telegram?.Folder?.ArchiveOKFolder?.Path; //Каталог удачно отправленных в MES файлов\n    msg.ArchiveBadFolder = msg.Telegram?.Folder?.ArchiveBadFolder?.Path; //Каталог ошибочных файлов\n    msg.MESLogsFolder = msg.Telegram?.Folder?.MESLogsFolder?.Path; //Архив запросов в MES\n    msg.FilePrefix = msg.Telegram?.FilePrefix; //Префикс файлов (без нижнего подчёркивания)\n    msg.FileType = msg.Telegram?.Folder?.FilesFolder?.FileType; //Тип файла запроса\n    msg.FileTypeMES = msg.Telegram?.Folder?.MESLogsFolder?.FileType; //Тип файла лога запроса в MES\n    //Шаблон сообщения об ошибке\n    var ErrorData =\n    {\n        error:\n        {\n            source:\n            {\n                id: env.get(\"NR_NODE_ID\"),\n                type: undefined,\n                name: env.get(\"NR_NODE_NAME\"),\n                count: 1\n            },\n            message: undefined\n        }\n    };\n    //Проверка настроек телеграммы\n    if (msg.FilesFolder && (msg.FilesFolder != \"\") && msg.ArchiveOKFolder && (msg.ArchiveOKFolder != \"\")\n        && msg.ArchiveBadFolder && (msg.ArchiveBadFolder != \"\") && msg.ArchiveBadFolder && (msg.ArchiveBadFolder != \"\")\n        && msg.MESLogsFolder && (msg.MESLogsFolder != \"\") && msg.FilePrefix && (msg.FilePrefix != \"\")\n        && msg.FileType && (msg.FileType != \"\") && msg.FileTypeMES && (msg.FileTypeMES != \"\")\n        )\n    {\n        //Проверка каталога временного хранения\n        if (fs.pathExistsSync(msg.FilesFolder))\n        {\n            //Проверка каталога удачно отправленных в MES файлов\n            if (fs.pathExistsSync(msg.ArchiveOKFolder))\n            {\n                //Проверка каталога ошибочных файлов\n                if (fs.pathExistsSync(msg.ArchiveBadFolder))\n                {\n                    //Проверка каталога ошибочных файлов\n                    if (fs.pathExistsSync(msg.MESLogsFolder))\n                    {\n                        var FilesNames = []; //Массив имён файлов телеграммы\n                        //Получения списка имён файлов msg.FilesFolder\n                        try\n                        {\n                            FilesNames = fs.readdirSync(msg.FilesFolder);\n                        }\n                        catch (ex)\n                        {\n                            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n                            ErrorData.error.message = \"Directory '\" + msg.FilesFolder + \"' could not be read (\" + ex + \")\";\n                            msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n                            msg.ErrorCount = msg.ErrorCount + 1;\n                            node.send([null, null, ErrorData]);\n                        }\n                        //Выбор файлов с заданным расширением\n                        msg.TelegramFiles = FilesNames.filter(el => el.toLowerCase().endsWith(\".\" + msg.FileType));\n                        msg.FilesCount = msg.TelegramFiles.length;\n                        if (msg.TelegramFiles.length > 0) node.status({ fill: \"yellow\", shape: \"dot\", text: \"Processing. File Count: \" + msg.FilesCount });\n                    }\n                    else\n                    {\n                        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n                        ErrorData.error.message = \"Directory '\" + msg.MESLogsFolder + \"' does not exist\";\n                        msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n                        msg.ErrorCount = msg.ErrorCount + 1;\n                        node.send([null, null, ErrorData]);\n                    }\n                }\n                else\n                {\n                    ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n                    ErrorData.error.message = \"Directory '\" + msg.ArchiveBadFolder + \"' does not exist\";\n                    msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n                    msg.ErrorCount = msg.ErrorCount + 1;\n                    node.send([null, null, ErrorData]);\n                }\n            }\n            else\n            {\n                ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n                ErrorData.error.message = \"Directory '\" + msg.ArchiveOKFolder + \"' does not exist\";\n                msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n                msg.ErrorCount = msg.ErrorCount + 1;\n                node.send([null, null, ErrorData]);\n            }\n        }\n        else\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n            ErrorData.error.message = \"Directory '\" + msg.FilesFolder + \"' does not exist\";\n            msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n            msg.ErrorCount = msg.ErrorCount + 1;\n            node.send([null, null, ErrorData]);\n        }\n    }\n    else\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings Error\";\n        ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" is not Сonfigured\";\n        msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n        msg.ErrorCount = msg.ErrorCount + 1;\n        node.send([null, null, ErrorData]);\n    }\n    if ((msg.TelegramFiles.length > 0) || (msg.ErrorCount > 0)) return [msg, null, null];\n    else msg.ResetIsBusy = true;\n}\nif (msg.ResetIsBusy)\n{\n    var ProcessingState = \"Processing Completed. File Count: \" + msg.FilesCount + \". Error Count: \" + msg.ErrorCount + \".\";\n    var ProcessingColour = ((msg.ErrorCount > 0) ? \"red\" : \"green\");\n    node.status({ fill: ProcessingColour, shape: \"dot\", text: ProcessingState });\n    SubflowStatus.payload.fill = ProcessingColour;\n    SubflowStatus.payload.text = ProcessingState;\n    context.set(\"IsBusy\", false);\n    return [null, SubflowStatus, null];\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 40,
        "wires": [
            [
                "9967fdd1629b6791"
            ],
            [
                "4c5cf4e9e7d2aec9"
            ],
            [
                "0fb3e0c2354d1820"
            ]
        ],
        "outputLabels": [
            "Telegram Files Data",
            "Subflow Status",
            "Error"
        ]
    },
    {
        "id": "9967fdd1629b6791",
        "type": "switch",
        "z": "53324788122345c3",
        "name": "msg.ErrorCount > 0",
        "property": "ErrorCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 40,
        "wires": [
            [
                "08dd7fb0bc29c6da"
            ],
            [
                "cc167cc272226dea"
            ]
        ]
    },
    {
        "id": "08dd7fb0bc29c6da",
        "type": "function",
        "z": "53324788122345c3",
        "name": "Files Processing End",
        "func": "msg.ResetIsBusy = true;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 40,
        "wires": [
            [
                "5baa6103ea80fcc6"
            ]
        ]
    },
    {
        "id": "81bc635e256ab726",
        "type": "subflow:37b786771d50fd31",
        "z": "53324788122345c3",
        "name": "",
        "x": 730,
        "y": 120,
        "wires": [
            [
                "e56c0d9a8f8a45be"
            ],
            [
                "e4d1b628556077b6"
            ]
        ]
    },
    {
        "id": "e56c0d9a8f8a45be",
        "type": "switch",
        "z": "53324788122345c3",
        "name": "msg.TokenIsSuccess == true",
        "property": "TokenIsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 980,
        "y": 120,
        "wires": [
            [
                "7cb659cf1ffd6b99"
            ],
            [
                "a84c082dd77e6b59"
            ]
        ]
    },
    {
        "id": "a84c082dd77e6b59",
        "type": "function",
        "z": "53324788122345c3",
        "name": "Get Token Error",
        "func": "msg.Errors.GetToken.push(msg.TokenError);\n\nmsg.ErrorCount = msg.ErrorCount + 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 120,
        "wires": [
            [
                "08dd7fb0bc29c6da"
            ]
        ]
    },
    {
        "id": "e9326d81622852bd",
        "type": "subflow:c5b8559825b247a0",
        "z": "53324788122345c3",
        "name": "",
        "x": 630,
        "y": 200,
        "wires": [
            [
                "7bd476da1570ad65"
            ],
            [
                "4bd2f7d142a76f3b"
            ]
        ]
    },
    {
        "id": "7bd476da1570ad65",
        "type": "switch",
        "z": "53324788122345c3",
        "name": "msg.ServiceUserIsSuccess == true",
        "property": "ServiceUserIsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 920,
        "y": 200,
        "wires": [
            [
                "f9fc9779be355f96"
            ],
            [
                "21b91491968adb58"
            ]
        ]
    },
    {
        "id": "21b91491968adb58",
        "type": "function",
        "z": "53324788122345c3",
        "name": "Get Service User Error",
        "func": "msg.Errors.GetServiceUser.push(msg.ServiceUserError);\n\nmsg.ErrorCount = msg.ErrorCount + 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 200,
        "wires": [
            [
                "08dd7fb0bc29c6da"
            ]
        ]
    },
    {
        "id": "18b64ed988b7a713",
        "type": "function",
        "z": "53324788122345c3",
        "name": "Prepare Request",
        "func": "var fs = global.get(\"fsextra\");\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\nmsg.ActiveFileName = msg.payload; //Сохранение имени активного файла\nvar FullFileName = msg.FilesFolder + msg.ActiveFileName; //Полное имя файлов\nvar FileDataStringify = undefined; //Данные из файла\nvar FileData = undefined; //Данные из файла, преобразованные в объект\nvar ErrorCount = 0; //Количество возникших ошибок\nvar BadFile = false; //Файл имеет ошибочную структуру\nvar IsError = false; //Произошла ошибка при обработке файла\n//Чтение данных из файла\nvar options =\n{\n    encoding: \"utf8\"\n};\ntry\n{\n    FileDataStringify = fs.readFileSync(FullFileName, options);\n}\ncatch (ex)\n{\n    ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" File Error\";\n    ErrorData.error.message = \"File '\" + FullFileName + \"' could not be read (\" + ex + \")\";\n    IsError = true;\n}\n//Преобразование файла в объект\nif (FileDataStringify)\n{\n    try\n    {\n        FileData = JSON.parse(FileDataStringify);\n    }\n    catch (ex)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Data Error\";\n        ErrorData.error.message = \"File '\" + FullFileName + \"' Data could not be Parse to Object. This File is sent to the Bad Directory. (\" + ex + \")\";\n        IsError = true;\n    }\n    if (FileData)\n    {\n        msg.FileData = FileData;\n        var MESAPI = msg.Telegram?.MESAPI?.[FileData.API];\n        if (MESAPI)\n        {\n            msg.headers = {};\n            msg.headers[\"Authorization\"] = msg.Token;\n            msg.headers[\"Content-Type\"] = \"application/json; charset=utf-8\";\n            msg.headers[\"Initiator-user\"] = msg.ServiceUserId;\n            msg.method = MESAPI.Method;\n            msg.url = MESAPI.URL;\n            msg.requestTimeout = ((MESAPI.TimeoutSec * 1000) || 120000);\n            msg.payload = FileData.Data;\n        }\n        else\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings Error\";\n            ErrorData.error.message = \"MES API  '\" + FileData.API + \"' is not Сonfigured\";\n            IsError = true;\n        }\n    }\n    else BadFile = true;\n}\n\nif (IsError)\n{\n    var FileErrorData =\n    {\n        FileName: msg.ActiveFileName,\n        BadFile: BadFile,\n        OKFile: false,\n        Prepare: ErrorData.error.message,\n        Send: undefined,\n        Finish: undefined\n    };\n    msg.Errors.FileProcessing.push(FileErrorData);\n\n    msg.ErrorCount = msg.ErrorCount + 1;\n    node.send([null, ErrorData]);\n}\n\nmsg.BadFile = BadFile;\n//Файл и данные успешно прошли проверки\nmsg.PrepareIsSuccess = (!IsError) && (!BadFile);\n//Время начала отправки данных в MES\nmsg.StartDateTime = new Date();\n\nreturn [msg, null];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 320,
        "wires": [
            [
                "3e241df6c021ee1d"
            ],
            [
                "27293352b36a4a1a"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "550e327e5ba572ec",
        "type": "http request",
        "z": "53324788122345c3",
        "name": "Send to MES",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1270,
        "y": 400,
        "wires": [
            [
                "68f63b55ca5ec53f",
                "aaf648c7e57f4945"
            ]
        ]
    },
    {
        "id": "1e3949c0b9dbca7c",
        "type": "function",
        "z": "53324788122345c3",
        "name": "Prepare Response",
        "func": "var fs = global.get(\"fsextra\");\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\n\nmsg.OKFile = false; //Файл прошёл все проверки и был успешно отправлен\nvar EndDirectory = undefined; //Конечная директория перемещения файла\nvar SendError = undefined; //Ошибка отправки данных\nvar FinishError = undefined; //Ошибка завершения обработки данных\n\nif (msg.PrepareIsSuccess)\n{\n    if (msg.statusCode == 200) msg.OKFile = true;\n    else\n    {\n        SendError = \"Send to MES: \" + msg.statusCode + \": \";\n        if (([\"ECONNRESET\", \"ETIMEDOUT\", \"ECONNREFUSED\"].includes(msg.statusCode))) SendError = SendError + msg.payload;\n        else\n        {\n            SendError = SendError + JSON.stringify(msg.payload);\n            msg.BadFile = true;\n        }\n        msg.ErrorCount = msg.ErrorCount + 1;\n    }\n}\n//Перемещение успешно отправленного файла в архив\nif (msg.OKFile) EndDirectory = msg.ArchiveOKFolder;\nelse\n{\n    //Перемещение ошибочного файла в архив\n    if (msg.BadFile) EndDirectory = msg.ArchiveBadFolder;\n}\n//Перемещение файла в конечную директорию\nif (EndDirectory)\n{\n    try\n    {\n        var moveSyncOptions =\n        {\n            overwrite: true\n        };\n        fs.moveSync(msg.FilesFolder + msg.ActiveFileName, EndDirectory + msg.ActiveFileName, moveSyncOptions);\n    }\n    catch (ex)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" File Error\";\n        ErrorData.error.message = \"Unable to move file '\" + msg.FilesFolder + msg.ActiveFileName + \"' to '\" + EndDirectory + \"' directory (\" + ex + \")\";\n        FinishError = ErrorData.error.message;\n        msg.ErrorCount = msg.ErrorCount + 1;\n        node.send([null, ErrorData]);\n    }\n}\n//Дополнение массива ошибок\nif (SendError || FinishError)\n{\n    var FileErrorData = msg.Errors.FileProcessing.find(el => el.FileName == msg.ActiveFileName);\n    if (FileErrorData)\n    {\n        FileErrorData.BadFile = msg.BadFile;\n        FileErrorData.OKFile = msg.OKFile;\n        FileErrorData.Send = SendError;\n        FileErrorData.Finish = FinishError;\n    }\n    else\n    {\n        FileErrorData =\n        {\n            FileName: msg.ActiveFileName,\n            BadFile: msg.BadFile,\n            OKFile: msg.OKFile,\n            Prepare: undefined,\n            Send: SendError,\n            Finish: FinishError\n        };\n        msg.Errors.FileProcessing.push(FileErrorData);\n    }\n}\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 320,
        "wires": [
            [
                "f9fc9779be355f96"
            ],
            [
                "ee5809fcb3aaecdd"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "3e241df6c021ee1d",
        "type": "switch",
        "z": "53324788122345c3",
        "name": "PrepareIsSuccess == false",
        "property": "PrepareIsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1220,
        "y": 320,
        "wires": [
            [
                "aaf648c7e57f4945"
            ],
            [
                "c6b7e50641b76e92"
            ]
        ]
    },
    {
        "id": "68f63b55ca5ec53f",
        "type": "function",
        "z": "53324788122345c3",
        "name": "Save Send Time to MES Log",
        "func": "var fs = global.get(\"fsextra\");\n//Время окончания отправки данных в MES\nmsg.EndDateTime = new Date();\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n}\n//Проверка настроек телеграммы\nif (msg.MESLogsFolder && (msg.MESLogsFolder != \"\") && msg.FilePrefix && (msg.FilePrefix != \"\") && msg.FileTypeMES && (msg.FileTypeMES != \"\"))\n{\n    if (msg.StartDateTime)\n    {\n        var FileName = msg.FilePrefix + \"_MES_\"\n            + msg.StartDateTime?.getFullYear().toString()\n            + ('0' + (msg.StartDateTime.getMonth() + 1).toString()).slice(-2)\n            + ('0' + msg.StartDateTime.getDate().toString()).slice(-2)\n            + \".log\";\n        var StartDate = msg.StartDateTime.getFullYear().toString() + \".\"\n            + ('0' + (msg.StartDateTime.getMonth() + 1).toString()).slice(-2) + \".\"\n            + ('0' + msg.StartDateTime.getDate().toString()).slice(-2);\n        var StartTime = ('0' + msg.StartDateTime.getHours().toString()).slice(-2) + \":\"\n            + ('0' + msg.StartDateTime.getMinutes().toString()).slice(-2) + \":\"\n            + ('0' + msg.StartDateTime.getSeconds().toString()).slice(-2) + \".\"\n            + ('00' + msg.StartDateTime.getMilliseconds().toString()).slice(-3);\n        var EndDate = msg.EndDateTime.getFullYear().toString() + \".\"\n            + ('0' + (msg.EndDateTime.getMonth() + 1).toString()).slice(-2) + \".\"\n            + ('0' + msg.EndDateTime.getDate().toString()).slice(-2);\n        var EndTime = ('0' + msg.EndDateTime.getHours().toString()).slice(-2) + \":\"\n            + ('0' + msg.EndDateTime.getMinutes().toString()).slice(-2) + \":\"\n            + ('0' + msg.EndDateTime.getSeconds().toString()).slice(-2) + \".\"\n            + ('00' + msg.EndDateTime.getMilliseconds().toString()).slice(-3);\n        var ProcessingTime = (Number(msg.EndDateTime) - Number(msg.StartDateTime)) / 1000;\n        var FullFileName = msg.MESLogsFolder + FileName;\n        var Header = \"Start Time\\tEnd Time\\tFile Name\\tMethod\\tAPI\\tOperation Time\\tSend Status\\r\\n\"; //Заголовок файла логирования\n        var LogLine = StartDate + \" T \" + StartTime + \"\\t\";\n        LogLine = LogLine + EndDate + \" T \" + EndTime + \"\\t\";\n        LogLine = LogLine + msg.ActiveFileName + \"\\t\";\n        LogLine = LogLine + msg.method + \"\\t\";\n        LogLine = LogLine + msg.url + \"\\t\";\n        LogLine = LogLine + ProcessingTime.toFixed(3) + \" sec\\t\";\n        if (msg.statusCode == 200) LogLine = LogLine + \"File sent Successfully\";\n        else LogLine = LogLine + \"Error sending file\";\n        LogLine = LogLine + \"\\r\\n\";\n        var LogLineSend = false;\n        //Проверка каталога хранения логов времени отправки в MES\n        fs.pathExists(msg.MESLogsFolder, pathExistsCallback);\n    }\n    else\n    {\n        ErrorData.error.source.type = \"Start DateTime\";\n        ErrorData.error.message = \"msg field doesn't have StartDateTime value\";\n        return [null, ErrorData];\n    }\n}\nelse\n{\n    ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings Error\";\n    ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" is not Сonfigured\";\n    return [null, ErrorData];\n}\n\nfunction pathExistsCallback(err, exists)\n{\n    if (err)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n        ErrorData.error.message = \"pathExistsCallback: \" + err;\n        node.send([null, ErrorData]);\n        node.done();\n    }\n    else\n    {\n        if (exists) fs.stat(FullFileName, statCallback);\n        else\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n            ErrorData.error.message = \"Directory '\" + msg.MESLogsFolder + \"' does not exist\";\n            node.send([null, ErrorData]);\n            node.done();\n        }\n    }\n}\n\nfunction statCallback(err, stats)\n{\n    if (err)\n    {\n        if (err.code != \"ENOENT\")\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Log File Error\";\n            ErrorData.error.message = \"statCallback: \" + err;\n            node.send([null, ErrorData]);\n            node.done();\n        }\n        else fs.appendFile(FullFileName, Header, appendFileCallback);\n    }\n    else\n    {\n        LogLineSend = true;\n        fs.appendFile(FullFileName, LogLine, appendFileCallback);\n    }\n}\n\nfunction appendFileCallback(err)\n{\n    if (err)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Log File Error\";\n        ErrorData.error.message = \"statCallback: \" + err;\n        node.send([null, ErrorData]);\n        node.done();\n    }\n    else\n    {\n        if (!LogLineSend)\n        {\n            LogLineSend = true;\n            fs.appendFile(FullFileName, LogLine, appendFileCallback);\n        }\n        else\n        {\n            node.send([msg, null]);\n            node.done();\n        }\n    }\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 400,
        "wires": [
            [],
            [
                "ee5809fcb3aaecdd"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "a68919cccae5164b",
        "type": "catch",
        "z": "53324788122345c3",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 140,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "aea90857fb116358",
        "type": "link in",
        "z": "53324788122345c3",
        "name": "Catch Error Data",
        "links": [
            "0fb3e0c2354d1820",
            "27293352b36a4a1a",
            "4bd2f7d142a76f3b",
            "e4d1b628556077b6",
            "ee5809fcb3aaecdd"
        ],
        "x": 205,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "0fb3e0c2354d1820",
        "type": "link out",
        "z": "53324788122345c3",
        "name": "Catch Error Telegram Files Prepare",
        "mode": "link",
        "links": [
            "aea90857fb116358"
        ],
        "x": 335,
        "y": 140,
        "wires": []
    },
    {
        "id": "3aa365cfa01eb879",
        "type": "link in",
        "z": "53324788122345c3",
        "name": "Subflow Status",
        "links": [
            "4c5cf4e9e7d2aec9",
            "283deaef8bd31634",
            "cffea4e739faa8f3",
            "4f2b9006070e1409",
            "1a9ec40aff50bcbc",
            "ae4a516890e6fc6a"
        ],
        "x": 205,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "4c5cf4e9e7d2aec9",
        "type": "link out",
        "z": "53324788122345c3",
        "name": "Subflow Status Telegram Files Prepare",
        "mode": "link",
        "links": [
            "3aa365cfa01eb879"
        ],
        "x": 335,
        "y": 100,
        "wires": []
    },
    {
        "id": "cc167cc272226dea",
        "type": "function",
        "z": "53324788122345c3",
        "name": "Subflow Status",
        "func": "var SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: Get Token\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 120,
        "wires": [
            [
                "81bc635e256ab726"
            ],
            [
                "283deaef8bd31634"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "7cb659cf1ffd6b99",
        "type": "function",
        "z": "53324788122345c3",
        "name": "Subflow Status",
        "func": "var SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: Get Service User\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 200,
        "wires": [
            [
                "e9326d81622852bd"
            ],
            [
                "cffea4e739faa8f3"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "283deaef8bd31634",
        "type": "link out",
        "z": "53324788122345c3",
        "name": "Subflow Status Get Token",
        "mode": "link",
        "links": [
            "3aa365cfa01eb879"
        ],
        "x": 675,
        "y": 160,
        "wires": []
    },
    {
        "id": "cffea4e739faa8f3",
        "type": "link out",
        "z": "53324788122345c3",
        "name": "Subflow Status Get Service User",
        "mode": "link",
        "links": [
            "3aa365cfa01eb879"
        ],
        "x": 555,
        "y": 240,
        "wires": []
    },
    {
        "id": "ee5fd12e1e787652",
        "type": "function",
        "z": "53324788122345c3",
        "name": "Subflow Status",
        "func": "msg.FileNumber = ((msg.FileNumber + 1) || 1);\nvar SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: File \" + msg.FileNumber + \"/\" + msg.FilesCount + \": Preparing\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 320,
        "wires": [
            [
                "18b64ed988b7a713"
            ],
            [
                "4f2b9006070e1409"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "4f2b9006070e1409",
        "type": "link out",
        "z": "53324788122345c3",
        "name": "Subflow Status Prepare Request",
        "mode": "link",
        "links": [
            "3aa365cfa01eb879"
        ],
        "x": 875,
        "y": 360,
        "wires": []
    },
    {
        "id": "27293352b36a4a1a",
        "type": "link out",
        "z": "53324788122345c3",
        "name": "Catch Error Prepare Request",
        "mode": "link",
        "links": [
            "aea90857fb116358"
        ],
        "x": 1115,
        "y": 360,
        "wires": []
    },
    {
        "id": "c6b7e50641b76e92",
        "type": "function",
        "z": "53324788122345c3",
        "name": "Subflow Status",
        "func": "var SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: File \" + msg.FileNumber + \"/\" + msg.FilesCount + \": Sending\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 400,
        "wires": [
            [
                "550e327e5ba572ec"
            ],
            [
                "1a9ec40aff50bcbc"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "1a9ec40aff50bcbc",
        "type": "link out",
        "z": "53324788122345c3",
        "name": "Subflow Status Prepare Request",
        "mode": "link",
        "links": [
            "3aa365cfa01eb879"
        ],
        "x": 1215,
        "y": 440,
        "wires": []
    },
    {
        "id": "aaf648c7e57f4945",
        "type": "function",
        "z": "53324788122345c3",
        "name": "Subflow Status",
        "func": "var SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: File \" + msg.FileNumber + \"/\" + msg.FilesCount + \": Compliting\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 320,
        "wires": [
            [
                "1e3949c0b9dbca7c"
            ],
            [
                "ae4a516890e6fc6a"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "ae4a516890e6fc6a",
        "type": "link out",
        "z": "53324788122345c3",
        "name": "Subflow Status Prepare Request",
        "mode": "link",
        "links": [
            "3aa365cfa01eb879"
        ],
        "x": 1635,
        "y": 360,
        "wires": []
    },
    {
        "id": "4bd2f7d142a76f3b",
        "type": "link out",
        "z": "53324788122345c3",
        "name": "Catch Error Telegram Get Service User",
        "mode": "link",
        "links": [
            "aea90857fb116358"
        ],
        "x": 795,
        "y": 240,
        "wires": []
    },
    {
        "id": "e4d1b628556077b6",
        "type": "link out",
        "z": "53324788122345c3",
        "name": "Catch Error Telegram Get Token",
        "mode": "link",
        "links": [
            "aea90857fb116358"
        ],
        "x": 875,
        "y": 160,
        "wires": []
    },
    {
        "id": "ee5809fcb3aaecdd",
        "type": "link out",
        "z": "53324788122345c3",
        "name": "Catch Error Send to MES and Prepare Response",
        "mode": "link",
        "links": [
            "aea90857fb116358"
        ],
        "x": 1875,
        "y": 400,
        "wires": []
    },
    {
        "id": "f9fc9779be355f96",
        "type": "array-loop",
        "z": "53324788122345c3",
        "name": "msg.TelegramFiles",
        "key": "al72029a818f207845",
        "keyType": "msg",
        "reset": false,
        "resetValue": "value-null",
        "array": "TelegramFiles",
        "arrayType": "msg",
        "x": 1230,
        "y": 260,
        "wires": [
            [
                "08dd7fb0bc29c6da"
            ],
            [
                "ee5fd12e1e787652"
            ]
        ]
    },
    {
        "id": "bc9409e657983d6a",
        "type": "function",
        "z": "ca94f48e1f18b542",
        "name": "env variables to msg",
        "func": "msg.Config = {\n    AuthUrl: env.get(\"AuthUrl\"),\n    BatchUrl : env.get(\"BatchUrl\"),\n    ProductionUrl : env.get(\"ProductionUrl\"),\n    WorkflowUrl : env.get(\"WorkflowUrl\"),\n    SqlMasterIp : env.get(\"SqlIp\"),\n    SqlRuntimeIp : env.get(\"SqlIp\"),\n    ChecklistUrl : env.get(\"ChecklistUrl\"),\n    QAUrl : env.get(\"QAUrl\"),\n    BaseClassifiersUrl : env.get(\"BaseClassifiersUrl\"),\n    ReceptionUrl : env.get(\"ReceptionUrl\"),\n    LabEquipmentUrl : env.get(\"LabEquipmentUrl\"),\n    MesCoreUrl : env.get(\"MesCoreUrl\")\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "595e1a54863fd6df",
        "type": "function",
        "z": "c5b8559825b247a0",
        "name": "Prepare Request",
        "func": "var ErrorData = null;\nmsg.ServiceUserIsSuccess = false;\nmsg.GetServiceUserSettings = global.get(\"GlobalSecurity\")?.[\"GetServiceUser\"];\nif (msg.GetServiceUserSettings && msg.GetServiceUserSettings?.MESAPI && msg.GetServiceUserSettings?.APIData)\n{\n    msg.headers = {};\n    msg.headers[\"Authorization\"] = msg.Token;\n    msg.headers[\"Content-Type\"] = \"application/json; charset=utf-8\";\n    msg.method = msg.GetServiceUserSettings.MESAPI.Method;\n    msg.url = msg.GetServiceUserSettings.MESAPI.URL;\n    msg.requestTimeout = msg.GetServiceUserSettings.MESAPI.TimeoutSec * 1000;\n    msg.payload = msg.GetServiceUserSettings.APIData;\n    msg.ServiceUserIsSuccess = true;\n}\nelse\n{\n    msg.ServiceUserError = \"Get Service User Settings Error\";\n    ErrorData =\n    {\n        error:\n        {\n            source:\n            {\n                id: env.get(\"NR_NODE_ID\"),\n                type: msg.ServiceUserError,\n                name: env.get(\"NR_NODE_NAME\"),\n                count: 1\n            },\n            message: msg.ServiceUserError\n        }\n    };\n}\n\nreturn [msg, ErrorData];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 40,
        "wires": [
            [
                "ef048bbda919c344"
            ],
            []
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "d3e7121dafe697a7",
        "type": "http request",
        "z": "c5b8559825b247a0",
        "name": "ServiceUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 770,
        "y": 100,
        "wires": [
            [
                "41b74c93b41f2c1f"
            ]
        ]
    },
    {
        "id": "41b74c93b41f2c1f",
        "type": "function",
        "z": "c5b8559825b247a0",
        "name": "Prepare Response",
        "func": "if (msg.ServiceUserIsSuccess)\n{\n    \n    if (msg.statusCode == 200) msg.ServiceUserId = msg.payload.id;\n    else\n    {\n        msg.ServiceUserIsSuccess = false;\n        var ErrorMessage = \"Get Service User: \" + msg.statusCode + \": \";\n        if ([\"ECONNRESET\", \"ETIMEDOUT\"].includes(msg.statusCode)) ErrorMessage = ErrorMessage + msg.payload;\n        else ErrorMessage = ErrorMessage + JSON.stringify(msg.payload);\n        msg.ServiceUserError = ErrorMessage;\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "9a8df06d251018ba",
        "type": "catch",
        "z": "c5b8559825b247a0",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 200,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "ef048bbda919c344",
        "type": "switch",
        "z": "c5b8559825b247a0",
        "name": "msg.ServiceUserIsSuccess == true",
        "property": "ServiceUserIsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 500,
        "y": 40,
        "wires": [
            [
                "d3e7121dafe697a7"
            ],
            [
                "41b74c93b41f2c1f"
            ]
        ]
    },
    {
        "id": "3190272b5bcf1b58",
        "type": "http request",
        "z": "37b786771d50fd31",
        "name": "Get Token",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 100,
        "wires": [
            [
                "649b4c8d54dc2a38"
            ]
        ]
    },
    {
        "id": "649b4c8d54dc2a38",
        "type": "function",
        "z": "37b786771d50fd31",
        "name": "Prepare Response",
        "func": "if (msg.TokenIsSuccess)\n{\n    \n    if (msg.statusCode == 200) msg.Token = \"Bearer \" + msg.payload.access_token;\n    else\n    {\n        msg.TokenIsSuccess = false;\n        var ErrorMessage = \"Get Token: \" + msg.statusCode + \": \";\n        if ([\"ECONNRESET\", \"ETIMEDOUT\"].includes(msg.statusCode)) ErrorMessage = ErrorMessage + msg.payload;\n        else ErrorMessage = ErrorMessage + JSON.stringify(msg.payload);\n        msg.TokenError = ErrorMessage;\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "5c25f971ea7f3fbf",
        "type": "function",
        "z": "37b786771d50fd31",
        "name": "Prepare Request",
        "func": "var ErrorData = null;\nmsg.TokenIsSuccess = false;\nmsg.GetTokenSettings = global.get(\"GlobalSecurity\")?.[\"GetToken\"];\nif (msg.GetTokenSettings && msg.GetTokenSettings?.MESAPI && msg.GetTokenSettings?.APIData)\n{\n    msg.headers = {};\n    msg.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n    msg.method = msg.GetTokenSettings.MESAPI.Method;\n    msg.url = msg.GetTokenSettings.MESAPI.URL;\n    msg.requestTimeout = msg.GetTokenSettings.MESAPI.TimeoutSec * 1000;\n    msg.payload = msg.GetTokenSettings.APIData;\n    msg.TokenIsSuccess = true;\n}\nelse\n{\n    msg.TokenError = \"Get Token Settings Error\";\n    ErrorData =\n    {\n        error:\n        {\n            source:\n            {\n                id: env.get(\"NR_NODE_ID\"),\n                type: msg.TokenError,\n                name: env.get(\"NR_NODE_NAME\"),\n                count: 1\n            },\n            message: msg.TokenError\n        }\n    };\n}\n\nreturn [msg, ErrorData];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 40,
        "wires": [
            [
                "92fb777891218410"
            ],
            []
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "6af15775feb114af",
        "type": "catch",
        "z": "37b786771d50fd31",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 200,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "92fb777891218410",
        "type": "switch",
        "z": "37b786771d50fd31",
        "name": "msg.TokenIsSuccess == true",
        "property": "TokenIsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 480,
        "y": 40,
        "wires": [
            [
                "3190272b5bcf1b58"
            ],
            [
                "649b4c8d54dc2a38"
            ]
        ]
    },
    {
        "id": "a22b2285eded3d48",
        "type": "function",
        "z": "87d42e36227889f6",
        "name": "Check Data and SQLRequest Prepare",
        "func": "//Структура ответа на запрос от SAP\nmsg.Response =\n{\n    Value:\n    {\n        TotalElements: 0,\n        Items: []\n    },\n    Messages: [],\n    IsSuccess: false\n};\n\nmsg.SAPData =\n{\n    PlantId: undefined,\n    LineId: undefined,\n    MaterialId: undefined,\n    StartStartDateTimeOrigin: undefined,\n    StartStartDateTime: undefined,\n    EndStartDateTimeOrigin: undefined,\n    EndStartDateTime: undefined,\n    PlanOrderIds: undefined,\n    PlanOrderIdsStr: undefined,\n    MSSQLError: false\n};\n\nif (\"plantid\" in msg.SAPRequest?.Data) {\n    if (msg.SAPRequest.Data.plantid && (msg.SAPRequest.Data.plantid != \"\")) msg.SAPData.PlantId = msg.SAPRequest.Data.plantid;\n}\n\nif (\"lineid\" in msg.SAPRequest?.Data) {\n    if (msg.SAPRequest.Data.lineid && (msg.SAPRequest.Data.lineid != \"\")) {\n        if (msg.SAPData.PlantId) msg.SAPData.LineId = msg.SAPRequest.Data.lineid;\n        else msg.Response.Messages.push(\"Поле PlantId должно присутствовать при наличии поля lineid\");\n    }\n}\n\nif (\"planorderids\" in msg.SAPRequest?.Data) {\n    if (msg.SAPRequest.Data.planorderids && (msg.SAPRequest.Data.planorderids != \"\")) msg.SAPData.PlanOrderIds = msg.SAPRequest.Data.planorderids;\n    if (!Array.isArray(msg.SAPData.PlanOrderIds) || msg.SAPData.PlanOrderIds.length == 0)\n        msg.Response.Messages.push(\"Значение planorderids должно иметь значения\");\n    else\n        msg.SAPData.PlanOrderIdsStr = JSON.stringify(msg.SAPData.PlanOrderIds).replace(\"[\", \"(\").replace(\"]\", \")\").replaceAll(\"\\\"\", \"'\");\n}\nelse { msg.Response.Messages.push(\"Значение planorderids должно быть указано\"); }\n\nif (\"materialid\" in msg.SAPRequest?.Data) {\n    if (msg.SAPRequest.Data.materialid && (msg.SAPRequest.Data.materialid != \"\")) msg.SAPData.MaterialId = msg.SAPRequest.Data.materialid;\n}\n\nif (\"startstartdatetime\" in msg.SAPRequest?.Data) {\n    if (msg.SAPRequest.Data.startstartdatetime) {\n        if (!isNaN(Date.parse(msg.SAPRequest.Data.startstartdatetime))) {\n            msg.SAPData.StartStartDateTimeOrigin = msg.SAPRequest.Data.startstartdatetime;\n            msg.SAPData.StartStartDateTime = new Date(msg.SAPData.StartStartDateTimeOrigin);\n        }\n    }\n}\n\nif (\"endstartdatetime\" in msg.SAPRequest?.Data) {\n    if (msg.SAPRequest.Data.endstartdatetime) {\n        if (!isNaN(Date.parse(msg.SAPRequest.Data.endstartdatetime))) {\n            msg.SAPData.EndStartDateTimeOrigin = msg.SAPRequest.Data.endstartdatetime;\n            msg.SAPData.EndStartDateTime = new Date(msg.SAPData.EndStartDateTimeOrigin);\n            if (msg.SAPData.EndStartDateTime <= msg.SAPData.StartStartDateTime) msg.Response.Messages.push(\"Значение startstartdatetime должно быть раньше значения endstartdatetime\");\n        }\n    }\n}\n\nvar ProductionScheduleTable = global.get(\"DBTable\")?.ProductionSchedule;\nif ((!ProductionScheduleTable) || (!ProductionScheduleTable?.DBTable)) msg.Response.Messages.push(\"Таблица планов производства не сконфигурирована\");\n\nvar EquipmentTreeTable = global.get(\"DBTable\")?.EquipmentTree;\nif ((!EquipmentTreeTable) || (!EquipmentTreeTable?.DBTable)) msg.Response.Messages.push(\"Таблица дерева оборудования не сконфигурирована\");\n\nvar MaterialTable = global.get(\"DBTable\")?.Material;\nif ((!MaterialTable) || (!MaterialTable?.DBTable)) msg.Response.Messages.push(\"Таблица материалов не сконфигурирована\");\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nvar SQLRequest = \"\";\nif (msg.Response.IsSuccess) {\n    SQLRequest = SQLRequest +\n        \"SELECT\\n\\t\" +\n        \"ProductionSchedule.[gId] AS ProductionScheduleId,\\n\\t\" +\n        \"ProductionSchedule.[nKey] AS ProductionScheduleKey,\\n\\t\" +\n        \"ProductionSchedule.[dtCreatedAt] AS ProductionScheduleCreatedAt,\\n\\t\" +\n        \"ProductionSchedule.[gMaterialId] AS ProductionScheduleMaterialId,\\n\\t\" +\n        \"ProductionSchedule.[gLineId] AS ProductionScheduleLineId,\\n\\t\" +\n        \"ProductionSchedule.[szVersion] AS ProductionScheduleVersion,\\n\\t\" +\n        \"ProductionSchedule.[dtStart] AS ProductionScheduleStart,\\n\\t\" +\n        \"ProductionSchedule.[dtStop] AS ProductionScheduleStop,\\n\\t\" +\n        \"ProductionSchedule.[nAmount] AS ProductionScheduleAmount,\\n\\t\" +\n        \"ProductionSchedule.[dtUpdatedAt] AS ProductionScheduleUpdatedAt,\\n\\t\" +\n        \"ProductionSchedule.[szExternalId] AS ProductionScheduleExternalId,\\n\\t\" +\n        \"ProductionSchedule.[gAccessId] AS ProductionScheduleAccessId,\\n\\t\" +\n        \"ProductionSchedule.[szLotNumber] AS ProductionScheduleLotNumber,\\n\\t\" +\n        \"Plant.[szNumberSAP] AS PlantNumberSAP,\\n\\t\" +\n        \"Line.[szNumberSAP] AS LineNumberSAP,\\n\\t\" +\n        \"Material.[szName] AS MaterialName\\n\" +\n        \"FROM \" + ProductionScheduleTable.DBTable + \" AS ProductionSchedule\\n\\t\" +\n        \"INNER JOIN \" + EquipmentTreeTable.DBTable + \" AS Plant ON (Plant.[gId] = ProductionSchedule.[gAccessId])\\n\\t\" +\n        \"INNER JOIN \" + EquipmentTreeTable.DBTable + \" AS Line ON (Line.[gId] = ProductionSchedule.[gLineId])\\n\\t\" +\n        \"INNER JOIN \" + MaterialTable.DBTable + \" AS Material ON (Material.[gId] = ProductionSchedule.[gMaterialId])\\n\" +\n        \"WHERE ((ProductionSchedule.[szExternalId] in \" + msg.SAPData.PlanOrderIdsStr + \")\";\n    if (msg.SAPData.StartStartDateTime) {\n        SQLRequest = SQLRequest + \" AND (ProductionSchedule.[dtStart] >= '\" + msg.SAPData.StartStartDateTime.toISOString() + \"')\";\n        if (msg.SAPData.LineId) SQLRequest = SQLRequest + \" AND (Line.[szNumberSAP] = N'\" + msg.SAPData.LineId + \"')\";\n    }\n    if (msg.SAPData.EndStartDateTime) {\n        SQLRequest = SQLRequest + \" AND (ProductionSchedule.[dtStart] <= '\" + msg.SAPData.EndStartDateTime.toISOString() + \"')\";\n        if (msg.SAPData.LineId) SQLRequest = SQLRequest + \" AND (Line.[szNumberSAP] = N'\" + msg.SAPData.LineId + \"')\";\n    }\n    if (msg.SAPData.PlantId) {\n        SQLRequest = SQLRequest + \" AND (Plant.[szNumberSAP] = N'\" + msg.SAPData.PlantId + \"')\";\n        if (msg.SAPData.LineId) SQLRequest = SQLRequest + \" AND (Line.[szNumberSAP] = N'\" + msg.SAPData.LineId + \"')\";\n    }\n    if (msg.SAPData.MaterialId) SQLRequest = SQLRequest + \" AND (Material.[szName] = N'\" + msg.SAPData.MaterialId + \"')\";\n    SQLRequest = SQLRequest + \")\\n\" +\n        \"ORDER BY Plant.[szNumberSAP], Line.[szNumberSAP], Material.[szName], ProductionSchedule.[szVersion]\";\n}\nmsg.SQLGetRequest = SQLRequest;\nnode.warn(msg);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 40,
        "wires": [
            [
                "57215092507e32b9"
            ]
        ]
    },
    {
        "id": "57215092507e32b9",
        "type": "switch",
        "z": "87d42e36227889f6",
        "name": "IsSuccess == true",
        "property": "Response.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 40,
        "wires": [
            [
                "2b28958c6a94f08c"
            ],
            [
                "158e1546d8998dcf"
            ]
        ]
    },
    {
        "id": "cf54c9802cc0db16",
        "type": "function",
        "z": "87d42e36227889f6",
        "name": "Create Response",
        "func": "if (msg.SubflowError?.message)\n{\n    var Response =\n    {\n        Value: {},\n        Messages: [],\n        IsSuccess: false\n    };\n    var ErrorMessage = msg.SubflowError?.message;\n    if (msg.SubflowError?.source?.name) ErrorMessage = msg.SubflowError.source.name + \": \" + ErrorMessage;\n    if (msg.SubflowError?.source?.type) ErrorMessage = msg.SubflowError.source.type + \": \" + ErrorMessage;\n    Response.Messages.push(\"Subflow: \" + ErrorMessage);\n    msg.Response = Response;\n    msg.statusCode = 500;\n}\nelse\n{\n    if (msg.SAPData.MSSQLError) msg.statusCode = 500;\n    else\n    {\n        if (msg.Response.IsSuccess) msg.statusCode = 200;\n        else msg.statusCode = 400;\n    }\n}\n\nmsg.payload = msg.Response;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 100,
        "wires": [
            [
                "c7ac7b709078516d"
            ]
        ]
    },
    {
        "id": "088564212d2dde61",
        "type": "function",
        "z": "87d42e36227889f6",
        "name": "GetData",
        "func": "msg.SQLGetRequestError = msg.error;\n\nif (msg.SQLGetRequestError?.details)\n{\n    msg.Response.Messages.push(\"Check Data: \" + msg.SQLGetRequestError.details);\n    msg.SAPData.MSSQLError = true;\n}\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nif (msg.Response.IsSuccess)\n{\n    msg.Response.Value.TotalElements = msg.SQLGetRequestData.length;\n    for (let i = 0; i < msg.SQLGetRequestData.length; i++)\n    {\n        var PlantData = msg.Response.Value.Items.find(el => el.PlantId.toLowerCase() == msg.SQLGetRequestData[i].PlantNumberSAP.toLowerCase());\n        if (!PlantData)\n        {\n            PlantData =\n            {\n                PlantId: msg.SQLGetRequestData[i].PlantNumberSAP,\n                PlanOrders: []\n            };\n            msg.Response.Value.Items.push(PlantData);\n        }\n        var PlanData =\n        {\n            PlanOrderId: msg.SQLGetRequestData[i].ProductionScheduleExternalId,\n            MaterialId: msg.SQLGetRequestData[i].MaterialName,\n            BatchId: msg.SQLGetRequestData[i].ProductionScheduleLotNumber,\n            LineId: msg.SQLGetRequestData[i].LineNumberSAP,\n            Version: msg.SQLGetRequestData[i].ProductionScheduleVersion,\n            ShiftId: null,\n            StartDateTime: msg.SQLGetRequestData[i].ProductionScheduleStart,\n            StopDateTime: msg.SQLGetRequestData[i].ProductionScheduleStop,\n            Amount: msg.SQLGetRequestData[i].ProductionScheduleAmount,\n            Unit: null\n        };\n        PlantData.PlanOrders.push(PlanData);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 100,
        "wires": [
            [
                "cf54c9802cc0db16"
            ]
        ]
    },
    {
        "id": "5ac898080dbd6177",
        "type": "catch",
        "z": "87d42e36227889f6",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 200,
        "y": 160,
        "wires": [
            [
                "8eb9c815614bab5a"
            ]
        ]
    },
    {
        "id": "8eb9c815614bab5a",
        "type": "function",
        "z": "87d42e36227889f6",
        "name": "Save Error Data",
        "func": "msg.SubflowError = msg.error;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 160,
        "wires": [
            [
                "a02acc848a55848a"
            ]
        ]
    },
    {
        "id": "c7ac7b709078516d",
        "type": "function",
        "z": "87d42e36227889f6",
        "name": "Subflow Status",
        "func": "var FillColour = \"yellow\";\nvar Text = \"Processing\";\n\nif (msg.Response)\n{\n    if (msg.Response.IsSuccess) FillColour = \"green\";\n    else FillColour = \"red\";\n    Text = \"Processing Completed. Error Count: \" + msg.Response.Messages.length;\n}\n\nmsg.payload = { fill: FillColour, shape: \"dot\", text: Text };\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "2b28958c6a94f08c",
        "type": "MSSQL",
        "z": "87d42e36227889f6",
        "mssqlCN": "7e5114f542cff14f",
        "name": "Get Data",
        "outField": "SQLGetRequestData",
        "returnType": 0,
        "throwErrors": "0",
        "query": "--Если запись заказов из таблицы tblCtSData\r\nSELECT * FROM [tblCtSDataHistory]\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "SQLGetRequest",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 180,
        "y": 100,
        "wires": [
            [
                "088564212d2dde61"
            ]
        ]
    },
    {
        "id": "c6e733540f15fc48",
        "type": "function",
        "z": "7f6a1556900e92ac",
        "name": "Subflow Status",
        "func": "var FillColour = \"yellow\";\nvar Text = \"Processing\";\n\nif (msg.Response)\n{\n    if (msg.Response.IsSuccess) FillColour = \"green\";\n    else FillColour = \"red\";\n    Text = \"Processing Completed. Error Count: \" + msg.Response.Messages.length;\n}\n\nmsg.payload = { fill: FillColour, shape: \"dot\", text: Text };\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "e9cf5f4dcb5fe58f",
        "type": "function",
        "z": "7f6a1556900e92ac",
        "name": "Check Data and SQLRequest Prepare",
        "func": "//Структура ответа на запрос от SAP\nmsg.Response =\n{\n    Messages : [],\n    IsSuccess : false\n};\n\nmsg.SAPData =\n{\n    IsCreate: false,\n    IsUpdate:false,\n    RequestType: \"UNKNOWN\",\n    PlantId: null,\n    PlantGuid: null,\n    PlanOrders: [],\n    Materials: [],\n    Lines: [],\n    TelegramSettingsError: false,\n    MSSQLError: false,\n    WriteFileError: false\n};\n\n\nmsg.TelegramNumber = \"19\";\nmsg.Telegram = undefined;\nvar Telegrams = global.get(\"Telegram\");\nvar DataValid = false;\nif (Telegrams\n    && (typeof Telegrams?.DataValidGenerateByName == \"function\")\n    && (typeof Telegrams?.DataValidGenerateByObject == \"function\")\n    && (typeof Telegrams?.DataValidCheck == \"function\")\n)\n{\n    msg.Telegram = Telegrams[msg.TelegramNumber];\n    if (msg.Telegram)\n    {\n        DataValid = Telegrams.DataValidCheck(msg.TelegramNumber);\n        if (!DataValid) msg.Response.Messages.push(\"Телеграмма \" + msg.TelegramNumber + \" имеет ошибочные настройки\");\n    }\n    else msg.Response.Messages.push(\"Телеграмма \" + msg.TelegramNumber + \" не настроена\");\n}\nelse msg.Response.Messages.push(\"Глобальный справочник телеграмм не настроен\");\nmsg.SAPData.TelegramSettingsError = (!DataValid);\n\nif (msg.req?.method?.toLowerCase() == \"post\")\n{\n    if (msg.req?.url?.toLowerCase()?.endsWith(\"create\"))\n    {\n        msg.SAPData.IsCreate = true;\n        msg.SAPData.RequestType = \"Create\";\n    }\n    if (msg.req?.url?.toLowerCase()?.endsWith(\"update\"))\n    {\n        msg.SAPData.IsUpdate = true;\n        msg.SAPData.RequestType = \"Update\";\n    }\n}\nif (!(msg.SAPData.IsCreate ^ msg.SAPData.IsUpdate)) msg.Response.Messages.push(\"Неизвестный метод запроса на шаге получения данных\");\n\n//msg.SAPRequest.Data = JSON.parse(msg.SAPRequest?.Data);\nif (\"plantid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.plantid && (msg.SAPRequest.Data.plantid != \"\")) msg.SAPData.PlantId = msg.SAPRequest.Data.plantid;\n    else msg.Response.Messages.push(\"Поле plantid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле plantid отсутствует\");\n\nvar PlanOrderIdsString = \"\";\nvar MaterialIdsString = \"\";\nvar LineIdsString = \"\";\nif (\"planorders\" in msg.SAPRequest?.Data)\n{\n    if (Array.isArray(msg.SAPRequest.Data.planorders))\n    {\n        if (msg.SAPRequest.Data.planorders.length > 0)\n        {\n            for (let i = 0; i < msg.SAPRequest.Data.planorders.length; i++)\n            {\n                var PlanOrder = msg.SAPRequest.Data.planorders[i];\n                var MaterialData = undefined;\n                var LineData = undefined;\n\n                var PlanOrderData =\n                {\n                    PlanOrderId: undefined,\n                    PlanOrderGuid: null,\n                    Material: undefined,\n                    BatchId: null,\n                    Line: undefined,\n                    Version: undefined,\n                    ShiftId: null,\n                    StartDateTimeOrigin: undefined,\n                    StartDateTime: undefined,\n                    StartDateTimeUTC: undefined,\n                    StopDateTimeOrigin: undefined,\n                    StopDateTime: undefined,\n                    StopDateTimeUTC: undefined,\n                    Amount: undefined,\n                    Unit: null\n                };\n\n                var PlanOrderDataValid = true;\n\n                if (\"planorderid\" in PlanOrder)\n                {\n                    if (PlanOrder.planorderid && (PlanOrder.planorderid != \"\"))\n                    {\n                        var PlanOrderId = msg.SAPData.PlanOrders.find(el => el.PlanOrderId.toLowerCase() == PlanOrder.planorderid.toLowerCase());\n                        if (!PlanOrderId)\n                        {\n                            PlanOrderData.PlanOrderId = PlanOrder.planorderid;\n                            if (PlanOrderIdsString != \"\") PlanOrderIdsString = PlanOrderIdsString + \", \";\n                            PlanOrderIdsString = PlanOrderIdsString + \"N'\" + PlanOrderData.PlanOrderId.toString() + \"'\";\n                        }\n                        else msg.Response.Messages.push(\"Получено несколько записей с planOrderID = \" + PlanOrder.planorderid);\n                    }\n                    else msg.Response.Messages.push(\"Поле planorderid должно иметь значение (\" + JSON.stringify(PlanOrder) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле planorderid отсутствует (\" + JSON.stringify(PlanOrder) + \")\");\n                PlanOrderDataValid = PlanOrderDataValid && (PlanOrderData.PlanOrderId != undefined);\n\n                if (\"materialid\" in PlanOrder)\n                {\n                    if (PlanOrder.materialid && (PlanOrder.materialid != \"\"))\n                    {\n                        MaterialData = msg.SAPData.Materials.find(el => el.Id.toLowerCase() == PlanOrder.materialid.toLowerCase());\n                        if (!MaterialData)\n                        {\n                            MaterialData =\n                            {\n                                Id: PlanOrder.materialid,\n                                Guid: null,\n                            };\n                            msg.SAPData.Materials.push(MaterialData);\n                        }\n                        PlanOrderData.Material = MaterialData;\n                        if (MaterialIdsString != \"\") MaterialIdsString = MaterialIdsString + \", \";\n                        MaterialIdsString = MaterialIdsString + \"N'\" + PlanOrderData.Material.Id.toString() + \"'\";\n                    }\n                    else msg.Response.Messages.push(\"Поле materialid должно иметь значение (\" + JSON.stringify(PlanOrder) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле materialid отсутствует (\" + JSON.stringify(PlanOrder) + \")\");\n                PlanOrderDataValid = PlanOrderDataValid && (PlanOrderData.Material != undefined);\n\n                if (\"batchid\" in PlanOrder)\n                {\n                    if (PlanOrder.batchid && (PlanOrder.batchid != \"\")) PlanOrderData.BatchId = PlanOrder.batchid;\n                    else msg.Response.Messages.push(\"Поле batchid должно иметь значение (\" + JSON.stringify(PlanOrder) + \")\");\n                }\n\n                if (\"lineid\" in PlanOrder)\n                {\n                    if (PlanOrder.lineid && (PlanOrder.lineid != \"\"))\n                    {\n                        LineData = msg.SAPData.Lines.find(el => el.Id.toLowerCase() == PlanOrder.lineid.toLowerCase());\n                        if (!LineData)\n                        {\n                            LineData =\n                            {\n                                Id: PlanOrder.lineid,\n                                Guid: null\n                            };\n                            msg.SAPData.Lines.push(LineData);\n                        }\n                        PlanOrderData.Line = LineData;\n                        if (LineIdsString != \"\") LineIdsString = LineIdsString + \", \";\n                        LineIdsString = LineIdsString + \"N'\" + PlanOrderData.Line.Id.toString() + \"'\";\n                    }\n                    else msg.Response.Messages.push(\"Поле lineid должно иметь значение (\" + JSON.stringify(PlanOrder) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле lineid отсутствует (\" + JSON.stringify(PlanOrder) + \")\");\n                PlanOrderDataValid = PlanOrderDataValid && (PlanOrderData.Line != undefined);\n\n                if (\"version\" in PlanOrder)\n                {\n                    if (PlanOrder.version && (PlanOrder.version != \"\")) PlanOrderData.Version = PlanOrder.version;\n                    else msg.Response.Messages.push(\"Поле version должно иметь значение (\" + JSON.stringify(PlanOrder) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле version отсутствует (\" + JSON.stringify(PlanOrder) + \")\");\n                PlanOrderDataValid = PlanOrderDataValid && (PlanOrderData.Version != undefined);\n\n                if (\"shiftid\" in PlanOrder)\n                {\n                    if (PlanOrder.shiftid && (PlanOrder.shiftid != \"\")) PlanOrderData.ShiftId = PlanOrder.shiftid;\n                }\n\n                if (\"startdatetime\" in PlanOrder)\n                {\n                    if (PlanOrder.startdatetime)\n                    {\n                        if (!isNaN(Date.parse(PlanOrder.startdatetime)))\n                        {\n                            if (Date.parse(PlanOrder.startdatetime) > 0)\n                            {\n                                PlanOrderData.StartDateTimeOrigin = PlanOrder.startdatetime;\n                                PlanOrderData.StartDateTime = new Date(PlanOrderData.StartDateTimeOrigin);\n                                PlanOrderData.StartDateTimeUTC = PlanOrderData.StartDateTime?.toISOString();\n                            }\n                        }\n                    }\n                    if (!PlanOrderData.StartDateTime) msg.Response.Messages.push(\"Поле startdatetime должно иметь значение даты позже \\\"1970-01-01T00:00:00.000Z\\\" (\" + JSON.stringify(PlanOrder) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле startdatetime отсутствует (\" + JSON.stringify(PlanOrder) + \")\");\n                PlanOrderDataValid = PlanOrderDataValid && (PlanOrderData.StartDateTime != undefined);\n\n                if (\"stopdatetime\" in PlanOrder)\n                {\n                    if (PlanOrder.stopdatetime)\n                    {\n                        if (!isNaN(Date.parse(PlanOrder.stopdatetime)))\n                        {\n                            if (Date.parse(PlanOrder.stopdatetime) > 0)\n                            {\n                                PlanOrderData.StopDateTimeOrigin = PlanOrder.stopdatetime;\n                                PlanOrderData.StopDateTime = new Date(PlanOrderData.StopDateTimeOrigin);\n                                PlanOrderData.StopDateTimeUTC = PlanOrderData.StopDateTime?.toISOString();\n                                if (PlanOrderData?.StopDateTime <= PlanOrderData?.StartDateTime) msg.Response.Messages.push(\"Значение startdatetime должно быть раньше значения stopdatetime (\" + JSON.stringify(PlanOrder) + \")\");\n                            }\n                        }\n                    }\n                    if (!PlanOrderData.StopDateTime) msg.Response.Messages.push(\"Поле stopdatetime должно иметь значение даты позже \\\"1970-01-01T00:00:00.000Z\\\" (\" + JSON.stringify(PlanOrder) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле stopdatetime отсутствует (\" + JSON.stringify(PlanOrder) + \")\");\n                PlanOrderDataValid = PlanOrderDataValid && (PlanOrderData.StopDateTime != undefined);\n\n                if (\"amount\" in PlanOrder)\n                {\n                    if (PlanOrder.amount != null)\n                    {\n                        if (!isNaN(parseFloat(PlanOrder.amount))) PlanOrderData.Amount = parseFloat(PlanOrder.amount);\n                    }\n                    if (!PlanOrderData.Amount && PlanOrderData.Amount != 0) msg.Response.Messages.push(\"Поле amount должно иметь числовое значение (\" + JSON.stringify(PlanOrder) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле amount отсутствует (\" + JSON.stringify(PlanOrder) + \")\");\n                PlanOrderDataValid = PlanOrderDataValid && (PlanOrderData.Amount != undefined);\n\n                if (\"unit\" in PlanOrder)\n                {\n                    if (PlanOrder.unit && (PlanOrder.unit != \"\")) PlanOrderData.Unit = PlanOrder.unit;\n                }\n\n                if (PlanOrderDataValid) msg.SAPData.PlanOrders.push(PlanOrderData);\n            }\n        }\n        else msg.Response.Messages.push(\"Поле planorders имеет нулевую длину\");\n    }\n    else msg.Response.Messages.push(\"planorders должен быть типа Array\");\n}\nelse msg.Response.Messages.push(\"Поле planorders отсутствует\");\n\nvar EquipmentTreeTable = global.get(\"DBTable\")?.EquipmentTree;\nif ((!EquipmentTreeTable) || (!EquipmentTreeTable?.DBTable)) msg.Response.Messages.push(\"Таблица дерева оборудования не сконфигурирована\");\n\nvar ProductionScheduleTable = global.get(\"DBTable\")?.ProductionSchedule;\nif ((!ProductionScheduleTable) || (!ProductionScheduleTable?.DBTable)) msg.Response.Messages.push(\"Таблица планов производства не сконфигурирована\");\n\nvar MaterialTable = global.get(\"DBTable\")?.Material;\nif ((!MaterialTable) || (!MaterialTable?.DBTable)) msg.Response.Messages.push(\"Таблица материалов не сконфигурирована\");\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nvar SQLRequest = \"\";\nif (msg.Response.IsSuccess)\n{\n    //Поиск Guid для PlantId\n    SQLRequest = SQLRequest +\n        \"SELECT\\n\\t\" +\n            \"'0' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'PlantGuid',\\n\\t\" +\n            \"NULL AS 'EquipmentType',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleMaterialId',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleLineId',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleVersion',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleLotNumber'\\n\" +\n        \"FROM \" + EquipmentTreeTable.DBTable + \"\\n\" +\n        \"WHERE ([szNumberSAP] = N'\" + msg.SAPData.PlantId + \"')\\n\" +\n    //Поиск Guid для PlanOrderId\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'1' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szExternalId] AS 'Id',\\n\\t\" +\n            \"[gAccessId] AS 'PlantGuid',\\n\\t\" +\n            \"NULL AS 'EquipmentType',\\n\\t\" +\n            \"[gMaterialId] AS 'ProductionScheduleMaterialId',\\n\\t\" +\n            \"[gLineId] AS 'ProductionScheduleLineId',\\n\\t\" +\n            \"[szVersion] AS 'ProductionScheduleVersion',\\n\\t\" +\n            \"[szLotNumber] AS 'ProductionScheduleLotNumber'\\n\" +\n        \"FROM \" + ProductionScheduleTable.DBTable + \"\\n\" +\n        \"WHERE ([szExternalId] IN (\" + PlanOrderIdsString + \"))\\n\" +\n    //Поиск Guid для MaterialId\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'2' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'PlantGuid',\\n\\t\" +\n            \"NULL AS 'EquipmentType',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleMaterialId',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleLineId',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleVersion',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleLotNumber'\\n\" +\n        \"FROM \" + MaterialTable.DBTable + \"\\n\" +\n        \"WHERE ([szName] IN (\" + MaterialIdsString + \"))\\n\" +\n    //Поиск Guid для LineId\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'3' AS 'Type',\\n\\t\" +\n            \"Line.[gId] AS 'Guid',\\n\\t\" +\n            \"Line.[szNumberSAP] AS 'Id',\\n\\t\" +\n            \"Line.[gAccessId] AS 'PlantGuid',\\n\\t\" +\n            \"Line.[nType] AS 'EquipmentType',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleMaterialId',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleLineId',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleVersion',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleLotNumber'\\n\" +\n        \"FROM \" + EquipmentTreeTable.DBTable + \" AS Line\\n\\t\" +\n            \"INNER JOIN \" + EquipmentTreeTable.DBTable + \" AS Plant ON (Plant.[gId] = Line.[gAccessId])\\n\" +\n        \"WHERE ((Line.[szNumberSAP] IN (\" + LineIdsString + \")) AND (Line.[nType] = 4) AND (Plant.[szNumberSAP] = N'\" + msg.SAPData.PlantId + \"'))\\n\";\n}\nmsg.SQLCheckRequest = SQLRequest;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 40,
        "wires": [
            [
                "bd1eb5dc39361264"
            ]
        ]
    },
    {
        "id": "bd1eb5dc39361264",
        "type": "switch",
        "z": "7f6a1556900e92ac",
        "name": "IsSuccess == true",
        "property": "Response.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 40,
        "wires": [
            [
                "1ed425dbef6366d2"
            ],
            [
                "a071dafbf651a1d6"
            ]
        ]
    },
    {
        "id": "b8ce50adf15323e4",
        "type": "function",
        "z": "7f6a1556900e92ac",
        "name": "Create Response",
        "func": "if (msg.SubflowError?.message)\n{\n    var Response =\n    {\n        Value: {},\n        Messages: [],\n        IsSuccess: false\n    };\n    var ErrorMessage = msg.SubflowError?.message;\n    if (msg.SubflowError?.source?.name) ErrorMessage = msg.SubflowError.source.name + \": \" + ErrorMessage;\n    if (msg.SubflowError?.source?.type) ErrorMessage = msg.SubflowError.source.type + \": \" + ErrorMessage;\n    Response.Messages.push(\"Subflow: \" + ErrorMessage);\n    msg.Response = Response;\n    msg.statusCode = 500;\n}\nelse\n{\n    if (msg.SAPData.MSSQLError || msg.SAPData.WriteFileError || msg.SAPData.TelegramSettingsError) msg.statusCode = 500;\n    else\n    {\n        if (msg.Response.IsSuccess) msg.statusCode = 200;\n        else msg.statusCode = 400;\n    }\n}\n\nmsg.payload = msg.Response;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 220,
        "wires": [
            [
                "c6e733540f15fc48"
            ]
        ]
    },
    {
        "id": "954e99e563b4d922",
        "type": "function",
        "z": "7f6a1556900e92ac",
        "name": "Check Data",
        "func": "msg.SQLCheckRequestError = msg.error;\n\nif (msg.SQLCheckRequestError?.details)\n{\n    msg.Response.Messages.push(\"Check Data: \" + msg.SQLCheckRequestError.details);\n    msg.SAPData.MSSQLError = true;\n}\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nif (msg.Response.IsSuccess)\n{\n    var PlantId = msg.SQLCheckRequestData.filter(el => el.Type == 0);\n    if (PlantId.length > 0)\n    {\n        if (PlantId.length > 1) msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" имеет дубликаты\");\n        else msg.SAPData.PlantGuid = PlantId[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" не найден\");\n\n    var MaterialIds = msg.SQLCheckRequestData.filter(el => el.Type == 2);\n    if (MaterialIds.length > 0)\n    {\n        for (let i = 0; i < msg.SAPData.Materials.length; i++)\n        {\n            var Material = MaterialIds.filter(el => el.Id == msg.SAPData.Materials[i].Id);\n            if (Material.length > 0)\n            {\n                if (Material.length > 1) msg.Response.Messages.push(\"Материал с ID = \" + msg.SAPData.Materials[i].Id + \" имеет дубликаты\");\n                else msg.SAPData.Materials[i].Guid = Material[0].Guid;\n            }\n            else msg.Response.Messages.push(\"Материал с ID = \" + msg.SAPData.Materials[i].Id + \" не найден\");\n        };\n    }\n    else msg.Response.Messages.push(\"Ни один из материалов не найден\");\n\n    var LineIds = msg.SQLCheckRequestData.filter(el => el.Type == 3);\n    if (LineIds.length > 0)\n    {\n        for (let i = 0; i < msg.SAPData.Lines.length; i++)\n        {\n            var Line = LineIds.filter(el => el.Id == msg.SAPData.Lines[i].Id);\n            if (Line.length > 0)\n            {\n                if (Line.length > 1) msg.Response.Messages.push(\"Для предприятия с ID = \" + msg.SAPData.PlantId + \" линия с ID = \" + msg.SAPData.Lines[i].Id + \" имеет дубликаты\");\n                else msg.SAPData.Lines[i].Guid = Line[0].Guid;\n            }\n            else msg.Response.Messages.push(\"Для предприятия с ID = \" + msg.SAPData.PlantId + \" не найдена линия с ID = \" + msg.SAPData.Lines[i].Id);\n        };\n    }\n    else msg.Response.Messages.push(\"Для предприятия с ID = \" + msg.SAPData.PlantId + \" не найдена на одна из линий\");\n\n    var PlanOrderIds = msg.SQLCheckRequestData.filter(el => el.Type == 1);\n    if (msg.SAPData.IsCreate)\n    {\n        if (PlanOrderIds.length > 0)\n        {\n            for (let i = 0; i < PlanOrderIds.length; i++) msg.Response.Messages.push(\"Заказ с ID = \" + PlanOrderIds[i].Id + \" уже создан\");\n        }\n    }\n    else\n    {\n        if (msg.SAPData.IsUpdate)\n        {\n            if (PlanOrderIds.length > 0)\n            {\n                for (let i = 0; i < msg.SAPData.PlanOrders.length; i++)\n                {\n                    var PlanOrder = PlanOrderIds.filter(el => el.Id?.toLowerCase() == msg.SAPData.PlanOrders[i].PlanOrderId?.toLowerCase())\n                    if (PlanOrder.length > 0)\n                    {\n                        if (PlanOrder.length > 1) msg.Response.Messages.push(\"Заказ с ID = \" + msg.SAPData.PlanOrders[i].PlanOrderId + \" имеет дубликаты\");\n                        else\n                        {\n                            if (PlanOrder[0].PlantGuid?.toLowerCase() == msg.SAPData.PlantGuid?.toLowerCase())\n                            {\n                                msg.SAPData.PlanOrders[i].PlanOrderGuid = PlanOrder[0].Guid;\n                                if (!msg.SAPData.PlanOrders[i].PlanOrderGuid) msg.Response.Messages.push(\"У заказа с ID = \" + msg.SAPData.PlanOrders[i].PlanOrderId + \" нет Guid\");\n                            }\n                            else msg.Response.Messages.push(\"Заказ с ID = \" + msg.SAPData.PlanOrders[i].PlanOrderId + \" поменял завод, что недопустимо\");\n                            if (PlanOrder[0].ProductionScheduleMaterialId?.toLowerCase() != msg.SAPData.PlanOrders[i].Material?.Guid?.toLowerCase()) msg.Response.Messages.push(\"Заказ с ID = \" + msg.SAPData.PlanOrders[i].PlanOrderId + \" поменял материал, что недопустимо\");\n                            if (PlanOrder[0].ProductionScheduleLineId?.toLowerCase() != msg.SAPData.PlanOrders[i].Line?.Guid?.toLowerCase()) msg.Response.Messages.push(\"Заказ с ID = \" + msg.SAPData.PlanOrders[i].PlanOrderId + \" поменял линию, что недопустимо\");\n                            if (PlanOrder[0].ProductionScheduleVersion?.toLowerCase() != msg.SAPData.PlanOrders[i].Version?.toLowerCase()) msg.Response.Messages.push(\"Заказ с ID = \" + msg.SAPData.PlanOrders[i].PlanOrderId + \" поменял версию, что недопустимо\");\n                            //MT закомментировала строку 14.07 09:00\n                            //if (PlanOrder[0].ProductionScheduleLotNumber?.toLowerCase() != msg.SAPData.PlanOrders[i].BatchId?.toLowerCase()) msg.Response.Messages.push(\"Заказ с ID = \" + msg.SAPData.PlanOrders[i].PlanOrderId + \" поменял партию, что недопустимо\");\n                        }\n                    }\n                    else msg.Response.Messages.push(\"Заказ с ID = \" + msg.SAPData.PlanOrders[i].PlanOrderId + \" не найден\");\n                }\n            }\n            else msg.Response.Messages.push(\"Ни один из заказов не найден\");\n        }\n        else msg.Response.Messages.push(\"Неизвестный метод запроса на шаге проверки данных\");\n    }\n\n    msg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 100,
        "wires": [
            [
                "64eecefa6bc28f66"
            ]
        ]
    },
    {
        "id": "64eecefa6bc28f66",
        "type": "switch",
        "z": "7f6a1556900e92ac",
        "name": "IsSuccess == true",
        "property": "Response.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 100,
        "wires": [
            [
                "646e107633700baa"
            ],
            [
                "91e974ba02333b08"
            ]
        ]
    },
    {
        "id": "d577f6ec3afcb049",
        "type": "function",
        "z": "7f6a1556900e92ac",
        "name": "Save Plan Orders Data",
        "func": "var fs = global.get(\"fsextra\");\nvar FilesFolder = msg.Telegram?.Folder?.FilesFolder?.Path; //Каталог хранения кучи файлов заявок\nvar FilePrefix = msg.Telegram?.FilePrefix; //Префикс файлов запроса и ответа (без нижнего подчёркивания)\nvar FileType = msg.Telegram?.Folder?.FilesFolder?.FileType; //Тип файла\nvar StartDateTime = new Date(); //Дата и время начала создания файлов\nvar StartDateTimeString = StartDateTime.getFullYear()\n    + ('0' + (StartDateTime.getMonth() + 1)).slice(-2)\n    + ('0' + StartDateTime.getDate()).slice(-2);\nvar StartDateTimeString_log = StartDateTime.getFullYear()\n    + ('0' + (StartDateTime.getMonth() + 1)).slice(-2)\n    + ('0' + StartDateTime.getDate()).slice(-2) + \"_\"\n    + ('0' + StartDateTime.getHours()).slice(-2)\n    + ('0' + StartDateTime.getMinutes()).slice(-2)\n    + ('0' + StartDateTime.getSeconds()).slice(-2);\nmsg.StartDateTime = StartDateTime;\nmsg.StartDateTimeString = StartDateTimeString;\n\nvar FileMethodName = \"\";\nif (msg.SAPData.IsCreate) FileMethodName = \"Create\";\nelse\n{\n    if (msg.SAPData.IsUpdate) FileMethodName = \"Update\";\n    else msg.Response.Messages.push(\"Неизвестный метод запроса на шаге сохранения данных в файл\");\n}\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nif (msg.Response.IsSuccess)\n{\n    //Проверка каталога хранения кучи файлов заявок\n    if (FilesFolder && (FilesFolder != \"\") && FileType && (FileType != \"\"))\n    {\n        if (fs.pathExistsSync(FilesFolder))\n        {\n            var MethodName = \"\";\n            if (msg.SAPData.IsCreate) MethodName = \"CreateSchedule\";\n            else\n            {\n                if (msg.SAPData.IsUpdate) MethodName = \"UpdateSchedule\";\n            }\n            var IsSuccess = true;\n            for (let i = 0; (i < msg.SAPData.PlanOrders.length) && IsSuccess; i++)\n            {\n                var PlanOrderData = {};\n                if (msg.SAPData.IsCreate)\n                {\n                    PlanOrderData.externalId = msg.SAPData.PlanOrders[i].PlanOrderId;\n                    PlanOrderData.accessId = msg.SAPData.PlantGuid;\n                    PlanOrderData.materialId = msg.SAPData.PlanOrders[i].Material.Guid;\n                }\n                else\n                {\n                    if (msg.SAPData.IsUpdate)\n                    {\n                        PlanOrderData.id = msg.SAPData.PlanOrders[i].PlanOrderGuid;\n                    }\n                }\n                PlanOrderData.lineId = msg.SAPData.PlanOrders[i].Line.Guid;\n                PlanOrderData.start = msg.SAPData.PlanOrders[i].StartDateTimeUTC;\n                PlanOrderData.stop = msg.SAPData.PlanOrders[i].StopDateTimeUTC;\n                PlanOrderData.amount = msg.SAPData.PlanOrders[i].Amount;\n                PlanOrderData.unit = msg.SAPData.PlanOrders[i].Unit;\n                PlanOrderData.version = msg.SAPData.PlanOrders[i].Version;\n                PlanOrderData.lotNumber = msg.SAPData.PlanOrders[i].BatchId;\n                PlanOrderData.shiftRuntimeId = msg.SQLShiftRequestData.find(i => new Date(i.Date).getTime() == new Date(PlanOrderData.stop).getTime()).ShiftRuntimeId;\n                \n                var SaveData =\n                {\n                    Date: StartDateTimeString_log,\n                    API: MethodName,\n                    Table: \"\",\n                    Data: PlanOrderData\n                };\n                var FileName = FilePrefix + \"_\" + StartDateTimeString + \"_\" + FileMethodName + \"_\" + msg.SAPData.PlantId + \"_\" + msg.SAPData.PlanOrders[i].PlanOrderId + \".\" + FileType;\n                var FileNameFull = FilesFolder + FileName;\n                var FileData = JSON.stringify(SaveData, null, \"\\t\");\n                IsSuccess = false;\n                //Запись данных в файл\n                try\n                {\n                    fs.appendFile(FileNameFull, FileData);\n                }\n                catch (ex)\n                {\n                    msg.Response.Messages.push(\"Ошибка записи данных в файл \" + FileName + \" (\" + ex + \")\");\n                }\n                //Проверка существования конечного файла\n                if (fs.existsSync(FileNameFull)) IsSuccess = true;\n                else msg.Response.Messages.push(\"Конечный файл \" + FileName + \" не существует\");\n                msg.SAPData.WriteFileError = (!IsSuccess);\n            }\n        }\n        else msg.Response.Messages.push(\"Каталог приёма заявок на существует\");\n    }\n    else msg.Response.Messages.push(\"Каталог телаграммы \" + msg.TelegramNumber + \" не задан\");\n\n    msg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 220,
        "wires": [
            [
                "b8ce50adf15323e4"
            ]
        ]
    },
    {
        "id": "7280b9f5ba61ab94",
        "type": "catch",
        "z": "7f6a1556900e92ac",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 200,
        "y": 280,
        "wires": [
            [
                "9ea3657ae3ba73ae"
            ]
        ]
    },
    {
        "id": "9ea3657ae3ba73ae",
        "type": "function",
        "z": "7f6a1556900e92ac",
        "name": "Save Error Data",
        "func": "msg.SubflowError = msg.error;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 280,
        "wires": [
            [
                "c64ff498cef45668"
            ]
        ]
    },
    {
        "id": "458ae810b3b44c23",
        "type": "function",
        "z": "7f6a1556900e92ac",
        "name": "Check Data and SQLRequest Prepare",
        "func": "//Структура ответа на запрос от SAP\nmsg.Response =\n{\n    Messages : [],\n    IsSuccess : false\n};\n\nmsg.SAPData =\n{\n    IsCreate: false,\n    IsUpdate:false,\n    RequestType: \"UNKNOWN\",\n    PlantId: null,\n    PlantGuid: null,\n    PlanOrders: [],\n    Materials: [],\n    Lines: [],\n    TelegramSettingsError: false,\n    MSSQLError: false,\n    WriteFileError: false\n};\n\n\nmsg.TelegramNumber = \"19\";\nmsg.Telegram = undefined;\nvar Telegrams = global.get(\"Telegram\");\nvar DataValid = false;\nif (Telegrams\n    && (typeof Telegrams?.DataValidGenerateByName == \"function\")\n    && (typeof Telegrams?.DataValidGenerateByObject == \"function\")\n    && (typeof Telegrams?.DataValidCheck == \"function\")\n)\n{\n    msg.Telegram = Telegrams[msg.TelegramNumber];\n    if (msg.Telegram)\n    {\n        DataValid = Telegrams.DataValidCheck(msg.TelegramNumber);\n        if (!DataValid) msg.Response.Messages.push(\"Телеграмма \" + msg.TelegramNumber + \" имеет ошибочные настройки\");\n    }\n    else msg.Response.Messages.push(\"Телеграмма \" + msg.TelegramNumber + \" не настроена\");\n}\nelse msg.Response.Messages.push(\"Глобальный справочник телеграмм не настроен\");\nmsg.SAPData.TelegramSettingsError = (!DataValid);\n\nif (msg.req?.method?.toLowerCase() == \"post\")\n{\n    if (msg.req?.url?.toLowerCase()?.endsWith(\"create\"))\n    {\n        msg.SAPData.IsCreate = true;\n        msg.SAPData.RequestType = \"Create\";\n    }\n    if (msg.req?.url?.toLowerCase()?.endsWith(\"update\"))\n    {\n        msg.SAPData.IsUpdate = true;\n        msg.SAPData.RequestType = \"Update\";\n    }\n}\nif (!(msg.SAPData.IsCreate ^ msg.SAPData.IsUpdate)) msg.Response.Messages.push(\"Неизвестный метод запроса на шаге получения данных\");\n\nif (\"plantid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.plantid && (msg.SAPRequest.Data.plantid != \"\")) msg.SAPData.PlantId = msg.SAPRequest.Data.plantid;\n    else msg.Response.Messages.push(\"Поле plantid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле plantid отсутствует\");\n\nvar PlanOrderIdsString = \"\";\nvar MaterialIdsString = \"\";\nvar LineIdsString = \"\";\nif (\"planorders\" in msg.SAPRequest?.Data)\n{\n    if (Array.isArray(msg.SAPRequest.Data.planorders))\n    {\n        if (msg.SAPRequest.Data.planorders.length > 0)\n        {\n            for (let i = 0; i < msg.SAPRequest.Data.planorders.length; i++)\n            {\n                var PlanOrder = msg.SAPRequest.Data.planorders[i];\n                var MaterialData = undefined;\n                var LineData = undefined;\n\n                var PlanOrderData =\n                {\n                    PlanOrderId: undefined,\n                    PlanOrderGuid: null,\n                    Material: undefined,\n                    BatchId: null,\n                    Line: undefined,\n                    Version: undefined,\n                    ShiftId: null,\n                    StartDateTimeOrigin: undefined,\n                    StartDateTime: undefined,\n                    StartDateTimeUTC: undefined,\n                    StopDateTimeOrigin: undefined,\n                    StopDateTime: undefined,\n                    StopDateTimeUTC: undefined,\n                    Amount: undefined,\n                    Unit: null\n                };\n\n                var PlanOrderDataValid = true;\n\n                if (\"planorderid\" in PlanOrder)\n                {\n                    if (PlanOrder.planorderid && (PlanOrder.planorderid != \"\"))\n                    {\n                        var PlanOrderId = msg.SAPData.PlanOrders.find(el => el.PlanOrderId.toLowerCase() == PlanOrder.planorderid.toLowerCase());\n                        if (!PlanOrderId)\n                        {\n                            PlanOrderData.PlanOrderId = PlanOrder.planorderid;\n                            if (PlanOrderIdsString != \"\") PlanOrderIdsString = PlanOrderIdsString + \", \";\n                            PlanOrderIdsString = PlanOrderIdsString + \"N'\" + PlanOrderData.PlanOrderId.toString() + \"'\";\n                        }\n                        else msg.Response.Messages.push(\"Получено несколько записей с planOrderID = \" + PlanOrder.planorderid);\n                    }\n                    else msg.Response.Messages.push(\"Поле planorderid должно иметь значение (\" + JSON.stringify(PlanOrder) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле planorderid отсутствует (\" + JSON.stringify(PlanOrder) + \")\");\n                PlanOrderDataValid = PlanOrderDataValid && (PlanOrderData.PlanOrderId != undefined);\n\n                if (\"materialid\" in PlanOrder)\n                {\n                    if (PlanOrder.materialid && (PlanOrder.materialid != \"\"))\n                    {\n                        MaterialData = msg.SAPData.Materials.find(el => el.Id.toLowerCase() == PlanOrder.materialid.toLowerCase());\n                        if (!MaterialData)\n                        {\n                            MaterialData =\n                            {\n                                Id: PlanOrder.materialid,\n                                Guid: null,\n                            };\n                            msg.SAPData.Materials.push(MaterialData);\n                        }\n                        PlanOrderData.Material = MaterialData;\n                        if (MaterialIdsString != \"\") MaterialIdsString = MaterialIdsString + \", \";\n                        MaterialIdsString = MaterialIdsString + \"N'\" + PlanOrderData.Material.Id.toString() + \"'\";\n                    }\n                    else msg.Response.Messages.push(\"Поле materialid должно иметь значение (\" + JSON.stringify(PlanOrder) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле materialid отсутствует (\" + JSON.stringify(PlanOrder) + \")\");\n                PlanOrderDataValid = PlanOrderDataValid && (PlanOrderData.Material != undefined);\n\n                if (\"batchid\" in PlanOrder)\n                {\n                    if (PlanOrder.batchid && (PlanOrder.batchid != \"\")) PlanOrderData.BatchId = PlanOrder.batchid;\n                    else msg.Response.Messages.push(\"Поле batchid должно иметь значение (\" + JSON.stringify(PlanOrder) + \")\");\n                }\n\n                if (\"lineid\" in PlanOrder)\n                {\n                    if (PlanOrder.lineid && (PlanOrder.lineid != \"\"))\n                    {\n                        LineData = msg.SAPData.Lines.find(el => el.Id.toLowerCase() == PlanOrder.lineid.toLowerCase());\n                        if (!LineData)\n                        {\n                            LineData =\n                            {\n                                Id: PlanOrder.lineid,\n                                Guid: null\n                            };\n                            msg.SAPData.Lines.push(LineData);\n                        }\n                        PlanOrderData.Line = LineData;\n                        if (LineIdsString != \"\") LineIdsString = LineIdsString + \", \";\n                        LineIdsString = LineIdsString + \"N'\" + PlanOrderData.Line.Id.toString() + \"'\";\n                    }\n                    else msg.Response.Messages.push(\"Поле lineid должно иметь значение (\" + JSON.stringify(PlanOrder) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле lineid отсутствует (\" + JSON.stringify(PlanOrder) + \")\");\n                PlanOrderDataValid = PlanOrderDataValid && (PlanOrderData.Line != undefined);\n\n                if (\"version\" in PlanOrder)\n                {\n                    if (PlanOrder.version && (PlanOrder.version != \"\")) PlanOrderData.Version = PlanOrder.version;\n                    else msg.Response.Messages.push(\"Поле version должно иметь значение (\" + JSON.stringify(PlanOrder) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле version отсутствует (\" + JSON.stringify(PlanOrder) + \")\");\n                PlanOrderDataValid = PlanOrderDataValid && (PlanOrderData.Version != undefined);\n\n                if (\"shiftid\" in PlanOrder)\n                {\n                    if (PlanOrder.shiftid && (PlanOrder.shiftid != \"\")) PlanOrderData.ShiftId = PlanOrder.shiftid;\n                }\n\n                if (\"startdatetime\" in PlanOrder)\n                {\n                    if (PlanOrder.startdatetime)\n                    {\n                        if (!isNaN(Date.parse(PlanOrder.startdatetime)))\n                        {\n                            if (Date.parse(PlanOrder.startdatetime) > 0)\n                            {\n                                PlanOrderData.StartDateTimeOrigin = PlanOrder.startdatetime;\n                                PlanOrderData.StartDateTime = new Date(PlanOrderData.StartDateTimeOrigin);\n                                PlanOrderData.StartDateTimeUTC = PlanOrderData.StartDateTime?.toISOString();\n                            }\n                        }\n                    }\n                    if (!PlanOrderData.StartDateTime) msg.Response.Messages.push(\"Поле startdatetime должно иметь значение даты позже \\\"1970-01-01T00:00:00.000Z\\\" (\" + JSON.stringify(PlanOrder) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле startdatetime отсутствует (\" + JSON.stringify(PlanOrder) + \")\");\n                PlanOrderDataValid = PlanOrderDataValid && (PlanOrderData.StartDateTime != undefined);\n\n                if (\"stopdatetime\" in PlanOrder)\n                {\n                    if (PlanOrder.stopdatetime)\n                    {\n                        if (!isNaN(Date.parse(PlanOrder.stopdatetime)))\n                        {\n                            if (Date.parse(PlanOrder.stopdatetime) > 0)\n                            {\n                                PlanOrderData.StopDateTimeOrigin = PlanOrder.stopdatetime;\n                                PlanOrderData.StopDateTime = new Date(PlanOrderData.StopDateTimeOrigin);\n                                PlanOrderData.StopDateTimeUTC = PlanOrderData.StopDateTime?.toISOString();\n                                if (PlanOrderData?.StopDateTime <= PlanOrderData?.StartDateTime) msg.Response.Messages.push(\"Значение startdatetime должно быть раньше значения stopdatetime (\" + JSON.stringify(PlanOrder) + \")\");\n                            }\n                        }\n                    }\n                    if (!PlanOrderData.StopDateTime) msg.Response.Messages.push(\"Поле stopdatetime должно иметь значение даты позже \\\"1970-01-01T00:00:00.000Z\\\" (\" + JSON.stringify(PlanOrder) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле stopdatetime отсутствует (\" + JSON.stringify(PlanOrder) + \")\");\n                PlanOrderDataValid = PlanOrderDataValid && (PlanOrderData.StopDateTime != undefined);\n\n                if (\"amount\" in PlanOrder)\n                {\n                    if (PlanOrder.amount)\n                    {\n                        if (!isNaN(parseFloat(PlanOrder.amount))) PlanOrderData.Amount = parseFloat(PlanOrder.amount);\n                    }\n                    if (!PlanOrderData.Amount) msg.Response.Messages.push(\"Поле amount должно иметь числовое значение (\" + JSON.stringify(PlanOrder) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле amount отсутствует (\" + JSON.stringify(PlanOrder) + \")\");\n                PlanOrderDataValid = PlanOrderDataValid && (PlanOrderData.Amount != undefined);\n\n                if (\"unit\" in PlanOrder)\n                {\n                    if (PlanOrder.unit && (PlanOrder.unit != \"\")) PlanOrderData.Unit = PlanOrder.unit;\n                }\n\n                if (PlanOrderDataValid) msg.SAPData.PlanOrders.push(PlanOrderData);\n            }\n        }\n        else msg.Response.Messages.push(\"Поле planorders имеет нулевую длину\");\n    }\n    else msg.Response.Messages.push(\"planorders должен быть типа Array\");\n}\nelse msg.Response.Messages.push(\"Поле planorders отсутствует\");\n\nvar EquipmentTreeTable = global.get(\"DBTable\")?.EquipmentTree;\nif ((!EquipmentTreeTable) || (!EquipmentTreeTable?.DBTable)) msg.Response.Messages.push(\"Таблица дерева оборудования не сконфигурирована\");\n\nvar ProductionScheduleTable = global.get(\"DBTable\")?.ProductionSchedule;\nif ((!ProductionScheduleTable) || (!ProductionScheduleTable?.DBTable)) msg.Response.Messages.push(\"Таблица планов производства не сконфигурирована\");\n\nvar MaterialTable = global.get(\"DBTable\")?.Material;\nif ((!MaterialTable) || (!MaterialTable?.DBTable)) msg.Response.Messages.push(\"Таблица материалов не сконфигурирована\");\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nvar SQLRequest = \"\";\nif (msg.Response.IsSuccess)\n{\n    //Поиск Guid для PlantId\n    SQLRequest = SQLRequest +\n        \"SELECT\\n\\t\" +\n            \"'0' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"NULL AS 'EquipmentType',\\n\\t\" +\n            \"NULL AS 'Description',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleMaterialId',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleLineId',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleVersion',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleLotNumber'\\n\" +\n        \"FROM \" + EquipmentTreeTable.DBTable + \"\\n\" +\n        \"WHERE ([szNumberSAP] = N'\" + msg.SAPData.PlantId + \"')\\n\" +\n    //Поиск Guid для PlanOrderId\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'1' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szExternalId] AS 'Id',\\n\\t\" +\n            \"[gAccessId] AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"NULL AS 'EquipmentType',\\n\\t\" +\n            \"NULL AS 'Description',\\n\\t\" +\n            \"[gMaterialId] AS 'ProductionScheduleMaterialId',\\n\\t\" +\n            \"[gLineId] AS 'ProductionScheduleLineId',\\n\\t\" +\n            \"[szVersion] AS 'ProductionScheduleVersion',\\n\\t\" +\n            \"[szLotNumber] AS 'ProductionScheduleLotNumber'\\n\" +\n        \"FROM \" + ProductionScheduleTable.DBTable + \"\\n\" +\n        \"WHERE ([szExternalId] IN (\" + PlanOrderIdsString + \"))\\n\" +\n    //Поиск Guid для MaterialId\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'2' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"NULL AS 'EquipmentType',\\n\\t\" +\n            \"NULL AS 'Description',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleMaterialId',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleLineId',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleVersion',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleLotNumber'\\n\" +\n        \"FROM \" + MaterialTable.DBTable + \"\\n\" +\n        \"WHERE ([szName] IN (\" + MaterialIdsString + \"))\\n\" +\n    //Поиск Guid для LineId\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'3' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szNumberSAP] AS 'Id',\\n\\t\" +\n            \"NULL AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"NULL AS 'EquipmentType',\\n\\t\" +\n            \"NULL AS 'Description',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleMaterialId',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleLineId',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleVersion',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleLotNumber'\\n\" +\n        \"FROM \" + EquipmentTreeTable.DBTable + \"\\n\" +\n        \"WHERE ([szNumberSAP] IN (\" + LineIdsString + \"))\\n\" +\n    //Получение дерева оборудования\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'4' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szNumberSAP] AS 'Id',\\n\\t\" +\n            \"[gEquipmentTreeId] AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"[nType] AS 'EquipmentType',\\n\\t\" +\n            \"[szDescription] AS 'Description',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleMaterialId',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleLineId',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleVersion',\\n\\t\" +\n            \"NULL AS 'ProductionScheduleLotNumber'\\n\" +\n        \"FROM \" + EquipmentTreeTable.DBTable + \"\\n\";\n}\nmsg.SQLCheckRequest = SQLRequest;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "453e6db9aecb3b7b",
        "type": "function",
        "z": "7f6a1556900e92ac",
        "name": "Check Data",
        "func": "msg.SQLCheckRequestError = msg.error;\n\nif (msg.SQLCheckRequestError?.details)\n{\n    msg.Response.Messages.push(\"Check Data: \" + msg.SQLCheckRequestError.details);\n    msg.SAPData.MSSQLError = true;\n}\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nif (msg.Response.IsSuccess)\n{\n    var PlantId = msg.SQLCheckRequestData.filter(el => el.Type == 0);\n    if (PlantId.length > 0)\n    {\n        if (PlantId.length > 1) msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" имеет дубликаты\");\n        else\n        {\n            msg.SAPData.PlantGuid = PlantId[0].Guid;\n            var EquipmentTree = msg.SQLCheckRequestData.filter(el => el.Type == 4);\n            if (EquipmentTree.length > 0)\n            {\n                var Lines = msg.SQLCheckRequestData.filter(el => el.Type == 3);\n                if (Lines.length > 0)\n                {\n                    for (let i = 0; i < msg.SAPData.Lines.length; i++)\n                    {\n                        var LineIds = Lines.filter(el => el.Id?.toLowerCase() == msg.SAPData.Lines[i].Id.toLowerCase());\n                        if (LineIds.length > 0)\n                        {\n                            for (let j = 0; (!msg.SAPData.Lines[i].Guid) && (j < LineIds.length); j++)\n                            {\n                                var Line = EquipmentTree.find(el => el.Guid?.toLowerCase() == LineIds[j].Guid?.toLowerCase());\n                                if (Line)\n                                {\n                                    var Equipment = Line;\n                                    var ParentGuid = undefined;\n                                    var k = 0;\n                                    for (k = 0; Equipment && (Equipment?.TreeGuid_ParentGuid || (Equipment?.EquipmentType != 1)) && (k < 1000); k++)\n                                    {\n                                        ParentGuid = Equipment.TreeGuid_ParentGuid?.toLowerCase();\n                                        Equipment = EquipmentTree.find(el => el.Guid?.toLowerCase() == ParentGuid);\n                                    }\n                                    if (k < 1000)\n                                    {\n                                        if (Equipment)\n                                        {\n                                            if (Equipment.Guid?.toLowerCase() == PlantId[0].Guid.toLowerCase()) msg.SAPData.Lines[i].Guid = LineIds[j].Guid;\n                                        }\n                                    }\n                                    else msg.Response.Messages.push(\"Для оборудование с ID = \" + LineIds[j].Guid + \" больше 1000 проходов в дереве\");\n                                }\n                                else msg.Response.Messages.push(\"Оборудование с ID = \" + LineIds[j].Guid + \" не найдено в дереве\");\n                            }\n                            if (!msg.SAPData.Lines[i].Guid) msg.Response.Messages.push(\"Для предприятия с ID = \" + msg.SAPData.PlantId + \" не найдена линия с ID = \" + msg.SAPData.Lines[i].Id);\n                        }\n                        else msg.Response.Messages.push(\"Линия с ID = \" + msg.SAPData.Lines[i].Id + \" не найдена\");\n                    }\n                }\n                else msg.Response.Messages.push(\"Ни одна из линий не найдена\");\n            }\n            else msg.Response.Messages.push(\"Дерево оборудования пустое\");\n        }\n    }\n    else msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" не найден\");\n    \n\n    var MaterialIds = msg.SQLCheckRequestData.filter(el => el.Type == 2);\n    if (MaterialIds.length > 0)\n    {\n        for (let i = 0; i < msg.SAPData.Materials.length; i++)\n        {\n            var Material = MaterialIds.filter(el => el.Id == msg.SAPData.Materials[i].Id);\n            if (Material.length > 0)\n            {\n                if (Material.length > 1) msg.Response.Messages.push(\"Материал с ID = \" + msg.SAPData.Materials[i].Id + \" имеет дубликаты\");\n                else msg.SAPData.Materials[i].Guid = Material[0].Guid;\n            }\n            else msg.Response.Messages.push(\"Материал с ID = \" + msg.SAPData.Materials[i].Id + \" не найден\");\n        };\n    }\n    else msg.Response.Messages.push(\"Ни один из материалов не найден\");\n\n    var PlanOrderIds = msg.SQLCheckRequestData.filter(el => el.Type == 1);\n    if (msg.SAPData.IsCreate)\n    {\n        if (PlanOrderIds.length > 0)\n        {\n            for (let i = 0; i < PlanOrderIds.length; i++) msg.Response.Messages.push(\"Заказ с ID = \" + PlanOrderIds[i].Id + \" уже создан\");\n        }\n    }\n    else\n    {\n        if (msg.SAPData.IsUpdate)\n        {\n            if (PlanOrderIds.length > 0)\n            {\n                for (let i = 0; i < msg.SAPData.PlanOrders.length; i++)\n                {\n                    var PlanOrder = PlanOrderIds.filter(el => el.Id?.toLowerCase() == msg.SAPData.PlanOrders[i].PlanOrderId?.toLowerCase())\n                    if (PlanOrder.length > 0)\n                    {\n                        if (PlanOrder.length > 1) msg.Response.Messages.push(\"Заказ с ID = \" + msg.SAPData.PlanOrders[i].PlanOrderId + \" имеет дубликаты\");\n                        else\n                        {\n                            if (PlanOrder[0].TreeGuid_ParentGuid?.toLowerCase() == msg.SAPData.PlantGuid?.toLowerCase())\n                            {\n                                msg.SAPData.PlanOrders[i].PlanOrderGuid = PlanOrder[0].Guid;\n                                if (!msg.SAPData.PlanOrders[i].PlanOrderGuid) msg.Response.Messages.push(\"У заказа с ID = \" + msg.SAPData.PlanOrders[i].PlanOrderId + \" нет Guid\");\n                            }\n                            else msg.Response.Messages.push(\"Заказ с ID = \" + msg.SAPData.PlanOrders[i].PlanOrderId + \" поменял завод, что недопустимо\");\n                            if (PlanOrder[0].ProductionScheduleMaterialId?.toLowerCase() != msg.SAPData.PlanOrders[i].Material?.Guid?.toLowerCase()) msg.Response.Messages.push(\"Заказ с ID = \" + msg.SAPData.PlanOrders[i].PlanOrderId + \" поменял материал, что недопустимо\");\n                            if (PlanOrder[0].ProductionScheduleLineId?.toLowerCase() != msg.SAPData.PlanOrders[i].Line?.Guid?.toLowerCase()) msg.Response.Messages.push(\"Заказ с ID = \" + msg.SAPData.PlanOrders[i].PlanOrderId + \" поменял линию, что недопустимо\");\n                            if (PlanOrder[0].ProductionScheduleVersion?.toLowerCase() != msg.SAPData.PlanOrders[i].Version?.toLowerCase()) msg.Response.Messages.push(\"Заказ с ID = \" + msg.SAPData.PlanOrders[i].PlanOrderId + \" поменял версию, что недопустимо\");\n                            if (PlanOrder[0].ProductionScheduleLotNumber?.toLowerCase() != msg.SAPData.PlanOrders[i].BatchId?.toLowerCase()) msg.Response.Messages.push(\"Заказ с ID = \" + msg.SAPData.PlanOrders[i].PlanOrderId + \" поменял партию, что недопустимо\");\n                        }\n                    }\n                    else msg.Response.Messages.push(\"Заказ с ID = \" + msg.SAPData.PlanOrders[i].PlanOrderId + \" не найден\");\n                }\n            }\n            else msg.Response.Messages.push(\"Ни один из заказов не найден\");\n        }\n        else msg.Response.Messages.push(\"Неизвестный метод запроса на шаге проверки данных\");\n    }\n\n    msg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "646e107633700baa",
        "type": "function",
        "z": "7f6a1556900e92ac",
        "name": "Get ShiftRuntime Prepare",
        "func": "var ShiftRuntimeTable = global.get(\"DBTable\")?.ShiftRuntime;\nif ((!ShiftRuntimeTable) || (!ShiftRuntimeTable?.DBTable)) msg.Response.Messages.push(\"Таблица смен не сконфигурирована\");\n\nvar Dates = JSON.stringify(msg.SAPRequest.Data.planorders.map(i => i.stopdatetime)).replace(\"[\", \"\").replace(\"]\", \"\").replaceAll(\"\\\"\", \"\");\nDates = \"'\" + Dates + \"'\";\n\nvar SQLRequest = \"\";\nSQLRequest = SQLRequest +\n    \"declare @dates varchar(max) = \" + Dates + \"\\n\" +\n    \"declare @date_table table (date nvarchar(50))\\n\" +\n    \"insert @date_table select distinct value FROM STRING_SPLIT(@dates, ',')\\n\" +\n\n    \"SELECT\\n\" +  \n        \"d.date as Date,\\n\" + \n        \"s.gId as ShiftRuntimeId\\n\" +\n    \"FROM \" + ShiftRuntimeTable.DBTable + \" s\\n\" +\n        \"inner join @date_table d on d.date BETWEEN s.dtStart AND s.dtEnd\\n\" +\n    \"WHERE (s.gPlantId = '\" + msg.SAPData.PlantGuid + \"')\";\n\nmsg.SQLShiftRequest = SQLRequest;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 160,
        "wires": [
            [
                "9670e7abb57461a0"
            ]
        ]
    },
    {
        "id": "1ed425dbef6366d2",
        "type": "MSSQL",
        "z": "7f6a1556900e92ac",
        "mssqlCN": "7e5114f542cff14f",
        "name": "Check Data",
        "outField": "SQLCheckRequestData",
        "returnType": 0,
        "throwErrors": "0",
        "query": "--Если запись заказов из таблицы tblCtSData\r\nSELECT * FROM [tblCtSDataHistory]\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "SQLCheckRequest",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 190,
        "y": 100,
        "wires": [
            [
                "954e99e563b4d922"
            ]
        ]
    },
    {
        "id": "9670e7abb57461a0",
        "type": "MSSQL",
        "z": "7f6a1556900e92ac",
        "mssqlCN": "7e5114f542cff14f",
        "name": "Get ShiftRuntime",
        "outField": "SQLShiftRequestData",
        "returnType": 0,
        "throwErrors": "0",
        "query": "--Если запись заказов из таблицы tblCtSData\r\nSELECT * FROM [tblCtSDataHistory]\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "SQLShiftRequest",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 470,
        "y": 160,
        "wires": [
            [
                "d577f6ec3afcb049"
            ]
        ]
    },
    {
        "id": "ccef5c50637af4de",
        "type": "function",
        "z": "addf8ba3468e2efd",
        "name": "Check Data and SQLRequest Prepare",
        "func": "//Структура ответа на запрос от SAP\nmsg.Response =\n{\n    Value: {},\n    Messages : [],\n    IsSuccess : false\n};\n\nmsg.SAPData =\n{\n    PlantId: null,\n    PlantGuid: null,\n    WarehouseId: null,\n    WarehouseGuid: null,\n    SupplierId: null,\n    SupplierGuid: null,\n    Waybill: null,\n    Materials: [],\n    MaterialIdError: false,\n    SupplierIdError: false,\n    WarehouseIdError: false,\n    TelegramSettingsError: false,\n    MSSQLError: false,\n    WriteFileError: false\n};\n\nmsg.TelegramNumber = \"17\";\nmsg.Telegram = undefined;\nvar Telegrams = global.get(\"Telegram\");\nvar DataValid = false;\nif (Telegrams\n    && (typeof Telegrams?.DataValidGenerateByName == \"function\")\n    && (typeof Telegrams?.DataValidGenerateByObject == \"function\")\n    && (typeof Telegrams?.DataValidCheck == \"function\")\n)\n{\n    msg.Telegram = Telegrams[msg.TelegramNumber];\n    if (msg.Telegram)\n    {\n        DataValid = Telegrams.DataValidCheck(msg.TelegramNumber);\n        if (!DataValid) msg.Response.Messages.push(\"Телеграмма \" + msg.TelegramNumber + \" имеет ошибочные настройки\");\n    }\n    else msg.Response.Messages.push(\"Телеграмма \" + msg.TelegramNumber + \" не настроена\");\n}\nelse msg.Response.Messages.push(\"Глобальный справочник телеграмм не настроен\");\nmsg.SAPData.TelegramSettingsError = (!DataValid);\n\nif (\"plantid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.plantid && (msg.SAPRequest.Data.plantid != \"\")) msg.SAPData.PlantId = msg.SAPRequest.Data.plantid;\n    else msg.Response.Messages.push(\"Поле plantid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле plantid отсутствует\");\n\nif (\"warehouseid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.warehouseid && (msg.SAPRequest.Data.warehouseid != \"\")) msg.SAPData.WarehouseId = msg.SAPRequest.Data.warehouseid;\n    else msg.Response.Messages.push(\"Поле warehouseid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле warehouseid отсутствует\");\n\nif (\"supplierid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.supplierid && (msg.SAPRequest.Data.supplierid != \"\")) msg.SAPData.SupplierId = msg.SAPRequest.Data.supplierid;\n    else msg.Response.Messages.push(\"Поле supplierid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле supplierid отсутствует\");\n\nif (\"waybill\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.waybill && (msg.SAPRequest.Data.waybill != \"\")) msg.SAPData.Waybill = msg.SAPRequest.Data.waybill;\n}\n\nvar MaterialIdsString = \"\";\nif (\"pallets\" in msg.SAPRequest?.Data)\n{\n    if (Array.isArray(msg.SAPRequest.Data.pallets))\n    {\n        if (msg.SAPRequest.Data.pallets.length > 0)\n        {\n            for (let i = 0; i < msg.SAPRequest.Data.pallets.length; i++)\n            {\n                var MaterialData = undefined;\n                var BatchData = undefined;\n                var PalletData =\n                {\n                    BatchSupplier: null,\n                    SSCC: undefined,\n                    SSCCComment: \"\",\n                    Amount: undefined,\n                    ProdDate: undefined,\n                    ExpDate: null\n                };\n                var PalletDataValid = true;\n\n                if (\"materialid\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].materialid && (msg.SAPRequest.Data.pallets[i].materialid != \"\"))\n                    {\n                        MaterialData = msg.SAPData.Materials.find(el => el.MaterialId.toLowerCase() == msg.SAPRequest.Data.pallets[i].materialid.toLowerCase());\n                        if (!MaterialData)\n                        {\n                            MaterialData =\n                            {\n                                MaterialId: msg.SAPRequest.Data.pallets[i].materialid,\n                                MaterialGuid: null,\n                                Batches: []\n                            };\n                            msg.SAPData.Materials.push(MaterialData);\n                            if (MaterialIdsString != \"\") MaterialIdsString = MaterialIdsString + \", \";\n                            MaterialIdsString = MaterialIdsString + \"N'\" + MaterialData.MaterialId.toString() + \"'\";\n                        }\n                    }\n                    else msg.Response.Messages.push(\"Поле materialid должно иметь значение (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле materialid отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n\n                if (\"batchid\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].batchid && (msg.SAPRequest.Data.pallets[i].batchid != \"\"))\n                    {\n                        if (MaterialData)\n                        {\n                            BatchData = MaterialData.Batches.find(el => el.BatchId.toLowerCase() == msg.SAPRequest.Data.pallets[i].batchid.toLowerCase());\n                            if (!BatchData)\n                            {\n                                BatchData =\n                                {\n                                    BatchId: msg.SAPRequest.Data.pallets[i].batchid,\n                                    Pallets: []\n                                };\n                                MaterialData.Batches.push(BatchData);\n                            }\n                        }\n                    }\n                    else msg.Response.Messages.push(\"Поле batchid должно иметь значение (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле batchid отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                PalletDataValid = PalletDataValid && (BatchData != undefined);\n\n                if (\"amount\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].amount && (!isNaN(parseFloat(msg.SAPRequest.Data.pallets[i].amount)))) PalletData.Amount = parseFloat(msg.SAPRequest.Data.pallets[i].amount);\n                    else msg.Response.Messages.push(\"Поле amount должно иметь числовое значение (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле amount отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                PalletDataValid = PalletDataValid && (PalletData.Amount != undefined);\n\n                if (\"batchsupplier\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].batchsupplier && (msg.SAPRequest.Data.pallets[i].batchsupplier != \"\")) PalletData.BatchSupplier = msg.SAPRequest.Data.pallets[i].batchsupplier;\n                }\n\n                if (\"sscc\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].sscc && (msg.SAPRequest.Data.pallets[i].sscc != \"\")) PalletData.SSCC = msg.SAPRequest.Data.pallets[i].sscc;\n                    else msg.Response.Messages.push(\"Поле sscc должно иметь значение (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле sscc отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                PalletDataValid = PalletDataValid && (PalletData.SSCC != undefined);\n\n                if (\"ssccComment\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].ssccComment) PalletData.SSCCComment = msg.SAPRequest.Data.pallets[i].ssccComment;\n                }\n\n                if (\"proddate\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].proddate && (!isNaN(Date.parse(msg.SAPRequest.Data.pallets[i].proddate))))\n                    {\n                        var DateTemp1 = new Date(msg.SAPRequest.Data.pallets[i].proddate);\n                        if (DateTemp1?.toISOString()?.startsWith(msg.SAPRequest.Data.pallets[i].proddate)) PalletData.ProdDate = msg.SAPRequest.Data.pallets[i].proddate;\n                    }\n                    if (!PalletData.ProdDate) msg.Response.Messages.push(\"Поле proddate должно иметь значение даты формата YYYY-MM-DD (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                //else msg.Response.Messages.push(\"Поле proddate отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                //PalletDataValid = PalletDataValid && (PalletData.ProdDate != undefined);\n                \n                if (\"expdate\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].expdate && (msg.SAPRequest.Data.pallets[i].expdate != \"\"))\n                    {\n                        if (!isNaN(Date.parse(msg.SAPRequest.Data.pallets[i].expdate)))\n                        {\n                            var DateTemp2 = new Date(msg.SAPRequest.Data.pallets[i].expdate);\n                            if (DateTemp2?.toISOString()?.startsWith(msg.SAPRequest.Data.pallets[i].expdate)) PalletData.ExpDate = msg.SAPRequest.Data.pallets[i].expdate;\n                        }\n                        if (!PalletData.ExpDate) msg.Response.Messages.push(\"Поле expdate должно иметь значение даты формата YYYY-MM-DD (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                        PalletDataValid = PalletDataValid && (PalletData.ExpDate != null);\n                    }\n                }\n\n                if (PalletDataValid) BatchData.Pallets.push(PalletData);\n            }\n        }\n        else msg.Response.Messages.push(\"Поле pallets имеет нулевую длину\");\n    }\n    else msg.Response.Messages.push(\"pallets должен быть типа Array\");\n}\nelse msg.Response.Messages.push(\"Поле pallets отсутствует\");\n\nvar EquipmentTreeTable = global.get(\"DBTable\")?.EquipmentTree;\nif ((!EquipmentTreeTable) || (!EquipmentTreeTable?.DBTable)) msg.Response.Messages.push(\"Таблица дерева оборудования не сконфигурирована\");\n\nvar CounterpartyTable = global.get(\"DBTable\")?.Counterparty;\nif ((!CounterpartyTable) || (!CounterpartyTable?.DBTable)) msg.Response.Messages.push(\"Таблица контрагентов не сконфигурирована\");\n\nvar MaterialTable = global.get(\"DBTable\")?.Material;\nif ((!MaterialTable) || (!MaterialTable?.DBTable)) msg.Response.Messages.push(\"Таблица материалов не сконфигурирована\");\n\nvar StorageLocationTable = global.get(\"DBTable\")?.StorageLocation;\nif ((!StorageLocationTable) || (!StorageLocationTable?.DBTable)) msg.Response.Messages.push(\"Таблица хранилищ не сконфигурирована\");\n\nvar ExternalVertexTable = global.get(\"DBTable\")?.ExternalVertex;\nif ((!ExternalVertexTable) || (!ExternalVertexTable?.DBTable)) msg.Response.Messages.push(\"Таблица внешних вершин не сконфигурирована\");\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nvar SQLRequest = \"\";\nif (msg.Response.IsSuccess)\n{\n    //Поиск Guid для PlantId\n    SQLRequest = SQLRequest +\n        \"SELECT\\n\\t\" +\n            \"'0' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'EquipmentTreeId',\\n\\t\" +\n            \"NULL AS 'PlantId'\\n\" +\n        \"FROM \" + EquipmentTreeTable.DBTable + \"\\n\" +\n        \"WHERE ([szNumberSAP] = N'\" + msg.SAPData.PlantId + \"')\\n\" +\n    //Поиск Guid для SupplierId\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'1' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szCode] AS 'Id',\\n\\t\" +\n            \"NULL AS 'EquipmentTreeId',\\n\\t\" +\n            \"NULL AS 'PlantId'\\n\" +\n        \"FROM \" + CounterpartyTable.DBTable + \"\\n\" +\n        \"WHERE ([szCode] = '\" + msg.SAPData.SupplierId + \"')\\n\" +\n    //Поиск Guid для materialId\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'2' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'EquipmentTreeId',\\n\\t\" +\n            \"NULL AS 'PlantId'\\n\" +\n        \"FROM \" + MaterialTable.DBTable + \"\\n\" +\n        \"WHERE ([szName] IN (\" + MaterialIdsString + \"))\\n\" +\n    //Поиск Guid для warehouseid\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'3' AS 'Type',\\n\\t\" +\n            \"Storage.[gId] AS 'Guid',\\n\\t\" +\n            \"Storage.[szExternalSystemSapLink] AS 'Id',\\n\\t\" +\n            \"Vertex.[gEquipmentTreeId] AS 'EquipmentTreeId',\\n\\t\" +\n            \"Plant.[szName] AS 'PlantId'\\n\\t\" +\n        \"FROM \" + StorageLocationTable.DBTable + \" AS Storage\\n\\t\" +\n            \"INNER JOIN \" + ExternalVertexTable.DBTable + \" AS Vertex ON ((Vertex.[gExternalObjectId] = Storage.[gId]) AND (Vertex.[gExternalObjectId] IS NOT NULL))\\n\\t\" +\n            \"INNER JOIN \" + EquipmentTreeTable.DBTable + \" AS Plant ON (Plant.[gId] = Vertex.[gAccessId])\\n\" +\n        \"WHERE ((Storage.[szExternalSystemSapLink] = '\" + msg.SAPData.WarehouseId + \"') AND (Plant.[szNumberSAP] = N'\" + msg.SAPData.PlantId + \"'))\\n\";\n}\nmsg.SQLCheckRequest = SQLRequest;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 40,
        "wires": [
            [
                "359c48ce8c77fbbc"
            ]
        ]
    },
    {
        "id": "359c48ce8c77fbbc",
        "type": "switch",
        "z": "addf8ba3468e2efd",
        "name": "IsSuccess == true",
        "property": "Response.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 40,
        "wires": [
            [
                "bf273109f1e06d78"
            ],
            [
                "e773ebb5a524234d"
            ]
        ]
    },
    {
        "id": "40300669c96b389d",
        "type": "function",
        "z": "addf8ba3468e2efd",
        "name": "Create Response",
        "func": "if (msg.SubflowError?.message)\n{\n    var Response =\n    {\n        Value: {},\n        Messages: [],\n        IsSuccess: false\n    };\n    var ErrorMessage = msg.SubflowError?.message;\n    if (msg.SubflowError?.source?.name) ErrorMessage = msg.SubflowError.source.name + \": \" + ErrorMessage;\n    if (msg.SubflowError?.source?.type) ErrorMessage = msg.SubflowError.source.type + \": \" + ErrorMessage;\n    Response.Messages.push(\"Subflow: \" + ErrorMessage);\n    msg.Response = Response;\n    msg.statusCode = 500;\n}\nelse\n{\n    if (msg.SAPData.MaterialIdError) msg.statusCode = 401;\n    else\n    {\n        if (msg.SAPData.SupplierIdError) msg.statusCode = 402;\n        else\n        {\n            if (msg.SAPData.WarehouseIdError) msg.statusCode = 403;\n            else\n            {\n                if (msg.SAPData.MSSQLError || msg.SAPData.WriteFileError || msg.SAPData.TelegramSettingsError) msg.statusCode = 500;\n                else\n                {\n                    if (msg.Response.IsSuccess) msg.statusCode = 200;\n                    else msg.statusCode = 400;\n                }\n            }\n        }\n    }\n}\n\nmsg.payload = msg.Response;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 160,
        "wires": [
            [
                "fbb3c59035795dae",
                "ba9e3fe95f599384"
            ]
        ]
    },
    {
        "id": "cb6b28f51cdbc847",
        "type": "function",
        "z": "addf8ba3468e2efd",
        "name": "Check Data",
        "func": "msg.SQLCheckRequestError = msg.error;\n\nif (msg.SQLCheckRequestError?.details)\n{\n    msg.Response.Messages.push(\"Check Data: \" + msg.SQLCheckRequestError.details);\n    msg.SAPData.MSSQLError = true;\n}\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nif (msg.Response.IsSuccess)\n{\n    var PlantId = msg.SQLCheckRequestData.filter(el => el.Type == 0);\n    if (PlantId.length > 0)\n    {\n        if (PlantId.length > 1) msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" имеет дубликаты\");\n        else msg.SAPData.PlantGuid = PlantId[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" не найден\");\n    \n    var SupplierId = msg.SQLCheckRequestData.filter(el => el.Type == 1);\n    if (SupplierId.length > 0)\n    {\n        if (SupplierId.length > 1) msg.Response.Messages.push(\"Поставщик с ID = \" + msg.SAPData.SupplierId + \" имеет дубликаты\");\n        else msg.SAPData.SupplierGuid = SupplierId[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Поставщик с ID = \" + msg.SAPData.SupplierId + \" не найден\");\n    msg.SAPData.SupplierIdError = (!msg.SAPData.SupplierGuid);\n\n    var MaterialIds = msg.SQLCheckRequestData.filter(el => el.Type == 2);\n    if (MaterialIds.length > 0)\n    {\n        for (let i = 0; i < msg.SAPData.Materials.length; i++)\n        {\n            var Material = MaterialIds.filter(el => el.Id == msg.SAPData.Materials[i].MaterialId);\n            if (Material.length > 0)\n            {\n                if (Material.length > 1) msg.Response.Messages.push(\"Материал с ID = \" + msg.SAPData.Materials[i].MaterialId + \" имеет дубликаты\");\n                else msg.SAPData.Materials[i].MaterialGuid = Material[0].Guid;\n            }\n            else\n            {\n                msg.Response.Messages.push(\"Материал с ID = \" + msg.SAPData.Materials[i].MaterialId + \" не найден\");\n                msg.SAPData.MaterialIdError = true;\n            }\n        };\n    }\n    else\n    {\n        msg.Response.Messages.push(\"Ни один из материалов не найден\");\n        msg.SAPData.MaterialIdError = true;\n    }\n\n    var WarehouseId = msg.SQLCheckRequestData.filter(el => el.Type == 3);\n    if (WarehouseId.length > 0)\n    {\n        if (WarehouseId.length > 1) msg.Response.Messages.push(\"Для предприятия с ID = \" + msg.SAPData.PlantId + \" склад с ID = \" + msg.SAPData.WarehouseId + \" имеет дубликаты\");\n        else msg.SAPData.WarehouseGuid = WarehouseId[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Для предприятия с ID = \" + msg.SAPData.PlantId + \" не найден склад с ID = \" + msg.SAPData.WarehouseId);\n    msg.SAPData.WarehouseIdError = (!msg.SAPData.WarehouseGuid);\n\n    msg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 100,
        "wires": [
            [
                "7d58685b6e16a414"
            ]
        ]
    },
    {
        "id": "7d58685b6e16a414",
        "type": "switch",
        "z": "addf8ba3468e2efd",
        "name": "IsSuccess == true",
        "property": "Response.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 100,
        "wires": [
            [
                "99f8b459740801af"
            ],
            [
                "70080508cfbf01a9"
            ]
        ]
    },
    {
        "id": "99f8b459740801af",
        "type": "function",
        "z": "addf8ba3468e2efd",
        "name": "Save Batches Data",
        "func": "var fs = global.get(\"fsextra\");\nvar FilesFolder = msg.Telegram?.Folder?.FilesFolder?.Path; //Каталог хранения кучи файлов поставок\nvar FilePrefix = msg.Telegram?.FilePrefix; //Префикс файлов запроса и ответа (без нижнего подчёркивания)\nvar FileType = msg.Telegram?.Folder?.FilesFolder?.FileType; //Тип файла\nvar StartDateTime = new Date(); //Дата и время начала создания файлов\nvar StartDateTimeString = StartDateTime.getFullYear()\n    + ('0' + (StartDateTime.getMonth() + 1)).slice(-2)\n    + ('0' + StartDateTime.getDate()).slice(-2);\nvar StartDateTimeString_log = StartDateTime.getFullYear()\n    + ('0' + (StartDateTime.getMonth() + 1)).slice(-2)\n    + ('0' + StartDateTime.getDate()).slice(-2) + \"_\"\n    + ('0' + StartDateTime.getHours()).slice(-2)\n    + ('0' + StartDateTime.getMinutes()).slice(-2)\n    + ('0' + StartDateTime.getSeconds()).slice(-2);\nmsg.StartDateTime = StartDateTime;\nmsg.StartDateTimeString = StartDateTimeString;\n\n//Проверка каталога хранения кучи файлов поставок\nif (FilesFolder && (FilesFolder != \"\") && FileType && (FileType != \"\"))\n{\n    if (fs.pathExistsSync(FilesFolder))\n    {\n        var IsSuccess = true;\n        for (let i = 0; (i < msg.SAPData.Materials.length) && IsSuccess; i++)\n        {\n            var Material = msg.SAPData.Materials[i];\n            for (let j = 0; (j <Material.Batches.length) && IsSuccess; j++)\n            {\n                var Batch = Material.Batches[j];\n                var BatchData =\n                {\n                    CounterpartyId: msg.SAPData.SupplierGuid,\n                    MaterialId: Material.MaterialGuid,\n                    ExternalBatchNumber: Batch.BatchId,\n                    SupplierNumber: msg.SAPData.Waybill,\n                    Status: 10,\n                    ActualDelivery: StartDateTime.toISOString(),\n                    StorageLocationId: msg.SAPData.WarehouseGuid,\n                    Items: []\n                };\n                for (var Pallet of Batch.Pallets)\n                {\n                    var PalletData =\n                    {\n                        Date: StartDateTimeString_log,\n                        BatchNumber: Pallet.SSCC,\n                        ExternalBatchNumber: Batch.BatchId,\n                        SupplierNumber: Pallet.BatchSupplier,\n                        Quantity: Pallet.Amount,\n                        PackagingDate: Pallet.ProdDate,\n                        Expiration: Pallet.ExpDate,\n                        Comment: Pallet.SSCCComment\n                    };\n                    BatchData.Items.push(PalletData);\n                }\n                \n                var SaveData =\n                {\n                    API: \"CreateDelivery\",\n                    Table: \"\",\n                    Data: BatchData\n                };\n                var FileName = FilePrefix + \"_\" + StartDateTimeString + \"_\" + Material.MaterialId + \"_\" + Batch.BatchId + \".\" + FileType;\n                var FileNameFull = FilesFolder + FileName;\n                var FileData = JSON.stringify(SaveData, null, \"\\t\");\n                IsSuccess = false;\n                //Запись данных в файл\n                try\n                {\n                    await fs.appendFile(FileNameFull, FileData);\n                }\n                catch (ex)\n                {\n                    msg.Response.Messages.push(\"Ошибка записи данных в файл \" + FileName + \" (\" + ex + \")\");\n                }\n                //Проверка существования конечного файла\n                if (fs.existsSync(FileNameFull)) IsSuccess = true;\n                else msg.Response.Messages.push(\"Конечный файл \" + FileName + \" не существует\");\n                msg.SAPData.WriteFileError = (!IsSuccess);\n            }\n        }\n    }\n    else msg.Response.Messages.push(\"Каталог приёма поставок на существует\");\n}\nelse msg.Response.Messages.push(\"Каталог телаграммы \" + msg.TelegramNumber + \" не задан\");\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 160,
        "wires": [
            [
                "40300669c96b389d"
            ]
        ]
    },
    {
        "id": "01f92551dfb0761c",
        "type": "catch",
        "z": "addf8ba3468e2efd",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 200,
        "y": 220,
        "wires": [
            [
                "63a7b4a54e2576ec"
            ]
        ]
    },
    {
        "id": "63a7b4a54e2576ec",
        "type": "function",
        "z": "addf8ba3468e2efd",
        "name": "Save Error Data",
        "func": "msg.SubflowError = msg.error;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 220,
        "wires": [
            [
                "a801a806f7c7394d"
            ]
        ]
    },
    {
        "id": "fbb3c59035795dae",
        "type": "function",
        "z": "addf8ba3468e2efd",
        "name": "Subflow Status",
        "func": "var FillColour = \"yellow\";\nvar Text = \"Processing\";\n\nif (msg.Response)\n{\n    if (msg.Response.IsSuccess) FillColour = \"green\";\n    else FillColour = \"red\";\n    Text = \"Processing Completed. Error Count: \" + msg.Response.Messages.length;\n}\n\nmsg.payload = { fill: FillColour, shape: \"dot\", text: Text };\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "73902834513ad827",
        "type": "function",
        "z": "addf8ba3468e2efd",
        "name": "Check Data and SQLRequest Prepare",
        "func": "//Структура ответа на запрос от SAP\nmsg.Response =\n{\n    Value: {},\n    Messages : [],\n    IsSuccess : false\n};\n\nmsg.SAPData =\n{\n    PlantId: null,\n    PlantGuid: null,\n    WarehouseId: null,\n    WarehouseGuid: null,\n    SupplierId: null,\n    SupplierGuid: null,\n    Waybill: null,\n    Materials: [],\n    MaterialIdError: false,\n    SupplierIdError: false,\n    WarehouseIdError: false,\n    TelegramSettingsError: false,\n    MSSQLError: false,\n    WriteFileError: false\n};\n\nmsg.TelegramNumber = \"17\";\nmsg.Telegram = undefined;\nvar Telegrams = global.get(\"Telegram\");\nvar DataValid = false;\nif (Telegrams\n    && (typeof Telegrams?.DataValidGenerateByName == \"function\")\n    && (typeof Telegrams?.DataValidGenerateByObject == \"function\")\n    && (typeof Telegrams?.DataValidCheck == \"function\")\n)\n{\n    msg.Telegram = Telegrams[msg.TelegramNumber];\n    if (msg.Telegram)\n    {\n        DataValid = Telegrams.DataValidCheck(msg.TelegramNumber);\n        if (!DataValid) msg.Response.Messages.push(\"Телеграмма \" + msg.TelegramNumber + \" имеет ошибочные настройки\");\n    }\n    else msg.Response.Messages.push(\"Телеграмма \" + msg.TelegramNumber + \" не настроена\");\n}\nelse msg.Response.Messages.push(\"Глобальный справочник телеграмм не настроен\");\nmsg.SAPData.TelegramSettingsError = (!DataValid);\n\nif (\"plantid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.plantid && (msg.SAPRequest.Data.plantid != \"\")) msg.SAPData.PlantId = msg.SAPRequest.Data.plantid;\n    else msg.Response.Messages.push(\"Поле plantid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле plantid отсутствует\");\n\nif (\"warehouseid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.warehouseid && (msg.SAPRequest.Data.warehouseid != \"\")) msg.SAPData.WarehouseId = msg.SAPRequest.Data.warehouseid;\n    else msg.Response.Messages.push(\"Поле warehouseid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле warehouseid отсутствует\");\n\nif (\"supplierid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.supplierid && (msg.SAPRequest.Data.supplierid != \"\")) msg.SAPData.SupplierId = msg.SAPRequest.Data.supplierid;\n    else msg.Response.Messages.push(\"Поле supplierid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле supplierid отсутствует\");\n\nif (\"waybill\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.waybill && (msg.SAPRequest.Data.waybill != \"\")) msg.SAPData.Waybill = msg.SAPRequest.Data.waybill;\n}\n\nvar MaterialIdsString = \"\";\nif (\"pallets\" in msg.SAPRequest?.Data)\n{\n    if (Array.isArray(msg.SAPRequest.Data.pallets))\n    {\n        if (msg.SAPRequest.Data.pallets.length > 0)\n        {\n            for (let i = 0; i < msg.SAPRequest.Data.pallets.length; i++)\n            {\n                var MaterialData = undefined;\n                var BatchData = undefined;\n                var PalletData =\n                {\n                    BatchSupplier: null,\n                    SSCC: undefined,\n                    SSCCComment: \"\",\n                    Amount: undefined,\n                    ProdDate: undefined,\n                    ExpDate: null\n                };\n                var PalletDataValid = true;\n\n                if (\"materialid\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].materialid && (msg.SAPRequest.Data.pallets[i].materialid != \"\"))\n                    {\n                        MaterialData = msg.SAPData.Materials.find(el => el.MaterialId.toLowerCase() == msg.SAPRequest.Data.pallets[i].materialid.toLowerCase());\n                        if (!MaterialData)\n                        {\n                            MaterialData =\n                            {\n                                MaterialId: msg.SAPRequest.Data.pallets[i].materialid,\n                                MaterialGuid: null,\n                                Batches: []\n                            };\n                            msg.SAPData.Materials.push(MaterialData);\n                            if (MaterialIdsString != \"\") MaterialIdsString = MaterialIdsString + \", \";\n                            MaterialIdsString = MaterialIdsString + \"N'\" + MaterialData.MaterialId.toString() + \"'\";\n                        }\n                    }\n                    else msg.Response.Messages.push(\"Поле materialid должно иметь значение (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле materialid отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n\n                if (\"batchid\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].batchid && (msg.SAPRequest.Data.pallets[i].batchid != \"\"))\n                    {\n                        if (MaterialData)\n                        {\n                            BatchData = MaterialData.Batches.find(el => el.BatchId.toLowerCase() == msg.SAPRequest.Data.pallets[i].batchid.toLowerCase());\n                            if (!BatchData)\n                            {\n                                BatchData =\n                                {\n                                    BatchId: msg.SAPRequest.Data.pallets[i].batchid,\n                                    Pallets: []\n                                };\n                                MaterialData.Batches.push(BatchData);\n                            }\n                        }\n                    }\n                    else msg.Response.Messages.push(\"Поле batchid должно иметь значение (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле batchid отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                PalletDataValid = PalletDataValid && (BatchData != undefined);\n\n                if (\"amount\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].amount && (!isNaN(parseFloat(msg.SAPRequest.Data.pallets[i].amount)))) PalletData.Amount = parseFloat(msg.SAPRequest.Data.pallets[i].amount);\n                    else msg.Response.Messages.push(\"Поле amount должно иметь числовое значение (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле amount отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                PalletDataValid = PalletDataValid && (PalletData.Amount != undefined);\n\n                if (\"batchsupplier\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].batchsupplier && (msg.SAPRequest.Data.pallets[i].batchsupplier != \"\")) PalletData.BatchSupplier = msg.SAPRequest.Data.pallets[i].batchsupplier;\n                }\n\n                if (\"sscc\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].sscc && (msg.SAPRequest.Data.pallets[i].sscc != \"\")) PalletData.SSCC = msg.SAPRequest.Data.pallets[i].sscc;\n                    else msg.Response.Messages.push(\"Поле sscc должно иметь значение (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле sscc отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                PalletDataValid = PalletDataValid && (PalletData.SSCC != undefined);\n\n                if (\"ssccComment\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].ssccComment) PalletData.SSCCComment = msg.SAPRequest.Data.pallets[i].ssccComment;\n                }\n\n                if (\"proddate\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].proddate && (!isNaN(Date.parse(msg.SAPRequest.Data.pallets[i].proddate))))\n                    {\n                        var DateTemp1 = new Date(msg.SAPRequest.Data.pallets[i].proddate);\n                        if (DateTemp1?.toISOString()?.startsWith(msg.SAPRequest.Data.pallets[i].proddate)) PalletData.ProdDate = msg.SAPRequest.Data.pallets[i].proddate;\n                    }\n                    if (!PalletData.ProdDate) msg.Response.Messages.push(\"Поле proddate должно иметь значение даты формата YYYY-MM-DD (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                //else msg.Response.Messages.push(\"Поле proddate отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                //PalletDataValid = PalletDataValid && (PalletData.ProdDate != undefined);\n                \n                if (\"expDate\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].expDate && (msg.SAPRequest.Data.pallets[i].expDate != \"\"))\n                    {\n                        if (!isNaN(Date.parse(msg.SAPRequest.Data.pallets[i].expDate)))\n                        {\n                            var DateTemp2 = new Date(msg.SAPRequest.Data.pallets[i].expDate);\n                            if (DateTemp2?.toISOString()?.startsWith(msg.SAPRequest.Data.pallets[i].expDate)) PalletData.ExpDate = msg.SAPRequest.Data.pallets[i].expDate;\n                        }\n                        if (!PalletData.ExpDate) msg.Response.Messages.push(\"Поле expDate должно иметь значение даты формата YYYY-MM-DD (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                        PalletDataValid = PalletDataValid && (PalletData.ExpDate != null);\n                    }\n                }\n\n                if (PalletDataValid) BatchData.Pallets.push(PalletData);\n            }\n        }\n        else msg.Response.Messages.push(\"Поле pallets имеет нулевую длину\");\n    }\n    else msg.Response.Messages.push(\"pallets должен быть типа Array\");\n}\nelse msg.Response.Messages.push(\"Поле pallets отсутствует\");\n\nvar EquipmentTreeTable = global.get(\"DBTable\")?.EquipmentTree;\nif ((!EquipmentTreeTable) || (!EquipmentTreeTable?.DBTable)) msg.Response.Messages.push(\"Таблица дерева оборудования не сконфигурирована\");\n\nvar CounterpartyTable = global.get(\"DBTable\")?.Counterparty;\nif ((!CounterpartyTable) || (!CounterpartyTable?.DBTable)) msg.Response.Messages.push(\"Таблица контрагентов не сконфигурирована\");\n\nvar MaterialTable = global.get(\"DBTable\")?.Material;\nif ((!MaterialTable) || (!MaterialTable?.DBTable)) msg.Response.Messages.push(\"Таблица материалов не сконфигурирована\");\n\nvar StorageLocationTable = global.get(\"DBTable\")?.StorageLocation;\nif ((!StorageLocationTable) || (!StorageLocationTable?.DBTable)) msg.Response.Messages.push(\"Таблица хранилищ не сконфигурирована\");\n\nvar ExternalVertexTable = global.get(\"DBTable\")?.ExternalVertex;\nif ((!ExternalVertexTable) || (!ExternalVertexTable?.DBTable)) msg.Response.Messages.push(\"Таблица внешних вершин не сконфигурирована\");\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nvar SQLRequest = \"\";\nif (msg.Response.IsSuccess)\n{\n    //Поиск Guid для PlantId\n    SQLRequest = SQLRequest +\n        \"SELECT\\n\\t\" +\n            \"'0' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"NULL AS 'EquipmentType',\\n\\t\" +\n            \"NULL AS 'Description'\\n\" +\n        \"FROM \" + EquipmentTreeTable.DBTable + \"\\n\" +\n        \"WHERE ([szNumberSAP] = N'\" + msg.SAPData.PlantId + \"')\\n\" +\n    //Поиск Guid для SupplierId\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'1' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szCode] AS 'Id',\\n\\t\" +\n            \"NULL AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"NULL AS 'EquipmentType',\\n\\t\" +\n            \"NULL AS 'Description'\\n\" +\n        \"FROM \" + CounterpartyTable.DBTable + \"\\n\" +\n        \"WHERE ([szCode] = '\" + msg.SAPData.SupplierId + \"')\\n\" +\n    //Поиск Guid для materialId\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'2' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"NULL AS 'EquipmentType',\\n\\t\" +\n            \"NULL AS 'Description'\\n\" +\n        \"FROM \" + MaterialTable.DBTable + \"\\n\" +\n        \"WHERE ([szName] IN (\" + MaterialIdsString + \"))\\n\" +\n    //Поиск Guid для warehouseid\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'3' AS 'Type',\\n\\t\" +\n            \"Storage.[gId] AS 'Guid',\\n\\t\" +\n            \"Storage.[szExternalSystemSapLink] AS 'Id',\\n\\t\" +\n            \"Vertex.[gEquipmentTreeId] AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"NULL AS 'EquipmentType',\\n\\t\" +\n            \"NULL AS 'Description'\\n\" +\n        \"FROM \" + StorageLocationTable.DBTable + \" AS Storage\\n\\t\" +\n            \"INNER JOIN \" + ExternalVertexTable.DBTable + \" AS Vertex ON ((Vertex.[gExternalObjectId] = Storage.[gId]) AND (Vertex.[gExternalObjectId] IS NOT NULL))\\n\" +\n        \"WHERE (Storage.[szExternalSystemSapLink] = '\" + msg.SAPData.WarehouseId + \"')\\n\" +\n    //Получение дерева оборудования\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'4' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szNumberSAP] AS 'Id',\\n\\t\" +\n            \"[gEquipmentTreeId] AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"[nType] AS 'EquipmentType',\\n\\t\" +\n            \"[szDescription] AS 'Description'\\n\" +\n        \"FROM \" + EquipmentTreeTable.DBTable + \"\\n\";\n}\nmsg.SQLCheckRequest = SQLRequest;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "bb5747e7f4f942e5",
        "type": "function",
        "z": "addf8ba3468e2efd",
        "name": "Check Data",
        "func": "msg.SQLCheckRequestError = msg.error;\n\nif (msg.SQLCheckRequestError?.details)\n{\n    msg.Response.Messages.push(\"Check Data: \" + msg.SQLCheckRequestError.details);\n    msg.SAPData.MSSQLError = true;\n}\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nif (msg.Response.IsSuccess)\n{\n    var PlantId = msg.SQLCheckRequestData.filter(el => el.Type == 0);\n    if (PlantId.length > 0)\n    {\n        if (PlantId.length > 1) msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" имеет дубликаты\");\n        else\n        {\n            msg.SAPData.PlantGuid = PlantId[0].Guid;\n            var EquipmentTree = msg.SQLCheckRequestData.filter(el => el.Type == 4);\n            if (EquipmentTree.length > 0)\n            {\n                var WarehouseIds = msg.SQLCheckRequestData.filter(el => el.Type == 3);\n                if (WarehouseIds.length > 0)\n                {\n                    for (let i = 0; (!msg.SAPData.WarehouseGuid) && (i < WarehouseIds.length); i++)\n                    {\n                        var Warehouse = EquipmentTree.find(el => el.Guid?.toLowerCase() == WarehouseIds[i].TreeGuid_ParentGuid?.toLowerCase());\n                        if (Warehouse)\n                        {\n                            var Equipment = Warehouse;\n                            var j = 0;\n                            for (j = 0; Equipment && (Equipment?.TreeGuid_ParentGuid || (Equipment?.EquipmentType != 1)) && (j < 1000); j++)\n                            {\n                                var ParentGuid = Equipment.TreeGuid_ParentGuid?.toLowerCase();\n                                Equipment = EquipmentTree.find(el => el.Guid?.toLowerCase() == ParentGuid);\n                            }\n                            if (j < 1000)\n                            {\n                                if (Equipment)\n                                {\n                                    if (Equipment.Guid?.toLowerCase() == PlantId[0].Guid.toLowerCase()) msg.SAPData.WarehouseGuid = WarehouseIds[i].Guid;\n                                }\n                            }\n                            else msg.Response.Messages.push(\"Для оборудование с ID = \" + WarehouseIds[i].Guid + \" больше 1000 проходов в дереве\");\n                        }\n                        else msg.Response.Messages.push(\"Оборудование с ID = \" + WarehouseIds[i].Guid + \" не найдено в дереве\");\n                    };\n                    if (!msg.SAPData.WarehouseGuid) msg.Response.Messages.push(\"Для предприятия с ID = \" + msg.SAPData.PlantId + \" не найден склад с ID = \" + msg.SAPData.WarehouseId);\n                }\n                else msg.Response.Messages.push(\"Склады с ID = \" + msg.SAPData.WarehouseId + \" не найдены\");\n                msg.SAPData.WarehouseIdError = (!msg.SAPData.WarehouseGuid);\n            }\n            else msg.Response.Messages.push(\"Дерево оборудования пустое\");\n        }\n    }\n    else msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" не найден\");\n    \n\n    var SupplierId = msg.SQLCheckRequestData.filter(el => el.Type == 1);\n    if (SupplierId.length > 0)\n    {\n        if (SupplierId.length > 1) msg.Response.Messages.push(\"Поставщик с ID = \" + msg.SAPData.SupplierId + \" имеет дубликаты\");\n        else msg.SAPData.SupplierGuid = SupplierId[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Поставщик с ID = \" + msg.SAPData.SupplierId + \" не найден\");\n    msg.SAPData.SupplierIdError = (!msg.SAPData.SupplierGuid);\n\n    var MaterialIds = msg.SQLCheckRequestData.filter(el => el.Type == 2);\n    if (MaterialIds.length > 0)\n    {\n        for (let i = 0; i < msg.SAPData.Materials.length; i++)\n        {\n            var Material = MaterialIds.filter(el => el.Id == msg.SAPData.Materials[i].MaterialId);\n            if (Material.length > 0)\n            {\n                if (Material.length > 1) msg.Response.Messages.push(\"Материал с ID = \" + msg.SAPData.Materials[i].MaterialId + \" имеет дубликаты\");\n                else msg.SAPData.Materials[i].MaterialGuid = Material[0].Guid;\n            }\n            else\n            {\n                msg.Response.Messages.push(\"Материал с ID = \" + msg.SAPData.Materials[i].MaterialId + \" не найден\");\n                msg.SAPData.MaterialIdError = true;\n            }\n        };\n    }\n    else\n    {\n        msg.Response.Messages.push(\"Ни один из материалов не найден\");\n        msg.SAPData.MaterialIdError = true;\n    }\n\n    msg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "ba9e3fe95f599384",
        "type": "debug",
        "z": "addf8ba3468e2efd",
        "name": "debug 228",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 100,
        "wires": []
    },
    {
        "id": "bf273109f1e06d78",
        "type": "MSSQL",
        "z": "addf8ba3468e2efd",
        "mssqlCN": "7e5114f542cff14f",
        "name": "Check Data",
        "outField": "SQLCheckRequestData",
        "returnType": 0,
        "throwErrors": "0",
        "query": "--Если запись заказов из таблицы tblCtSData\r\nSELECT * FROM [tblCtSDataHistory]\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "SQLCheckRequest",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 190,
        "y": 100,
        "wires": [
            [
                "cb6b28f51cdbc847"
            ]
        ]
    },
    {
        "id": "1604488b8e3c36ce",
        "type": "function",
        "z": "af3d54f9caaa27a3",
        "name": "Prepare Telegram Files Data",
        "func": "//Состояние подпотока\nvar SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: undefined\n    }\n};\n\n//Проверка занятости данного блока в случае большого количества файлов, которые могут не успеть обработать за интервал вызова функции\nvar IsBusy = context.get(\"IsBusy\");\nif (!IsBusy)\n{\n    context.set(\"IsBusy\", true);\n    SubflowStatus.payload.text = \"Processing: Start\";\n    node.send([null, SubflowStatus, null]);\n    var fs = global.get(\"fsextra\");\n    msg.Errors =\n    {\n        PrepareFilesData: [],\n        GetToken: [],\n        GetServiceUser: [],\n        FileProcessing: []\n    };\n    msg.ErrorCount = 0; //Количество полученных ошибок\n    msg.TelegramFiles = []; //Файлы поставок, отправляемые в MES\n    msg.FilesCount = 0; //Количество обрабатываемых файлов\n    msg.FileNumber = 0; //Номер обрабатываемого файла\n    msg.FilesFolder = msg.Telegram?.Folder?.FilesFolder?.Path; //Каталог временного хранения\n    msg.ArchiveOKFolder = msg.Telegram?.Folder?.ArchiveOKFolder?.Path; //Каталог удачно отправленных в MES файлов\n    msg.ArchiveBadFolder = msg.Telegram?.Folder?.ArchiveBadFolder?.Path; //Каталог ошибочных файлов\n    msg.MESLogsFolder = msg.Telegram?.Folder?.MESLogsFolder?.Path; //Архив запросов в MES\n    msg.FilePrefix = msg.Telegram?.FilePrefix; //Префикс файлов (без нижнего подчёркивания)\n    msg.FileType = msg.Telegram?.Folder?.FilesFolder?.FileType; //Тип файла запроса\n    msg.FileTypeMES = msg.Telegram?.Folder?.MESLogsFolder?.FileType; //Тип файла лога запроса в MES\n    //Шаблон сообщения об ошибке\n    var ErrorData =\n    {\n        error:\n        {\n            source:\n            {\n                id: env.get(\"NR_NODE_ID\"),\n                type: undefined,\n                name: env.get(\"NR_NODE_NAME\"),\n                count: 1\n            },\n            message: undefined\n        }\n    };\n    //Проверка настроек телеграммы\n    if (msg.FilesFolder && (msg.FilesFolder != \"\") && msg.ArchiveOKFolder && (msg.ArchiveOKFolder != \"\")\n        && msg.ArchiveBadFolder && (msg.ArchiveBadFolder != \"\") && msg.ArchiveBadFolder && (msg.ArchiveBadFolder != \"\")\n        && msg.MESLogsFolder && (msg.MESLogsFolder != \"\") && msg.FilePrefix && (msg.FilePrefix != \"\")\n        && msg.FileType && (msg.FileType != \"\") && msg.FileTypeMES && (msg.FileTypeMES != \"\")\n        )\n    {\n        //Проверка каталога временного хранения\n        if (fs.pathExistsSync(msg.FilesFolder))\n        {\n            //Проверка каталога удачно отправленных в MES файлов\n            if (fs.pathExistsSync(msg.ArchiveOKFolder))\n            {\n                //Проверка каталога ошибочных файлов\n                if (fs.pathExistsSync(msg.ArchiveBadFolder))\n                {\n                    //Проверка каталога ошибочных файлов\n                    if (fs.pathExistsSync(msg.MESLogsFolder))\n                    {\n                        var FilesNames = []; //Массив имён файлов телеграммы\n                        //Получения списка имён файлов msg.FilesFolder\n                        try\n                        {\n                            FilesNames = fs.readdirSync(msg.FilesFolder);\n                            msg.UseGetToken = msg.Telegram.UseGetToken;\n                            msg.UseGetServiceUser = msg.Telegram.UseGetServiceUser;\n                        }\n                        catch (ex)\n                        {\n                            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n                            ErrorData.error.message = \"Directory '\" + msg.FilesFolder + \"' could not be read (\" + ex + \")\";\n                            msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n                            msg.ErrorCount = msg.ErrorCount + 1;\n                            node.send([null, null, ErrorData]);\n                        }\n                        //Выбор файлов с заданным расширением\n                        msg.TelegramFiles = FilesNames.filter(el => el.toLowerCase().endsWith(\".\" + msg.FileType));\n                        msg.FilesCount = msg.TelegramFiles.length;\n                    }\n                    else\n                    {\n                        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n                        ErrorData.error.message = \"Directory '\" + msg.MESLogsFolder + \"' does not exist\";\n                        msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n                        msg.ErrorCount = msg.ErrorCount + 1;\n                        node.send([null, null, ErrorData]);\n                    }\n                }\n                else\n                {\n                    ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n                    ErrorData.error.message = \"Directory '\" + msg.ArchiveBadFolder + \"' does not exist\";\n                    msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n                    msg.ErrorCount = msg.ErrorCount + 1;\n                    node.send([null, null, ErrorData]);\n                }\n            }\n            else\n            {\n                ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n                ErrorData.error.message = \"Directory '\" + msg.ArchiveOKFolder + \"' does not exist\";\n                msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n                msg.ErrorCount = msg.ErrorCount + 1;\n                node.send([null, null, ErrorData]);\n            }\n        }\n        else\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n            ErrorData.error.message = \"Directory '\" + msg.FilesFolder + \"' does not exist\";\n            msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n            msg.ErrorCount = msg.ErrorCount + 1;\n            node.send([null, null, ErrorData]);\n        }\n    }\n    else\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings Error\";\n        ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" is not Сonfigured\";\n        msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n        msg.ErrorCount = msg.ErrorCount + 1;\n        node.send([null, null, ErrorData]);\n    }\n    if ((msg.TelegramFiles.length > 0) || (msg.ErrorCount > 0)) return [msg, null, null];\n    else msg.ResetIsBusy = true;\n}\nif (msg.ResetIsBusy)\n{\n    var ProcessingState = \"Processing Completed. File Count: \" + msg.FilesCount + \". Error Count: \" + msg.ErrorCount + \".\";\n    var ProcessingColour = ((msg.ErrorCount > 0) ? \"red\" : \"green\");\n    SubflowStatus.payload.fill = ProcessingColour;\n    SubflowStatus.payload.text = ProcessingState;\n    context.set(\"IsBusy\", false);\n    return [null, SubflowStatus, null];\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 40,
        "wires": [
            [
                "e93b02f4ba79f7ae"
            ],
            [
                "b2e75ffe8d8ef381"
            ],
            [
                "4f6d0c09f4e32361"
            ]
        ],
        "outputLabels": [
            "Telegram Files Data",
            "Subflow Status",
            "Error"
        ]
    },
    {
        "id": "e93b02f4ba79f7ae",
        "type": "switch",
        "z": "af3d54f9caaa27a3",
        "name": "msg.ErrorCount > 0",
        "property": "ErrorCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 40,
        "wires": [
            [
                "e68faa777aa58bb4"
            ],
            [
                "a0bc216692a155ae"
            ]
        ]
    },
    {
        "id": "e68faa777aa58bb4",
        "type": "function",
        "z": "af3d54f9caaa27a3",
        "name": "Files Processing End",
        "func": "msg.ResetIsBusy = true;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 40,
        "wires": [
            [
                "1604488b8e3c36ce"
            ]
        ]
    },
    {
        "id": "f7284e43fbd37b60",
        "type": "subflow:37b786771d50fd31",
        "z": "af3d54f9caaa27a3",
        "name": "",
        "x": 1030,
        "y": 120,
        "wires": [
            [
                "0590f1b4652aee7a"
            ],
            [
                "e0b94503ae4bf0b9"
            ]
        ]
    },
    {
        "id": "0590f1b4652aee7a",
        "type": "switch",
        "z": "af3d54f9caaa27a3",
        "name": "msg.TokenIsSuccess == true",
        "property": "TokenIsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1280,
        "y": 120,
        "wires": [
            [
                "2bbf70234bbe1c56"
            ],
            [
                "ebb3328b3b03a660"
            ]
        ]
    },
    {
        "id": "ebb3328b3b03a660",
        "type": "function",
        "z": "af3d54f9caaa27a3",
        "name": "Get Token Error",
        "func": "msg.Errors.GetToken.push(msg.TokenError);\n\nmsg.ErrorCount = msg.ErrorCount + 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 120,
        "wires": [
            [
                "e68faa777aa58bb4"
            ]
        ]
    },
    {
        "id": "c81f38cce00e8924",
        "type": "subflow:c5b8559825b247a0",
        "z": "af3d54f9caaa27a3",
        "name": "",
        "x": 930,
        "y": 200,
        "wires": [
            [
                "b269309a812f561e"
            ],
            [
                "80aa0fc3c1044b73"
            ]
        ]
    },
    {
        "id": "b269309a812f561e",
        "type": "switch",
        "z": "af3d54f9caaa27a3",
        "name": "msg.ServiceUserIsSuccess == true",
        "property": "ServiceUserIsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1220,
        "y": 200,
        "wires": [
            [
                "d522736b54f6b6e0"
            ],
            [
                "39ba44fdf63c94e0"
            ]
        ]
    },
    {
        "id": "39ba44fdf63c94e0",
        "type": "function",
        "z": "af3d54f9caaa27a3",
        "name": "Get Service User Error",
        "func": "msg.Errors.GetServiceUser.push(msg.ServiceUserError);\n\nmsg.ErrorCount = msg.ErrorCount + 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 200,
        "wires": [
            [
                "e68faa777aa58bb4"
            ]
        ]
    },
    {
        "id": "75668b3afef52494",
        "type": "function",
        "z": "af3d54f9caaa27a3",
        "name": "Prepare Request",
        "func": "var fs = global.get(\"fsextra\");\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\nmsg.ActiveFileName = msg.payload; //Сохранение имени активного файла\nvar FullFileName = msg.FilesFolder + msg.ActiveFileName; //Полное имя файлов\nvar FileDataStringify = undefined; //Данные из файла\nvar FileData = undefined; //Данные из файла, преобразованные в объект\nvar ErrorCount = 0; //Количество возникших ошибок\nvar BadFile = false; //Файл имеет ошибочную структуру\nvar IsError = false; //Произошла ошибка при обработке файла\nmsg.MESAPI = false; //false - отправка в MES DBTable, true - отправка в MES API\n//Чтение данных из файла\nvar options =\n{\n    encoding: \"utf8\"\n};\ntry\n{\n    FileDataStringify = await fs.readFileSync(FullFileName, options);\n}\ncatch (ex)\n{\n    ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" File Error\";\n    ErrorData.error.message = \"File '\" + FullFileName + \"' could not be read (\" + ex + \")\";\n    IsError = true;\n}\n//Преобразование файла в объект\nif (FileDataStringify)\n{\n    try\n    {\n        FileData = JSON.parse(FileDataStringify);\n    }\n    catch (ex)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Data Error\";\n        ErrorData.error.message = \"File '\" + FullFileName + \"' Data could not be Parse to Object. This File is sent to the Bad Directory. (\" + ex + \")\";\n        IsError = true;\n    }\n    if (FileData)\n    {\n        msg.FileData = FileData;\n        var MESAPI = msg.Telegram?.MESAPI?.[FileData.API];\n        var MESDBTable = msg.Telegram?.MESDBTable?.[FileData.Table];\n        if ((MESAPI || MESDBTable) && (!(MESAPI && MESDBTable)))\n        {\n            if (MESAPI)\n            {\n                msg.headers = {};\n                msg.headers[\"Authorization\"] = msg.Token;\n                msg.headers[\"Content-Type\"] = \"application/json; charset=utf-8\";\n                msg.headers[\"Initiator-user\"] = msg.ServiceUserId;\n                msg.method = MESAPI.Method;\n                msg.url = MESAPI.URL;\n                msg.requestTimeout = ((MESAPI.TimeoutSec * 1000) || 120000);\n                msg.payload = FileData.Data;\n                msg.MESAPI = true;\n            }\n\n            if (MESDBTable)\n            {\n                if (FileData.Data.Insert)\n                {\n                    var Columns = \"\";\n                    var Values = \"\";\n                    var i = 0;\n                    for (var ColumnName in FileData.Data.Data)\n                    {\n                        if (i > 0)\n                        {\n                            Columns = Columns + \", \";\n                            Values = Values + \", \";\n                        }\n                        Columns = Columns + ColumnName;\n                        Values = Values + FileData.Data.Data[ColumnName];\n                        i = i + 1;\n                    }\n                    msg.SQLRequest = \"INSERT INTO \" + MESDBTable.DBTable + \"\\n\" +\n                        \"(\" + Columns + \")\\n\" +\n                        \"VALUES\\n\" +\n                        \"(\" + Values + \")\\n\";\n                    msg.Method = \"Insert\";\n                    msg.DBTable = MESDBTable.DBTable;\n                }\n                else\n                {\n                    if (FileData.Data.Update)\n                    {\n                        var ColumnsValues = \"\";\n                        var i = 0;\n                        for (var ColumnName in FileData.Data.Data)\n                        {\n                            if (i > 0) ColumnsValues = ColumnsValues + \", \";\n                            ColumnsValues = ColumnsValues + ColumnName + \" = \" + FileData.Data.Data[ColumnName];\n                            i = i + 1;\n                        }\n                        msg.SQLRequest = \"UPDATE \" + MESDBTable.DBTable + \"\\n\" +\n                            \"SET \" + ColumnsValues + \"\\n\" +\n                            \"WHERE (\" + FileData.Data.Condition + \")\\n\";\n                        msg.Method = \"Update\";\n                        msg.DBTable = MESDBTable.DBTable;\n                    }\n                    else\n                    {\n                        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Data Error\";\n                        ErrorData.error.message = \"File Data has Wrong DBTable Method\";\n                        IsError = true;\n                        BadFile = true;\n                    }\n                }\n            }\n        }\n        else\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings Error\";\n            ErrorData.error.message = \"File has Wrong Parameters: there is no MES API and DBTable, they are Both Specified or MES API/DBTable is not Сonfigured\";\n            IsError = true;\n            BadFile = true;\n        }\n    }\n    else BadFile = true;\n}\n\nif (IsError)\n{\n    var FileErrorData =\n    {\n        FileName: msg.ActiveFileName,\n        BadFile: BadFile,\n        OKFile: false,\n        Prepare: ErrorData.error.message,\n        Send: undefined,\n        Finish: undefined\n    };\n    msg.Errors.FileProcessing.push(FileErrorData);\n\n    msg.ErrorCount = msg.ErrorCount + 1;\n    node.send([null, ErrorData]);\n}\n\nmsg.BadFile = BadFile;\n//Файл и данные успешно прошли проверки\nmsg.PrepareIsSuccess = (!IsError) && (!BadFile);\n//Время начала отправки данных в MES\nmsg.StartDateTime = new Date();\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 340,
        "wires": [
            [
                "81d0254ce574598e",
                "c9fc348b283902e9"
            ],
            [
                "aec66429df5e384f"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "366965873be4b282",
        "type": "http request",
        "z": "af3d54f9caaa27a3",
        "name": "Send to MES API",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 770,
        "y": 420,
        "wires": [
            [
                "f857a3037eaaa8fc",
                "184077571e783fa7",
                "e5b111babcff6e8f",
                "4a914350f6c415e9"
            ]
        ]
    },
    {
        "id": "7bf574177e8e9e21",
        "type": "function",
        "z": "af3d54f9caaa27a3",
        "name": "Prepare Response",
        "func": "var fs = global.get(\"fsextra\");\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\n\nmsg.OKFile = false; //Файл прошёл все проверки и был успешно отправлен\nvar EndDirectory = undefined; //Конечная директория перемещения файла\nvar SendError = undefined; //Ошибка отправки данных\nvar FinishError = undefined; //Ошибка завершения обработки данных\n\nif (msg.PrepareIsSuccess)\n{\n    var StatusCode = undefined;\n    var StatusCodeOK = undefined;\n    var ErrorArray = undefined;\n    var ErrorCode = undefined;\n    var ErrorCodeData = undefined;\n    if (msg.MESAPI)\n    {\n        StatusCode = msg.statusCode;\n        StatusCodeOK = (msg.statusCode == 200);\n        ErrorArray = [\"ECONNRESET\", \"ETIMEDOUT\", \"ECONNREFUSED\", \"ENOTFOUND\"];\n        ErrorCode = msg.payload;\n        ErrorCodeData = msg.payload;\n    }\n    else\n    {\n        StatusCode = msg.error?.code;\n        StatusCodeOK = (!msg.error?.code);\n        ErrorArray = [\"ECONNCLOSED\", \"ESOCKET\"];\n        ErrorCode = msg.error?.message;\n        ErrorCodeData = msg.error;\n    }\n\n    if (StatusCodeOK) msg.OKFile = true;\n    else\n    {\n        SendError = \"Send to MES: \" + StatusCode + \": \";\n        if ((ErrorArray.includes(StatusCode))) SendError = SendError + ErrorCode;\n        else\n        {\n            SendError = SendError + JSON.stringify(ErrorCodeData);\n            msg.BadFile = true;\n        }\n        msg.ErrorCount = msg.ErrorCount + 1;\n    }\n}\n//Перемещение успешно отправленного файла в архив\nif (msg.OKFile) EndDirectory = msg.ArchiveOKFolder;\nelse\n{\n    //Перемещение ошибочного файла в архив\n    if (msg.BadFile) EndDirectory = msg.ArchiveBadFolder;\n}\n//Перемещение файла в конечную директорию\nif (EndDirectory)\n{\n    try\n    {\n        var moveSyncOptions =\n        {\n            overwrite: true\n        };\n        fs.moveSync(msg.FilesFolder + msg.ActiveFileName, EndDirectory + msg.ActiveFileName, moveSyncOptions);\n    }\n    catch (ex)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" File Error\";\n        ErrorData.error.message = \"Unable to move file '\" + msg.FilesFolder + msg.ActiveFileName + \"' to '\" + EndDirectory + \"' directory (\" + ex + \")\";\n        FinishError = ErrorData.error.message;\n        msg.ErrorCount = msg.ErrorCount + 1;\n        node.send([null, ErrorData]);\n    }\n}\n//Дополнение массива ошибок\nif (SendError || FinishError)\n{\n    var FileErrorData = msg.Errors.FileProcessing.find(el => el.FileName == msg.ActiveFileName);\n    if (FileErrorData)\n    {\n        FileErrorData.BadFile = msg.BadFile;\n        FileErrorData.OKFile = msg.OKFile;\n        FileErrorData.Send = SendError;\n        FileErrorData.Finish = FinishError;\n    }\n    else\n    {\n        FileErrorData =\n        {\n            FileName: msg.ActiveFileName,\n            BadFile: msg.BadFile,\n            OKFile: msg.OKFile,\n            Prepare: undefined,\n            Send: SendError,\n            Finish: FinishError\n        };\n        msg.Errors.FileProcessing.push(FileErrorData);\n    }\n}\n\nreturn [msg, null];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 340,
        "wires": [
            [
                "c63cbfe32878a609"
            ],
            [
                "9aab9901799bf226"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "81d0254ce574598e",
        "type": "switch",
        "z": "af3d54f9caaa27a3",
        "name": "PrepareIsSuccess == false",
        "property": "PrepareIsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 700,
        "y": 340,
        "wires": [
            [
                "184077571e783fa7"
            ],
            [
                "f276b42a47e469de"
            ]
        ]
    },
    {
        "id": "f857a3037eaaa8fc",
        "type": "function",
        "z": "af3d54f9caaa27a3",
        "name": "Save Send Time to MES Log",
        "func": "var fs = global.get(\"fsextra\");\n//Время окончания отправки данных в MES\nmsg.EndDateTime = new Date();\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n}\n//Проверка настроек телеграммы\nif (msg.MESLogsFolder && (msg.MESLogsFolder != \"\") && msg.FilePrefix && (msg.FilePrefix != \"\") && msg.FileTypeMES && (msg.FileTypeMES != \"\"))\n{\n    if (msg.StartDateTime)\n    {\n        var FileName = msg.FilePrefix + \"_MES_\"\n            + msg.StartDateTime?.getFullYear().toString()\n            + ('0' + (msg.StartDateTime.getMonth() + 1).toString()).slice(-2)\n            + ('0' + msg.StartDateTime.getDate().toString()).slice(-2)\n            + \".log\";\n        var StartDate = msg.StartDateTime.getFullYear().toString() + \".\"\n            + ('0' + (msg.StartDateTime.getMonth() + 1).toString()).slice(-2) + \".\"\n            + ('0' + msg.StartDateTime.getDate().toString()).slice(-2);\n        var StartTime = ('0' + msg.StartDateTime.getHours().toString()).slice(-2) + \":\"\n            + ('0' + msg.StartDateTime.getMinutes().toString()).slice(-2) + \":\"\n            + ('0' + msg.StartDateTime.getSeconds().toString()).slice(-2) + \".\"\n            + ('00' + msg.StartDateTime.getMilliseconds().toString()).slice(-3);\n        var EndDate = msg.EndDateTime.getFullYear().toString() + \".\"\n            + ('0' + (msg.EndDateTime.getMonth() + 1).toString()).slice(-2) + \".\"\n            + ('0' + msg.EndDateTime.getDate().toString()).slice(-2);\n        var EndTime = ('0' + msg.EndDateTime.getHours().toString()).slice(-2) + \":\"\n            + ('0' + msg.EndDateTime.getMinutes().toString()).slice(-2) + \":\"\n            + ('0' + msg.EndDateTime.getSeconds().toString()).slice(-2) + \".\"\n            + ('00' + msg.EndDateTime.getMilliseconds().toString()).slice(-3);\n        var ProcessingTime = (Number(msg.EndDateTime) - Number(msg.StartDateTime)) / 1000;\n        var FullFileName = msg.MESLogsFolder + FileName;\n        var Header = \"Start Time\\tEnd Time\\tFile Name\\tMethod\\tAPI/DBTable\\tOperation Time\\tSend Status\\r\\n\"; //Заголовок файла логирования\n        var LogLine = StartDate + \" T \" + StartTime + \"\\t\";\n        LogLine = LogLine + EndDate + \" T \" + EndTime + \"\\t\";\n        LogLine = LogLine + msg.ActiveFileName + \"\\t\";\n        LogLine = LogLine + (msg.MESAPI ? msg.method : msg.Method) + \"\\t\";\n        LogLine = LogLine + (msg.MESAPI ? msg.url : msg.DBTable) + \"\\t\";\n        LogLine = LogLine + ProcessingTime.toFixed(3) + \" sec\\t\";\n        var StatusCode = (msg.MESAPI ? (msg.statusCode == 200) : (!msg.error?.code));\n        if (StatusCode) LogLine = LogLine + \"File sent Successfully\";\n        else LogLine = LogLine + \"Error sending file\";\n        LogLine = LogLine + \"\\r\\n\";\n        var LogLineSend = false;\n        //Проверка каталога хранения логов времени отправки в MES\n        fs.pathExists(msg.MESLogsFolder, pathExistsCallback);\n    }\n    else\n    {\n        ErrorData.error.source.type = \"Start DateTime\";\n        ErrorData.error.message = \"msg field doesn't have StartDateTime value\";\n        return [null, ErrorData];\n    }\n}\nelse\n{\n    ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings Error\";\n    ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" is not Сonfigured\";\n    return [null, ErrorData];\n}\n\nfunction pathExistsCallback(err, exists)\n{\n    if (err)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n        ErrorData.error.message = \"pathExistsCallback: \" + err;\n        node.send([null, ErrorData]);\n        node.done();\n    }\n    else\n    {\n        if (exists) fs.stat(FullFileName, statCallback);\n        else\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n            ErrorData.error.message = \"Directory '\" + msg.MESLogsFolder + \"' does not exist\";\n            node.send([null, ErrorData]);\n            node.done();\n        }\n    }\n}\n\nfunction statCallback(err, stats)\n{\n    if (err)\n    {\n        if (err.code != \"ENOENT\")\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Log File Error\";\n            ErrorData.error.message = \"statCallback: \" + err;\n            node.send([null, ErrorData]);\n            node.done();\n        }\n        else fs.appendFile(FullFileName, Header, appendFileCallback);\n    }\n    else\n    {\n        LogLineSend = true;\n        fs.appendFile(FullFileName, LogLine, appendFileCallback);\n    }\n}\n\nfunction appendFileCallback(err)\n{\n    if (err)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Log File Error\";\n        ErrorData.error.message = \"statCallback: \" + err;\n        node.send([null, ErrorData]);\n        node.done();\n    }\n    else\n    {\n        if (!LogLineSend)\n        {\n            LogLineSend = true;\n            fs.appendFile(FullFileName, LogLine, appendFileCallback);\n        }\n        else\n        {\n            node.send([msg, null]);\n            node.done();\n        }\n    }\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 420,
        "wires": [
            [],
            [
                "9aab9901799bf226"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "b3847c21d0a3e1de",
        "type": "catch",
        "z": "af3d54f9caaa27a3",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 140,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "8d6622abb13008f1",
        "type": "link in",
        "z": "af3d54f9caaa27a3",
        "name": "Catch Error Data",
        "links": [
            "4f6d0c09f4e32361",
            "e0b94503ae4bf0b9",
            "80aa0fc3c1044b73",
            "aec66429df5e384f",
            "9aab9901799bf226"
        ],
        "x": 205,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "4f6d0c09f4e32361",
        "type": "link out",
        "z": "af3d54f9caaa27a3",
        "name": "Catch Error Telegram Files Prepare",
        "mode": "link",
        "links": [
            "8d6622abb13008f1"
        ],
        "x": 335,
        "y": 140,
        "wires": []
    },
    {
        "id": "e52e84d62da1e443",
        "type": "link in",
        "z": "af3d54f9caaa27a3",
        "name": "Subflow Status",
        "links": [
            "b2e75ffe8d8ef381",
            "36fdb7bb4b3558bf",
            "0d7e623f531e781b",
            "6ba7c3ae8483a3ed",
            "b0f454212a8f0bc5",
            "b20c7a6438400265"
        ],
        "x": 205,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "b2e75ffe8d8ef381",
        "type": "link out",
        "z": "af3d54f9caaa27a3",
        "name": "Subflow Status Telegram Files Prepare",
        "mode": "link",
        "links": [
            "e52e84d62da1e443"
        ],
        "x": 335,
        "y": 100,
        "wires": []
    },
    {
        "id": "128698b65ffff5de",
        "type": "function",
        "z": "af3d54f9caaa27a3",
        "name": "Subflow Status",
        "func": "var SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: Get Token\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 120,
        "wires": [
            [
                "f7284e43fbd37b60"
            ],
            [
                "36fdb7bb4b3558bf"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "8338db4bdb4a638c",
        "type": "function",
        "z": "af3d54f9caaa27a3",
        "name": "Subflow Status",
        "func": "var SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: Get Service User\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 200,
        "wires": [
            [
                "c81f38cce00e8924"
            ],
            [
                "0d7e623f531e781b"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "36fdb7bb4b3558bf",
        "type": "link out",
        "z": "af3d54f9caaa27a3",
        "name": "Subflow Status Get Token",
        "mode": "link",
        "links": [
            "e52e84d62da1e443"
        ],
        "x": 975,
        "y": 160,
        "wires": []
    },
    {
        "id": "0d7e623f531e781b",
        "type": "link out",
        "z": "af3d54f9caaa27a3",
        "name": "Subflow Status Get Service User",
        "mode": "link",
        "links": [
            "e52e84d62da1e443"
        ],
        "x": 855,
        "y": 240,
        "wires": []
    },
    {
        "id": "9b28e41d6255c583",
        "type": "function",
        "z": "af3d54f9caaa27a3",
        "name": "Subflow Status",
        "func": "msg.FileNumber = ((msg.FileNumber + 1) || 1);\nvar SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: File \" + msg.FileNumber + \"/\" + msg.FilesCount + \": Preparing\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 340,
        "wires": [
            [
                "75668b3afef52494"
            ],
            [
                "6ba7c3ae8483a3ed"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "6ba7c3ae8483a3ed",
        "type": "link out",
        "z": "af3d54f9caaa27a3",
        "name": "Subflow Status Prepare Request",
        "mode": "link",
        "links": [
            "e52e84d62da1e443"
        ],
        "x": 355,
        "y": 380,
        "wires": []
    },
    {
        "id": "aec66429df5e384f",
        "type": "link out",
        "z": "af3d54f9caaa27a3",
        "name": "Catch Error Prepare Request",
        "mode": "link",
        "links": [
            "8d6622abb13008f1"
        ],
        "x": 595,
        "y": 380,
        "wires": []
    },
    {
        "id": "bf8214e92bcad1aa",
        "type": "function",
        "z": "af3d54f9caaa27a3",
        "name": "Subflow Status",
        "func": "var SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: File \" + msg.FileNumber + \"/\" + msg.FilesCount + \": Sending\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 420,
        "wires": [
            [
                "a196e9cedc1ee544",
                "c9fc348b283902e9"
            ],
            [
                "b0f454212a8f0bc5"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "b0f454212a8f0bc5",
        "type": "link out",
        "z": "af3d54f9caaa27a3",
        "name": "Subflow Status Prepare Request",
        "mode": "link",
        "links": [
            "e52e84d62da1e443"
        ],
        "x": 435,
        "y": 460,
        "wires": []
    },
    {
        "id": "184077571e783fa7",
        "type": "function",
        "z": "af3d54f9caaa27a3",
        "name": "Subflow Status",
        "func": "var SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: File \" + msg.FileNumber + \"/\" + msg.FilesCount + \": Completing\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 340,
        "wires": [
            [
                "7bf574177e8e9e21"
            ],
            [
                "b20c7a6438400265"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "b20c7a6438400265",
        "type": "link out",
        "z": "af3d54f9caaa27a3",
        "name": "Subflow Status Prepare Request",
        "mode": "link",
        "links": [
            "e52e84d62da1e443"
        ],
        "x": 1235,
        "y": 380,
        "wires": []
    },
    {
        "id": "80aa0fc3c1044b73",
        "type": "link out",
        "z": "af3d54f9caaa27a3",
        "name": "Catch Error Telegram Get Service User",
        "mode": "link",
        "links": [
            "8d6622abb13008f1"
        ],
        "x": 1095,
        "y": 240,
        "wires": []
    },
    {
        "id": "e0b94503ae4bf0b9",
        "type": "link out",
        "z": "af3d54f9caaa27a3",
        "name": "Catch Error Telegram Get Token",
        "mode": "link",
        "links": [
            "8d6622abb13008f1"
        ],
        "x": 1175,
        "y": 160,
        "wires": []
    },
    {
        "id": "9aab9901799bf226",
        "type": "link out",
        "z": "af3d54f9caaa27a3",
        "name": "Catch Error Send to MES and Prepare Response",
        "mode": "link",
        "links": [
            "8d6622abb13008f1"
        ],
        "x": 1475,
        "y": 420,
        "wires": []
    },
    {
        "id": "a196e9cedc1ee544",
        "type": "switch",
        "z": "af3d54f9caaa27a3",
        "name": "msg.MESAPI == true",
        "property": "MESAPI",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 520,
        "y": 420,
        "wires": [
            [
                "366965873be4b282"
            ],
            [
                "24627d91c749398d"
            ]
        ]
    },
    {
        "id": "a0bc216692a155ae",
        "type": "switch",
        "z": "af3d54f9caaa27a3",
        "name": "msg.UseGetServiceUser == true",
        "property": "UseGetServiceUser",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 120,
        "wires": [
            [
                "128698b65ffff5de"
            ],
            [
                "56a8d896cd848039"
            ]
        ]
    },
    {
        "id": "d45a00f0e7ba4a5a",
        "type": "switch",
        "z": "af3d54f9caaa27a3",
        "name": "msg.UseGetServiceUser == true",
        "property": "UseGetServiceUser",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 200,
        "wires": [
            [
                "8338db4bdb4a638c"
            ],
            [
                "c63cbfe32878a609"
            ]
        ]
    },
    {
        "id": "e5b111babcff6e8f",
        "type": "function",
        "z": "af3d54f9caaa27a3",
        "name": "Save Send Time to MES Log ---Modified for one-day-file",
        "func": "if (!(global.get('updTelegramLogs')))\n{\n   var dt = new Date();\n   var tgLogs = \"_MES_daily_log_file_\"+dt.getDate()+\"_\"+dt.getMonth()+\"_\"+dt.getFullYear()+\".log\"\nglobal.set(\"updTelegramLogs\", tgLogs)\n}\n//-----------------------------\nvar fs = global.get(\"fsextra\");\n//Время окончания отправки данных в MES\nmsg.EndDateTime = new Date();\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n}\n//Проверка настроек телеграммы\nif (msg.MESLogsFolder && (msg.MESLogsFolder != \"\") && msg.FilePrefix && (msg.FilePrefix != \"\") && msg.FileTypeMES && (msg.FileTypeMES != \"\"))\n{\n    if (msg.StartDateTime)\n    {\n        /*var FileName = msg.FilePrefix + \"_MES_\"\n            + msg.StartDateTime?.getFullYear().toString()\n            + ('0' + (msg.StartDateTime.getMonth() + 1).toString()).slice(-2)\n            + ('0' + msg.StartDateTime.getDate().toString()).slice(-2)\n            + \".log\";*/\n        var FileName = global.get(\"updTelegramLogs\");\n        var StartDate = msg.StartDateTime.getFullYear().toString() + \".\"\n            + ('0' + (msg.StartDateTime.getMonth() + 1).toString()).slice(-2) + \".\"\n            + ('0' + msg.StartDateTime.getDate().toString()).slice(-2);\n        var StartTime = ('0' + msg.StartDateTime.getHours().toString()).slice(-2) + \":\"\n            + ('0' + msg.StartDateTime.getMinutes().toString()).slice(-2) + \":\"\n            + ('0' + msg.StartDateTime.getSeconds().toString()).slice(-2) + \".\"\n            + ('00' + msg.StartDateTime.getMilliseconds().toString()).slice(-3);\n        var EndDate = msg.EndDateTime.getFullYear().toString() + \".\"\n            + ('0' + (msg.EndDateTime.getMonth() + 1).toString()).slice(-2) + \".\"\n            + ('0' + msg.EndDateTime.getDate().toString()).slice(-2);\n        var EndTime = ('0' + msg.EndDateTime.getHours().toString()).slice(-2) + \":\"\n            + ('0' + msg.EndDateTime.getMinutes().toString()).slice(-2) + \":\"\n            + ('0' + msg.EndDateTime.getSeconds().toString()).slice(-2) + \".\"\n            + ('00' + msg.EndDateTime.getMilliseconds().toString()).slice(-3);\n        var ProcessingTime = (Number(msg.EndDateTime) - Number(msg.StartDateTime)) / 1000;\n        var FullFileName = msg.MESLogsFolder + FileName;\n        var Header = \"Start Time\\tEnd Time\\tFile Name\\tMethod\\tAPI/DBTable\\tOperation Time\\tSend Status\\r\\n\"; //Заголовок файла логирования\n        var LogLine = StartDate + \" T \" + StartTime + \"\\t\";\n        LogLine = LogLine + EndDate + \" T \" + EndTime + \"\\t\";\n        LogLine = LogLine + msg.ActiveFileName + \"\\t\";\n        LogLine = LogLine + (msg.MESAPI ? msg.method : msg.Method) + \"\\t\";\n        LogLine = LogLine + (msg.MESAPI ? msg.url : msg.DBTable) + \"\\t\";\n        LogLine = LogLine + ProcessingTime.toFixed(3) + \" sec\\t\";\n        var StatusCode = (msg.MESAPI ? (msg.statusCode == 200) : (!msg.error?.code));\n        if (StatusCode) LogLine = LogLine + \"File sent Successfully\";\n        else LogLine = LogLine + \"Error sending file\";\n        LogLine = LogLine + \"\\r\\n\";\n        var LogLineSend = false;\n        //Проверка каталога хранения логов времени отправки в MES\n        /*node.warn(FullFileName);\n        node.warn(LogLine);\n        fs.mkdirsSync(FullFileName, { recursive: true });\n        fs.appendFile(FullFileName, LogLine,(err) => {\n        if (err) {\n            console.error('Ошибка при добавлении текста в файл:', err);\n        } else {\n            console.log(`Текст успешно добавлен в файл: ${FullFileName}`);\n        }\n    });*/\n        fs.pathExists(msg.MESLogsFolder, pathExistsCallback);\n    }\n    else\n    {\n        ErrorData.error.source.type = \"Start DateTime\";\n        ErrorData.error.message = \"msg field doesn't have StartDateTime value\";\n        return [null, ErrorData];\n    }\n}\nelse\n{\n    ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings Error\";\n    ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" is not Сonfigured\";\n    return [null, ErrorData];\n}\n\nfunction pathExistsCallback(err, exists)\n{\n    if (err)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n        ErrorData.error.message = \"pathExistsCallback: \" + err;\n        node.send([null, ErrorData]);\n        node.done();\n    }\n    else\n    {\n        if (exists) fs.stat(FullFileName, statCallback);\n        else\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n            ErrorData.error.message = \"Directory '\" + msg.MESLogsFolder + \"' does not exist\";\n            node.send([null, ErrorData]);\n            node.done();\n        }\n    }\n}\n\nfunction statCallback(err, stats)\n{\n    if (err)\n    {\n        if (err.code != \"ENOENT\")\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Log File Error\";\n            ErrorData.error.message = \"statCallback: \" + err;\n            node.send([null, ErrorData]);\n            node.done();\n        }\n        else fs.appendFile(FullFileName, Header, appendFileCallback);\n    }\n    else\n    {\n        LogLineSend = true;\n        fs.appendFile(FullFileName, LogLine, appendFileCallback);\n    }\n}\n\nfunction appendFileCallback(err)\n{\n    if (err)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Log File Error\";\n        ErrorData.error.message = \"statCallback: \" + err;\n        node.send([null, ErrorData]);\n        node.done();\n    }\n    else\n    {\n        if (!LogLineSend)\n        {\n            LogLineSend = true;\n            fs.appendFile(FullFileName, LogLine, appendFileCallback);\n        }\n        else\n        {\n            node.send([msg, null]);\n            node.done();\n        }\n    }\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 520,
        "wires": [
            [],
            [
                "9aab9901799bf226"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "4a914350f6c415e9",
        "type": "debug",
        "z": "af3d54f9caaa27a3",
        "name": "debug 126",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 620,
        "wires": []
    },
    {
        "id": "6ad2a02dd5776e47",
        "type": "function",
        "z": "af3d54f9caaa27a3",
        "name": "БЛА-БЛА-ТЕСТЫ",
        "func": "//msg.MESLogsFolder = \"C:\\\\MESSync\\\\Production\\\\FinishedProduct\\\\MESLogs\"\nmsg.FilePrefix = \"TEST_file\";\nmsg.FileTypeMES = \"TEST_mes\";\nmsg.StartDateTime = new Date();\nmsg.EndDateTime = new Date(msg.StartDateTime.getTime() + 24 * 60 * 60 * 1000);\nmsg.ActiveFileName = \"TEST_active\";\nmsg.MESAPI = \"get\";\nmsg.TelegramNumber = 228\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "c9fc348b283902e9",
        "type": "debug",
        "z": "af3d54f9caaa27a3",
        "name": "debug 229",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 540,
        "wires": []
    },
    {
        "id": "c63cbfe32878a609",
        "type": "array-loop",
        "z": "af3d54f9caaa27a3",
        "name": "msg.TelegramFiles",
        "key": "al72029a818f207845",
        "keyType": "msg",
        "reset": false,
        "resetValue": "value-null",
        "array": "TelegramFiles",
        "arrayType": "msg",
        "x": 710,
        "y": 280,
        "wires": [
            [
                "9397640c167a8337"
            ],
            [
                "9b28e41d6255c583"
            ]
        ]
    },
    {
        "id": "24627d91c749398d",
        "type": "MSSQL",
        "z": "af3d54f9caaa27a3",
        "mssqlCN": "7e5114f542cff14f",
        "name": "Send to MES DBTable",
        "outField": "SQLRequestData",
        "returnType": 0,
        "throwErrors": "0",
        "query": "--Если запись заказов из таблицы tblCtSData\r\nSELECT * FROM [tblCtSDataHistory]\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "SQLRequest",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 780,
        "y": 480,
        "wires": [
            [
                "f857a3037eaaa8fc",
                "184077571e783fa7",
                "e5b111babcff6e8f",
                "4a914350f6c415e9"
            ]
        ]
    },
    {
        "id": "8386439291964386",
        "type": "function",
        "z": "dc9e44bd90b8f5e8",
        "name": "Check Data and SQLRequest Prepare",
        "func": "//Структура ответа на запрос от SAP\nmsg.Response =\n{\n    Value:\n    {\n        TotalElements: 0,\n        Items: []\n    },\n    Messages : [],\n    IsSuccess : false\n};\n\nmsg.SAPData =\n{\n    PlantId: undefined,\n    LineId: undefined,\n    MaterialId: undefined,\n    ValidOnDateTimeOrigin: undefined,\n    ValidOnDateTime: undefined,\n    MSSQLError: false\n};\n\nif (\"plantid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.plantid && (msg.SAPRequest.Data.plantid != \"\")) msg.SAPData.PlantId = msg.SAPRequest.Data.plantid;\n    else msg.Response.Messages.push(\"Поле plantid должно иметь значение\");\n}\n\nif (\"lineid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.lineid && (msg.SAPRequest.Data.lineid != \"\"))\n    {\n        if (msg.SAPData.PlantId) msg.SAPData.LineId = msg.SAPRequest.Data.lineid;\n        else msg.Response.Messages.push(\"Поле plantid должно присутствовать при наличии поля lineid\");\n    }\n    else msg.Response.Messages.push(\"Поле lineid должно иметь значение\");\n}\n\nif (\"materialid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.materialid && (msg.SAPRequest.Data.materialid != \"\")) msg.SAPData.MaterialId = msg.SAPRequest.Data.materialid;\n    else msg.Response.Messages.push(\"Поле materialid должно иметь значение\");\n}\n\nif (\"validondatetime\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.validondatetime)\n    {\n        if (!isNaN(Date.parse(msg.SAPRequest.Data.validondatetime)))\n        {\n            msg.SAPData.ValidOnDateTimeOrigin = msg.SAPRequest.Data.validondatetime;\n            msg.SAPData.ValidOnDateTime = new Date(msg.SAPData.ValidOnDateTimeOrigin);\n        }\n    }\n    if (!msg.SAPData.ValidOnDateTime) msg.Response.Messages.push(\"Поле validondatetime должно иметь значение даты\");\n}\nelse msg.Response.Messages.push(\"Поле validondatetime отсутствует\");\n\nvar EquipmentPerformanceTable = global.get(\"DBTable\")?.EquipmentPerformance;\nif ((!EquipmentPerformanceTable) || (!EquipmentPerformanceTable?.DBTable)) msg.Response.Messages.push(\"Таблица производительности оборудования не сконфигурирована\");\n\nvar EquipmentTreeTable = global.get(\"DBTable\")?.EquipmentTree;\nif ((!EquipmentTreeTable) || (!EquipmentTreeTable?.DBTable)) msg.Response.Messages.push(\"Таблица дерева оборудования не сконфигурирована\");\n\nvar MaterialTable = global.get(\"DBTable\")?.Material;\nif ((!MaterialTable) || (!MaterialTable?.DBTable)) msg.Response.Messages.push(\"Таблица материалов не сконфигурирована\");\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nvar SQLRequest = \"\";\nif (msg.Response.IsSuccess)\n{\n    //Поиск Guid для PlantId\n    SQLRequest = SQLRequest +\n        \"SELECT\\n\\t\" +\n            \"EquipmentPerformance.[gId] AS EquipmentPerformanceId,\\n\\t\" +\n            \"EquipmentPerformance.[nKey] AS EquipmentPerformanceKey,\\n\\t\" +\n            \"EquipmentPerformance.[gEquipmentId] AS EquipmentPerformanceEquipmentId,\\n\\t\" +\n            \"Line.[szName] AS LineName,\\n\\t\" +\n            \"Line.[szDescription] AS LineDescription,\\n\\t\" +\n            \"Line.[nType] AS LineType,\\n\\t\" +\n            \"Line.[szNumberSAP] AS LineNumberSAP,\\n\\t\" +\n            \"Plant.[szName] AS PlantName,\\n\\t\" +\n            \"Plant.[szDescription] AS PlantDescription,\\n\\t\" +\n            \"Plant.[nType] AS PlantType,\\n\\t\" +\n            \"Plant.[szNumberSAP] AS PlantNumberSAP,\\n\\t\" +\n            \"EquipmentPerformance.[gMaterialId] AS EquipmentPerformanceMaterialId,\\n\\t\" +\n            \"Material.[szName] AS MaterialName,\\n\\t\" +\n            \"Material.[szDescription] AS MaterialDescription,\\n\\t\" +\n            \"EquipmentPerformance.[szProductionVersion] AS EquipmentPerformanceProductionVersion,\\n\\t\" +\n            \"EquipmentPerformance.[nPerfomance] AS EquipmentPerformancePerfomance,\\n\\t\" +\n            \"EquipmentPerformance.[nUnitId] AS EquipmentPerformanceUnitId,\\n\\t\" +\n            \"EquipmentPerformance.[gUserId] AS EquipmentPerformanceUserId,\\n\\t\" +\n            \"EquipmentPerformance.[dtCreatedAt] AS EquipmentPerformanceCreatedAt,\\n\\t\" +\n            \"EquipmentPerformance.[dtUpdateAt] AS EquipmentPerformanceUpdateAt,\\n\\t\" +\n            \"EquipmentPerformance.[dtStartDate] AS EquipmentPerformanceStartDate\\n\" +\n        \"FROM \" + EquipmentPerformanceTable.DBTable + \" AS EquipmentPerformance\\n\\t\" +\n            \"INNER JOIN \" + EquipmentTreeTable.DBTable + \" AS Line ON (Line.[gId] = EquipmentPerformance.[gEquipmentId])\\n\\t\" +\n            \"INNER JOIN \" + EquipmentTreeTable.DBTable + \" AS Plant ON (Plant.[gId] = Line.[gAccessId])\\n\\t\" +\n            \"INNER JOIN \" + MaterialTable.DBTable + \" AS Material ON (Material.[gId] = EquipmentPerformance.[gMaterialId])\\n\" +\n        \"WHERE ((EquipmentPerformance.[dtStartDate] <= '\" + msg.SAPData.ValidOnDateTime.toISOString() + \"')\";\n    \n    if (msg.SAPData.PlantId) SQLRequest = SQLRequest + \" AND (Plant.[szNumberSAP] = N'\" + msg.SAPData.PlantId + \"')\";\n\n    if (msg.SAPData.LineId) SQLRequest = SQLRequest + \" AND (Line.[szNumberSAP] = N'\" + msg.SAPData.LineId + \"')\";\n\n    if (msg.SAPData.MaterialId) SQLRequest = SQLRequest + \" AND (Material.[szName] = N'\" + msg.SAPData.MaterialId + \"')\";\n\n    SQLRequest = SQLRequest + \")\\n\" +\n        \"ORDER BY Plant.[szNumberSAP], Line.[szNumberSAP], Material.[szName], EquipmentPerformance.[szProductionVersion], EquipmentPerformance.[dtStartDate] DESC\";\n}\nmsg.SQLGetRequest = SQLRequest;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 40,
        "wires": [
            [
                "1e6cb06489e70a4e"
            ]
        ]
    },
    {
        "id": "1e6cb06489e70a4e",
        "type": "switch",
        "z": "dc9e44bd90b8f5e8",
        "name": "IsSuccess == true",
        "property": "Response.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 40,
        "wires": [
            [
                "042d597b970c51dc"
            ],
            [
                "df6116670cc19afe"
            ]
        ]
    },
    {
        "id": "1a3449195e234283",
        "type": "function",
        "z": "dc9e44bd90b8f5e8",
        "name": "Create Response",
        "func": "if (msg.SubflowError?.message)\n{\n    var Response =\n    {\n        Value: {},\n        Messages: [],\n        IsSuccess: false\n    };\n    var ErrorMessage = msg.SubflowError?.message;\n    if (msg.SubflowError?.source?.name) ErrorMessage = msg.SubflowError.source.name + \": \" + ErrorMessage;\n    if (msg.SubflowError?.source?.type) ErrorMessage = msg.SubflowError.source.type + \": \" + ErrorMessage;\n    Response.Messages.push(\"Subflow: \" + ErrorMessage);\n    msg.Response = Response;\n    msg.statusCode = 500;\n}\nelse\n{\n    if (msg.SAPData.MSSQLError) msg.statusCode = 500;\n    else\n    {\n        if (msg.Response.IsSuccess) msg.statusCode = 200;\n        else msg.statusCode = 400;\n    }\n}\n\nmsg.payload = msg.Response;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 100,
        "wires": [
            [
                "fc5d26ea064373c7"
            ]
        ]
    },
    {
        "id": "b47951694cdd14b6",
        "type": "function",
        "z": "dc9e44bd90b8f5e8",
        "name": "Get Data",
        "func": "msg.SQLGetRequestError = msg.error;\n\nif (msg.SQLGetRequestError?.details)\n{\n    msg.Response.Messages.push(\"Get Data: \" + msg.SQLGetRequestError.details);\n    msg.SAPData.MSSQLError = true;\n}\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nif (msg.Response.IsSuccess)\n{\n    var Result = [];\n    for (let i = 0; i < msg.SQLGetRequestData.length; i++)\n    {\n        var Version = Result.find\n        (\n            el => \n            (el.plantid?.toLowerCase() == msg.SQLGetRequestData[i].PlantNumberSAP?.toLowerCase())\n            && (el.lineid?.toLowerCase() == msg.SQLGetRequestData[i].LineNumberSAP?.toLowerCase())\n            && (el.materialid?.toLowerCase() == msg.SQLGetRequestData[i].MaterialName?.toLowerCase())\n            && (el.version?.toLowerCase() == msg.SQLGetRequestData[i].EquipmentPerformanceProductionVersion?.toLowerCase())\n        );\n        if (Version)\n        {\n            if (Number(Version.startDateTime) < Number(msg.SQLGetRequestData[i].EquipmentPerformanceStartDate))\n            {\n                Version.efficiency = msg.SQLGetRequestData[i].EquipmentPerformancePerfomance;\n                Version.startDateTime = msg.SQLGetRequestData[i].EquipmentPerformanceStartDate;\n            }\n        }\n        else\n        {\n            var EquipmentPerformance =\n            {\n                plantid: msg.SQLGetRequestData[i].PlantNumberSAP,\n                lineid: msg.SQLGetRequestData[i].LineNumberSAP,\n                materialid: msg.SQLGetRequestData[i].MaterialName,\n                version: msg.SQLGetRequestData[i].EquipmentPerformanceProductionVersion,\n                efficiency: msg.SQLGetRequestData[i].EquipmentPerformancePerfomance,\n                unit: null,\n                startDateTime: msg.SQLGetRequestData[i].EquipmentPerformanceStartDate\n            };\n            Result.push(EquipmentPerformance);\n        }\n    }\n    msg.Response.Value.Items = Result;\n    msg.Response.Value.TotalElements = msg.Response.Value.Items.length;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 100,
        "wires": [
            [
                "1a3449195e234283"
            ]
        ]
    },
    {
        "id": "d4ef8f4a608d703a",
        "type": "catch",
        "z": "dc9e44bd90b8f5e8",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 200,
        "y": 160,
        "wires": [
            [
                "a8ff5065a6310bb2"
            ]
        ]
    },
    {
        "id": "a8ff5065a6310bb2",
        "type": "function",
        "z": "dc9e44bd90b8f5e8",
        "name": "Save Error Data",
        "func": "msg.SubflowError = msg.error;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 160,
        "wires": [
            [
                "59c71e35b2e8096e"
            ]
        ]
    },
    {
        "id": "fc5d26ea064373c7",
        "type": "function",
        "z": "dc9e44bd90b8f5e8",
        "name": "Subflow Status",
        "func": "var FillColour = \"yellow\";\nvar Text = \"Processing\";\n\nif (msg.Response)\n{\n    if (msg.Response.IsSuccess) FillColour = \"green\";\n    else FillColour = \"red\";\n    Text = \"Processing Completed. Error Count: \" + msg.Response.Messages.length;\n}\n\nmsg.payload = { fill: FillColour, shape: \"dot\", text: Text };\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "042d597b970c51dc",
        "type": "MSSQL",
        "z": "dc9e44bd90b8f5e8",
        "mssqlCN": "7e5114f542cff14f",
        "name": "Get Data",
        "outField": "SQLGetRequestData",
        "returnType": 0,
        "throwErrors": "0",
        "query": "--Если запись заказов из таблицы tblCtSData\r\nSELECT * FROM [tblCtSDataHistory]\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "SQLGetRequest",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 180,
        "y": 100,
        "wires": [
            [
                "b47951694cdd14b6"
            ]
        ]
    },
    {
        "id": "c08503dada5a58b2",
        "type": "function",
        "z": "a5012ab9e1074fde",
        "name": "Subflow Status",
        "func": "var FillColour = \"yellow\";\nvar Text = \"Processing\";\n\nif (msg.Response)\n{\n    if (msg.Response.IsSuccess) FillColour = \"green\";\n    else FillColour = \"red\";\n    Text = \"Processing Completed. Error Count: \" + msg.Response.Messages.length;\n}\n\nmsg.payload = { fill: FillColour, shape: \"dot\", text: Text };\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "f2c7313ebcaaa676",
        "type": "function",
        "z": "a5012ab9e1074fde",
        "name": "Check Data and SQLRequest Prepare",
        "func": "//Структура ответа на запрос от SAP\nmsg.Response =\n{\n    Messages : [],\n    IsSuccess : false\n};\n\nmsg.SAPData =\n{\n    IsCreate: false,\n    IsUpdate: false,\n    RequestType: \"UNKNOWN\",\n    LineEfficiencyGuid: null,\n    PlantId: null,\n    PlantGuid: null,\n    LineId: null,\n    LineGuid: null,\n    MaterialId: null,\n    MaterialGuid: null,\n    Version: null,\n    StartDateOrigin: null,\n    StartDate: null,\n    StartDateUTC: null,\n    Efficiency: null,\n    Unit: null,\n    NodeRedUserGuid: null,\n    TelegramSettingsError: false,\n    MSSQLError: false,\n    WriteFileError: false\n};\n\nmsg.TelegramNumber = \"10\";\nmsg.Telegram = undefined;\nvar Telegrams = global.get(\"Telegram\");\nvar DataValid = false;\nif (Telegrams\n    && (typeof Telegrams?.DataValidGenerateByName == \"function\")\n    && (typeof Telegrams?.DataValidGenerateByObject == \"function\")\n    && (typeof Telegrams?.DataValidCheck == \"function\")\n)\n{\n    msg.Telegram = Telegrams[msg.TelegramNumber];\n    if (msg.Telegram)\n    {\n        DataValid = Telegrams.DataValidCheck(msg.TelegramNumber);\n        if (!DataValid) msg.Response.Messages.push(\"Телеграмма \" + msg.TelegramNumber + \" имеет ошибочные настройки\");\n    }\n    else msg.Response.Messages.push(\"Телеграмма \" + msg.TelegramNumber + \" не настроена\");\n}\nelse msg.Response.Messages.push(\"Глобальный справочник телеграмм не настроен\");\nmsg.SAPData.TelegramSettingsError = (!DataValid);\n\nif (msg.req?.method?.toLowerCase() == \"post\")\n{\n    if (msg.req?.url?.toLowerCase()?.endsWith(\"create\"))\n    {\n        msg.SAPData.IsCreate = true;\n        msg.SAPData.RequestType = \"Create\";\n    }\n    if (msg.req?.url?.toLowerCase()?.endsWith(\"update\"))\n    {\n        msg.SAPData.IsUpdate = true;\n        msg.SAPData.RequestType = \"Update\";\n    }\n}\nif (!(msg.SAPData.IsCreate ^ msg.SAPData.IsUpdate)) msg.Response.Messages.push(\"Неизвестный метод запроса на шаге получения данных\");\n\nif (\"plantid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.plantid && (msg.SAPRequest.Data.plantid != \"\")) msg.SAPData.PlantId = msg.SAPRequest.Data.plantid;\n    else msg.Response.Messages.push(\"Поле plantid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле plantid отсутствует\");\n\nif (\"lineid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.lineid && (msg.SAPRequest.Data.lineid != \"\")) msg.SAPData.LineId = msg.SAPRequest.Data.lineid;\n    else msg.Response.Messages.push(\"Поле lineid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле lineid отсутствует\");\n\nif (\"materialid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.materialid && (msg.SAPRequest.Data.materialid != \"\")) msg.SAPData.MaterialId = msg.SAPRequest.Data.materialid;\n    else msg.Response.Messages.push(\"Поле materialid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле materialid отсутствует\");\n\nif (\"version\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.version && (msg.SAPRequest.Data.version != \"\")) msg.SAPData.Version = msg.SAPRequest.Data.version;\n    else msg.Response.Messages.push(\"Поле version должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле version отсутствует\");\n\nif (\"startdatetime\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.startdatetime)\n    {\n        if (!isNaN(Date.parse(msg.SAPRequest.Data.startdatetime)))\n        {\n            if (Date.parse(msg.SAPRequest.Data.startdatetime) > 0)\n            {\n                msg.SAPData.StartDateOrigin = msg.SAPRequest.Data.startdatetime;\n                msg.SAPData.StartDate = new Date(msg.SAPData.StartDateOrigin);\n                msg.SAPData.StartDateUTC = msg.SAPData.StartDate?.toISOString();\n            }\n        }\n    }\n    if (!msg.SAPData.StartDate) msg.Response.Messages.push(\"Поле startdatetime должно иметь значение даты позже \\\"1970-01-01T00:00:00.000Z\\\"\");\n}\nelse msg.Response.Messages.push(\"Поле startdatetime отсутствует\");\n\nif (\"efficiency\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.efficiency)\n    {\n        if (!isNaN(parseFloat(msg.SAPRequest.Data.efficiency))) msg.SAPData.Efficiency = parseFloat(msg.SAPRequest.Data.efficiency);\n    }\n    if (!msg.SAPData.Efficiency) msg.Response.Messages.push(\"Поле efficiency должно иметь числовое значение\");\n}\nelse msg.Response.Messages.push(\"Поле efficiency отсутствует\");\n\n/*if (\"unit\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.unit && (msg.SAPRequest.Data.unit != \"\")) msg.SAPData.Unit = msg.SAPRequest.Data.unit;\n    else msg.Response.Messages.push(\"Поле unit должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле unit отсутствует\");*/\n\nvar EquipmentTreeTable = global.get(\"DBTable\")?.EquipmentTree;\nif ((!EquipmentTreeTable) || (!EquipmentTreeTable?.DBTable)) msg.Response.Messages.push(\"Таблица дерева оборудования не сконфигурирована\");\n\nvar MaterialTable = global.get(\"DBTable\")?.Material;\nif ((!MaterialTable) || (!MaterialTable?.DBTable)) msg.Response.Messages.push(\"Таблица материалов не сконфигурирована\");\n\nvar AspNetUsersTable = global.get(\"DBTable\")?.AspNetUsers;\nif ((!AspNetUsersTable) || (!AspNetUsersTable?.DBTable)) msg.Response.Messages.push(\"Таблица пользователей не сконфигурирована\");\n\nvar EquipmentPerformanceTable = global.get(\"DBTable\")?.EquipmentPerformance;\nif ((!EquipmentPerformanceTable) || (!EquipmentPerformanceTable?.DBTable)) msg.Response.Messages.push(\"Таблица производительности оборудования не сконфигурирована\");\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nvar SQLRequest = \"\";\nif (msg.Response.IsSuccess)\n{\n    //Поиск Guid для PlantId\n    SQLRequest = SQLRequest +\n        \"SELECT\\n\\t\" +\n            \"'0' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'PlantId',\\n\\t\" +\n            \"NULL AS 'LineId',\\n\\t\" +\n            \"NULL AS 'MaterialId',\\n\\t\" +\n            \"NULL AS 'EquipmentPerformanceProductionVersion',\\n\\t\" +\n            \"NULL AS 'EquipmentPerformancePerformance',\\n\\t\" +\n            \"NULL AS 'EquipmentPerformanceUnitId',\\n\\t\" +\n            \"NULL AS 'EquipmentPerformanceStartDate'\\n\" +\n        \"FROM \" + EquipmentTreeTable.DBTable + \"\\n\" +\n        \"WHERE ([szNumberSAP] = N'\" + msg.SAPData.PlantId + \"')\\n\" +\n    //Поиск Guid для LineId\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'1' AS 'Type',\\n\\t\" +\n            \"Line.[gId] AS 'Guid',\\n\\t\" +\n            \"Line.[szNumberSAP] AS 'Id',\\n\\t\" +\n            \"NULL AS 'PlantId',\\n\\t\" +\n            \"NULL AS 'LineId',\\n\\t\" +\n            \"NULL AS 'MaterialId',\\n\\t\" +\n            \"NULL AS 'EquipmentPerformanceProductionVersion',\\n\\t\" +\n            \"NULL AS 'EquipmentPerformancePerformance',\\n\\t\" +\n            \"NULL AS 'EquipmentPerformanceUnitId',\\n\\t\" +\n            \"NULL AS 'EquipmentPerformanceStartDate'\\n\" +\n        \"FROM \" + EquipmentTreeTable.DBTable + \" AS Line\\n\\t\" +\n            \"INNER JOIN \" + EquipmentTreeTable.DBTable + \" AS Plant ON (Plant.[gId] = Line.[gAccessId])\\n\" +\n        \"WHERE ((Line.[szNumberSAP] = N'\" + msg.SAPData.LineId + \"') AND (Line.[nType] = 4) AND (Plant.[szNumberSAP] = N'\" + msg.SAPData.PlantId + \"'))\\n\" +\n    //Поиск Guid для MaterialId\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'2' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'PlantId',\\n\\t\" +\n            \"NULL AS 'LineId',\\n\\t\" +\n            \"NULL AS 'MaterialId',\\n\\t\" +\n            \"NULL AS 'EquipmentPerformanceProductionVersion',\\n\\t\" +\n            \"NULL AS 'EquipmentPerformancePerformance',\\n\\t\" +\n            \"NULL AS 'EquipmentPerformanceUnitId',\\n\\t\" +\n            \"NULL AS 'EquipmentPerformanceStartDate'\\n\" +\n        \"FROM \" + MaterialTable.DBTable + \"\\n\" +\n        \"WHERE ([szName] = N'\" + msg.SAPData.MaterialId + \"')\\n\" +\n    //Поиск Guid для Node-Red пользователя\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'3' AS 'Type',\\n\\t\" +\n            \"[Id] AS 'Guid',\\n\\t\" +\n            \"[NormalizedUserName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'PlantId',\\n\\t\" +\n            \"NULL AS 'LineId',\\n\\t\" +\n            \"NULL AS 'MaterialId',\\n\\t\" +\n            \"NULL AS 'EquipmentPerformanceProductionVersion',\\n\\t\" +\n            \"NULL AS 'EquipmentPerformancePerformance',\\n\\t\" +\n            \"NULL AS 'EquipmentPerformanceUnitId',\\n\\t\" +\n            \"NULL AS 'EquipmentPerformanceStartDate'\\n\" +\n        \"FROM \" + AspNetUsersTable.DBTable + \"\\n\" +\n        \"WHERE ([NormalizedUserName] = N'SYSTEM_NR')\\n\" +\n    //Поиск Guid для записи производительности\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'4' AS 'Type',\\n\\t\" +\n            \"EquipmentPerformance.[gId] AS 'Guid',\\n\\t\" +\n            \"NULL AS 'Id',\\n\\t\" +\n            \"Plant.[szNumberSAP] AS 'PlantId',\\n\\t\" +\n            \"Line.[szNumberSAP] AS 'LineId',\\n\\t\" +\n            \"Material.[szName] AS 'MaterialId',\\n\\t\" +\n            \"EquipmentPerformance.[szProductionVersion] AS 'EquipmentPerformanceProductionVersion',\\n\\t\" +\n            \"EquipmentPerformance.[nPerfomance] AS 'EquipmentPerformancePerformance',\\n\\t\" +\n            \"EquipmentPerformance.[nUnitId] AS 'EquipmentPerformanceUnitId',\\n\\t\" +\n            \"EquipmentPerformance.[dtStartDate] AS 'EquipmentPerformanceStartDate'\\n\" +\n        \"FROM \" + EquipmentPerformanceTable.DBTable + \" AS EquipmentPerformance\\n\\t\" +\n            \"INNER JOIN \" + EquipmentTreeTable.DBTable + \" AS Line ON (Line.[gId] = EquipmentPerformance.[gEquipmentId])\\n\\t\" +\n            \"INNER JOIN \" + EquipmentTreeTable.DBTable + \" AS Plant ON (Plant.[gId] = Line.[gAccessId])\\n\\t\" +\n            \"INNER JOIN \" + MaterialTable.DBTable + \" AS Material ON (Material.[gId] = EquipmentPerformance.[gMaterialId])\\n\" +\n        \"WHERE ((Plant.[szNumberSAP] = N'\" + msg.SAPData.PlantId + \"') AND (Line.[szNumberSAP] = N'\" + msg.SAPData.LineId + \"') AND (Material.[szName] = N'\" + msg.SAPData.MaterialId + \"') AND (EquipmentPerformance.[szProductionVersion] = N'\" + msg.SAPData.Version + \"') AND (EquipmentPerformance.[dtStartDate] = '\" + msg.SAPData.StartDateUTC + \"'))\";\n}\nmsg.SQLCheckRequest = SQLRequest;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 40,
        "wires": [
            [
                "76e7a0f5f997169a"
            ]
        ]
    },
    {
        "id": "76e7a0f5f997169a",
        "type": "switch",
        "z": "a5012ab9e1074fde",
        "name": "IsSuccess == true",
        "property": "Response.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 40,
        "wires": [
            [
                "61fbddca126b0b9b"
            ],
            [
                "bd8b368e84f9a832"
            ]
        ]
    },
    {
        "id": "3d8184074b688c7c",
        "type": "function",
        "z": "a5012ab9e1074fde",
        "name": "Create Response",
        "func": "if (msg.SubflowError?.message)\n{\n    var Response =\n    {\n        Value: {},\n        Messages: [],\n        IsSuccess: false\n    };\n    var ErrorMessage = msg.SubflowError?.message;\n    if (msg.SubflowError?.source?.name) ErrorMessage = msg.SubflowError.source.name + \": \" + ErrorMessage;\n    if (msg.SubflowError?.source?.type) ErrorMessage = msg.SubflowError.source.type + \": \" + ErrorMessage;\n    Response.Messages.push(\"Subflow: \" + ErrorMessage);\n    msg.Response = Response;\n    msg.statusCode = 500;\n}\nelse\n{\n    if (msg.SAPData.MSSQLError || msg.SAPData.WriteFileError || msg.SAPData.TelegramSettingsError) msg.statusCode = 500;\n    else\n    {\n        if (msg.Response.IsSuccess) msg.statusCode = 200;\n        else msg.statusCode = 400;\n    }\n}\n\nmsg.payload = msg.Response;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 160,
        "wires": [
            [
                "c08503dada5a58b2"
            ]
        ]
    },
    {
        "id": "f3d9964abf8bdb93",
        "type": "function",
        "z": "a5012ab9e1074fde",
        "name": "Check Data",
        "func": "msg.SQLCheckRequestError = msg.error;\n\nif (msg.SQLCheckRequestError?.details)\n{\n    msg.Response.Messages.push(\"Check Data: \" + msg.SQLCheckRequestError.details);\n    msg.SAPData.MSSQLError = true;\n}\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nif (msg.Response.IsSuccess)\n{\n    var PlantId = msg.SQLCheckRequestData.filter(el => el.Type == 0);\n    if (PlantId.length > 0)\n    {\n        if (PlantId.length > 1) msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" имеет дубликаты\");\n        else msg.SAPData.PlantGuid = PlantId[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" не найден\");\n    \n    var LineId = msg.SQLCheckRequestData.filter(el => el.Type == 1);\n    if (LineId.length > 0)\n    {\n        if (LineId.length > 1) msg.Response.Messages.push(\"Для предприятия с ID = \" + msg.SAPData.PlantId + \" линия с ID = \" + msg.SAPData.LineId + \" имеет дубликаты\");\n        else msg.SAPData.LineGuid = LineId[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Для предприятия с ID = \" + msg.SAPData.PlantId + \" не найдена линия с ID = \" + msg.SAPData.LineId);\n\n    var MaterialId = msg.SQLCheckRequestData.filter(el => el.Type == 2);\n    if (MaterialId.length > 0)\n    {\n        if (MaterialId.length > 1) msg.Response.Messages.push(\"Материал с ID = \" + msg.SAPData.MaterialId + \" имеет дубликаты\");\n        else msg.SAPData.MaterialGuid = MaterialId[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Материал с ID = \" + msg.SAPData.MaterialId + \" не найден\");\n\n    var NodeRedUserGuid = msg.SQLCheckRequestData.filter(el => el.Type == 3);\n    if (NodeRedUserGuid.length > 0)\n    {\n        if (NodeRedUserGuid.length > 1) msg.Response.Messages.push(\"Пользователь имеет дубликаты\");\n        else msg.SAPData.NodeRedUserGuid = NodeRedUserGuid[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Пользователь не найден\");\n\n    var Efficiency = msg.SQLCheckRequestData.filter(el => el.Type == 4);\n    if (msg.SAPData.IsCreate)\n    {\n        if (Efficiency.length > 0) msg.Response.Messages.push(\"Производительность линии с ID = \" + msg.SAPData.LineId + \" завода с ID = \" + msg.SAPData.PlantId + \" на материале с ID = \" + msg.SAPData.MaterialId + \" версии \" + msg.SAPData.Version + \" от \" + msg.SAPData.StartDateOrigin + \" уже создана\");\n    }\n    else\n    {\n        if (msg.SAPData.IsUpdate)\n        {\n            if (Efficiency.length > 0)\n            {\n                if (Efficiency.length > 1) msg.Response.Messages.push(\"Производительность линии с ID = \" + msg.SAPData.LineId + \" завода с ID = \" + msg.SAPData.PlantId + \" на материале с ID = \" + msg.SAPData.MaterialId + \" версии \" + msg.SAPData.Version + \" от \" + msg.SAPData.StartDateOrigin + \" имеет дубликаты\");\n                else msg.SAPData.LineEfficiencyGuid = Efficiency[0].Guid;\n            }\n            else msg.Response.Messages.push(\"Производительность линии с ID = \" + msg.SAPData.LineId + \" завода с ID = \" + msg.SAPData.PlantId + \" на материале с ID = \" + msg.SAPData.MaterialId + \" версии \" + msg.SAPData.Version + \" от \" + msg.SAPData.StartDateOrigin + \" не найдена\");\n        }\n        else msg.Response.Messages.push(\"Неизвестный метод запроса на шаге проверки данных\");\n    }\n\n    msg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 100,
        "wires": [
            [
                "04c2d7f9e604130d"
            ]
        ]
    },
    {
        "id": "04c2d7f9e604130d",
        "type": "switch",
        "z": "a5012ab9e1074fde",
        "name": "IsSuccess == true",
        "property": "Response.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 100,
        "wires": [
            [
                "7285875fb47b43e4"
            ],
            [
                "517921a3ab040a07"
            ]
        ]
    },
    {
        "id": "7285875fb47b43e4",
        "type": "function",
        "z": "a5012ab9e1074fde",
        "name": "Save Line Efficiency Data",
        "func": "var fs = global.get(\"fsextra\");\nvar FilesFolder = msg.Telegram?.Folder?.FilesFolder?.Path; //Каталог хранения кучи файлов заявок\nvar FilePrefix = msg.Telegram?.FilePrefix; //Префикс файлов запроса и ответа (без нижнего подчёркивания)\nvar FileType = msg.Telegram?.Folder?.FilesFolder?.FileType; //Тип файла\nvar StartDateTime = new Date(); //Дата и время начала создания файлов\nvar StartDateTimeString = StartDateTime.getFullYear()\n    + ('0' + (StartDateTime.getMonth() + 1)).slice(-2)\n    + ('0' + StartDateTime.getDate()).slice(-2);\nvar StartDateTimeString_log = StartDateTime.getFullYear()\n    + ('0' + (StartDateTime.getMonth() + 1)).slice(-2)\n    + ('0' + StartDateTime.getDate()).slice(-2) + \"_\"\n    + ('0' + StartDateTime.getHours()).slice(-2)\n    + ('0' + StartDateTime.getMinutes()).slice(-2)\n    + ('0' + StartDateTime.getSeconds()).slice(-2);\nmsg.StartDateTime = StartDateTime;\nmsg.StartDateTimeString = StartDateTimeString;\n\nvar FileMethodName = \"\";\nif (msg.SAPData.IsCreate) FileMethodName = \"Create\";\nelse\n{\n    if (msg.SAPData.IsUpdate) FileMethodName = \"Update\";\n    else msg.Response.Messages.push(\"Неизвестный метод запроса на шаге сохранения данных в файл\");\n}\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nif (msg.Response.IsSuccess)\n{\n    //Проверка каталога хранения кучи файлов заявок\n    if (FilesFolder && (FilesFolder != \"\") && FileType && (FileType != \"\"))\n    {\n        if (fs.pathExistsSync(FilesFolder))\n        {\n            var RequestData =\n            {\n                Insert: false,\n                Update: false,\n                Data: {},\n                Condition: {}\n            };\n            \n            if (msg.SAPData.IsCreate)\n            {\n                RequestData.Insert = true;\n                RequestData.Data =\n                {\n                    gId: \"NEWID()\",\n                    gEquipmentId: \"N'\" + msg.SAPData.LineGuid + \"'\",\n                    gMaterialId: \"N'\" + msg.SAPData.MaterialGuid + \"'\",\n                    szProductionVersion: (msg.SAPData.Version ? \"N'\" + msg.SAPData.Version + \"'\" : \"NULL\"),\n                    nPerfomance: msg.SAPData.Efficiency,\n                    nUnitId: \"NULL\",\n                    gUserId: \"N'\" + msg.SAPData.NodeRedUserGuid + \"'\",\n                    dtCreatedAt: \"GETUTCDATE()\",\n                    dtStartDate: \"'\" + msg.SAPData.StartDateUTC + \"'\"\n                };\n            }\n            else\n            {\n                if (msg.SAPData.IsUpdate)\n                {\n                    RequestData.Update = true;\n                    RequestData.Data =\n                    {\n                        nPerfomance: msg.SAPData.Efficiency,\n                        nUnitId: \"NULL\",\n                        gUserId: \"N'\" + msg.SAPData.NodeRedUserGuid + \"'\",\n                        dtUpdateAt: \"GETUTCDATE()\"\n                    };\n                    RequestData.Condition = \"[gId] = N'\" + msg.SAPData.LineEfficiencyGuid + \"'\";\n                }\n            }\n\n            var SaveData =\n            {\n                Date: StartDateTimeString_log,\n                API: \"\",\n                Table: \"EquipmentPerformance\",\n                Data: RequestData\n            };\n            var FileName = FilePrefix + \"_\" + StartDateTimeString + \"_\" + FileMethodName + \"_\" + msg.SAPData.PlantId + \"_\" + msg.SAPData.LineId + \"_\" + msg.SAPData.MaterialId + \".\" + FileType;\n            var FileNameFull = FilesFolder + FileName;\n            var FileData = JSON.stringify(SaveData, null, \"\\t\");\n            var IsSuccess = false;\n            //Запись данных в файл\n            try\n            {\n                fs.appendFile(FileNameFull, FileData);\n            }\n            catch (ex)\n            {\n                msg.Response.Messages.push(\"Ошибка записи данных в файл \" + FileName + \" (\" + ex + \")\");\n            }\n            //Проверка существования конечного файла\n            if (fs.existsSync(FileNameFull)) IsSuccess = true;\n            else msg.Response.Messages.push(\"Конечный файл \" + FileName + \" не существует\");\n            msg.SAPData.WriteFileError = (!IsSuccess);\n        }\n        else msg.Response.Messages.push(\"Каталог приёма заявок на существует\");\n    }\n    else msg.Response.Messages.push(\"Каталог телаграммы \" + msg.TelegramNumber + \" не задан\");\n\n    msg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 160,
        "wires": [
            [
                "3d8184074b688c7c"
            ]
        ]
    },
    {
        "id": "968b8aa9b8f402a5",
        "type": "catch",
        "z": "a5012ab9e1074fde",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 200,
        "y": 220,
        "wires": [
            [
                "de5f7f21309c26d2"
            ]
        ]
    },
    {
        "id": "de5f7f21309c26d2",
        "type": "function",
        "z": "a5012ab9e1074fde",
        "name": "Save Error Data",
        "func": "msg.SubflowError = msg.error;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 220,
        "wires": [
            [
                "53a02682940b168d"
            ]
        ]
    },
    {
        "id": "1d9019a9c58991ea",
        "type": "function",
        "z": "a5012ab9e1074fde",
        "name": "Check Data and SQLRequest Prepare",
        "func": "//Структура ответа на запрос от SAP\nmsg.Response =\n{\n    Messages : [],\n    IsSuccess : false\n};\n\nmsg.SAPData =\n{\n    IsCreate: false,\n    IsUpdate: false,\n    RequestType: \"UNKNOWN\",\n    LineEfficiencyGuid: null,\n    PlantId: null,\n    PlantGuid: null,\n    LineId: null,\n    LineGuid: null,\n    MaterialId: null,\n    MaterialGuid: null,\n    Version: null,\n    StartDateOrigin: null,\n    StartDate: null,\n    StartDateUTC: null,\n    Efficiency: null,\n    Unit: null,\n    NodeRedUserGuid: null,\n    TelegramSettingsError: false,\n    MSSQLError: false,\n    WriteFileError: false\n};\n\nmsg.TelegramNumber = \"10\";\nmsg.Telegram = undefined;\nvar Telegrams = global.get(\"Telegram\");\nvar DataValid = false;\nif (Telegrams\n    && (typeof Telegrams?.DataValidGenerateByName == \"function\")\n    && (typeof Telegrams?.DataValidGenerateByObject == \"function\")\n    && (typeof Telegrams?.DataValidCheck == \"function\")\n)\n{\n    msg.Telegram = Telegrams[msg.TelegramNumber];\n    if (msg.Telegram)\n    {\n        DataValid = Telegrams.DataValidCheck(msg.TelegramNumber);\n        if (!DataValid) msg.Response.Messages.push(\"Телеграмма \" + msg.TelegramNumber + \" имеет ошибочные настройки\");\n    }\n    else msg.Response.Messages.push(\"Телеграмма \" + msg.TelegramNumber + \" не настроена\");\n}\nelse msg.Response.Messages.push(\"Глобальный справочник телеграмм не настроен\");\nmsg.SAPData.TelegramSettingsError = (!DataValid);\n\nif (msg.req?.method?.toLowerCase() == \"post\")\n{\n    if (msg.req?.url?.toLowerCase()?.endsWith(\"create\"))\n    {\n        msg.SAPData.IsCreate = true;\n        msg.SAPData.RequestType = \"Create\";\n    }\n    if (msg.req?.url?.toLowerCase()?.endsWith(\"update\"))\n    {\n        msg.SAPData.IsUpdate = true;\n        msg.SAPData.RequestType = \"Update\";\n    }\n}\nif (!(msg.SAPData.IsCreate ^ msg.SAPData.IsUpdate)) msg.Response.Messages.push(\"Неизвестный метод запроса на шаге получения данных\");\n\nif (\"plantid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.plantid && (msg.SAPRequest.Data.plantid != \"\")) msg.SAPData.PlantId = msg.SAPRequest.Data.plantid;\n    else msg.Response.Messages.push(\"Поле plantid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле plantid отсутствует\");\n\nif (\"lineid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.lineid && (msg.SAPRequest.Data.lineid != \"\")) msg.SAPData.LineId = msg.SAPRequest.Data.lineid;\n    else msg.Response.Messages.push(\"Поле lineid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле lineid отсутствует\");\n\nif (\"materialid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.materialid && (msg.SAPRequest.Data.materialid != \"\")) msg.SAPData.MaterialId = msg.SAPRequest.Data.materialid;\n    else msg.Response.Messages.push(\"Поле materialid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле materialid отсутствует\");\n\nif (\"version\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.version && (msg.SAPRequest.Data.version != \"\")) msg.SAPData.Version = msg.SAPRequest.Data.version;\n    else msg.Response.Messages.push(\"Поле version должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле version отсутствует\");\n\nif (\"startdatetime\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.startdatetime)\n    {\n        if (!isNaN(Date.parse(msg.SAPRequest.Data.startdatetime)))\n        {\n            if (Date.parse(msg.SAPRequest.Data.startdatetime) > 0)\n            {\n                msg.SAPData.StartDateOrigin = msg.SAPRequest.Data.startdatetime;\n                msg.SAPData.StartDate = new Date(msg.SAPData.StartDateOrigin);\n                msg.SAPData.StartDateUTC = msg.SAPData.StartDate?.toISOString();\n            }\n        }\n    }\n    if (!msg.SAPData.StartDate) msg.Response.Messages.push(\"Поле startdatetime должно иметь значение даты позже \\\"1970-01-01T00:00:00.000Z\\\"\");\n}\nelse msg.Response.Messages.push(\"Поле startdatetime отсутствует\");\n\nif (\"efficiency\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.efficiency)\n    {\n        if (!isNaN(parseFloat(msg.SAPRequest.Data.efficiency))) msg.SAPData.Efficiency = parseFloat(msg.SAPRequest.Data.efficiency);\n    }\n    if (!msg.SAPData.Efficiency) msg.Response.Messages.push(\"Поле efficiency должно иметь числовое значение\");\n}\nelse msg.Response.Messages.push(\"Поле efficiency отсутствует\");\n\n/*if (\"unit\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.unit && (msg.SAPRequest.Data.unit != \"\")) msg.SAPData.Unit = msg.SAPRequest.Data.unit;\n    else msg.Response.Messages.push(\"Поле unit должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле unit отсутствует\");*/\n\nvar EquipmentTreeTable = global.get(\"DBTable\")?.EquipmentTree;\nif ((!EquipmentTreeTable) || (!EquipmentTreeTable?.DBTable)) msg.Response.Messages.push(\"Таблица дерева оборудования не сконфигурирована\");\n\nvar MaterialTable = global.get(\"DBTable\")?.Material;\nif ((!MaterialTable) || (!MaterialTable?.DBTable)) msg.Response.Messages.push(\"Таблица материалов не сконфигурирована\");\n\nvar AspNetUsersTable = global.get(\"DBTable\")?.AspNetUsers;\nif ((!AspNetUsersTable) || (!AspNetUsersTable?.DBTable)) msg.Response.Messages.push(\"Таблица пользователей не сконфигурирована\");\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nvar SQLRequest = \"\";\nif (msg.Response.IsSuccess)\n{\n    //Поиск Guid для PlantId\n    SQLRequest = SQLRequest +\n        \"SELECT\\n\\t\" +\n            \"'0' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"NULL AS 'EquipmentType',\\n\\t\" +\n            \"NULL AS 'Description'\\n\\t\" +\n        \"FROM \" + EquipmentTreeTable.DBTable + \"\\n\" +\n        \"WHERE ([szNumberSAP] = N'\" + msg.SAPData.PlantId + \"')\\n\" +\n    //Поиск Guid для LineId\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'1' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szNumberSAP] AS 'Id',\\n\\t\" +\n            \"NULL AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"NULL AS 'EquipmentType',\\n\\t\" +\n            \"NULL AS 'Description'\\n\\t\" +\n        \"FROM \" + EquipmentTreeTable.DBTable + \"\\n\" +\n        \"WHERE ([szNumberSAP] = N'\" + msg.SAPData.LineId + \"')\\n\" +\n    //Поиск Guid для MaterialId\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'2' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"NULL AS 'EquipmentType',\\n\\t\" +\n            \"NULL AS 'Description'\\n\\t\" +\n        \"FROM \" + MaterialTable.DBTable + \"\\n\" +\n        \"WHERE ([szName] = N'\" + msg.SAPData.MaterialId + \"')\\n\" +\n    //Поиск Guid для Node-Red пользователя\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'3' AS 'Type',\\n\\t\" +\n            \"[Id] AS 'Guid',\\n\\t\" +\n            \"[NormalizedUserName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"NULL AS 'EquipmentType',\\n\\t\" +\n            \"NULL AS 'Description'\\n\\t\" +\n        \"FROM \" + AspNetUsersTable.DBTable + \"\\n\" +\n        \"WHERE ([NormalizedUserName] = N'SYSTEM_NR')\\n\" +\n    //Получение дерева оборудования\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'4' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szNumberSAP] AS 'Id',\\n\\t\" +\n            \"[gEquipmentTreeId] AS 'TreeGuid_ParentGuid',\\n\\t\" +\n            \"[nType] AS 'EquipmentType',\\n\\t\" +\n            \"[szDescription] AS 'Description'\\n\\t\" +\n        \"FROM \" + EquipmentTreeTable.DBTable + \"\\n\";\n}\nmsg.SQLCheckRequest = SQLRequest;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "e5cf0a7ff9b05bf3",
        "type": "function",
        "z": "a5012ab9e1074fde",
        "name": "Check Data",
        "func": "msg.SQLCheckRequestError = msg.error;\n\nif (msg.SQLCheckRequestError?.details)\n{\n    msg.Response.Messages.push(\"Check Data: \" + msg.SQLCheckRequestError.details);\n    msg.SAPData.MSSQLError = true;\n}\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nif (msg.Response.IsSuccess)\n{\n    var PlantId = msg.SQLCheckRequestData.filter(el => el.Type == 0);\n    if (PlantId.length > 0)\n    {\n        if (PlantId.length > 1) msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" имеет дубликаты\");\n        else\n        {\n            msg.SAPData.PlantGuid = PlantId[0].Guid;\n            var EquipmentTree = msg.SQLCheckRequestData.filter(el => el.Type == 4);\n            if (EquipmentTree.length > 0)\n            {\n                var LineIds = msg.SQLCheckRequestData.filter(el => el.Type == 1);\n                if (LineIds.length > 0)\n                {\n                    for (let i = 0; (!msg.SAPData.LineGuid) && (i < LineIds.length); i++)\n                    {\n                        var Line = EquipmentTree.find(el => el.Guid?.toLowerCase() == LineIds[i].Guid?.toLowerCase());\n                        if (Line)\n                        {\n                            var Equipment = Line;\n                            var j = 0;\n                            for (j = 0; Equipment && (Equipment?.TreeGuid_ParentGuid || (Equipment?.EquipmentType != 1)) && (j < 1000); j++)\n                            {\n                                var ParentGuid = Equipment.TreeGuid_ParentGuid?.toLowerCase();\n                                Equipment = EquipmentTree.find(el => el.Guid?.toLowerCase() == ParentGuid);\n                            }\n                            if (j < 1000)\n                            {\n                                if (Equipment)\n                                {\n                                    if (Equipment.Guid?.toLowerCase() == PlantId[0].Guid.toLowerCase()) msg.SAPData.LineGuid = LineIds[i].Guid;\n                                }\n                            }\n                            else msg.Response.Messages.push(\"Для оборудование с ID = \" + LineIds[i].Guid + \" больше 1000 проходов в дереве\");\n                        }\n                        else msg.Response.Messages.push(\"Оборудование с ID = \" + LineIds[i].Guid + \" не найдено в дереве\");\n                    };\n                    if (!msg.SAPData.LineGuid) msg.Response.Messages.push(\"Для предприятия с ID = \" + msg.SAPData.PlantId + \" не найдена линия с ID = \" + msg.SAPData.LineId);\n                }\n                else msg.Response.Messages.push(\"Линия с ID = \" + msg.SAPData.LineId + \" не найдена\");\n            }\n            else msg.Response.Messages.push(\"Дерево оборудования пустое\");\n        }\n    }\n    else msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" не найден\");\n    \n\n    var MaterialId = msg.SQLCheckRequestData.filter(el => el.Type == 2);\n    if (MaterialId.length > 0)\n    {\n        if (MaterialId.length > 1) msg.Response.Messages.push(\"Материал с ID = \" + msg.SAPData.MaterialId + \" имеет дубликаты\");\n        else msg.SAPData.MaterialGuid = MaterialId[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Материал с ID = \" + msg.SAPData.MaterialId + \" не найден\");\n\n    var NodeRedUserGuid = msg.SQLCheckRequestData.filter(el => el.Type == 3);\n    if (NodeRedUserGuid.length > 0)\n    {\n        if (NodeRedUserGuid.length > 1) msg.Response.Messages.push(\"Пользователь имеет дубликаты\");\n        else msg.SAPData.NodeRedUserGuid = NodeRedUserGuid[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Пользователь не найден\");\n\n    var EquipmentPerformanceTable = global.get(\"DBTable\")?.EquipmentPerformance;\n    if ((!EquipmentPerformanceTable) || (!EquipmentPerformanceTable?.DBTable)) msg.Response.Messages.push(\"Таблица производительности оборудования не сконфигурирована\");\n\n    msg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n    if (msg.Response.IsSuccess)\n    {\n        var SQLRequest = \"SELECT *\\n\" +\n            \"FROM \" + EquipmentPerformanceTable.DBTable + \"\\n\\t\" +\n            \"WHERE (([gEquipmentId] = N'\" + msg.SAPData.LineGuid + \"') AND ([gMaterialId] = N'\" + msg.SAPData.MaterialGuid + \"') AND ([szProductionVersion] = \" + (msg.SAPData.Version ? \"N'\" + msg.SAPData.Version + \"'\" : \"NULL\") + \") AND ([dtStartDate] = '\" + msg.SAPData.StartDateUTC + \"'))\";\n        \n        msg.SQLCheckRequest2 = SQLRequest;\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "23dafa703fe24c9e",
        "type": "function",
        "z": "a5012ab9e1074fde",
        "name": "Check Data 2",
        "func": "msg.SQLCheckRequest2Error = msg.error;\n\nif (msg.SQLCheckRequest2Error?.details)\n{\n    msg.Response.Messages.push(\"Check Data 2: \" + msg.SQLCheckRequest2Error.details);\n    msg.SAPData.MSSQLError = true;\n}\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nif (msg.Response.IsSuccess)\n{\n    var Efficiency = msg.SQLCheckRequest2Data;\n    if (msg.SAPData.IsCreate)\n    {\n        if (Efficiency.length > 0) msg.Response.Messages.push(\"Производительность линии с ID = \" + msg.SAPData.LineId + \" завода с ID = \" + msg.SAPData.PlantId + \" на материале с ID = \" + msg.SAPData.MaterialId + \" уже создана\");\n    }\n    else\n    {\n        if (msg.SAPData.IsUpdate)\n        {\n            if (Efficiency.length > 0)\n            {\n                if (Efficiency.length > 1) msg.Response.Messages.push(\"Производительность линии с ID = \" + msg.SAPData.LineId + \" завода с ID = \" + msg.SAPData.PlantId + \" на материале с ID = \" + msg.SAPData.MaterialId + \" имеет дубликаты\");\n                else msg.SAPData.LineEfficiencyGuid = Efficiency[0].gId;\n            }\n            else msg.Response.Messages.push(\"Производительность линии с ID = \" + msg.SAPData.LineId + \" завода с ID = \" + msg.SAPData.PlantId + \" на материале с ID = \" + msg.SAPData.MaterialId + \" не найдена\");\n        }\n        else msg.Response.Messages.push(\"Неизвестный метод запроса на шаге проверки данных\");\n    }\n\n    msg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 520,
        "wires": [
            [
                "de64cdd8f41a06ad"
            ]
        ]
    },
    {
        "id": "de64cdd8f41a06ad",
        "type": "switch",
        "z": "a5012ab9e1074fde",
        "name": "IsSuccess == true",
        "property": "Response.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 520,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "61fbddca126b0b9b",
        "type": "MSSQL",
        "z": "a5012ab9e1074fde",
        "mssqlCN": "7e5114f542cff14f",
        "name": "Check Data",
        "outField": "SQLCheckRequestData",
        "returnType": 0,
        "throwErrors": "0",
        "query": "--Если запись заказов из таблицы tblCtSData\r\nSELECT * FROM [tblCtSDataHistory]\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "SQLCheckRequest",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 190,
        "y": 100,
        "wires": [
            [
                "f3d9964abf8bdb93"
            ]
        ]
    },
    {
        "id": "b32ff7d502310691",
        "type": "MSSQL",
        "z": "a5012ab9e1074fde",
        "mssqlCN": "7e5114f542cff14f",
        "name": "Check Data 2",
        "outField": "SQLCheckRequest2Data",
        "returnType": 0,
        "throwErrors": "0",
        "query": "--Если запись заказов из таблицы tblCtSData\r\nSELECT * FROM [tblCtSDataHistory]\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "SQLCheckRequest2",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 200,
        "y": 520,
        "wires": [
            [
                "23dafa703fe24c9e"
            ]
        ]
    },
    {
        "id": "64f022795029f77d",
        "type": "function",
        "z": "4e2c42794684d256",
        "name": "Check Data and SQLRequest Prepare",
        "func": "//Структура ответа на запрос от SAP\nmsg.Response =\n{\n    Value: {},\n    Messages : [],\n    IsSuccess : false\n};\n\nmsg.SAPData =\n{\n    PlantId: null,\n    PlantGuid: null,\n    WarehouseId: null,\n    WarehouseGuid: null,\n    Materials: [],\n    TelegramSettingsError: false,\n    MSSQLError: false,\n    WriteFileError: false\n};\n\nmsg.TelegramNumber = \"15\";\nmsg.Telegram = undefined;\nvar Telegrams = global.get(\"Telegram\");\nvar DataValid = false;\nif (Telegrams\n    && (typeof Telegrams?.DataValidGenerateByName == \"function\")\n    && (typeof Telegrams?.DataValidGenerateByObject == \"function\")\n    && (typeof Telegrams?.DataValidCheck == \"function\")\n)\n{\n    msg.Telegram = Telegrams[msg.TelegramNumber];\n    if (msg.Telegram)\n    {\n        DataValid = Telegrams.DataValidCheck(msg.TelegramNumber);\n        if (!DataValid) msg.Response.Messages.push(\"Телеграмма \" + msg.TelegramNumber + \" имеет ошибочные настройки\");\n    }\n    else msg.Response.Messages.push(\"Телеграмма \" + msg.TelegramNumber + \" не настроена\");\n}\nelse msg.Response.Messages.push(\"Глобальный справочник телеграмм не настроен\");\nmsg.SAPData.TelegramSettingsError = (!DataValid);\n\nif (\"plantid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.plantid && (msg.SAPRequest.Data.plantid != \"\")) msg.SAPData.PlantId = msg.SAPRequest.Data.plantid;\n    else msg.Response.Messages.push(\"Поле plantid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле plantid отсутствует\");\n\nif (\"outwarehouseid\" in msg.SAPRequest?.Data)\n{\n    if (!(msg.SAPRequest.Data.outwarehouseid && (msg.SAPRequest.Data.outwarehouseid != \"\"))) msg.Response.Messages.push(\"Поле outwarehouseid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле outwarehouseid отсутствует\");\n\nif (\"inbwarehouseid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.inbwarehouseid && (msg.SAPRequest.Data.inbwarehouseid != \"\")) msg.SAPData.WarehouseId = msg.SAPRequest.Data.inbwarehouseid;\n    else msg.Response.Messages.push(\"Поле inbwarehouseid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле inbwarehouseid отсутствует\");\n\nvar MaterialIdsString = \"\";\nif (\"pallets\" in msg.SAPRequest?.Data)\n{\n    if (Array.isArray(msg.SAPRequest.Data.pallets))\n    {\n        if (msg.SAPRequest.Data.pallets.length > 0)\n        {\n            for (let i = 0; i < msg.SAPRequest.Data.pallets.length; i++)\n            {\n                var MaterialData = undefined;\n                var PalletData =\n                {\n                    BatchId: null,\n                    ProdDateOrigin: null,\n                    ProdDate: null,\n                    ProdDateLocal: null,\n                    ExpDateOrigin: null,\n                    ExpDate: null,\n                    ExpDateLocal: null,\n                    Amount: null,\n                    BatchSupplier: null,\n                    SSCC: null,\n                    SSCCComment: \"\"\n                };\n                var PalletDataValid = true;\n\n                if (\"materialid\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].materialid && (msg.SAPRequest.Data.pallets[i].materialid != \"\"))\n                    {\n                        MaterialData = msg.SAPData.Materials.find(el => el.MaterialId.toLowerCase() == msg.SAPRequest.Data.pallets[i].materialid.toLowerCase());\n                        if (!MaterialData)\n                        {\n                            MaterialData =\n                            {\n                                MaterialId: msg.SAPRequest.Data.pallets[i].materialid,\n                                MaterialGuid: null,\n                                Batches: []\n                            };\n                            msg.SAPData.Materials.push(MaterialData);\n                            if (MaterialIdsString != \"\") MaterialIdsString = MaterialIdsString + \", \";\n                            MaterialIdsString = MaterialIdsString + \"N'\" + MaterialData.MaterialId.toString() + \"'\";\n                        }\n                    }\n                    else msg.Response.Messages.push(\"Поле materialid должно иметь значение (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле materialid отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n\n                //node.warn(msg.SAPRequest);\n                if (\"batchid\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].batchid && (msg.SAPRequest.Data.pallets[i].batchid != \"\")) PalletData.BatchId = msg.SAPRequest.Data.pallets[i].batchid;\n                    else msg.Response.Messages.push(\"Поле batchid должно иметь значение (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле batchid отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                PalletDataValid = PalletDataValid && (!!PalletData.BatchId);\n\n\n                if (\"proddate\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].proddate)\n                    {\n                        if (!isNaN(Date.parse(msg.SAPRequest.Data.pallets[i].proddate)))\n                        {\n                            if (Date.parse(msg.SAPRequest.Data.pallets[i].proddate) > 0)\n                            {\n                                PalletData.ProdDateOrigin = msg.SAPRequest.Data.pallets[i].proddate;\n                                PalletData.ProdDate = new Date(PalletData.ProdDateOrigin);\n                                PalletData.ProdDateLocal = new Date(Number(PalletData.ProdDate) + PalletData.ProdDate.getTimezoneOffset() * 60000);\n                            }\n                        }\n                    }\n                    if (!PalletData.ProdDate) msg.Response.Messages.push(\"Поле proddate должно иметь значение даты позже \\\"1970-01-01T00:00:00.000Z\\\" (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле proddate отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                PalletDataValid = PalletDataValid && (!!PalletData.ProdDate);\n                \n                if (\"expdate\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].expdate)\n                    {\n                        if (!isNaN(Date.parse(msg.SAPRequest.Data.pallets[i].expdate)))\n                        {\n                            if (Date.parse(msg.SAPRequest.Data.pallets[i].expdate) > 0)\n                            {\n                                PalletData.ExpDateOrigin = msg.SAPRequest.Data.pallets[i].expdate;\n                                PalletData.ExpDate = new Date(PalletData.ExpDateOrigin);\n                                PalletData.ExpDateLocal = new Date(Number(PalletData.ExpDate) + PalletData.ExpDate.getTimezoneOffset() * 60000);\n                                if (PalletData.ExpDate <= PalletData.ProdDate) msg.Response.Messages.push(\"Значение proddate должно быть раньше значения expdate\");\n                            }\n                        }\n                        if (!PalletData.ExpDate) msg.Response.Messages.push(\"Поле expdate должно иметь значение даты позже \\\"1970-01-01T00:00:00.000Z\\\" (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                        PalletDataValid = PalletDataValid && (!!PalletData.ExpDate);\n                    }\n                }\n\n                if (\"amount\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].amount && (!isNaN(parseFloat(msg.SAPRequest.Data.pallets[i].amount))))\n                    {\n                        if (parseFloat(msg.SAPRequest.Data.pallets[i].amount) > 0) PalletData.Amount = parseFloat(msg.SAPRequest.Data.pallets[i].amount);\n                        else msg.Response.Messages.push(\"Поле amount должно быть положительным числом (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                    }\n                    else msg.Response.Messages.push(\"Поле amount должно иметь числовое значение (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле amount отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                PalletDataValid = PalletDataValid && (!!PalletData.Amount);\n\n                if (\"batchsupplier\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].batchsupplier && (msg.SAPRequest.Data.pallets[i].batchsupplier != \"\")) PalletData.BatchSupplier = msg.SAPRequest.Data.pallets[i].batchsupplier;\n                    else msg.Response.Messages.push(\"Поле batchsupplier должно иметь значение (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                //else msg.Response.Messages.push(\"Поле batchsupplier отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n\n                //PalletDataValid = PalletDataValid && (!!PalletData.BatchSupplier);\n\n                if (\"sscc\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].sscc && (msg.SAPRequest.Data.pallets[i].sscc != \"\")) PalletData.SSCC = msg.SAPRequest.Data.pallets[i].sscc;\n                    else msg.Response.Messages.push(\"Поле sscc должно иметь значение (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                }\n                else msg.Response.Messages.push(\"Поле sscc отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                PalletDataValid = PalletDataValid && (!!PalletData.SSCC);\n\n                if (\"ssccComment\" in msg.SAPRequest.Data.pallets[i])\n                {\n                    if (msg.SAPRequest.Data.pallets[i].ssccComment) PalletData.SSCCComment = msg.SAPRequest.Data.pallets[i].ssccComment;\n                }\n                else msg.Response.Messages.push(\"Поле ssccComment отсутствует (\" + JSON.stringify(msg.SAPRequest.Data.pallets[i]) + \")\");\n                PalletDataValid = PalletDataValid && (!!PalletData.SSCCComment);\n                \n                // node.warn(MaterialData);\n                // node.warn(PalletDataValid);\n\n                if (MaterialData && PalletDataValid) MaterialData.Batches.push(PalletData);\n\n                // var DuplicatesSSCC = msg.SAPRequest.Data.pallets.filter(el => el.sscc?.toLowerCase() == PalletData.SSCC?.toLowerCase());\n                // if (DuplicatesSSCC.length > 1) msg.Response.Messages.push(\"У sscc = '\" + PalletData.SSCC + \"' есть дубликаты (\" + JSON.stringify(DuplicatesSSCC) + \")\");\n            }\n        }\n        else msg.Response.Messages.push(\"Поле pallets имеет нулевую длину\");\n    }\n    else msg.Response.Messages.push(\"pallets должен быть типа Array\");\n}\nelse msg.Response.Messages.push(\"Поле pallets отсутствует\");\n\nvar EquipmentTreeTable = global.get(\"DBTable\")?.EquipmentTree;\nif ((!EquipmentTreeTable) || (!EquipmentTreeTable?.DBTable)) msg.Response.Messages.push(\"Таблица дерева оборудования не сконфигурирована\");\n\nvar CounterpartyTable = global.get(\"DBTable\")?.Counterparty;\nif ((!CounterpartyTable) || (!CounterpartyTable?.DBTable)) msg.Response.Messages.push(\"Таблица контрагентов не сконфигурирована\");\n\nvar MaterialTable = global.get(\"DBTable\")?.Material;\nif ((!MaterialTable) || (!MaterialTable?.DBTable)) msg.Response.Messages.push(\"Таблица материалов не сконфигурирована\");\n\nvar StorageLocationTable = global.get(\"DBTable\")?.StorageLocation;\nif ((!StorageLocationTable) || (!StorageLocationTable?.DBTable)) msg.Response.Messages.push(\"Таблица хранилищ не сконфигурирована\");\n\nvar ExternalVertexTable = global.get(\"DBTable\")?.ExternalVertex;\nif ((!ExternalVertexTable) || (!ExternalVertexTable?.DBTable)) msg.Response.Messages.push(\"Таблица внешних вершин не сконфигурирована\");\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nvar SQLRequest = \"\";\nif (msg.Response.IsSuccess)\n{\n    //Поиск Guid для PlantId\n    SQLRequest = SQLRequest +\n        \"SELECT\\n\\t\" +\n            \"'0' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'EquipmentTreeId',\\n\\t\" +\n            \"NULL AS 'PlantId'\\n\" +\n        \"FROM \" + EquipmentTreeTable.DBTable + \"\\n\" +\n        \"WHERE ([szNumberSAP] = N'\" + msg.SAPData.PlantId + \"')\\n\" +\n    //Поиск Guid для materialId\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'1' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'EquipmentTreeId',\\n\\t\" +\n            \"NULL AS 'PlantId'\\n\" +\n        \"FROM \" + MaterialTable.DBTable + \"\\n\" +\n        \"WHERE ([szName] IN (\" + MaterialIdsString + \"))\\n\" +\n    //Поиск Guid для warehouseid\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'2' AS 'Type',\\n\\t\" +\n            \"Storage.[gId] AS 'Guid',\\n\\t\" +\n            \"Storage.[szExternalSystemSapLink] AS 'Id',\\n\\t\" +\n            \"Vertex.[gEquipmentTreeId] AS 'EquipmentTreeId',\\n\\t\" +\n            \"Plant.[szName] AS 'PlantId'\\n\\t\" +\n        \"FROM \" + StorageLocationTable.DBTable + \" AS Storage\\n\\t\" +\n            \"INNER JOIN \" + ExternalVertexTable.DBTable + \" AS Vertex ON ((Vertex.[gExternalObjectId] = Storage.[gId]) AND (Vertex.[gExternalObjectId] IS NOT NULL))\\n\\t\" +\n            \"INNER JOIN \" + EquipmentTreeTable.DBTable + \" AS Plant ON (Plant.[gId] = Vertex.[gAccessId])\\n\" +\n        \"WHERE ((Storage.[szExternalSystemSapLink] = '\" + msg.SAPData.WarehouseId + \"') AND (Plant.[szNumberSAP] = N'\" + msg.SAPData.PlantId + \"'))\\n\";\n}\nmsg.SQLCheckRequest = SQLRequest;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 40,
        "wires": [
            [
                "281e166b26e37257",
                "07bf9d7db9db456b"
            ]
        ]
    },
    {
        "id": "281e166b26e37257",
        "type": "switch",
        "z": "4e2c42794684d256",
        "name": "IsSuccess == true",
        "property": "Response.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 40,
        "wires": [
            [
                "918275db42ecc855"
            ],
            [
                "5dae6e257854f301"
            ]
        ]
    },
    {
        "id": "0cfe2f91e74bacbd",
        "type": "function",
        "z": "4e2c42794684d256",
        "name": "Create Response",
        "func": "if (msg.SubflowError?.message)\n{\n    var Response =\n    {\n        Value: {},\n        Messages: [],\n        IsSuccess: false\n    };\n    var ErrorMessage = msg.SubflowError?.message;\n    if (msg.SubflowError?.source?.name) ErrorMessage = msg.SubflowError.source.name + \": \" + ErrorMessage;\n    if (msg.SubflowError?.source?.type) ErrorMessage = msg.SubflowError.source.type + \": \" + ErrorMessage;\n    Response.Messages.push(\"Subflow: \" + ErrorMessage);\n    msg.Response = Response;\n    msg.statusCode = 500;\n}\nelse\n{\n    if (msg.SAPData.MaterialIdError) msg.statusCode = 401;\n    else\n    {\n        if (msg.SAPData.SupplierIdError) msg.statusCode = 402;\n        else\n        {\n            if (msg.SAPData.WarehouseIdError) msg.statusCode = 403;\n            else\n            {\n                if (msg.SAPData.MSSQLError || msg.SAPData.WriteFileError || msg.SAPData.TelegramSettingsError) msg.statusCode = 500;\n                else\n                {\n                    if (msg.Response.IsSuccess) msg.statusCode = 200;\n                    else msg.statusCode = 400;\n                }\n            }\n        }\n    }\n}\n\nmsg.payload = msg.Response;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 160,
        "wires": [
            [
                "5992b2dd78714981"
            ]
        ]
    },
    {
        "id": "a00acd77e68314a1",
        "type": "function",
        "z": "4e2c42794684d256",
        "name": "Check Data",
        "func": "msg.SQLCheckRequestError = msg.error;\n\nif (msg.SQLCheckRequestError?.details)\n{\n    msg.Response.Messages.push(\"Check Data: \" + msg.SQLCheckRequestError.details);\n    msg.SAPData.MSSQLError = true;\n}\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nif (msg.Response.IsSuccess)\n{\n    var PlantId = msg.SQLCheckRequestData.filter(el => el.Type == 0);\n    if (PlantId.length > 0)\n    {\n        if (PlantId.length > 1) msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" имеет дубликаты\");\n        else msg.SAPData.PlantGuid = PlantId[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" не найден\");\n\n    var MaterialIds = msg.SQLCheckRequestData.filter(el => el.Type == 1);\n    if (MaterialIds.length > 0)\n    {\n        for (let i = 0; i < msg.SAPData.Materials.length; i++)\n        {\n            var Material = MaterialIds.filter(el => el.Id == msg.SAPData.Materials[i].MaterialId);\n            if (Material.length > 0)\n            {\n                if (Material.length > 1) msg.Response.Messages.push(\"Материал с ID = \" + msg.SAPData.Materials[i].MaterialId + \" имеет дубликаты\");\n                else msg.SAPData.Materials[i].MaterialGuid = Material[0].Guid;\n            }\n            else msg.Response.Messages.push(\"Материал с ID = \" + msg.SAPData.Materials[i].MaterialId + \" не найден\");\n        };\n    }\n    else msg.Response.Messages.push(\"Ни один из материалов не найден\");\n\n    var WarehouseId = msg.SQLCheckRequestData.filter(el => el.Type == 2);\n    if (WarehouseId.length > 0)\n    {\n        if (WarehouseId.length > 1) msg.Response.Messages.push(\"Для предприятия с ID = \" + msg.SAPData.PlantId + \" склад с ID = \" + msg.SAPData.WarehouseId + \" имеет дубликаты\");\n        else msg.SAPData.WarehouseGuid = WarehouseId[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Для предприятия с ID = \" + msg.SAPData.PlantId + \" не найден склад с ID = \" + msg.SAPData.WarehouseId);\n\n    msg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 100,
        "wires": [
            [
                "a6d004d08e5d6a73",
                "32362c3b996ba101"
            ]
        ]
    },
    {
        "id": "a6d004d08e5d6a73",
        "type": "switch",
        "z": "4e2c42794684d256",
        "name": "IsSuccess == true",
        "property": "Response.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 100,
        "wires": [
            [
                "cfbfb2f37138e658"
            ],
            [
                "07bebfcaeeb00127"
            ]
        ]
    },
    {
        "id": "cfbfb2f37138e658",
        "type": "function",
        "z": "4e2c42794684d256",
        "name": "Save Batches Data",
        "func": "var fs = global.get(\"fsextra\");\nvar FilesFolder = msg.Telegram?.Folder?.FilesFolder?.Path; //Каталог хранения кучи файлов поставок\nvar FilePrefix = msg.Telegram?.FilePrefix; //Префикс файлов запроса и ответа (без нижнего подчёркивания)\nvar FileType = msg.Telegram?.Folder?.FilesFolder?.FileType; //Тип файла\nvar StartDateTime = new Date(); //Дата и время начала создания файлов\nvar StartDateTimeString = StartDateTime.getFullYear()\n    + ('0' + (StartDateTime.getMonth() + 1)).slice(-2)\n    + ('0' + StartDateTime.getDate()).slice(-2)\nvar StartDateTimeString_log = StartDateTime.getFullYear()\n    + ('0' + (StartDateTime.getMonth() + 1)).slice(-2)\n    + ('0' + StartDateTime.getDate()).slice(-2) + \"_\"\n    + ('0' + StartDateTime.getHours()).slice(-2)\n    + ('0' + StartDateTime.getMinutes()).slice(-2)\n    + ('0' + StartDateTime.getSeconds()).slice(-2);\nmsg.StartDateTime = StartDateTime;\nmsg.StartDateTimeString = StartDateTimeString;\n\n//Проверка каталога хранения кучи файлов поставок\nif (FilesFolder && (FilesFolder != \"\") && FileType && (FileType != \"\"))\n{\n    if (fs.pathExistsSync(FilesFolder))\n    {\n        var IsSuccess = true;\n        for (let i = 0; (i < msg.SAPData.Materials.length) && IsSuccess; i++)\n        {\n            var Material = msg.SAPData.Materials[i];\n            node.warn(Material);\n            node.warn(IsSuccess);\n\n            for (let j = 0; (j < Material.Batches.length) && IsSuccess; j++)\n            {\n                var Batch = Material.Batches[j];\n                var BatchData =\n                {\n                    MaterialId: Material.MaterialGuid,\n                    StorageLocationId: msg.SAPData.WarehouseGuid,\n                    BatchNumber: Batch.SSCC,\n                    Comment: Batch.SSCCComment,\n                    Quantity: Batch.Amount,\n                    Expiration: Batch.ExpDateLocal.toISOString()?.replaceAll(\"Z\", \"\"),//ExpDate.toISOString(),\n                    PackagingDate: Batch.ProdDateLocal.toISOString()?.replaceAll(\"Z\", \"\"),//ProdDate.toISOString(),\n                    SupplierNumber: Batch.BatchSupplier,\n                    ExternalBatchNumber: Batch.BatchId,\n                };\n\n                var SaveData =\n                {\n                    Date: StartDateTimeString_log,\n                    API: \"\",\n                    Table: \"\",\n                    Data: BatchData\n                };\n                var FileName = FilePrefix + \"_\" + StartDateTimeString + \"_\" + Material.MaterialId + \"_\" + Batch.BatchId + \"_\" + Batch.SSCC + \"_\"+ j + \".\" + FileType;\n                var FileNameFull = FilesFolder + FileName;\n                var FileData = JSON.stringify(SaveData, null, \"\\t\");\n                IsSuccess = false;\n                //Запись данных в файл\n                try\n                {\n                    await fs.appendFile(FileNameFull, FileData);\n                }\n                catch (ex)\n                {\n                    msg.Response.Messages.push(\"Ошибка записи данных в файл \" + FileName + \" (\" + ex + \")\");\n                }\n                //Проверка существования конечного файла\n                if (fs.existsSync(FileNameFull)) IsSuccess = true;\n                else msg.Response.Messages.push(\"Конечный файл \" + FileName + \" не существует\");\n                msg.SAPData.WriteFileError = (!IsSuccess);\n            }\n        }\n    }\n    else msg.Response.Messages.push(\"Каталог приёма поставок на существует\");\n}\nelse msg.Response.Messages.push(\"Каталог телаграммы \" + msg.TelegramNumber + \" не задан\");\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 160,
        "wires": [
            [
                "0cfe2f91e74bacbd",
                "283e6d47332550c3"
            ]
        ]
    },
    {
        "id": "cdb9298579dfa1ca",
        "type": "catch",
        "z": "4e2c42794684d256",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 200,
        "y": 220,
        "wires": [
            [
                "a13602606499cf71"
            ]
        ]
    },
    {
        "id": "a13602606499cf71",
        "type": "function",
        "z": "4e2c42794684d256",
        "name": "Save Error Data",
        "func": "msg.SubflowError = msg.error;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 220,
        "wires": [
            [
                "ab9c146f2823a9c5"
            ]
        ]
    },
    {
        "id": "5992b2dd78714981",
        "type": "function",
        "z": "4e2c42794684d256",
        "name": "Subflow Status",
        "func": "var FillColour = \"yellow\";\nvar Text = \"Processing\";\n\nif (msg.Response)\n{\n    if (msg.Response.IsSuccess) FillColour = \"green\";\n    else FillColour = \"red\";\n    Text = \"Processing Completed. Error Count: \" + msg.Response.Messages.length;\n}\n\nmsg.payload = { fill: FillColour, shape: \"dot\", text: Text };\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "07bf9d7db9db456b",
        "type": "debug",
        "z": "4e2c42794684d256",
        "name": "debug 69",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 20,
        "wires": []
    },
    {
        "id": "32362c3b996ba101",
        "type": "debug",
        "z": "4e2c42794684d256",
        "name": "debug 78",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 140,
        "wires": []
    },
    {
        "id": "283e6d47332550c3",
        "type": "debug",
        "z": "4e2c42794684d256",
        "name": "debug 84",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 180,
        "wires": []
    },
    {
        "id": "918275db42ecc855",
        "type": "MSSQL",
        "z": "4e2c42794684d256",
        "mssqlCN": "7e5114f542cff14f",
        "name": "Check Data",
        "outField": "SQLCheckRequestData",
        "returnType": 0,
        "throwErrors": "0",
        "query": "--Если запись заказов из таблицы tblCtSData\r\nSELECT * FROM [tblCtSDataHistory]\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "SQLCheckRequest",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 190,
        "y": 100,
        "wires": [
            [
                "a00acd77e68314a1"
            ]
        ]
    },
    {
        "id": "f54cb9614181da59",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Prepare Telegram Files Data",
        "func": "//Состояние подпотока\nvar SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: undefined\n    }\n};\n\n//Проверка занятости данного блока в случае большого количества файлов, которые могут не успеть обработать за интервал вызова функции\nvar IsBusy = context.get(\"IsBusy\");\nif (!IsBusy)\n{\n    context.set(\"IsBusy\", true);\n    SubflowStatus.payload.text = \"Processing: Start\";\n    node.send([null, SubflowStatus, null]);\n    var fs = global.get(\"fsextra\");\n    msg.Errors =\n    {\n        PrepareFilesData: [],\n        GetToken: [],\n        GetServiceUser: [],\n        FileProcessing: []\n    };\n    msg.ErrorCount = 0; //Количество полученных ошибок\n    msg.TelegramFiles = []; //Файлы поставок, отправляемые в MES\n    msg.FilesCount = 0; //Количество обрабатываемых файлов\n    msg.FileNumber = 0; //Номер обрабатываемого файла\n    msg.FilesFolder = msg.Telegram?.Folder?.FilesFolder?.Path; //Каталог временного хранения\n    msg.ArchiveOKFolder = msg.Telegram?.Folder?.ArchiveOKFolder?.Path; //Каталог удачно отправленных в MES файлов\n    msg.ArchiveBadFolder = msg.Telegram?.Folder?.ArchiveBadFolder?.Path; //Каталог ошибочных файлов\n    msg.MESLogsFolder = msg.Telegram?.Folder?.MESLogsFolder?.Path; //Архив запросов в MES\n    msg.FilePrefix = msg.Telegram?.FilePrefix; //Префикс файлов (без нижнего подчёркивания)\n    msg.FileType = msg.Telegram?.Folder?.FilesFolder?.FileType; //Тип файла запроса\n    msg.FileTypeMES = msg.Telegram?.Folder?.MESLogsFolder?.FileType; //Тип файла лога запроса в MES\n    //Шаблон сообщения об ошибке\n    var ErrorData =\n    {\n        error:\n        {\n            source:\n            {\n                id: env.get(\"NR_NODE_ID\"),\n                type: undefined,\n                name: env.get(\"NR_NODE_NAME\"),\n                count: 1\n            },\n            message: undefined\n        }\n    };\n    //Проверка настроек телеграммы\n    if (msg.FilesFolder && (msg.FilesFolder != \"\") && msg.ArchiveOKFolder && (msg.ArchiveOKFolder != \"\")\n        && msg.ArchiveBadFolder && (msg.ArchiveBadFolder != \"\") && msg.ArchiveBadFolder && (msg.ArchiveBadFolder != \"\")\n        && msg.MESLogsFolder && (msg.MESLogsFolder != \"\") && msg.FilePrefix && (msg.FilePrefix != \"\")\n        && msg.FileType && (msg.FileType != \"\") && msg.FileTypeMES && (msg.FileTypeMES != \"\")\n        )\n    {\n        //Проверка каталога временного хранения\n        if (fs.pathExistsSync(msg.FilesFolder))\n        {\n            //Проверка каталога удачно отправленных в MES файлов\n            if (fs.pathExistsSync(msg.ArchiveOKFolder))\n            {\n                //Проверка каталога ошибочных файлов\n                if (fs.pathExistsSync(msg.ArchiveBadFolder))\n                {\n                    //Проверка каталога ошибочных файлов\n                    if (fs.pathExistsSync(msg.MESLogsFolder))\n                    {\n                        var FilesNames = []; //Массив имён файлов телеграммы\n                        //Получения списка имён файлов msg.FilesFolder\n                        try\n                        {\n                            FilesNames = fs.readdirSync(msg.FilesFolder);\n                            msg.UseGetToken = msg.Telegram.UseGetToken;\n                            msg.UseGetServiceUser = msg.Telegram.UseGetServiceUser;\n                            msg.OuttakeAPI = msg.Telegram?.MESAPI?.Outtake;\n                            msg.IntakeAPI = msg.Telegram?.MESAPI?.Intake;\n                            msg.CreateAPI = msg.Telegram?.MESAPI?.Create;\n                            msg.SetBatchParametersAPI = msg.Telegram?.MESAPI?.SetBatchParameters;\n                            msg.ProcessSpecificationDBTable = msg.Telegram?.MESDBTable?.ProcessSpecification;\n                            msg.ProcessDBTable = msg.Telegram?.MESDBTable?.Process;\n                            msg.OperationDBTable = msg.Telegram?.MESDBTable?.Operation;\n                            msg.OperationConsumeStorageLocationDBTable = msg.Telegram?.MESDBTable?.OperationConsumeStorageLocation;\n                            msg.StorageLocationDBTable = msg.Telegram?.MESDBTable?.StorageLocation;\n                            msg.BatchDBTable = msg.Telegram?.MESDBTable?.Batch;\n                            msg.MaterialDBTable = msg.Telegram?.MESDBTable?.Material;\n\n                            if ((!msg.IntakeAPI) || (!msg.CreateAPI) || (!msg.SetBatchParametersAPI) || (!msg.OuttakeAPI)\n                                || (!msg.ProcessSpecificationDBTable) || (!msg.ProcessDBTable) || (!msg.OperationDBTable)\n                                || (!msg.OperationConsumeStorageLocationDBTable) || (!msg.StorageLocationDBTable) || (!msg.BatchDBTable)\n                                || (!msg.MaterialDBTable))\n                            {\n                                ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings Error\";\n                                ErrorData.error.message = \"Telegram has Wrong Parameters: MES API or DBTable is not Сonfigured\";\n                                msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n                                msg.ErrorCount = msg.ErrorCount + 1;\n                                node.send([null, null, ErrorData]);\n                            }\n                        }\n                        catch (ex)\n                        {\n                            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n                            ErrorData.error.message = \"Directory '\" + msg.FilesFolder + \"' could not be read (\" + ex + \")\";\n                            msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n                            msg.ErrorCount = msg.ErrorCount + 1;\n                            node.send([null, null, ErrorData]);\n                        }\n                        //Выбор файлов с заданным расширением\n                        msg.TelegramFiles = FilesNames.filter(el => el.toLowerCase().endsWith(\".\" + msg.FileType));\n                        msg.FilesCount = msg.TelegramFiles.length;\n                    }\n                    else\n                    {\n                        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n                        ErrorData.error.message = \"Directory '\" + msg.MESLogsFolder + \"' does not exist\";\n                        msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n                        msg.ErrorCount = msg.ErrorCount + 1;\n                        node.send([null, null, ErrorData]);\n                    }\n                }\n                else\n                {\n                    ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n                    ErrorData.error.message = \"Directory '\" + msg.ArchiveBadFolder + \"' does not exist\";\n                    msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n                    msg.ErrorCount = msg.ErrorCount + 1;\n                    node.send([null, null, ErrorData]);\n                }\n            }\n            else\n            {\n                ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n                ErrorData.error.message = \"Directory '\" + msg.ArchiveOKFolder + \"' does not exist\";\n                msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n                msg.ErrorCount = msg.ErrorCount + 1;\n                node.send([null, null, ErrorData]);\n            }\n        }\n        else\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n            ErrorData.error.message = \"Directory '\" + msg.FilesFolder + \"' does not exist\";\n            msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n            msg.ErrorCount = msg.ErrorCount + 1;\n            node.send([null, null, ErrorData]);\n        }\n    }\n    else\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings Error\";\n        ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" is not Сonfigured\";\n        msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n        msg.ErrorCount = msg.ErrorCount + 1;\n        node.send([null, null, ErrorData]);\n    }\n    if ((msg.TelegramFiles.length > 0) || (msg.ErrorCount > 0)) return [msg, null, null];\n    else msg.ResetIsBusy = true;\n}\nif (msg.ResetIsBusy)\n{\n    var ProcessingState = \"Processing Completed. File Count: \" + msg.FilesCount + \". Error Count: \" + msg.ErrorCount + \".\";\n    var ProcessingColour = ((msg.ErrorCount > 0) ? \"red\" : \"green\");\n    SubflowStatus.payload.fill = ProcessingColour;\n    SubflowStatus.payload.text = ProcessingState;\n    context.set(\"IsBusy\", false);\n    return [null, SubflowStatus, null];\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 40,
        "wires": [
            [
                "475151e4fcc4fd05"
            ],
            [
                "46be65ba2169695a"
            ],
            [
                "584ec318d7adf0fe"
            ]
        ],
        "outputLabels": [
            "Telegram Files Data",
            "Subflow Status",
            "Error"
        ]
    },
    {
        "id": "475151e4fcc4fd05",
        "type": "switch",
        "z": "2fcbd622bb75a545",
        "name": "msg.ErrorCount > 0",
        "property": "ErrorCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 40,
        "wires": [
            [
                "81a8a2f67a42219d"
            ],
            [
                "6861413d8a9d83b9"
            ]
        ]
    },
    {
        "id": "81a8a2f67a42219d",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Files Processing End",
        "func": "msg.ResetIsBusy = true;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 40,
        "wires": [
            [
                "f54cb9614181da59"
            ]
        ]
    },
    {
        "id": "44481d0dfd00be8f",
        "type": "subflow:37b786771d50fd31",
        "z": "2fcbd622bb75a545",
        "name": "",
        "x": 1030,
        "y": 120,
        "wires": [
            [
                "fff8d78dac378c13"
            ],
            [
                "a0fdc0effa54ef77"
            ]
        ]
    },
    {
        "id": "fff8d78dac378c13",
        "type": "switch",
        "z": "2fcbd622bb75a545",
        "name": "msg.TokenIsSuccess == true",
        "property": "TokenIsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1280,
        "y": 120,
        "wires": [
            [
                "590d4f93d0585661"
            ],
            [
                "6880d2a60b8b1df9"
            ]
        ]
    },
    {
        "id": "6880d2a60b8b1df9",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Get Token Error",
        "func": "msg.Errors.GetToken.push(msg.TokenError);\n\nmsg.ErrorCount = msg.ErrorCount + 1;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 120,
        "wires": [
            [
                "81a8a2f67a42219d"
            ]
        ]
    },
    {
        "id": "ecf5bb5fd755a410",
        "type": "subflow:c5b8559825b247a0",
        "z": "2fcbd622bb75a545",
        "name": "",
        "x": 930,
        "y": 200,
        "wires": [
            [
                "b4b3c9b297209efd"
            ],
            [
                "72d1995b98a29ee0"
            ]
        ]
    },
    {
        "id": "b4b3c9b297209efd",
        "type": "switch",
        "z": "2fcbd622bb75a545",
        "name": "msg.ServiceUserIsSuccess == true",
        "property": "ServiceUserIsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1220,
        "y": 200,
        "wires": [
            [
                "6e1548e972ef27a1"
            ],
            [
                "f5864e47f90db344"
            ]
        ]
    },
    {
        "id": "f5864e47f90db344",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Get Service User Error",
        "func": "msg.Errors.GetServiceUser.push(msg.ServiceUserError);\n\nmsg.ErrorCount = msg.ErrorCount + 1;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 200,
        "wires": [
            [
                "81a8a2f67a42219d"
            ]
        ]
    },
    {
        "id": "9cc915aca0322d1d",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Prepare Request",
        "func": "var fs = global.get(\"fsextra\");\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\nmsg.ActiveFileName = msg.payload; //Сохранение имени активного файла\nvar FullFileName = msg.FilesFolder + msg.ActiveFileName; //Полное имя файлов\nvar FileDataStringify = undefined; //Данные из файла\nvar FileData = undefined; //Данные из файла, преобразованные в объект\nvar ErrorCount = 0; //Количество возникших ошибок\nvar BadFile = false; //Файл имеет ошибочную структуру\nvar IsError = false; //Произошла ошибка при обработке файла\nmsg.MESAPI = false; //false - отправка в MES DBTable, true - отправка в MES API\n//Чтение данных из файла\nvar options =\n{\n    encoding: \"utf8\"\n};\n\ntry\n{\n    FileDataStringify = fs.readFileSync(FullFileName, options);\n}\ncatch (ex)\n{\n    ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" File Error\";\n    ErrorData.error.message = \"File '\" + FullFileName + \"' could not be read (\" + ex + \")\";\n    IsError = true;\n}\n//Преобразование файла в объект\nif (FileDataStringify)\n{\n    try\n    {\n        FileData = JSON.parse(FileDataStringify);\n    }\n    catch (ex)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Data Error\";\n        ErrorData.error.message = \"File '\" + FullFileName + \"' Data could not be Parse to Object. This File is sent to the Bad Directory. (\" + ex + \")\";\n        IsError = true;\n    }\n    if (FileData)\n    {\n        msg.FileData = FileData.Data;\n        if (msg.FileData)\n        {\n            msg.Headers = {};\n            msg.Headers[\"Authorization\"] = msg.Token;\n            msg.Headers[\"Content-Type\"] = \"application/json; charset=utf-8\";\n            msg.Headers[\"Initiator-user\"] = msg.ServiceUserId;\n            msg.OuttakeData =\n            {\n                OperationId: msg.FileData.OperationId,\n                ProcessId: msg.FileData.ProcessId,\n                EquipmentId: msg.FileData.EquipmentId,\n                MaterialId: msg.FileData.MaterialId,\n                Quantity: msg.FileData.Quantity\n            };\n            msg.OuttakeError = [\"\"];\n            msg.OuttakeStatusCode = 200;\n            msg.FindZeroBatchData =\n            {\n                ProcessId: msg.FileData.ProcessId,\n                MaterialId: msg.FileData.MaterialId\n            };\n            msg.IntakeData =\n            {\n                ProcessId: msg.FileData.ProcessId,\n                OperationId: msg.FileData.OperationId,\n                MaterialId: msg.FileData.MaterialId,\n                StorageLocationId: msg.FileData.StorageLocationId,\n                Quantity: msg.FileData.Quantity,\n                DoNotCheckQuality: true,\n                Comment: msg.FileData.Comment,\n                BatchId: null\n            };\n            msg.SetBatchParametersData =\n            {\n                BatchId: null,\n                Expiration: msg.FileData.Expiration,\n                PackagingDate: msg.FileData.PackagingDate,\n                NumberSAP: msg.FileData.NumberSAP,\n                BatchNumber: msg.FileData.BatchNumber,\n                SupplierNumber: msg.FileData.SupplierNumber,\n                Comment: msg.FileData.Comment,\n                Version: msg.FileData.Version\n            };\n            msg.CreateData =\n            {\n                OperationId: msg.FileData.OperationId,\n                MaterialId: msg.FileData.MaterialId,\n                StorageLocationId: msg.FileData.StorageLocationId,\n                DoNotCheckQuality: true,\n                ProcessId: msg.FileData.ProcessId,\n                IsCreateApplyRules: false\n            };\n        }\n        else\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Data Error\";\n            ErrorData.error.message = \"File '\" + FullFileName + \"' has no Data. This File is sent to the Bad Directory\";\n            IsError = true;\n            BadFile = true;\n        }\n    }\n    else BadFile = true;\n}\n\nif (IsError)\n{\n    var FileErrorData =\n    {\n        FileName: msg.ActiveFileName,\n        BadFile: BadFile,\n        OKFile: false,\n        Prepare: ErrorData.error.message,\n        Send: undefined,\n        Finish: undefined\n    };\n    msg.Errors.FileProcessing.push(FileErrorData);\n\n    msg.ErrorCount = msg.ErrorCount + 1;\n    node.send([null, ErrorData]);\n}\n\nmsg.BadFile = BadFile;\n//Файл и данные успешно прошли проверки\nmsg.PrepareIsSuccess = (!IsError) && (!BadFile);\n//Время начала отправки данных в MES\nmsg.StartDateTime = new Date();\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 340,
        "wires": [
            [
                "d3f7ea1e344a96b6",
                "0ba92c7b7f9690c2"
            ],
            [
                "ce363f67e0875a2e"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "25b49a4f3221259c",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Prepare Response",
        "func": "var fs = global.get(\"fsextra\");\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\n\nmsg.OKFile = false; //Файл прошёл все проверки и был успешно отправлен\nvar EndDirectory = undefined; //Конечная директория перемещения файла\nvar SendError = undefined; //Ошибка отправки данных\nvar FinishError = undefined; //Ошибка завершения обработки данных\n\nif (msg.PrepareIsSuccess)\n{\n    var StatusCode = undefined;\n    var StatusCodeOK = undefined;\n    var ErrorArray = undefined;\n    var ErrorCode = undefined;\n    var ErrorCodeData = undefined;\n    if (msg.MESAPI)\n    {\n        StatusCode = msg.statusCode;\n        StatusCodeOK = (msg.statusCode == 200);\n        ErrorArray = [\"ECONNRESET\", \"ETIMEDOUT\", \"ECONNREFUSED\", \"ENOTFOUND\"];\n        ErrorCode = msg.payload;\n        ErrorCodeData = msg.payload;\n    }\n    else\n    {\n        StatusCode = msg.error?.code;\n        StatusCodeOK = (!msg.error?.code);\n        ErrorArray = [\"ECONNCLOSED\", \"ESOCKET\"];\n        ErrorCode = msg.error?.message;\n        ErrorCodeData = msg.error;\n    }\n\n    if (StatusCodeOK) msg.OKFile = true;\n    else\n    {\n        SendError = \"Send to MES: \" + msg.Step + \": \" + StatusCode + \": \";\n        if ((ErrorArray.includes(StatusCode))) SendError = SendError + ErrorCode;\n        else\n        {\n            SendError = SendError + JSON.stringify(ErrorCodeData);\n            msg.OKFile = ((msg.IntakeStatusCode == 200) && (msg.SetBatchParametersStatusCode == 200))\n            if (!msg.OKFile) msg.BadFile = true;\n        }\n        msg.ErrorCount = msg.ErrorCount + 1;\n    }\n}\n//Перемещение успешно отправленного файла в архив\nif (msg.OKFile) EndDirectory = msg.ArchiveOKFolder;\nelse\n{\n    //Перемещение ошибочного файла в архив\n    if (msg.BadFile) EndDirectory = msg.ArchiveBadFolder;\n}\n//Перемещение файла в конечную директорию\nif (EndDirectory)\n{\n    try\n    {\n        var moveSyncOptions =\n        {\n            overwrite: true\n        };\n        fs.moveSync(msg.FilesFolder + msg.ActiveFileName, EndDirectory + msg.ActiveFileName, moveSyncOptions);\n    }\n    catch (ex)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" File Error\";\n        ErrorData.error.message = \"Unable to move file '\" + msg.FilesFolder + msg.ActiveFileName + \"' to '\" + EndDirectory + \"' directory (\" + ex + \")\";\n        FinishError = ErrorData.error.message;\n        msg.ErrorCount = msg.ErrorCount + 1;\n        node.send([null, ErrorData]);\n    }\n}\n//Дополнение массива ошибок\nif (SendError || FinishError)\n{\n    var FileErrorData = msg.Errors.FileProcessing.find(el => el.FileName == msg.ActiveFileName);\n    if (FileErrorData)\n    {\n        FileErrorData.BadFile = msg.BadFile;\n        FileErrorData.OKFile = msg.OKFile;\n        FileErrorData.Send = SendError;\n        FileErrorData.Finish = FinishError;\n    }\n    else\n    {\n        FileErrorData =\n        {\n            FileName: msg.ActiveFileName,\n            BadFile: msg.BadFile,\n            OKFile: msg.OKFile,\n            Prepare: undefined,\n            Send: SendError,\n            Finish: FinishError\n        };\n        msg.Errors.FileProcessing.push(FileErrorData);\n    }\n}\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 340,
        "wires": [
            [
                "f55000565788daa6"
            ],
            [
                "469eb47e5a1c0408"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "d3f7ea1e344a96b6",
        "type": "switch",
        "z": "2fcbd622bb75a545",
        "name": "PrepareIsSuccess == false",
        "property": "PrepareIsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 700,
        "y": 340,
        "wires": [
            [
                "b5ea597693130a15"
            ],
            [
                "813e8972cafb41a6"
            ]
        ]
    },
    {
        "id": "10c5eb39b9c79d03",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Save Send Time to MES Log",
        "func": "var fs = global.get(\"fsextra\");\n//Время окончания отправки данных в MES\nmsg.EndDateTime = new Date();\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n}\n//Проверка настроек телеграммы\nif (msg.MESLogsFolder && (msg.MESLogsFolder != \"\") && msg.FilePrefix && (msg.FilePrefix != \"\") && msg.FileTypeMES && (msg.FileTypeMES != \"\"))\n{\n    if (msg.StartDateTime)\n    {\n        var FileName = msg.FilePrefix + \"_MES_\"\n            + msg.StartDateTime?.getFullYear().toString()\n            + ('0' + (msg.StartDateTime.getMonth() + 1).toString()).slice(-2)\n            + ('0' + msg.StartDateTime.getDate().toString()).slice(-2)\n            + \".log\";\n        var StartDate = msg.StartDateTime.getFullYear().toString() + \".\"\n            + ('0' + (msg.StartDateTime.getMonth() + 1).toString()).slice(-2) + \".\"\n            + ('0' + msg.StartDateTime.getDate().toString()).slice(-2);\n        var StartTime = ('0' + msg.StartDateTime.getHours().toString()).slice(-2) + \":\"\n            + ('0' + msg.StartDateTime.getMinutes().toString()).slice(-2) + \":\"\n            + ('0' + msg.StartDateTime.getSeconds().toString()).slice(-2) + \".\"\n            + ('00' + msg.StartDateTime.getMilliseconds().toString()).slice(-3);\n        var EndDate = msg.EndDateTime.getFullYear().toString() + \".\"\n            + ('0' + (msg.EndDateTime.getMonth() + 1).toString()).slice(-2) + \".\"\n            + ('0' + msg.EndDateTime.getDate().toString()).slice(-2);\n        var EndTime = ('0' + msg.EndDateTime.getHours().toString()).slice(-2) + \":\"\n            + ('0' + msg.EndDateTime.getMinutes().toString()).slice(-2) + \":\"\n            + ('0' + msg.EndDateTime.getSeconds().toString()).slice(-2) + \".\"\n            + ('00' + msg.EndDateTime.getMilliseconds().toString()).slice(-3);\n        var ProcessingTime = (Number(msg.EndDateTime) - Number(msg.StartDateTime)) / 1000;\n        var FullFileName = msg.MESLogsFolder + FileName;\n        var Header = \"Start Time\\tEnd Time\\tFile Name\\tMethod\\tAPI/DBTable\\tOperation Time\\tSend Status\\r\\n\"; //Заголовок файла логирования\n        var LogLine = StartDate + \" T \" + StartTime + \"\\t\";\n        LogLine = LogLine + EndDate + \" T \" + EndTime + \"\\t\";\n        LogLine = LogLine + msg.ActiveFileName + \"\\t\";\n        LogLine = LogLine + (msg.MESAPI ? msg.method : msg.Method) + \"\\t\";\n        LogLine = LogLine + (msg.MESAPI ? msg.url : msg.DBTable) + \"\\t\";\n        LogLine = LogLine + ProcessingTime.toFixed(3) + \" sec\\t\";\n        var StatusCode = (msg.MESAPI ? (msg.statusCode == 200) : (!msg.error?.code));\n        if (StatusCode) LogLine = LogLine + \"Command sent Successfully\";\n        else LogLine = LogLine + \"Error sending command\";\n        LogLine = LogLine + \"\\r\\n\";\n        var LogLineSend = false;\n        //Проверка каталога хранения логов времени отправки в MES\n        fs.pathExists(msg.MESLogsFolder, pathExistsCallback);\n    }\n    else\n    {\n        ErrorData.error.source.type = \"Start DateTime\";\n        ErrorData.error.message = \"msg field doesn't have StartDateTime value\";\n        return [null, ErrorData];\n    }\n}\nelse\n{\n    ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings Error\";\n    ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" is not Сonfigured\";\n    return [null, ErrorData];\n}\n\nfunction pathExistsCallback(err, exists)\n{\n    if (err)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n        ErrorData.error.message = \"pathExistsCallback: \" + err;\n        node.send([null, ErrorData]);\n        node.done();\n    }\n    else\n    {\n        if (exists) fs.stat(FullFileName, statCallback);\n        else\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n            ErrorData.error.message = \"Directory '\" + msg.MESLogsFolder + \"' does not exist\";\n            node.send([null, ErrorData]);\n            node.done();\n        }\n    }\n}\n\nfunction statCallback(err, stats)\n{\n    if (err)\n    {\n        if (err.code != \"ENOENT\")\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Log File Error\";\n            ErrorData.error.message = \"statCallback: \" + err;\n            node.send([null, ErrorData]);\n            node.done();\n        }\n        else fs.appendFile(FullFileName, Header, appendFileCallback);\n    }\n    else\n    {\n        LogLineSend = true;\n        fs.appendFile(FullFileName, LogLine, appendFileCallback);\n    }\n}\n\nfunction appendFileCallback(err)\n{\n    if (err)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Log File Error\";\n        ErrorData.error.message = \"statCallback: \" + err;\n        node.send([null, ErrorData]);\n        node.done();\n    }\n    else\n    {\n        if (!LogLineSend)\n        {\n            LogLineSend = true;\n            fs.appendFile(FullFileName, LogLine, appendFileCallback);\n        }\n        else\n        {\n            node.send([msg, null]);\n            node.done();\n        }\n    }\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 420,
        "wires": [
            [],
            [
                "469eb47e5a1c0408"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "821a4e19edc63e70",
        "type": "catch",
        "z": "2fcbd622bb75a545",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 140,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "cd5f8631a5d18fe0",
        "type": "link in",
        "z": "2fcbd622bb75a545",
        "name": "Catch Error Data",
        "links": [
            "469eb47e5a1c0408",
            "584ec318d7adf0fe",
            "72d1995b98a29ee0",
            "a0fdc0effa54ef77",
            "ce363f67e0875a2e"
        ],
        "x": 205,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "584ec318d7adf0fe",
        "type": "link out",
        "z": "2fcbd622bb75a545",
        "name": "Catch Error Telegram Files Prepare",
        "mode": "link",
        "links": [
            "cd5f8631a5d18fe0"
        ],
        "x": 335,
        "y": 140,
        "wires": []
    },
    {
        "id": "da7f59a652c928b3",
        "type": "link in",
        "z": "2fcbd622bb75a545",
        "name": "Subflow Status",
        "links": [
            "3afd1fca7640507f",
            "46be65ba2169695a",
            "63f01f36b97db149",
            "77126676930343ad",
            "c99cfbd9ff36f3d5",
            "f4d6cff9f0e15d05"
        ],
        "x": 205,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "46be65ba2169695a",
        "type": "link out",
        "z": "2fcbd622bb75a545",
        "name": "Subflow Status Telegram Files Prepare",
        "mode": "link",
        "links": [
            "da7f59a652c928b3"
        ],
        "x": 335,
        "y": 100,
        "wires": []
    },
    {
        "id": "6bd0d7968960cfb1",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Subflow Status",
        "func": "var SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: Get Token\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 120,
        "wires": [
            [
                "44481d0dfd00be8f"
            ],
            [
                "77126676930343ad"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "d197206a3b6f9474",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Subflow Status",
        "func": "var SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: Get Service User\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 200,
        "wires": [
            [
                "ecf5bb5fd755a410"
            ],
            [
                "c99cfbd9ff36f3d5"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "77126676930343ad",
        "type": "link out",
        "z": "2fcbd622bb75a545",
        "name": "Subflow Status Get Token",
        "mode": "link",
        "links": [
            "da7f59a652c928b3"
        ],
        "x": 975,
        "y": 160,
        "wires": []
    },
    {
        "id": "c99cfbd9ff36f3d5",
        "type": "link out",
        "z": "2fcbd622bb75a545",
        "name": "Subflow Status Get Service User",
        "mode": "link",
        "links": [
            "da7f59a652c928b3"
        ],
        "x": 855,
        "y": 240,
        "wires": []
    },
    {
        "id": "83d4e6407af8b3bd",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Subflow Status",
        "func": "msg.FileNumber = ((msg.FileNumber + 1) || 1);\nvar SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: File \" + msg.FileNumber + \"/\" + msg.FilesCount + \": Preparing\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 340,
        "wires": [
            [
                "9cc915aca0322d1d"
            ],
            [
                "f4d6cff9f0e15d05"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "f4d6cff9f0e15d05",
        "type": "link out",
        "z": "2fcbd622bb75a545",
        "name": "Subflow Status Prepare Request",
        "mode": "link",
        "links": [
            "da7f59a652c928b3"
        ],
        "x": 355,
        "y": 380,
        "wires": []
    },
    {
        "id": "ce363f67e0875a2e",
        "type": "link out",
        "z": "2fcbd622bb75a545",
        "name": "Catch Error Prepare Request",
        "mode": "link",
        "links": [
            "cd5f8631a5d18fe0"
        ],
        "x": 595,
        "y": 380,
        "wires": []
    },
    {
        "id": "97f30008fbb289a0",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Subflow Status",
        "func": "var SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: File \" + msg.FileNumber + \"/\" + msg.FilesCount + \": Sending\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 420,
        "wires": [
            [
                "a7d9313d67de1ab6"
            ],
            [
                "63f01f36b97db149"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "63f01f36b97db149",
        "type": "link out",
        "z": "2fcbd622bb75a545",
        "name": "Subflow Status Prepare Request",
        "mode": "link",
        "links": [
            "da7f59a652c928b3"
        ],
        "x": 335,
        "y": 440,
        "wires": []
    },
    {
        "id": "b5ea597693130a15",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Subflow Status",
        "func": "var SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: File \" + msg.FileNumber + \"/\" + msg.FilesCount + \": Completing\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 340,
        "wires": [
            [
                "25b49a4f3221259c"
            ],
            [
                "3afd1fca7640507f"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "3afd1fca7640507f",
        "type": "link out",
        "z": "2fcbd622bb75a545",
        "name": "Subflow Status Prepare Request",
        "mode": "link",
        "links": [
            "da7f59a652c928b3"
        ],
        "x": 1795,
        "y": 380,
        "wires": []
    },
    {
        "id": "72d1995b98a29ee0",
        "type": "link out",
        "z": "2fcbd622bb75a545",
        "name": "Catch Error Telegram Get Service User",
        "mode": "link",
        "links": [
            "cd5f8631a5d18fe0"
        ],
        "x": 1095,
        "y": 240,
        "wires": []
    },
    {
        "id": "a0fdc0effa54ef77",
        "type": "link out",
        "z": "2fcbd622bb75a545",
        "name": "Catch Error Telegram Get Token",
        "mode": "link",
        "links": [
            "cd5f8631a5d18fe0"
        ],
        "x": 1175,
        "y": 160,
        "wires": []
    },
    {
        "id": "469eb47e5a1c0408",
        "type": "link out",
        "z": "2fcbd622bb75a545",
        "name": "Catch Error Send to MES and Prepare Response",
        "mode": "link",
        "links": [
            "cd5f8631a5d18fe0"
        ],
        "x": 2095,
        "y": 420,
        "wires": []
    },
    {
        "id": "6861413d8a9d83b9",
        "type": "switch",
        "z": "2fcbd622bb75a545",
        "name": "msg.UseGetServiceUser == true",
        "property": "UseGetServiceUser",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 120,
        "wires": [
            [
                "6bd0d7968960cfb1"
            ],
            [
                "ac43c8567d5ca1ea"
            ]
        ]
    },
    {
        "id": "0c3273885d46a4e6",
        "type": "switch",
        "z": "2fcbd622bb75a545",
        "name": "msg.UseGetServiceUser == true",
        "property": "UseGetServiceUser",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 200,
        "wires": [
            [
                "d197206a3b6f9474"
            ],
            [
                "f55000565788daa6"
            ]
        ]
    },
    {
        "id": "cc9b1a35d80b4515",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Find Zero-Batch Prepare",
        "func": "var SQLRequest =\n    \"SELECT\\n\\t\"+\n        \"[gId] AS Guid,\\n\\t\" +\n        \"[gMaterialId] AS MaterialGuid,\\n\\t\" +\n        \"[nQuantity] AS Quantity,\\n\\t\" +\n        \"[gProcessId] AS ProcessGuid,\\n\\t\" +\n        \"[dtCreatedAt] AS CreatedAt\\n\" +\n    \"FROM \" + msg.BatchDBTable.DBTable + \"\\n\" +\n    \"WHERE (([gProcessId] = N'\" + msg.FindZeroBatchData.ProcessId + \"') AND ([gMaterialId] = N'\" + msg.FindZeroBatchData.MaterialId + \"') AND ([nQuantity] = 0))\\n\" +\n    \"ORDER BY [dtCreatedAt] DESC\";\n\nmsg.FindZeroBatchRequest = SQLRequest;\n\nmsg.MESAPI = false;\nmsg.Method = \"Select\";\nmsg.DBTable = msg.BatchDBTable.DBTable;\nmsg.Step = \"Find Zero-Batch\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 620,
        "wires": [
            [
                "773d98500a5a16f8",
                "0ba92c7b7f9690c2"
            ]
        ]
    },
    {
        "id": "0ba92c7b7f9690c2",
        "type": "debug",
        "z": "2fcbd622bb75a545",
        "d": true,
        "name": "debug 116",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 360,
        "wires": []
    },
    {
        "id": "376be9d1da91645f",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Find Zero-Batch",
        "func": "msg.FindZeroBatchRequestError = msg.error;\n\nmsg.IsSuccess = (!msg.FindZeroBatchRequestError?.details);\nif (msg.IsSuccess)\n{\n    if (msg.FindZeroBatchRequestData.length > 0) msg.IntakeData.BatchId = msg.FindZeroBatchRequestData[0].Guid;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 620,
        "wires": [
            [
                "9c2756c639047dbc"
            ]
        ]
    },
    {
        "id": "9c2756c639047dbc",
        "type": "switch",
        "z": "2fcbd622bb75a545",
        "name": "IsSuccess == true",
        "property": "IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1230,
        "y": 620,
        "wires": [
            [
                "0a69964bffcf823a"
            ],
            [
                "4a0af21e32de29ca"
            ]
        ]
    },
    {
        "id": "f2a4723f3319754a",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Intake Prepare",
        "func": "msg.headers = msg.Headers;\n\nmsg.method = msg.IntakeAPI.Method;\nmsg.url = msg.IntakeAPI.URL;\nmsg.requestTimeout = ((msg.IntakeAPI.TimeoutSec * 1000) || 120000);\nmsg.payload = msg.IntakeData;\nmsg.MESAPI = true;\nmsg.Step = \"Intake\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 700,
        "wires": [
            [
                "bebe7b1e57b40cc2",
                "0ba92c7b7f9690c2",
                "454e383c828f4620"
            ]
        ]
    },
    {
        "id": "bebe7b1e57b40cc2",
        "type": "http request",
        "z": "2fcbd622bb75a545",
        "name": "Intake",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 700,
        "wires": [
            [
                "ae16be73f45a348f",
                "b070e127ef699543",
                "0ba92c7b7f9690c2"
            ]
        ]
    },
    {
        "id": "ae16be73f45a348f",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Intake",
        "func": "msg.IntakeStatusCode = msg.statusCode;\n\nmsg.IsSuccess = (msg.statusCode == 200);\nif (msg.IsSuccess)\n{\n    var sortedBatches = msg.payload.batches?.filter(el => el.processId?.toLowerCase() == msg.IntakeData.ProcessId.toLowerCase())\n    .sort(function (a, b) { return Number(new Date(b.createdAt)) - Number(new Date(a.createdAt)); });\n\n    msg.SetBatchParametersData.BatchId = sortedBatches?.[0]?.id;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 700,
        "wires": [
            [
                "48d72d44f4e73b60"
            ]
        ]
    },
    {
        "id": "48d72d44f4e73b60",
        "type": "switch",
        "z": "2fcbd622bb75a545",
        "name": "IsSuccess == true",
        "property": "IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1110,
        "y": 700,
        "wires": [
            [
                "ed6ab6a3ec2a0365"
            ],
            [
                "b887a5b14e88d2a0"
            ]
        ]
    },
    {
        "id": "4ce873fff57c0c7a",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Set Batch Parameters Prepare",
        "func": "msg.headers = msg.Headers;\n\nmsg.method = msg.SetBatchParametersAPI.Method;\nmsg.url = msg.SetBatchParametersAPI.URL;\nmsg.requestTimeout = ((msg.SetBatchParametersAPI.TimeoutSec * 1000) || 120000);\nmsg.payload = msg.SetBatchParametersData;\nmsg.MESAPI = true;\nmsg.Step = \"Set Batch Parameters\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 780,
        "wires": [
            [
                "5e085ae534f1b1b9",
                "0ba92c7b7f9690c2",
                "454e383c828f4620"
            ]
        ]
    },
    {
        "id": "5e085ae534f1b1b9",
        "type": "http request",
        "z": "2fcbd622bb75a545",
        "name": "Set Batch Parameters",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 800,
        "y": 780,
        "wires": [
            [
                "cbbf75f3016011d2",
                "e66771f334392295",
                "0ba92c7b7f9690c2"
            ]
        ]
    },
    {
        "id": "4a991e479bf3b095",
        "type": "switch",
        "z": "2fcbd622bb75a545",
        "name": "IsSuccess == true",
        "property": "IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1310,
        "y": 780,
        "wires": [
            [
                "80c3c1410529399b"
            ],
            [
                "e63540c5de651982"
            ]
        ]
    },
    {
        "id": "b585f137f9e3778e",
        "type": "link in",
        "z": "2fcbd622bb75a545",
        "name": "Save Send Time to MES Log",
        "links": [
            "61c3e27642d52357",
            "b070e127ef699543",
            "e66771f334392295",
            "0f2e796297a9bac1",
            "f99a95485e0a3858"
        ],
        "x": 1705,
        "y": 420,
        "wires": [
            [
                "10c5eb39b9c79d03"
            ]
        ]
    },
    {
        "id": "61c3e27642d52357",
        "type": "link out",
        "z": "2fcbd622bb75a545",
        "name": "Save Send Time to MES Log Find Zero-Batch",
        "mode": "link",
        "links": [
            "b585f137f9e3778e"
        ],
        "x": 935,
        "y": 660,
        "wires": []
    },
    {
        "id": "b070e127ef699543",
        "type": "link out",
        "z": "2fcbd622bb75a545",
        "name": "Save Send Time to MES Log Intake",
        "mode": "link",
        "links": [
            "b585f137f9e3778e"
        ],
        "x": 875,
        "y": 740,
        "wires": []
    },
    {
        "id": "cbbf75f3016011d2",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Set Batch Parameters",
        "func": "msg.SetBatchParametersStatusCode = msg.statusCode;\n\nmsg.IsSuccess = (msg.statusCode == 200);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 780,
        "wires": [
            [
                "4a991e479bf3b095"
            ]
        ]
    },
    {
        "id": "e66771f334392295",
        "type": "link out",
        "z": "2fcbd622bb75a545",
        "name": "Save Send Time to MES Log Set Batch Parameters",
        "mode": "link",
        "links": [
            "b585f137f9e3778e"
        ],
        "x": 975,
        "y": 820,
        "wires": []
    },
    {
        "id": "491a2d3f752c3c09",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Create Zero-Batch Prepare",
        "func": "msg.headers = msg.Headers;\n\nmsg.method = msg.CreateAPI.Method;\nmsg.url = msg.CreateAPI.URL;\nmsg.requestTimeout = ((msg.CreateAPI.TimeoutSec * 1000) || 120000);\nmsg.payload = msg.CreateData;\nmsg.MESAPI = true;\nmsg.Step = \"Create Zero-Batch\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 860,
        "wires": [
            [
                "510372be13f269b6",
                "0ba92c7b7f9690c2",
                "454e383c828f4620"
            ]
        ]
    },
    {
        "id": "510372be13f269b6",
        "type": "http request",
        "z": "2fcbd622bb75a545",
        "name": "Create Zero-Batch",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 790,
        "y": 860,
        "wires": [
            [
                "7223a4bc9b1410a8",
                "0f2e796297a9bac1",
                "0ba92c7b7f9690c2"
            ]
        ]
    },
    {
        "id": "7223a4bc9b1410a8",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Create Zero-Batch",
        "func": "msg.CreateZeroBatchStatusCode = msg.statusCode;\n\nmsg.IsSuccess = (msg.statusCode == 200);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 860,
        "wires": [
            [
                "b5e9a7f13db27cd8"
            ]
        ]
    },
    {
        "id": "0f2e796297a9bac1",
        "type": "link out",
        "z": "2fcbd622bb75a545",
        "name": "Save Send Time to MES Log Create Zero-Batch",
        "mode": "link",
        "links": [
            "b585f137f9e3778e"
        ],
        "x": 955,
        "y": 900,
        "wires": []
    },
    {
        "id": "a7d9313d67de1ab6",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Find Outtake Material Prepare",
        "func": "var SQLRequest = \"SELECT\\n\\t\" +\n        \"ProcessSpecification.[gId] AS Id,\\n\\t\" +\n        \"ProcessSpecification.[gProcessId] AS ProcessId,\\n\\t\" +\n        \"Process.[szName] AS ProcessName,\\n\\t\" +\n        \"Process.[gOperationId] AS OperationId,\\n\\t\" +\n        \"Operation.[szName] AS OperationName,\\n\\t\" +\n        \"OperationConsumeStorageLocation.[gStorageLocationId] AS StorageLocationId,\\n\\t\" +\n        \"StorageLocation.[szExternalSystemSapLink] AS StorageLocationNumberSAP,\\n\\t\" +\n        \"OperationConsumeStorageLocation.[gEquipmentId] AS EquipmentId,\\n\\t\" +\n        \"Batch.[gId] AS BatchId,\\n\\t\" +\n        \"Batch.[nQuantity] AS BatchQuantity,\\n\\t\" +\n        \"Batch.[szNumberSAP] AS BatchNumberSAP,\\n\\t\" +\n        \"Batch.[szBatchNumber] AS BatchBatchNumber,\\n\\t\" +\n        \"ProcessSpecification.[gMaterialId] AS MaterialId,\\n\\t\" +\n        \"Material.[szName] AS MaterialName,\\n\\t\" +\n        \"Material.[szDescription] AS MaterialDescription,\\n\\t\" +\n        \"ProcessSpecification.[fAmount] AS Amount,\\n\\t\" +\n        \"ProcessSpecification.[nItemClass] AS ItemClass,\\n\\t\" +\n        \"ProcessSpecification.[nProduceItemType] AS ProduceItemType,\\n\\t\" +\n        \"ProcessSpecification.[nConsumeBomItemClass] AS ConsumeBomItemClass\\n\" +\n    \"FROM \" + msg.ProcessSpecificationDBTable.DBTable + \" AS ProcessSpecification\\n\\t\" +\n        \"LEFT OUTER JOIN \" + msg.ProcessDBTable.DBTable + \" AS Process ON (Process.[gId] = ProcessSpecification.[gProcessId])\\n\\t\" +\n        \"LEFT OUTER JOIN \" + msg.OperationDBTable.DBTable + \" AS Operation ON (Operation.[gId] = Process.[gOperationId])\\n\\t\" +\n    \"LEFT OUTER JOIN \" + msg.OperationConsumeStorageLocationDBTable.DBTable + \" AS OperationConsumeStorageLocation ON ((OperationConsumeStorageLocation.[gOperationId] = Operation.[gId]) AND (OperationConsumeStorageLocation.[gEquipmentId] = '\" + msg.OuttakeData.EquipmentId + \"') AND (ProcessSpecification.[nItemClass] = 1) AND (ProcessSpecification.[nConsumeBomItemClass] = 2))\\n\\t\" +\n        \"LEFT OUTER JOIN \" + msg.StorageLocationDBTable.DBTable + \" AS StorageLocation ON (StorageLocation.[gId] = OperationConsumeStorageLocation.[gStorageLocationId])\\n\\t\" +\n        \"LEFT OUTER JOIN \" + msg.BatchDBTable.DBTable + \" AS Batch ON ((Batch.[StorageLocationId] = OperationConsumeStorageLocation.[gStorageLocationId]) AND (Batch.[gMaterialId] = ProcessSpecification.[gMaterialId]) AND (Batch.[bIsCompleted] = 0))\\n\\t\" +\n        \"LEFT OUTER JOIN \" + msg.MaterialDBTable.DBTable + \" AS Material ON (Material.[gId] = ProcessSpecification.[gMaterialId])\\n\" +\n    \"WHERE ((ProcessSpecification.[gProcessId] = '\" + msg.OuttakeData.ProcessId + \"') AND (((ProcessSpecification.[nItemClass] = 2) AND (ProcessSpecification.[nProduceItemType] = 1)) OR ((ProcessSpecification.[nItemClass] = 1) AND (ProcessSpecification.[nConsumeBomItemClass] = 2))))\\n\";\n\nmsg.FindOuttakeMaterialRequest = SQLRequest;\n\nmsg.MESAPI = false;\nmsg.Method = \"Select\";\nmsg.DBTable = msg.ProcessSpecificationDBTable.DBTable;\nmsg.Step = \"Find Outtake Material\";\nmsg.MaterialOuttakeData = [];\nmsg.FindOuttakeMaterialError = [];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 420,
        "wires": [
            [
                "12fdac38a4a4224b",
                "0ba92c7b7f9690c2"
            ]
        ]
    },
    {
        "id": "b2e5a5bc388ddaab",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Find Outtake Material",
        "func": "msg.FindOuttakeMaterialRequestError = msg.error;\n\nmsg.IsSuccess = (!msg.FindOuttakeMaterialRequestError?.details);\nif (msg.IsSuccess)\n{\n    msg.MaterialOuttakeData = [];\n    msg.InMaterialList = [];\n    var OutMaterial = msg.FindOuttakeMaterialRequestData.filter(el => ((el.ItemClass == 2) && (el.ProduceItemType == 1)));\n    if (OutMaterial.length > 0)\n    {\n        if (OutMaterial.length > 1) msg.FindOuttakeMaterialError.push(\"For Process '\" + msg.OuttakeData.ProcessId + \"' found some Produced Material '\" + msg.OuttakeData.MaterialId + \"' (\" + OutMaterial.length + \")\");\n        else\n        {\n            if (OutMaterial[0].MaterialId?.toLowerCase() != msg.OuttakeData.MaterialId?.toLowerCase()) msg.FindOuttakeMaterialError.push(\"For Process '\" + msg.OuttakeData.ProcessId + \"' found wrong Produced Material '\" + OutMaterial[0].MaterialId + \"' (rigth '\" + msg.OuttakeData.MaterialId + \"')\");\n            else\n            {\n                msg.OutMaterial = OutMaterial[0];\n                var OutMaterialCoefficient = msg.OuttakeData.Quantity / OutMaterial[0].Amount;\n                var InMaterial = msg.FindOuttakeMaterialRequestData.filter(el => ((el.ItemClass == 1) && (el.ConsumeBomItemClass == 2)));\n                if (InMaterial.length > 0)\n                {\n                    var InMaterialUnique =[];\n                    for (let i = 0; i < InMaterial.length; i++)\n                    {\n                        if (!InMaterialUnique.find(el => el.MaterialId == InMaterial[i].MaterialId)) InMaterialUnique.push(InMaterial[i]);\n                    }\n                    for (let i = 0; i < InMaterialUnique.length; i++)\n                    {\n                        var InMaterialBatches = InMaterial.filter(el => (el.MaterialId == InMaterialUnique[i].MaterialId) && el.BatchId);\n                        var InMateriaData =\n                        {\n                            MaterialId: InMaterialUnique[i].MaterialId,\n                            MaterialName: InMaterialUnique[i].MaterialName,\n                            MaterialDescription: InMaterialUnique[i].MaterialDescription,\n                            MaterialAmount: OutMaterialCoefficient * InMaterialUnique[i].Amount,\n                            MaterialAmountEnd: OutMaterialCoefficient * InMaterialUnique[i].Amount,\n                            StorageLocation: []\n                        };\n                        msg.InMaterialList.push(InMateriaData);\n                        for (let j = 0; j < InMaterialBatches.length; j++)\n                        {\n                            var StorageLocationData = InMateriaData.StorageLocation.find(el => el.StorageLocationId == InMaterialBatches[j].StorageLocationId);\n                            if (!StorageLocationData)\n                            {\n                                StorageLocationData =\n                                {\n                                    StorageLocationId: InMaterialBatches[j].StorageLocationId,\n                                    StorageLocationNumberSAP: InMaterialBatches[j].StorageLocationNumberSAP,\n                                    TotalAmount: Math.abs(InMaterialBatches[j].BatchQuantity),\n                                    TotalAmountEnd: Math.abs(InMaterialBatches[j].BatchQuantity),\n                                    BatchList: [InMaterialBatches[j]]\n                                };\n                                InMateriaData.StorageLocation.push(StorageLocationData);\n                            }\n                            else\n                            {\n                                StorageLocationData.TotalAmount = StorageLocationData.TotalAmount + InMaterialBatches[j].BatchQuantity;\n                                StorageLocationData.BatchList.push(InMaterialBatches[j]);\n                            }\n                        }\n                        InMateriaData.StorageLocation.sort((a, b) => a.TotalAmount - b.TotalAmount);\n                        for (let j = 0; (InMateriaData.MaterialAmountEnd > 0) && (j < InMateriaData.StorageLocation.length); j++)\n                        {\n                            var MaterialQuantity = 0;\n                            if (InMateriaData.MaterialAmountEnd <= InMateriaData.StorageLocation[j].TotalAmount) MaterialQuantity = InMateriaData.MaterialAmountEnd;\n                            else MaterialQuantity = InMateriaData.StorageLocation[j].TotalAmount;\n                            InMateriaData.MaterialAmountEnd = InMateriaData.MaterialAmountEnd - MaterialQuantity;\n                            InMateriaData.StorageLocation[j].TotalAmountEnd = InMateriaData.StorageLocation[j].TotalAmountEnd - MaterialQuantity;\n                            var OuttakeMaterialData =\n                            {\n                                StorageLocationId: InMateriaData.StorageLocation[j].StorageLocationId,\n                                MaterialId: InMateriaData.MaterialId,\n                                Quantity: MaterialQuantity,\n                                OperationId: msg.OuttakeData.OperationId,\n                                ProcessId: msg.OuttakeData.ProcessId\n                            };\n                            msg.MaterialOuttakeData.push(OuttakeMaterialData);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    else msg.FindOuttakeMaterialError.push(\"For Process '\" + msg.OuttakeData.ProcessId + \"' not found Produced Material '\" + msg.OuttakeData.MaterialId + \"'\");\n\n    msg.IsSuccess = (msg.FindOuttakeMaterialError == 0);\n    if (!msg.IsSuccess)\n    {\n        msg.error =\n        {\n            code: \"Processing Error\",\n            message: \"\\n\" + msg.FindOuttakeMaterialError.join(\"\\n\") + \"\\n\"\n        };\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 420,
        "wires": [
            [
                "ce48ad4a231e7761",
                "0ba92c7b7f9690c2",
                "3a5d56a4e745532a"
            ]
        ]
    },
    {
        "id": "ce48ad4a231e7761",
        "type": "switch",
        "z": "2fcbd622bb75a545",
        "name": "IsSuccess == true",
        "property": "IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1350,
        "y": 420,
        "wires": [
            [
                "c5fac03467aa2683"
            ],
            [
                "439cc95bc4cefd50"
            ]
        ]
    },
    {
        "id": "8f9ff8d83c2d33b8",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Outtake Prepare",
        "func": "msg.headers = msg.Headers;\nmsg.MaterialOuttakeOne = msg.payload;\n\nmsg.method = msg.OuttakeAPI.Method;\nmsg.url = msg.OuttakeAPI.URL;\nmsg.requestTimeout = ((msg.OuttakeAPI.TimeoutSec * 1000) || 120000);\nmsg.MESAPI = true;\nmsg.Step = \"Outtake\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 540,
        "wires": [
            [
                "a42ad69d93e6655c",
                "0ba92c7b7f9690c2",
                "454e383c828f4620"
            ]
        ]
    },
    {
        "id": "232654982eb40451",
        "type": "switch",
        "z": "2fcbd622bb75a545",
        "name": "IsSuccess == true",
        "property": "IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1050,
        "y": 480,
        "wires": [
            [
                "50bc99e6def3ff6b"
            ],
            [
                "58c9500937274a9b"
            ]
        ]
    },
    {
        "id": "a42ad69d93e6655c",
        "type": "http request",
        "z": "2fcbd622bb75a545",
        "name": "Outtake",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 700,
        "y": 540,
        "wires": [
            [
                "b294c99b1ee38e1a",
                "f99a95485e0a3858",
                "0ba92c7b7f9690c2",
                "ed283c0c20dfbb86"
            ]
        ]
    },
    {
        "id": "b294c99b1ee38e1a",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Outtake",
        "func": "msg.OuttakeStatusCodeLocal = msg.statusCode;\n\nif (msg.statusCode != 200)\n{\n    var ErrorString = \"Outtake {\" + JSON.stringify(msg.MaterialOuttakeOne) + \"}: \" + msg.statusCode + \": \";\n\n    if (msg.OuttakeStatusCode == 200) msg.OuttakeStatusCode = msg.statusCode;\n\n    if (([\"ECONNRESET\", \"ETIMEDOUT\", \"ECONNREFUSED\", \"ENOTFOUND\"].includes(msg.statusCode))) ErrorString = ErrorString + msg.payload;\n    else\n    {\n        msg.OuttakeStatusCode = msg.statusCode;\n        ErrorString = ErrorString + JSON.stringify(msg.payload);\n    }\n\n    msg.OuttakeError.push(ErrorString);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 540,
        "wires": [
            [
                "c5fac03467aa2683",
                "0ba92c7b7f9690c2"
            ]
        ]
    },
    {
        "id": "f99a95485e0a3858",
        "type": "link out",
        "z": "2fcbd622bb75a545",
        "name": "Save Send Time to MES Log Intake",
        "mode": "link",
        "links": [
            "b585f137f9e3778e"
        ],
        "x": 835,
        "y": 580,
        "wires": []
    },
    {
        "id": "333d689827639cba",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Complete All Outtakes",
        "func": "msg.statusCode = msg.OuttakeStatusCode;\nmsg.payload = msg.OuttakeError.join(\"\\n\") + \"\\n\";\n\nmsg.IsSuccess = (msg.statusCode == 200);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 480,
        "wires": [
            [
                "232654982eb40451",
                "0ba92c7b7f9690c2"
            ]
        ]
    },
    {
        "id": "3a5d56a4e745532a",
        "type": "debug",
        "z": "2fcbd622bb75a545",
        "d": true,
        "name": "debug 230",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "MaterialOuttakeData",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 520,
        "wires": []
    },
    {
        "id": "454e383c828f4620",
        "type": "debug",
        "z": "2fcbd622bb75a545",
        "d": true,
        "name": "payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 560,
        "wires": []
    },
    {
        "id": "e21f912fd7894fde",
        "type": "function",
        "z": "2fcbd622bb75a545",
        "name": "Find Outtake Material",
        "func": "msg.FindOuttakeMaterialRequestError = msg.error;\n\nmsg.IsSuccess = (!msg.FindOuttakeMaterialRequestError?.details);\nif (msg.IsSuccess)\n{\n    msg.MaterialOuttakeData = [];\n    msg.InMaterialList = [];\n    var OutMaterial = msg.FindOuttakeMaterialRequestData.filter(el => ((el.ItemClass == 2) && (el.ProduceItemType == 1)));\n    if (OutMaterial.length > 0)\n    {\n        if (OutMaterial.length > 1) msg.FindOuttakeMaterialError.push(\"For Process '\" + msg.OuttakeData.ProcessId + \"' found some Produced Material '\" + msg.OuttakeData.MaterialId + \"' (\" + OutMaterial.length + \")\");\n        else\n        {\n            if (OutMaterial[0].MaterialId?.toLowerCase() != msg.OuttakeData.MaterialId?.toLowerCase()) msg.FindOuttakeMaterialError.push(\"For Process '\" + msg.OuttakeData.ProcessId + \"' found wrong Produced Material '\" + OutMaterial[0].MaterialId + \"' (rigth '\" + msg.OuttakeData.MaterialId + \"')\");\n            else\n            {\n                msg.OutMaterial = OutMaterial[0];\n                var OutMaterialCoefficient = msg.OuttakeData.Quantity / OutMaterial[0].Amount;\n                var InMaterial = msg.FindOuttakeMaterialRequestData.filter(el => ((el.ItemClass == 1) && (el.ConsumeBomItemClass == 2)));\n                if (InMaterial.length > 0)\n                {\n                    var InMaterialUnique =[];\n                    for (let i = 0; i < InMaterial.length; i++)\n                    {\n                        if (!InMaterialUnique.find(el => el.MaterialId == InMaterial[i].MaterialId)) InMaterialUnique.push(InMaterial[i]);\n                    }\n                    for (let i = 0; i < InMaterialUnique.length; i++)\n                    {\n                        var InMaterialBatches = InMaterial.filter(el => (el.MaterialId == InMaterialUnique[i].MaterialId) && el.BatchId);\n                        var InMateriaData =\n                        {\n                            MaterialId: InMaterialUnique[i].MaterialId,\n                            MaterialName: InMaterialUnique[i].MaterialName,\n                            MaterialDescription: InMaterialUnique[i].MaterialDescription,\n                            MaterialAmount: OutMaterialCoefficient * InMaterialUnique[i].Amount,\n                            MaterialAmountEnd: OutMaterialCoefficient * InMaterialUnique[i].Amount,\n                            StorageLocation: []\n                        };\n                        msg.InMaterialList.push(InMateriaData);\n                        for (let j = 0; j < InMaterialBatches.length; j++)\n                        {\n                            var StorageLocationData = InMateriaData.StorageLocation.find(el => el.StorageLocationId == InMaterialBatches[j].StorageLocationId);\n                            if (!StorageLocationData)\n                            {\n                                StorageLocationData =\n                                {\n                                    StorageLocationId: InMaterialBatches[j].StorageLocationId,\n                                    StorageLocationNumberSAP: InMaterialBatches[j].StorageLocationNumberSAP,\n                                    TotalAmount: InMaterialBatches[j].BatchQuantity,\n                                    TotalAmountEnd: InMaterialBatches[j].BatchQuantity,\n                                    BatchList: [InMaterialBatches[j]]\n                                };\n                                InMateriaData.StorageLocation.push(StorageLocationData);\n                            }\n                            else\n                            {\n                                StorageLocationData.TotalAmount = StorageLocationData.TotalAmount + InMaterialBatches[j].BatchQuantity;\n                                StorageLocationData.BatchList.push(InMaterialBatches[j]);\n                            }\n                        }\n                        InMateriaData.StorageLocation.sort((a, b) => a.TotalAmount - b.TotalAmount);\n                        for (let j = 0; (InMateriaData.MaterialAmountEnd > 0) && (j < InMateriaData.StorageLocation.length); j++)\n                        {\n                            var MaterialQuantity = 0;\n                            if (InMateriaData.MaterialAmountEnd <= InMateriaData.StorageLocation[j].TotalAmount) MaterialQuantity = InMateriaData.MaterialAmountEnd;\n                            else MaterialQuantity = InMateriaData.StorageLocation[j].TotalAmount;\n                            InMateriaData.MaterialAmountEnd = InMateriaData.MaterialAmountEnd - MaterialQuantity;\n                            InMateriaData.StorageLocation[j].TotalAmountEnd = InMateriaData.StorageLocation[j].TotalAmountEnd - MaterialQuantity;\n                            var OuttakeMaterialData =\n                            {\n                                StorageLocationId: InMateriaData.StorageLocation[j].StorageLocationId,\n                                MaterialId: InMateriaData.MaterialId,\n                                Quantity: MaterialQuantity,\n                                OperationId: msg.OuttakeData.OperationId,\n                                ProcessId: msg.OuttakeData.ProcessId\n                            };\n                            msg.MaterialOuttakeData.push(OuttakeMaterialData);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    else msg.FindOuttakeMaterialError.push(\"For Process '\" + msg.OuttakeData.ProcessId + \"' not found Produced Material '\" + msg.OuttakeData.MaterialId + \"'\");\n\n    msg.IsSuccess = (msg.FindOuttakeMaterialError == 0);\n    if (!msg.IsSuccess)\n    {\n        msg.error =\n        {\n            code: \"Processing Error\",\n            message: \"\\n\" + msg.FindOuttakeMaterialError.join(\"\\n\") + \"\\n\"\n        };\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "ed283c0c20dfbb86",
        "type": "debug",
        "z": "2fcbd622bb75a545",
        "d": true,
        "name": "debug 232",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 540,
        "wires": []
    },
    {
        "id": "a9b3a5934ab1d55e",
        "type": "debug",
        "z": "2fcbd622bb75a545",
        "name": "Зашёл в Outtake",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 640,
        "wires": []
    },
    {
        "id": "f55000565788daa6",
        "type": "array-loop",
        "z": "2fcbd622bb75a545",
        "name": "msg.TelegramFiles",
        "key": "al72029a818f207845",
        "keyType": "msg",
        "reset": false,
        "resetValue": "value-null",
        "array": "TelegramFiles",
        "arrayType": "msg",
        "x": 710,
        "y": 280,
        "wires": [
            [
                "42b274eb50cc8a0f"
            ],
            [
                "83d4e6407af8b3bd"
            ]
        ]
    },
    {
        "id": "c5fac03467aa2683",
        "type": "array-loop",
        "z": "2fcbd622bb75a545",
        "name": "msg.MaterialOuttakeData",
        "key": "alddefb91d4c993da4",
        "keyType": "msg",
        "reset": true,
        "resetValue": "value-null",
        "array": "MaterialOuttakeData",
        "arrayType": "msg",
        "x": 530,
        "y": 480,
        "wires": [
            [
                "333d689827639cba"
            ],
            [
                "8f9ff8d83c2d33b8"
            ]
        ]
    },
    {
        "id": "773d98500a5a16f8",
        "type": "MSSQL",
        "z": "2fcbd622bb75a545",
        "mssqlCN": "7e5114f542cff14f",
        "name": "Find Zero-Batch",
        "outField": "FindZeroBatchRequestData",
        "returnType": 0,
        "throwErrors": "0",
        "query": "--Если запись заказов из таблицы tblCtSData\r\nSELECT * FROM [tblCtSDataHistory]\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "FindZeroBatchRequest",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 780,
        "y": 620,
        "wires": [
            [
                "0ba92c7b7f9690c2",
                "376be9d1da91645f",
                "61c3e27642d52357"
            ]
        ]
    },
    {
        "id": "12fdac38a4a4224b",
        "type": "MSSQL",
        "z": "2fcbd622bb75a545",
        "mssqlCN": "7e5114f542cff14f",
        "name": "Find Outtake Material",
        "outField": "FindOuttakeMaterialRequestData",
        "returnType": 0,
        "throwErrors": "0",
        "query": "--Если запись заказов из таблицы tblCtSData\r\nSELECT * FROM [tblCtSDataHistory]\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "FindOuttakeMaterialRequest",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 840,
        "y": 420,
        "wires": [
            [
                "b2e5a5bc388ddaab",
                "0ba92c7b7f9690c2"
            ]
        ]
    },
    {
        "id": "45d56667af1eb63a",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Prepare Telegram Files Data",
        "func": "//Состояние подпотока\nvar SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: undefined\n    }\n};\n\n//Проверка занятости данного блока в случае большого количества файлов, которые могут не успеть обработать за интервал вызова функции\nvar IsBusy = context.get(\"IsBusy\");\nif (!IsBusy)\n{\n    context.set(\"IsBusy\", true);\n    SubflowStatus.payload.text = \"Processing: Start\";\n    node.send([null, SubflowStatus, null]);\n    var fs = global.get(\"fsextra\");\n    msg.Errors =\n    {\n        PrepareFilesData: [],\n        GetToken: [],\n        GetServiceUser: [],\n        FileProcessing: []\n    };\n    msg.ErrorCount = 0; //Количество полученных ошибок\n    msg.TelegramFiles = []; //Файлы поставок, отправляемые в MES\n    msg.FilesCount = 0; //Количество обрабатываемых файлов\n    msg.FileNumber = 0; //Номер обрабатываемого файла\n    msg.FilesFolder = msg.Telegram?.Folder?.FilesFolder?.Path; //Каталог временного хранения\n    msg.ArchiveOKFolder = msg.Telegram?.Folder?.ArchiveOKFolder?.Path; //Каталог удачно отправленных в MES файлов\n    msg.ArchiveBadFolder = msg.Telegram?.Folder?.ArchiveBadFolder?.Path; //Каталог ошибочных файлов\n    msg.MESLogsFolder = msg.Telegram?.Folder?.MESLogsFolder?.Path; //Архив запросов в MES\n    msg.FilePrefix = msg.Telegram?.FilePrefix; //Префикс файлов (без нижнего подчёркивания)\n    msg.FileType = msg.Telegram?.Folder?.FilesFolder?.FileType; //Тип файла запроса\n    msg.FileTypeMES = msg.Telegram?.Folder?.MESLogsFolder?.FileType; //Тип файла лога запроса в MES\n    //Шаблон сообщения об ошибке\n    var ErrorData =\n    {\n        error:\n        {\n            source:\n            {\n                id: env.get(\"NR_NODE_ID\"),\n                type: undefined,\n                name: env.get(\"NR_NODE_NAME\"),\n                count: 1\n            },\n            message: undefined\n        }\n    };\n    //Проверка настроек телеграммы\n    if (msg.FilesFolder && (msg.FilesFolder != \"\") && msg.ArchiveOKFolder && (msg.ArchiveOKFolder != \"\")\n        && msg.ArchiveBadFolder && (msg.ArchiveBadFolder != \"\") && msg.ArchiveBadFolder && (msg.ArchiveBadFolder != \"\")\n        && msg.MESLogsFolder && (msg.MESLogsFolder != \"\") && msg.FilePrefix && (msg.FilePrefix != \"\")\n        && msg.FileType && (msg.FileType != \"\") && msg.FileTypeMES && (msg.FileTypeMES != \"\")\n        )\n    {\n        //Проверка каталога временного хранения\n        if (fs.pathExistsSync(msg.FilesFolder))\n        {\n            //Проверка каталога удачно отправленных в MES файлов\n            if (fs.pathExistsSync(msg.ArchiveOKFolder))\n            {\n                //Проверка каталога ошибочных файлов\n                if (fs.pathExistsSync(msg.ArchiveBadFolder))\n                {\n                    //Проверка каталога ошибочных файлов\n                    if (fs.pathExistsSync(msg.MESLogsFolder))\n                    {\n                        var FilesNames = []; //Массив имён файлов телеграммы\n                        //Получения списка имён файлов msg.FilesFolder\n                        try\n                        {\n                            FilesNames = fs.readdirSync(msg.FilesFolder);\n                            msg.UseGetToken = msg.Telegram.UseGetToken;\n                            msg.UseGetServiceUser = msg.Telegram.UseGetServiceUser;\n                            msg.CompleteBatchAPI = msg.Telegram?.MESAPI?.CompleteBatch;\n                            msg.ManualBulkIntakeAPI = msg.Telegram?.MESAPI?.ManualBulkIntake;\n                            msg.BatchDBTable = msg.Telegram?.MESDBTable?.Batch;\n                            if ((!msg.CompleteBatchAPI) || (!msg.ManualBulkIntakeAPI) || (!msg.BatchDBTable))\n                            {\n                                ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings Error\";\n                                ErrorData.error.message = \"Telegram has Wrong Parameters: MES API or DBTable is not Сonfigured\";\n                                msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n                                msg.ErrorCount = msg.ErrorCount + 1;\n                                node.send([null, null, ErrorData]);\n                            }\n                        }\n                        catch (ex)\n                        {\n                            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n                            ErrorData.error.message = \"Directory '\" + msg.FilesFolder + \"' could not be read (\" + ex + \")\";\n                            msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n                            msg.ErrorCount = msg.ErrorCount + 1;\n                            node.send([null, null, ErrorData]);\n                        }\n                        //Выбор файлов с заданным расширением\n                        msg.TelegramFiles = FilesNames.filter(el => el.toLowerCase().endsWith(\".\" + msg.FileType));\n                        msg.FilesCount = msg.TelegramFiles.length;\n                    }\n                    else\n                    {\n                        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n                        ErrorData.error.message = \"Directory '\" + msg.MESLogsFolder + \"' does not exist\";\n                        msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n                        msg.ErrorCount = msg.ErrorCount + 1;\n                        node.send([null, null, ErrorData]);\n                    }\n                }\n                else\n                {\n                    ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n                    ErrorData.error.message = \"Directory '\" + msg.ArchiveBadFolder + \"' does not exist\";\n                    msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n                    msg.ErrorCount = msg.ErrorCount + 1;\n                    node.send([null, null, ErrorData]);\n                }\n            }\n            else\n            {\n                ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n                ErrorData.error.message = \"Directory '\" + msg.ArchiveOKFolder + \"' does not exist\";\n                msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n                msg.ErrorCount = msg.ErrorCount + 1;\n                node.send([null, null, ErrorData]);\n            }\n        }\n        else\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n            ErrorData.error.message = \"Directory '\" + msg.FilesFolder + \"' does not exist\";\n            msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n            msg.ErrorCount = msg.ErrorCount + 1;\n            node.send([null, null, ErrorData]);\n        }\n    }\n    else\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings Error\";\n        ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" is not Сonfigured\";\n        msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n        msg.ErrorCount = msg.ErrorCount + 1;\n        node.send([null, null, ErrorData]);\n    }\n    if ((msg.TelegramFiles.length > 0) || (msg.ErrorCount > 0)) return [msg, null, null];\n    else msg.ResetIsBusy = true;\n}\nif (msg.ResetIsBusy)\n{\n    var ProcessingState = \"Processing Completed. File Count: \" + msg.FilesCount + \". Error Count: \" + msg.ErrorCount + \".\";\n    var ProcessingColour = ((msg.ErrorCount > 0) ? \"red\" : \"green\");\n    SubflowStatus.payload.fill = ProcessingColour;\n    SubflowStatus.payload.text = ProcessingState;\n    context.set(\"IsBusy\", false);\n    return [null, SubflowStatus, null];\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 40,
        "wires": [
            [
                "328d5455da595714"
            ],
            [
                "13c02b3bdaa9ef33"
            ],
            [
                "2e568f67f109e50a"
            ]
        ],
        "outputLabels": [
            "Telegram Files Data",
            "Subflow Status",
            "Error"
        ]
    },
    {
        "id": "328d5455da595714",
        "type": "switch",
        "z": "b09434461726d60e",
        "name": "msg.ErrorCount > 0",
        "property": "ErrorCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 40,
        "wires": [
            [
                "28c386194a0c9be6"
            ],
            [
                "807ca2460519aaa9"
            ]
        ]
    },
    {
        "id": "28c386194a0c9be6",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Files Processing End",
        "func": "msg.ResetIsBusy = true;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 40,
        "wires": [
            [
                "45d56667af1eb63a"
            ]
        ]
    },
    {
        "id": "49132da1e151b276",
        "type": "subflow:37b786771d50fd31",
        "z": "b09434461726d60e",
        "name": "",
        "x": 1030,
        "y": 120,
        "wires": [
            [
                "f46724f5b9dda57e"
            ],
            [
                "5de0e1d4cf409a7f"
            ]
        ]
    },
    {
        "id": "f46724f5b9dda57e",
        "type": "switch",
        "z": "b09434461726d60e",
        "name": "msg.TokenIsSuccess == true",
        "property": "TokenIsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1280,
        "y": 120,
        "wires": [
            [
                "6318aa9c653f5b7d"
            ],
            [
                "a87e2072ec209156"
            ]
        ]
    },
    {
        "id": "a87e2072ec209156",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Get Token Error",
        "func": "msg.Errors.GetToken.push(msg.TokenError);\n\nmsg.ErrorCount = msg.ErrorCount + 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 120,
        "wires": [
            [
                "28c386194a0c9be6"
            ]
        ]
    },
    {
        "id": "0495a3363f8956dc",
        "type": "subflow:c5b8559825b247a0",
        "z": "b09434461726d60e",
        "name": "",
        "x": 930,
        "y": 200,
        "wires": [
            [
                "60656e61d5598f4a"
            ],
            [
                "e3df96a2ec8b0b18"
            ]
        ]
    },
    {
        "id": "60656e61d5598f4a",
        "type": "switch",
        "z": "b09434461726d60e",
        "name": "msg.ServiceUserIsSuccess == true",
        "property": "ServiceUserIsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1220,
        "y": 200,
        "wires": [
            [
                "c8b8945b7796f1ab"
            ],
            [
                "f849b646c6143ec7"
            ]
        ]
    },
    {
        "id": "f849b646c6143ec7",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Get Service User Error",
        "func": "msg.Errors.GetServiceUser.push(msg.ServiceUserError);\n\nmsg.ErrorCount = msg.ErrorCount + 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 200,
        "wires": [
            [
                "28c386194a0c9be6"
            ]
        ]
    },
    {
        "id": "7bab5dab0d907104",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Prepare Request",
        "func": "var fs = global.get(\"fsextra\");\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\nmsg.ActiveFileName = msg.payload; //Сохранение имени активного файла\nvar FullFileName = msg.FilesFolder + msg.ActiveFileName; //Полное имя файлов\nvar FileDataStringify = undefined; //Данные из файла\nvar FileData = undefined; //Данные из файла, преобразованные в объект\nvar ErrorCount = 0; //Количество возникших ошибок\nvar BadFile = false; //Файл имеет ошибочную структуру\nvar IsError = false; //Произошла ошибка при обработке файла\nmsg.MESAPI = false; //false - отправка в MES DBTable, true - отправка в MES API\n//Чтение данных из файла\nvar options =\n{\n    encoding: \"utf8\"\n};\ntry\n{\n    FileDataStringify = fs.readFileSync(FullFileName, options);\n}\ncatch (ex)\n{\n    ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" File Error\";\n    ErrorData.error.message = \"File '\" + FullFileName + \"' could not be read (\" + ex + \")\";\n    IsError = true;\n}\n//Преобразование файла в объект\nif (FileDataStringify)\n{\n    try\n    {\n        FileData = JSON.parse(FileDataStringify);\n    }\n    catch (ex)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Data Error\";\n        ErrorData.error.message = \"File '\" + FullFileName + \"' Data could not be Parse to Object. This File is sent to the Bad Directory. (\" + ex + \")\";\n        IsError = true;\n    }\n    if (FileData)\n    {\n        msg.FileData = FileData.Data;\n        if (msg.FileData)\n        {\n            msg.Headers = {};\n            msg.Headers[\"Authorization\"] = msg.Token;\n            msg.Headers[\"Content-Type\"] = \"application/json; charset=utf-8\";\n            msg.Headers[\"Initiator-user\"] = msg.ServiceUserId;\n            msg.FindBatchData =\n            {\n                BatchNumber: msg.FileData.BatchNumber,\n                MaterialId: msg.FileData.MaterialId,\n                StorageLocationId: msg.FileData.StorageLocationId\n            };\n            msg.CompleteBatchError = [\"\"];\n            msg.CompleteBatchStatusCode = 200;\n            msg.CompleteBatchData =\n            {\n                StorageLocationId: msg.FileData.StorageLocationId,\n                BatchId: null\n            };\n            msg.ManualBulkIntakeData =\n            {\n                MaterialId: msg.FileData.MaterialId,\n                StorageLocationId: msg.FileData.StorageLocationId,\n                DateTime: (new Date()).toISOString(),\n                DoNotCheckQuality: true,\n                DeliveryId: null,\n                ShipmentId: null,\n                QuantityPlan: null,\n                Items:\n                [{\n                    BatchNumber: msg.FileData.BatchNumber,\n                    ExternalBatchNumber: msg.FileData.ExternalBatchNumber,\n                    SupplierNumber: msg.FileData.SupplierNumber,\n                    Quantity: msg.FileData.Quantity,\n                    Expiration: msg.FileData.Expiration,\n                    PackagingDate: msg.FileData.PackagingDate,\n                    Comment: msg.FileData.Comment\n                }]\n            };\n        }\n        else\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Data Error\";\n            ErrorData.error.message = \"File '\" + FullFileName + \"' has no Data. This File is sent to the Bad Directory\";\n            IsError = true;\n            BadFile = true;\n        }\n    }\n    else BadFile = true;\n}\n\nif (IsError)\n{\n    var FileErrorData =\n    {\n        FileName: msg.ActiveFileName,\n        BadFile: BadFile,\n        OKFile: false,\n        Prepare: ErrorData.error.message,\n        Send: undefined,\n        Finish: undefined\n    };\n    msg.Errors.FileProcessing.push(FileErrorData);\n\n    msg.ErrorCount = msg.ErrorCount + 1;\n    node.send([null, ErrorData]);\n}\n\nmsg.BadFile = BadFile;\n//Файл и данные успешно прошли проверки\nmsg.PrepareIsSuccess = (!IsError) && (!BadFile);\n//Время начала отправки данных в MES\nmsg.StartDateTime = new Date();\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 340,
        "wires": [
            [
                "f8ae2bf15a537fcd"
            ],
            [
                "bb8640ad24f7b90e"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "c674e813b60056d9",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Prepare Response",
        "func": "// var fs = global.get(\"fsextra\");\n// //Шаблон сообщения об ошибке\n// var ErrorData =\n// {\n//     error:\n//     {\n//         source:\n//         {\n//             id: env.get(\"NR_NODE_ID\"),\n//             type: undefined,\n//             name: env.get(\"NR_NODE_NAME\"),\n//             count: 1\n//         },\n//         message: undefined\n//     }\n// };\n\n// msg.OKFile = false; //Файл прошёл все проверки и был успешно отправлен\n// var EndDirectory = undefined; //Конечная директория перемещения файла\n// var SendError = undefined; //Ошибка отправки данных\n// var FinishError = undefined; //Ошибка завершения обработки данных\n\n// if (msg.PrepareIsSuccess)\n// {\n//     var StatusCode = undefined;\n//     var StatusCodeOK = undefined;\n//     var ErrorArray = undefined;\n//     var ErrorCode = undefined;\n//     var ErrorCodeData = undefined;\n//     if (msg.MESAPI)\n//     {\n//         StatusCode = msg.statusCode;\n//         StatusCodeOK = (msg.statusCode == 200);\n//         ErrorArray = [\"ECONNRESET\", \"ETIMEDOUT\", \"ECONNREFUSED\", \"ENOTFOUND\"];\n//         ErrorCode = msg.payload;\n//         ErrorCodeData = msg.payload;\n//     }\n//     else\n//     {\n//         StatusCode = msg.error?.code;\n//         StatusCodeOK = (!msg.error?.code);\n//         ErrorArray = [\"ECONNCLOSED\", \"ESOCKET\"];\n//         ErrorCode = msg.error?.message;\n//         ErrorCodeData = msg.error;\n//     }\n\n//     if (StatusCodeOK) msg.OKFile = true;\n//     else\n//     {\n//         SendError = \"Send to MES: \" + msg.Step + \": \" + StatusCode + \": \";\n//         if ((ErrorArray.includes(StatusCode))) SendError = SendError + ErrorCode;\n//         else\n//         {\n//             SendError = SendError + JSON.stringify(ErrorCodeData);\n//             msg.BadFile = true;\n//         }\n//         msg.ErrorCount = msg.ErrorCount + 1;\n//     }\n// }\n// //Перемещение успешно отправленного файла в архив\n// if (msg.OKFile) EndDirectory = msg.ArchiveOKFolder;\n// else\n// {\n//     //Перемещение ошибочного файла в архив\n//     if (msg.BadFile) EndDirectory = msg.ArchiveBadFolder;\n// }\n// //Перемещение файла в конечную директорию\n// if (EndDirectory)\n// {\n//     try\n//     {\n//         var moveSyncOptions =\n//         {\n//             overwrite: true\n//         };\n//         fs.moveSync(msg.FilesFolder + msg.ActiveFileName, EndDirectory + msg.ActiveFileName, moveSyncOptions);\n//     }\n//     catch (ex)\n//     {\n//         ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" File Error\";\n//         ErrorData.error.message = \"Unable to move file '\" + msg.FilesFolder + msg.ActiveFileName + \"' to '\" + EndDirectory + \"' directory (\" + ex + \")\";\n//         FinishError = ErrorData.error.message;\n//         msg.ErrorCount = msg.ErrorCount + 1;\n//         node.send([null, ErrorData]);\n//     }\n// }\n// //Дополнение массива ошибок\n// if (SendError || FinishError)\n// {\n//     var FileErrorData = msg.Errors.FileProcessing.find(el => el.FileName == msg.ActiveFileName);\n//     if (FileErrorData)\n//     {\n//         FileErrorData.BadFile = msg.BadFile;\n//         FileErrorData.OKFile = msg.OKFile;\n//         FileErrorData.Send = SendError;\n//         FileErrorData.Finish = FinishError;\n//     }\n//     else\n//     {\n//         FileErrorData =\n//         {\n//             FileName: msg.ActiveFileName,\n//             BadFile: msg.BadFile,\n//             OKFile: msg.OKFile,\n//             Prepare: undefined,\n//             Send: SendError,\n//             Finish: FinishError\n//         };\n//         msg.Errors.FileProcessing.push(FileErrorData);\n//     }\n// }\n\n return [msg, null];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 340,
        "wires": [
            [
                "9eec4dd15f6b3280"
            ],
            [
                "50d2c7dcb8e4c773"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "f8ae2bf15a537fcd",
        "type": "switch",
        "z": "b09434461726d60e",
        "name": "PrepareIsSuccess == false",
        "property": "PrepareIsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 700,
        "y": 340,
        "wires": [
            [
                "5644a0ede0d76440"
            ],
            [
                "6e33e9075d77e1e8"
            ]
        ]
    },
    {
        "id": "e70efbe4e2894e02",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Save Send Time to MES Log",
        "func": "var fs = global.get(\"fsextra\");\n//Время окончания отправки данных в MES\nmsg.EndDateTime = new Date();\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n}\n//Проверка настроек телеграммы\nif (msg.MESLogsFolder && (msg.MESLogsFolder != \"\") && msg.FilePrefix && (msg.FilePrefix != \"\") && msg.FileTypeMES && (msg.FileTypeMES != \"\"))\n{\n    if (msg.StartDateTime)\n    {\n        var FileName = msg.FilePrefix + \"_MES_\"\n            + msg.StartDateTime?.getFullYear().toString()\n            + ('0' + (msg.StartDateTime.getMonth() + 1).toString()).slice(-2)\n            + ('0' + msg.StartDateTime.getDate().toString()).slice(-2)\n            + \".log\";\n        var StartDate = msg.StartDateTime.getFullYear().toString() + \".\"\n            + ('0' + (msg.StartDateTime.getMonth() + 1).toString()).slice(-2) + \".\"\n            + ('0' + msg.StartDateTime.getDate().toString()).slice(-2);\n        var StartTime = ('0' + msg.StartDateTime.getHours().toString()).slice(-2) + \":\"\n            + ('0' + msg.StartDateTime.getMinutes().toString()).slice(-2) + \":\"\n            + ('0' + msg.StartDateTime.getSeconds().toString()).slice(-2) + \".\"\n            + ('00' + msg.StartDateTime.getMilliseconds().toString()).slice(-3);\n        var EndDate = msg.EndDateTime.getFullYear().toString() + \".\"\n            + ('0' + (msg.EndDateTime.getMonth() + 1).toString()).slice(-2) + \".\"\n            + ('0' + msg.EndDateTime.getDate().toString()).slice(-2);\n        var EndTime = ('0' + msg.EndDateTime.getHours().toString()).slice(-2) + \":\"\n            + ('0' + msg.EndDateTime.getMinutes().toString()).slice(-2) + \":\"\n            + ('0' + msg.EndDateTime.getSeconds().toString()).slice(-2) + \".\"\n            + ('00' + msg.EndDateTime.getMilliseconds().toString()).slice(-3);\n        var ProcessingTime = (Number(msg.EndDateTime) - Number(msg.StartDateTime)) / 1000;\n        var FullFileName = msg.MESLogsFolder + FileName;\n        var Header = \"Start Time\\tEnd Time\\tFile Name\\tMethod\\tAPI/DBTable\\tOperation Time\\tSend Status\\r\\n\"; //Заголовок файла логирования\n        var LogLine = StartDate + \" T \" + StartTime + \"\\t\";\n        LogLine = LogLine + EndDate + \" T \" + EndTime + \"\\t\";\n        LogLine = LogLine + msg.ActiveFileName + \"\\t\";\n        LogLine = LogLine + (msg.MESAPI ? msg.method : msg.Method) + \"\\t\";\n        LogLine = LogLine + (msg.MESAPI ? msg.url : msg.DBTable) + \"\\t\";\n        LogLine = LogLine + ProcessingTime.toFixed(3) + \" sec\\t\";\n        var StatusCode = (msg.MESAPI ? (msg.statusCode == 200) : (!msg.error?.code));\n        if (StatusCode) LogLine = LogLine + \"Command sent Successfully\";\n        else LogLine = LogLine + \"Error sending command\";\n        LogLine = LogLine + \"\\r\\n\";\n        var LogLineSend = false;\n        //Проверка каталога хранения логов времени отправки в MES\n        fs.pathExists(msg.MESLogsFolder, pathExistsCallback);\n    }\n    else\n    {\n        ErrorData.error.source.type = \"Start DateTime\";\n        ErrorData.error.message = \"msg field doesn't have StartDateTime value\";\n        return [null, ErrorData];\n    }\n}\nelse\n{\n    ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings Error\";\n    ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" is not Сonfigured\";\n    return [null, ErrorData];\n}\n\nfunction pathExistsCallback(err, exists)\n{\n    if (err)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n        ErrorData.error.message = \"pathExistsCallback: \" + err;\n        node.send([null, ErrorData]);\n        node.done();\n    }\n    else\n    {\n        if (exists) fs.stat(FullFileName, statCallback);\n        else\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n            ErrorData.error.message = \"Directory '\" + msg.MESLogsFolder + \"' does not exist\";\n            node.send([null, ErrorData]);\n            node.done();\n        }\n    }\n}\n\nfunction statCallback(err, stats)\n{\n    if (err)\n    {\n        if (err.code != \"ENOENT\")\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Log File Error\";\n            ErrorData.error.message = \"statCallback: \" + err;\n            node.send([null, ErrorData]);\n            node.done();\n        }\n        else fs.appendFile(FullFileName, Header, appendFileCallback);\n    }\n    else\n    {\n        LogLineSend = true;\n        fs.appendFile(FullFileName, LogLine, appendFileCallback);\n    }\n}\n\nfunction appendFileCallback(err)\n{\n    if (err)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Log File Error\";\n        ErrorData.error.message = \"statCallback: \" + err;\n        node.send([null, ErrorData]);\n        node.done();\n    }\n    else\n    {\n        if (!LogLineSend)\n        {\n            LogLineSend = true;\n            fs.appendFile(FullFileName, LogLine, appendFileCallback);\n        }\n        else\n        {\n            node.send([msg, null]);\n            node.done();\n        }\n    }\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 420,
        "wires": [
            [],
            [
                "50d2c7dcb8e4c773"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "b3417c08a20d62d1",
        "type": "catch",
        "z": "b09434461726d60e",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 140,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "f5cf0ad3957156a0",
        "type": "link in",
        "z": "b09434461726d60e",
        "name": "Catch Error Data",
        "links": [
            "2e568f67f109e50a",
            "50d2c7dcb8e4c773",
            "5de0e1d4cf409a7f",
            "bb8640ad24f7b90e",
            "e3df96a2ec8b0b18",
            "9d4776d0c247ab64"
        ],
        "x": 205,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "2e568f67f109e50a",
        "type": "link out",
        "z": "b09434461726d60e",
        "name": "Catch Error Telegram Files Prepare",
        "mode": "link",
        "links": [
            "f5cf0ad3957156a0"
        ],
        "x": 335,
        "y": 140,
        "wires": []
    },
    {
        "id": "a71b9d33f83ebdf2",
        "type": "link in",
        "z": "b09434461726d60e",
        "name": "Subflow Status",
        "links": [
            "0c4bdaf0b0019607",
            "13c02b3bdaa9ef33",
            "4791af034b0a28c6",
            "4a118d5fee6f16b2",
            "92bd2f89b067580f",
            "ee7b15020d83a500",
            "a4539da3932b6428",
            "ca6e7474094875a3"
        ],
        "x": 205,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "13c02b3bdaa9ef33",
        "type": "link out",
        "z": "b09434461726d60e",
        "name": "Subflow Status Telegram Files Prepare",
        "mode": "link",
        "links": [
            "a71b9d33f83ebdf2"
        ],
        "x": 335,
        "y": 100,
        "wires": []
    },
    {
        "id": "a793b11ef3784525",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Subflow Status",
        "func": "var SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: Get Token\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 120,
        "wires": [
            [
                "49132da1e151b276"
            ],
            [
                "0c4bdaf0b0019607"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "6901a315effa501d",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Subflow Status",
        "func": "var SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: Get Service User\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 200,
        "wires": [
            [
                "0495a3363f8956dc"
            ],
            [
                "4791af034b0a28c6"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "0c4bdaf0b0019607",
        "type": "link out",
        "z": "b09434461726d60e",
        "name": "Subflow Status Get Token",
        "mode": "link",
        "links": [
            "a71b9d33f83ebdf2"
        ],
        "x": 975,
        "y": 160,
        "wires": []
    },
    {
        "id": "4791af034b0a28c6",
        "type": "link out",
        "z": "b09434461726d60e",
        "name": "Subflow Status Get Service User",
        "mode": "link",
        "links": [
            "a71b9d33f83ebdf2"
        ],
        "x": 855,
        "y": 240,
        "wires": []
    },
    {
        "id": "93b76b04b156aa32",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Subflow Status",
        "func": "msg.FileNumber = ((msg.FileNumber + 1) || 1);\nvar SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: File \" + msg.FileNumber + \"/\" + msg.FilesCount + \": Preparing\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 340,
        "wires": [
            [
                "7bab5dab0d907104"
            ],
            [
                "4a118d5fee6f16b2"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "4a118d5fee6f16b2",
        "type": "link out",
        "z": "b09434461726d60e",
        "name": "Subflow Status Prepare Request",
        "mode": "link",
        "links": [
            "a71b9d33f83ebdf2"
        ],
        "x": 355,
        "y": 380,
        "wires": []
    },
    {
        "id": "bb8640ad24f7b90e",
        "type": "link out",
        "z": "b09434461726d60e",
        "name": "Catch Error Prepare Request",
        "mode": "link",
        "links": [
            "f5cf0ad3957156a0"
        ],
        "x": 595,
        "y": 380,
        "wires": []
    },
    {
        "id": "2057fd2a1c71954b",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Subflow Status",
        "func": "var SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: File \" + msg.FileNumber + \"/\" + msg.FilesCount + \": Sending\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 420,
        "wires": [
            [
                "e74f94b64cb5ead2"
            ],
            [
                "92bd2f89b067580f"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "92bd2f89b067580f",
        "type": "link out",
        "z": "b09434461726d60e",
        "name": "Subflow Status Prepare Request",
        "mode": "link",
        "links": [
            "a71b9d33f83ebdf2"
        ],
        "x": 495,
        "y": 460,
        "wires": []
    },
    {
        "id": "5644a0ede0d76440",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Subflow Status",
        "func": "var SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: File \" + msg.FileNumber + \"/\" + msg.FilesCount + \": Completing\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 340,
        "wires": [
            [
                "c674e813b60056d9"
            ],
            [
                "ee7b15020d83a500"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "ee7b15020d83a500",
        "type": "link out",
        "z": "b09434461726d60e",
        "name": "Subflow Status Prepare Request",
        "mode": "link",
        "links": [
            "a71b9d33f83ebdf2"
        ],
        "x": 1655,
        "y": 380,
        "wires": []
    },
    {
        "id": "e3df96a2ec8b0b18",
        "type": "link out",
        "z": "b09434461726d60e",
        "name": "Catch Error Telegram Get Service User",
        "mode": "link",
        "links": [
            "f5cf0ad3957156a0"
        ],
        "x": 1095,
        "y": 240,
        "wires": []
    },
    {
        "id": "5de0e1d4cf409a7f",
        "type": "link out",
        "z": "b09434461726d60e",
        "name": "Catch Error Telegram Get Token",
        "mode": "link",
        "links": [
            "f5cf0ad3957156a0"
        ],
        "x": 1175,
        "y": 160,
        "wires": []
    },
    {
        "id": "50d2c7dcb8e4c773",
        "type": "link out",
        "z": "b09434461726d60e",
        "name": "Catch Error Send to MES and Prepare Response",
        "mode": "link",
        "links": [
            "f5cf0ad3957156a0"
        ],
        "x": 1955,
        "y": 420,
        "wires": []
    },
    {
        "id": "807ca2460519aaa9",
        "type": "switch",
        "z": "b09434461726d60e",
        "name": "msg.UseGetServiceUser == true",
        "property": "UseGetServiceUser",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 120,
        "wires": [
            [
                "a793b11ef3784525"
            ],
            [
                "e2967c9ce56a4925"
            ]
        ]
    },
    {
        "id": "f252e265beb248ac",
        "type": "switch",
        "z": "b09434461726d60e",
        "name": "msg.UseGetServiceUser == true",
        "property": "UseGetServiceUser",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 200,
        "wires": [
            [
                "6901a315effa501d"
            ],
            [
                "9eec4dd15f6b3280"
            ]
        ]
    },
    {
        "id": "e74f94b64cb5ead2",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Find Batch Prepare",
        "func": "var SQLRequest =\n    \"SELECT\\n\\t\"+\n        \"[gId] AS Guid,\\n\\t\" +\n        \"[bIsCompleted] AS IsCompleted,\\n\\t\" +\n        \"[StorageLocationId] AS StorageLocationId,\\n\\t\" +\n        \"[gMaterialId] AS MaterialGuid,\\n\\t\" +\n        \"[szBatchNumber] AS BatchNumber,\\n\\t\" +\n        \"[dtCreatedAt] AS CreatedAt\\n\" +\n    \"FROM \" + msg.BatchDBTable.DBTable + \"\\n\" +\n    \"WHERE (([bIsCompleted] = 0) AND ([StorageLocationId] = N'\" + msg.FindBatchData.StorageLocationId + \"') AND ([gMaterialId] = N'\" + msg.FindBatchData.MaterialId + \"') AND ([szBatchNumber] = N'\" + msg.FindBatchData.BatchNumber + \"'))\\n\" +\n    \"ORDER BY [dtCreatedAt] DESC\";\n\nmsg.FindBatchRequest = SQLRequest;\n\nmsg.MESAPI = false;\nmsg.Method = \"Select\";\nmsg.DBTable = msg.BatchDBTable.DBTable;\nmsg.Step = \"Find Batch\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 420,
        "wires": [
            [
                "260f69895391b9bd"
            ]
        ]
    },
    {
        "id": "6d38785ec9d62ce4",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Find Batch",
        "func": "msg.FindBatchRequestError = msg.error;\n\nmsg.IsSuccess = (!msg.FindBatchRequestError?.details);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 420,
        "wires": [
            [
                "8c533421faed7127"
            ]
        ]
    },
    {
        "id": "8c533421faed7127",
        "type": "switch",
        "z": "b09434461726d60e",
        "name": "IsSuccess == true",
        "property": "IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1210,
        "y": 420,
        "wires": [
            [
                "70b8f6738ecbb7da"
            ],
            [
                "f080039836e7452f"
            ]
        ]
    },
    {
        "id": "714b0e0501c8a012",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Complete Batch Prepare",
        "func": "msg.headers = msg.Headers;\n\nmsg.method = msg.CompleteBatchAPI.Method;\nmsg.url = msg.CompleteBatchAPI.URL;\nmsg.requestTimeout = ((msg.CompleteBatchAPI.TimeoutSec * 1000) || 120000);\nmsg.CompleteBatchData.BatchId = msg.payload.Guid;\nmsg.payload = msg.CompleteBatchData;\nmsg.MESAPI = true;\nmsg.Step = \"Complete Batch\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 560,
        "wires": [
            [
                "d69f2f6e78577fe2",
                "624cd3f93d0e5bdd"
            ]
        ]
    },
    {
        "id": "d69f2f6e78577fe2",
        "type": "http request",
        "z": "b09434461726d60e",
        "name": "Complete Batch",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 780,
        "y": 560,
        "wires": [
            [
                "4c53d5e62e458ee6",
                "1dbe8578ce1533c3"
            ]
        ]
    },
    {
        "id": "4c53d5e62e458ee6",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Complete Batch",
        "func": "msg.CompleteBatchStatusCodeLocal = msg.statusCode;\n\nif (msg.statusCode != 200)\n{\n    var ErrorString = \"Complete Batch Id = \" + msg.CompleteBatchData.BatchId + \": \" + msg.statusCode + \": \";\n\n    if (msg.CompleteBatchStatusCode == 200) msg.CompleteBatchStatusCode = msg.statusCode;\n\n    if (([\"ECONNRESET\", \"ETIMEDOUT\", \"ECONNREFUSED\", \"ENOTFOUND\"].includes(msg.statusCode))) ErrorString = ErrorString + msg.payload;\n    else\n    {\n        msg.CompleteBatchStatusCode = msg.statusCode;\n        ErrorString = ErrorString + JSON.stringify(msg.payload);\n    }\n\n    msg.CompleteBatchError.push(ErrorString);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 560,
        "wires": [
            [
                "ddefb91d4c993da4"
            ]
        ]
    },
    {
        "id": "4ada8998d1db3ce8",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Manual Bulk Intake Prepare",
        "func": "msg.headers = msg.Headers;\n\nmsg.method = msg.ManualBulkIntakeAPI.Method;\nmsg.url = msg.ManualBulkIntakeAPI.URL;\nmsg.requestTimeout = ((msg.ManualBulkIntakeAPI.TimeoutSec * 1000) || 120000);\nmsg.payload = msg.ManualBulkIntakeData;\nmsg.MESAPI = true;\nmsg.Step = \"Manual Bulk Intake\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 780,
        "wires": [
            [
                "42f19696658158cc",
                "58fd34e6e7f0b593"
            ]
        ]
    },
    {
        "id": "42f19696658158cc",
        "type": "http request",
        "z": "b09434461726d60e",
        "name": "Manual Bulk Intake",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 780,
        "wires": [
            [
                "74ab694c26e2c580",
                "d240fee7fa96ef7f"
            ]
        ]
    },
    {
        "id": "17bb0e6350759de2",
        "type": "link in",
        "z": "b09434461726d60e",
        "name": "Save Send Time to MES Log",
        "links": [
            "1dbe8578ce1533c3",
            "d240fee7fa96ef7f",
            "e7481623fa635252"
        ],
        "x": 1565,
        "y": 420,
        "wires": [
            [
                "e70efbe4e2894e02"
            ]
        ]
    },
    {
        "id": "e7481623fa635252",
        "type": "link out",
        "z": "b09434461726d60e",
        "name": "Save Send Time to MES Log Find Zero-Batch",
        "mode": "link",
        "links": [
            "17bb0e6350759de2"
        ],
        "x": 935,
        "y": 460,
        "wires": []
    },
    {
        "id": "1dbe8578ce1533c3",
        "type": "link out",
        "z": "b09434461726d60e",
        "name": "Save Send Time to MES Log Intake",
        "mode": "link",
        "links": [
            "17bb0e6350759de2"
        ],
        "x": 935,
        "y": 600,
        "wires": []
    },
    {
        "id": "74ab694c26e2c580",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Manual Bulk Intake",
        "func": "msg.ManualBulkIntakeStatusCode = msg.statusCode;\n\nmsg.IsSuccess = (msg.statusCode == 200);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 780,
        "wires": [
            [
                "32a612c196e14e47"
            ]
        ]
    },
    {
        "id": "d240fee7fa96ef7f",
        "type": "link out",
        "z": "b09434461726d60e",
        "name": "Save Send Time to MES Log Set Batch Parameters",
        "mode": "link",
        "links": [
            "17bb0e6350759de2"
        ],
        "x": 915,
        "y": 820,
        "wires": []
    },
    {
        "id": "7c45b6d3abf931e5",
        "type": "switch",
        "z": "b09434461726d60e",
        "name": "IsSuccess == true",
        "property": "IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1090,
        "y": 500,
        "wires": [
            [
                "2127d98571eda9b9"
            ],
            [
                "2127d98571eda9b9"
            ]
        ]
    },
    {
        "id": "1282ddeedba8261f",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Complete All Batches",
        "func": "msg.statusCode = msg.CompleteBatchStatusCode;\nmsg.payload = msg.CompleteBatchError.join(\"\\n\") + \"\\n\";\n\nmsg.IsSuccess = (msg.statusCode == 200);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 500,
        "wires": [
            [
                "7c45b6d3abf931e5"
            ]
        ]
    },
    {
        "id": "551f1060874d68f7",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Prepare Request",
        "func": "var fs = global.get(\"fsextra\");\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\nmsg.ActiveFileName = msg.payload; //Сохранение имени активного файла\nvar FullFileName = msg.FilesFolder + msg.ActiveFileName; //Полное имя файлов\nvar FileDataStringify = undefined; //Данные из файла\nvar FileData = undefined; //Данные из файла, преобразованные в объект\nvar ErrorCount = 0; //Количество возникших ошибок\nvar BadFile = false; //Файл имеет ошибочную структуру\nvar IsError = false; //Произошла ошибка при обработке файла\nmsg.MESAPI = false; //false - отправка в MES DBTable, true - отправка в MES API\n//Чтение данных из файла\nvar options =\n{\n    encoding: \"utf8\"\n};\ntry\n{\n    FileDataStringify = fs.readFileSync(FullFileName, options);\n}\ncatch (ex)\n{\n    ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" File Error\";\n    ErrorData.error.message = \"File '\" + FullFileName + \"' could not be read (\" + ex + \")\";\n    IsError = true;\n}\n//Преобразование файла в объект\nif (FileDataStringify)\n{\n    try\n    {\n        FileData = JSON.parse(FileDataStringify);\n    }\n    catch (ex)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Data Error\";\n        ErrorData.error.message = \"File '\" + FullFileName + \"' Data could not be Parse to Object. This File is sent to the Bad Directory. (\" + ex + \")\";\n        IsError = true;\n    }\n    if (FileData)\n    {\n        msg.FileData = FileData.Data;\n        if (msg.FileData)\n        {\n            msg.Headers = {};\n            msg.Headers[\"Authorization\"] = msg.Token;\n            msg.Headers[\"Content-Type\"] = \"application/json; charset=utf-8\";\n            msg.Headers[\"Initiator-user\"] = msg.ServiceUserId;\n            msg.FindBatchData =\n            {\n                BatchNumber: msg.FileData.BatchNumber,\n                MaterialId: msg.FileData.MaterialId,\n                StorageLocationId: msg.FileData.StorageLocationId\n            };\n            msg.CompleteBatchError = [\"\"];\n            msg.CompleteBatchStatusCode = 200;\n            msg.CompleteBatchData =\n            {\n                StorageLocationId: msg.FileData.StorageLocationId,\n                BatchId: null\n            };\n            msg.ManualBulkIntakeData =\n            {\n                MaterialId: msg.FileData.MaterialId,\n                StorageLocationId: msg.FileData.StorageLocationId,\n                DateTime: (new Date()).toISOString(),\n                DoNotCheckQuality: true,\n                DeliveryId: null,\n                ShipmentId: null,\n                QuantityPlan: null,\n                Items:\n                [{\n                    BatchNumber: msg.FileData.BatchNumber,\n                    ExternalBatchNumber: msg.FileData.ExternalBatchNumber,\n                    SupplierNumber: msg.FileData.SupplierNumber,\n                    Quantity: msg.FileData.Quantity,\n                    Expiration: msg.FileData.Expiration,\n                    PackagingDate: msg.FileData.PackagingDate,\n                    Comment: msg.FileData.Comment\n                }]\n            };\n        }\n        else\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Data Error\";\n            ErrorData.error.message = \"File '\" + FullFileName + \"' has no Data. This File is sent to the Bad Directory\";\n            IsError = true;\n            BadFile = true;\n        }\n    }\n    else BadFile = true;\n}\n\nif (IsError)\n{\n    var FileErrorData =\n    {\n        FileName: msg.ActiveFileName,\n        BadFile: BadFile,\n        OKFile: false,\n        Prepare: ErrorData.error.message,\n        Send: undefined,\n        Finish: undefined\n    };\n    msg.Errors.FileProcessing.push(FileErrorData);\n\n    msg.ErrorCount = msg.ErrorCount + 1;\n    node.send([null, ErrorData]);\n}\n\nmsg.BadFile = BadFile;\n//Файл и данные успешно прошли проверки\nmsg.PrepareIsSuccess = (!IsError) && (!BadFile);\n//Время начала отправки данных в MES\nmsg.StartDateTime = new Date();\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 700,
        "wires": [
            [
                "0d2282c3743bb45e"
            ],
            [
                "9d4776d0c247ab64"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "0d2282c3743bb45e",
        "type": "switch",
        "z": "b09434461726d60e",
        "name": "PrepareIsSuccess == false",
        "property": "PrepareIsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 960,
        "y": 700,
        "wires": [
            [
                "32a612c196e14e47"
            ],
            [
                "2e0c16f208760ba4"
            ]
        ]
    },
    {
        "id": "94d81f97664e7855",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Subflow Status",
        "func": "msg.FileNumber = ((msg.FileNumber + 1) || 1);\nvar SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: File \" + msg.FileNumber + \"/\" + msg.FilesCount + \": Preparing\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 700,
        "wires": [
            [
                "551f1060874d68f7"
            ],
            [
                "a4539da3932b6428"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "a4539da3932b6428",
        "type": "link out",
        "z": "b09434461726d60e",
        "name": "Subflow Status Prepare Request",
        "mode": "link",
        "links": [
            "a71b9d33f83ebdf2"
        ],
        "x": 615,
        "y": 740,
        "wires": []
    },
    {
        "id": "9d4776d0c247ab64",
        "type": "link out",
        "z": "b09434461726d60e",
        "name": "Catch Error Prepare Request",
        "mode": "link",
        "links": [
            "f5cf0ad3957156a0"
        ],
        "x": 855,
        "y": 740,
        "wires": []
    },
    {
        "id": "05b4b77b2c410077",
        "type": "link in",
        "z": "b09434461726d60e",
        "name": "All batches completed Out",
        "links": [
            "d1c09f0792279ff1"
        ],
        "x": 365,
        "y": 640,
        "wires": [
            [
                "6b41a66649befd2e"
            ]
        ]
    },
    {
        "id": "d1c09f0792279ff1",
        "type": "link out",
        "z": "b09434461726d60e",
        "name": "All batches completed In",
        "mode": "link",
        "links": [
            "05b4b77b2c410077"
        ],
        "x": 905,
        "y": 280,
        "wires": []
    },
    {
        "id": "73c8c31edd5db49c",
        "type": "link out",
        "z": "b09434461726d60e",
        "name": "All batches created In",
        "mode": "link",
        "links": [
            "da35c20990e4170a"
        ],
        "x": 965,
        "y": 640,
        "wires": []
    },
    {
        "id": "da35c20990e4170a",
        "type": "link in",
        "z": "b09434461726d60e",
        "name": "All batches created Out",
        "links": [
            "73c8c31edd5db49c"
        ],
        "x": 1605,
        "y": 280,
        "wires": [
            [
                "28c386194a0c9be6"
            ]
        ]
    },
    {
        "id": "32a612c196e14e47",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Subflow Status",
        "func": "var SubflowStatus =\n{\n    payload:\n    {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"Processing: File \" + msg.FileNumber + \"/\" + msg.FilesCount + \": Completing\"\n    }\n};\n\nreturn [msg, SubflowStatus];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 700,
        "wires": [
            [
                "759fb8d23322b4b5"
            ],
            [
                "ca6e7474094875a3"
            ]
        ],
        "outputLabels": [
            "",
            "Subflow Status"
        ]
    },
    {
        "id": "ca6e7474094875a3",
        "type": "link out",
        "z": "b09434461726d60e",
        "name": "Subflow Status Prepare Request",
        "mode": "link",
        "links": [
            "a71b9d33f83ebdf2"
        ],
        "x": 1455,
        "y": 740,
        "wires": []
    },
    {
        "id": "759fb8d23322b4b5",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Prepare Response",
        "func": "var fs = global.get(\"fsextra\");\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\n\nmsg.OKFile = false; //Файл прошёл все проверки и был успешно отправлен\nvar EndDirectory = undefined; //Конечная директория перемещения файла\nvar SendError = undefined; //Ошибка отправки данных\nvar FinishError = undefined; //Ошибка завершения обработки данных\n\nif (msg.PrepareIsSuccess)\n{\n    var StatusCode = undefined;\n    var StatusCodeOK = undefined;\n    var ErrorArray = undefined;\n    var ErrorCode = undefined;\n    var ErrorCodeData = undefined;\n    if (msg.MESAPI)\n    {\n        StatusCode = msg.statusCode;\n        StatusCodeOK = (msg.statusCode == 200);\n        ErrorArray = [\"ECONNRESET\", \"ETIMEDOUT\", \"ECONNREFUSED\", \"ENOTFOUND\"];\n        ErrorCode = msg.payload;\n        ErrorCodeData = msg.payload;\n    }\n    else\n    {\n        StatusCode = msg.error?.code;\n        StatusCodeOK = (!msg.error?.code);\n        ErrorArray = [\"ECONNCLOSED\", \"ESOCKET\"];\n        ErrorCode = msg.error?.message;\n        ErrorCodeData = msg.error;\n    }\n\n    if (StatusCodeOK) msg.OKFile = true;\n    else\n    {\n        SendError = \"Send to MES: \" + msg.Step + \": \" + StatusCode + \": \";\n        if ((ErrorArray.includes(StatusCode))) SendError = SendError + ErrorCode;\n        else\n        {\n            SendError = SendError + JSON.stringify(ErrorCodeData);\n            msg.BadFile = true;\n        }\n        msg.ErrorCount = msg.ErrorCount + 1;\n    }\n}\n//Перемещение успешно отправленного файла в архив\nif (msg.OKFile) EndDirectory = msg.ArchiveOKFolder;\nelse\n{\n    //Перемещение ошибочного файла в архив\n    if (msg.BadFile) EndDirectory = msg.ArchiveBadFolder;\n}\n//Перемещение файла в конечную директорию\nif (EndDirectory)\n{\n    try\n    {\n        var moveSyncOptions =\n        {\n            overwrite: true\n        };\n        fs.moveSync(msg.FilesFolder + msg.ActiveFileName, EndDirectory + msg.ActiveFileName, moveSyncOptions);\n    }\n    catch (ex)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" File Error\";\n        ErrorData.error.message = \"Unable to move file '\" + msg.FilesFolder + msg.ActiveFileName + \"' to '\" + EndDirectory + \"' directory (\" + ex + \")\";\n        FinishError = ErrorData.error.message;\n        msg.ErrorCount = msg.ErrorCount + 1;\n        node.send([null, ErrorData]);\n    }\n}\n//Дополнение массива ошибок\nif (SendError || FinishError)\n{\n    var FileErrorData = msg.Errors.FileProcessing.find(el => el.FileName == msg.ActiveFileName);\n    if (FileErrorData)\n    {\n        FileErrorData.BadFile = msg.BadFile;\n        FileErrorData.OKFile = msg.OKFile;\n        FileErrorData.Send = SendError;\n        FileErrorData.Finish = FinishError;\n    }\n    else\n    {\n        FileErrorData =\n        {\n            FileName: msg.ActiveFileName,\n            BadFile: msg.BadFile,\n            OKFile: msg.OKFile,\n            Prepare: undefined,\n            Send: SendError,\n            Finish: FinishError\n        };\n        msg.Errors.FileProcessing.push(FileErrorData);\n    }\n}\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 700,
        "wires": [
            [
                "7ac713c6b8d220a4"
            ],
            [
                "50d2c7dcb8e4c773"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "6b41a66649befd2e",
        "type": "function",
        "z": "b09434461726d60e",
        "name": "Reset FileNumber",
        "func": "msg.FileNumber = null;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 640,
        "wires": [
            [
                "7ac713c6b8d220a4"
            ]
        ]
    },
    {
        "id": "624cd3f93d0e5bdd",
        "type": "debug",
        "z": "b09434461726d60e",
        "name": "debug 85",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 600,
        "wires": []
    },
    {
        "id": "58fd34e6e7f0b593",
        "type": "debug",
        "z": "b09434461726d60e",
        "name": "debug 86",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 820,
        "wires": []
    },
    {
        "id": "9eec4dd15f6b3280",
        "type": "array-loop",
        "z": "b09434461726d60e",
        "name": "msg.TelegramFiles",
        "key": "al72029a818f207845",
        "keyType": "msg",
        "reset": true,
        "resetValue": "value-null",
        "array": "TelegramFiles",
        "arrayType": "msg",
        "x": 710,
        "y": 280,
        "wires": [
            [
                "d1c09f0792279ff1"
            ],
            [
                "93b76b04b156aa32"
            ]
        ]
    },
    {
        "id": "ddefb91d4c993da4",
        "type": "array-loop",
        "z": "b09434461726d60e",
        "name": "msg.FindBatchRequestData",
        "key": "alddefb91d4c993da4",
        "keyType": "msg",
        "reset": true,
        "resetValue": "value-null",
        "array": "FindBatchRequestData",
        "arrayType": "msg",
        "x": 540,
        "y": 500,
        "wires": [
            [
                "1282ddeedba8261f"
            ],
            [
                "714b0e0501c8a012"
            ]
        ]
    },
    {
        "id": "7ac713c6b8d220a4",
        "type": "array-loop",
        "z": "b09434461726d60e",
        "name": "msg.TelegramFiles",
        "key": "al7ac713c6b8d220a4",
        "keyType": "msg",
        "reset": true,
        "resetValue": "value-null",
        "array": "TelegramFiles",
        "arrayType": "msg",
        "x": 770,
        "y": 640,
        "wires": [
            [
                "73c8c31edd5db49c"
            ],
            [
                "94d81f97664e7855"
            ]
        ]
    },
    {
        "id": "260f69895391b9bd",
        "type": "MSSQL",
        "z": "b09434461726d60e",
        "mssqlCN": "7e5114f542cff14f",
        "name": "Find Batch",
        "outField": "FindBatchRequestData",
        "returnType": 0,
        "throwErrors": "0",
        "query": "--Если запись заказов из таблицы tblCtSData\r\nSELECT * FROM [tblCtSDataHistory]\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "FindBatchRequest",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 790,
        "y": 420,
        "wires": [
            [
                "6d38785ec9d62ce4",
                "e7481623fa635252"
            ]
        ]
    },
    {
        "id": "1a8fb0b6ed6bc964",
        "type": "function",
        "z": "5919f716f21fdce1",
        "name": "Check Data and SQLRequest Prepare",
        "func": "//Структура ответа на запрос от SAP\nmsg.Response =\n{\n    Value: {},\n    Messages : [],\n    IsSuccess : false\n};\n//Массив предупреждающих сообщений, будет склеен с массивом Response.Messages в конце обработки\nmsg.Messages = [];\n\nmsg.SAPData =\n{\n    PlantId: null,\n    PlantGuid: null,\n    WarehouseId: null,\n    WarehouseGuid: null,\n    Unit: null,\n    MaterialId: null,\n    MaterialGuid: null,\n    BatchId: null,\n    Batches: [],\n    Amount: null,\n    BatchSupplier: null,\n    SSCC: null,\n    SSCCComment: null,\n    TelegramSettingsError: false,\n    MSSQLError: false,\n    WriteFileError: false\n};\n\nmsg.TelegramNumber = \"14\";\nmsg.Telegram = undefined;\nvar Telegrams = global.get(\"Telegram\");\nvar DataValid = false;\nif (Telegrams\n    && (typeof Telegrams?.DataValidGenerateByName == \"function\")\n    && (typeof Telegrams?.DataValidGenerateByObject == \"function\")\n    && (typeof Telegrams?.DataValidCheck == \"function\")\n)\n{\n    msg.Telegram = Telegrams[msg.TelegramNumber];\n    if (msg.Telegram)\n    {\n        DataValid = Telegrams.DataValidCheck(msg.TelegramNumber);\n        if (!DataValid) msg.Response.Messages.push(\"Телеграмма \" + msg.TelegramNumber + \" имеет ошибочные настройки\");\n    }\n    else msg.Response.Messages.push(\"Телеграмма \" + msg.TelegramNumber + \" не настроена\");\n}\nelse msg.Response.Messages.push(\"Глобальный справочник телеграмм не настроен\");\nmsg.SAPData.TelegramSettingsError = (!DataValid);\n\nif (\"plantid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.plantid && (msg.SAPRequest.Data.plantid != \"\")) msg.SAPData.PlantId = msg.SAPRequest.Data.plantid;\n    else msg.Response.Messages.push(\"Поле plantid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле plantid отсутствует\");\n\nif (\"warehouseid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.warehouseid && (msg.SAPRequest.Data.warehouseid != \"\")) msg.SAPData.WarehouseId = msg.SAPRequest.Data.warehouseid;\n    else msg.Response.Messages.push(\"Поле warehouseid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле warehouseid отсутствует\");\n\nif (\"pallets\" in msg.SAPRequest?.Data)\n{\n    if (Array.isArray(msg.SAPRequest.Data.pallets))\n    {\n        if (msg.SAPRequest.Data.pallets.length == 1)\n        {\n            var PalletData = msg.SAPRequest.Data.pallets[0];\n\n            if (\"materialid\" in PalletData)\n            {\n                if (PalletData.materialid && (PalletData.materialid != \"\")) msg.SAPData.MaterialId = PalletData.materialid;\n                else msg.Response.Messages.push(\"Поле materialid должно иметь значение\");\n            }\n            else msg.Response.Messages.push(\"Поле materialid отсутствует\");\n\n            if (\"batchid\" in PalletData)\n            {\n                if (PalletData.batchid && (PalletData.batchid != \"\")) msg.SAPData.BatchId = PalletData.batchid;\n                else msg.Response.Messages.push(\"Поле batchid должно иметь значение\");\n            }\n            else msg.Response.Messages.push(\"Поле batchid отсутствует\");\n\n            if (\"amount\" in PalletData)\n            {\n                if ((PalletData.amount > 0) && (!isNaN(parseFloat(PalletData.amount))))\n                {\n                    msg.SAPData.Amount = parseFloat(PalletData.amount);\n                }\n                else msg.Response.Messages.push(\"Поле amount должно иметь положительное числовое значение\");\n            }\n            else msg.Response.Messages.push(\"Поле amount отсутствует\");\n\n            if (\"unit\" in PalletData)\n            {\n                if (PalletData.unit && (PalletData.unit != \"\")) msg.SAPData.Unit = PalletData.unit;\n                else msg.Response.Messages.push(\"Поле unit должно иметь значение\");\n            }\n            else msg.Response.Messages.push(\"Поле batchid отсутствует\");\n\n            if (\"batchsupplier\" in PalletData)\n            {\n                if (PalletData.batchsupplier && (PalletData.batchsupplier != \"\")) msg.SAPData.BatchSupplier = PalletData.batchsupplier;\n            }\n            else msg.Response.Messages.push(\"Поле batchsupplier отсутствует\");\n\n            if (\"sscc\" in PalletData)\n            {\n                if (PalletData.sscc && (PalletData.sscc != \"\")) msg.SAPData.SSCC = PalletData.sscc;\n                else msg.Response.Messages.push(\"Поле sscc должно иметь значение\");\n            }\n            else msg.Response.Messages.push(\"Поле sscc отсутствует\");\n\n            if (\"ssccComment\" in PalletData)\n            {\n                if (PalletData.ssccComment && (PalletData.ssccComment != \"\")) msg.SAPData.SSCCComment = PalletData.ssccComment;\n            }\n            else msg.Response.Messages.push(\"Поле sscccomment отсутствует\");\n        }\n        else msg.Response.Messages.push(\"Поле pallets должно иметь только один элемент\");\n    }\n    else msg.Response.Messages.push(\"pallets должен быть типа Array\");\n}\nelse msg.Response.Messages.push(\"Поле pallets отсутствует\");\n\nvar EquipmentTreeTable = global.get(\"DBTable\")?.EquipmentTree;\nif ((!EquipmentTreeTable) || (!EquipmentTreeTable?.DBTable)) msg.Response.Messages.push(\"Таблица дерева оборудования не сконфигурирована\");\n\nvar MaterialTable = global.get(\"DBTable\")?.Material;\nif ((!MaterialTable) || (!MaterialTable?.DBTable)) msg.Response.Messages.push(\"Таблица материалов не сконфигурирована\");\n\nvar StorageLocationTable = global.get(\"DBTable\")?.StorageLocation;\nif ((!StorageLocationTable) || (!StorageLocationTable?.DBTable)) msg.Response.Messages.push(\"Таблица хранилищ не сконфигурирована\");\n\nvar ExternalVertexTable = global.get(\"DBTable\")?.ExternalVertex;\nif ((!ExternalVertexTable) || (!ExternalVertexTable?.DBTable)) msg.Response.Messages.push(\"Таблица внешних вершин не сконфигурирована\");\n\nvar BatchTable = global.get(\"DBTable\")?.Batch;\nif ((!BatchTable) || (!BatchTable?.DBTable)) msg.Response.Messages.push(\"Таблица партий не сконфигурирована\");\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nvar SQLRequest = \"\";\n\nvar BatchNumbers = JSON.stringify(msg.SAPRequest.Data.pallets.map(i => i.sscc)).replace(\"[\", \"\").replace(\"]\", \"\").replaceAll(\"\\\"\", \"'\");\n\nif (msg.Response.IsSuccess)\n{\n    //Поиск Guid для PlantId\n    SQLRequest = SQLRequest +\n        \"SELECT\\n\\t\" +\n            \"'0' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'EquipmentTreeId',\\n\\t\" +\n            \"NULL AS 'PlantId',\\n\\t\" +\n            \"NULL AS 'ShiftName',\\n\\t\" +\n            \"NULL AS 'PlantGuid',\\n\\t\" +\n            \"NULL AS 'LineGuid',\\n\\t\" +\n            \"NULL AS 'StorageLocationGuid',\\n\\t\" +\n            \"NULL AS 'OperationGuid',\\n\\t\" +\n            \"NULL AS 'MaterialGuid'\\n\" +\n        \"FROM \" + EquipmentTreeTable.DBTable + \"\\n\" +\n        \"WHERE ([szNumberSAP] = N'\" + msg.SAPData.PlantId + \"')\\n\" +\n    //Поиск Guid для materialId\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'2' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szName] AS 'Id',\\n\\t\" +\n            \"NULL AS 'EquipmentTreeId',\\n\\t\" +\n            \"NULL AS 'PlantId',\\n\\t\" +\n            \"NULL AS 'ShiftName',\\n\\t\" +\n            \"NULL AS 'PlantGuid',\\n\\t\" +\n            \"NULL AS 'LineGuid',\\n\\t\" +\n            \"NULL AS 'StorageLocationGuid',\\n\\t\" +\n            \"NULL AS 'OperationGuid',\\n\\t\" +\n            \"NULL AS 'MaterialGuid'\\n\" +\n        \"FROM \" + MaterialTable.DBTable + \"\\n\" +\n        \"WHERE ([szName] = N'\" + msg.SAPData.MaterialId + \"')\\n\" +\n    //Поиск Guid для warehouseid\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'3' AS 'Type',\\n\\t\" +\n            \"Storage.[gId] AS 'Guid',\\n\\t\" +\n            \"Storage.[szExternalSystemSapLink] AS 'Id',\\n\\t\" +\n            \"Vertex.[gEquipmentTreeId] AS 'EquipmentTreeId',\\n\\t\" +\n            \"Plant.[szName] AS 'PlantId',\\n\\t\" +\n            \"NULL AS 'ShiftName',\\n\\t\" +\n            \"NULL AS 'PlantGuid',\\n\\t\" +\n            \"NULL AS 'LineGuid',\\n\\t\" +\n            \"NULL AS 'StorageLocationGuid',\\n\\t\" +\n            \"NULL AS 'OperationGuid',\\n\\t\" +\n            \"NULL AS 'MaterialGuid'\\n\" +\n        \"FROM \" + StorageLocationTable.DBTable + \" AS Storage\\n\\t\" +\n            \"INNER JOIN \" + ExternalVertexTable.DBTable + \" AS Vertex ON ((Vertex.[gExternalObjectId] = Storage.[gId]) AND (Vertex.[gExternalObjectId] IS NOT NULL))\\n\\t\" +\n            \"INNER JOIN \" + EquipmentTreeTable.DBTable + \" AS Plant ON (Plant.[gId] = Vertex.[gAccessId])\\n\" +\n        \"WHERE ((Storage.[szExternalSystemSapLink] = '\" + msg.SAPData.WarehouseId + \"') AND (Plant.[szNumberSAP] = N'\" + msg.SAPData.PlantId + \"'))\\n\" +\n    //Поиск Guid для Batch\n        \"UNION\\n\" +\n        \"SELECT\\n\\t\" +\n            \"'4' AS 'Type',\\n\\t\" +\n            \"[gId] AS 'Guid',\\n\\t\" +\n            \"[szBatchNumber] AS 'Id',\\n\\t\" +\n            \"NULL AS 'EquipmentTreeId',\\n\\t\" +\n            \"NULL AS 'PlantId',\\n\\t\" +\n            \"NULL AS 'ShiftName',\\n\\t\" +\n            \"[gAccessId] AS 'PlantGuid',\\n\\t\" +\n            \"NULL AS 'LineGuid',\\n\\t\" +\n            \"[StorageLocationId] AS 'StorageLocationGuid',\\n\\t\" +\n            \"NULL AS 'OperationGuid',\\n\\t\" +\n            \"[gMaterialId] AS 'MaterialGuid'\\n\" +\n        \"FROM \" + BatchTable.DBTable + \"\\n\" +\n        \"WHERE ([szBatchNumber] IN (\" + BatchNumbers + \"))\\n\";\n}\nmsg.SQLCheckRequest = SQLRequest;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 40,
        "wires": [
            [
                "f741fbbd2b803d86"
            ]
        ]
    },
    {
        "id": "f741fbbd2b803d86",
        "type": "switch",
        "z": "5919f716f21fdce1",
        "name": "IsSuccess == true",
        "property": "Response.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 40,
        "wires": [
            [
                "75456ab7dee7ef70"
            ],
            [
                "bd44472e9034d1cf"
            ]
        ]
    },
    {
        "id": "cc6baaf81d805708",
        "type": "function",
        "z": "5919f716f21fdce1",
        "name": "Create Response",
        "func": "if (msg.SubflowError?.message)\n{\n    var Response =\n    {\n        Value: {},\n        Messages: [],\n        IsSuccess: false\n    };\n    var ErrorMessage = msg.SubflowError?.message;\n    if (msg.SubflowError?.source?.name) ErrorMessage = msg.SubflowError.source.name + \": \" + ErrorMessage;\n    if (msg.SubflowError?.source?.type) ErrorMessage = msg.SubflowError.source.type + \": \" + ErrorMessage;\n    Response.Messages.push(\"Subflow: \" + ErrorMessage);\n    msg.Response = Response;\n    msg.statusCode = 500;\n}\nelse\n{\n    if (msg.SAPData.MSSQLError || msg.SAPData.WriteFileError || msg.SAPData.TelegramSettingsError) msg.statusCode = 500;\n    else\n    {\n        if (msg.Response.IsSuccess) msg.statusCode = 200;\n        else msg.statusCode = 400;\n    }\n    if (msg.Messages) msg.Response.Messages = msg.Response.Messages.concat(msg.Messages);\n}\n\nmsg.payload = msg.Response;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 220,
        "wires": [
            [
                "0652f6e56caeebbd"
            ]
        ]
    },
    {
        "id": "282762e1c4d3174e",
        "type": "function",
        "z": "5919f716f21fdce1",
        "name": "Check Data",
        "func": "msg.SQLCheckRequestError = msg.error;\n\nif (msg.SQLCheckRequestError?.details)\n{\n    msg.Response.Messages.push(\"Check Data: \" + msg.SQLCheckRequestError.details);\n    msg.SAPData.MSSQLError = true;\n}\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nif (msg.Response.IsSuccess)\n{\n    var PlantId = msg.SQLCheckRequestData.filter(el => el.Type == 0);\n    if (PlantId.length > 0)\n    {\n        if (PlantId.length > 1) msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" имеет дубликаты\");\n        else msg.SAPData.PlantGuid = PlantId[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" не найден\");\n\n    var WarehouseId = msg.SQLCheckRequestData.filter(el => el.Type == 3);\n    if (WarehouseId.length > 0)\n    {\n        if (WarehouseId.length > 1) msg.Response.Messages.push(\"Для предприятия с ID = \" + msg.SAPData.PlantId + \" склад с ID = \" + msg.SAPData.WarehouseId + \" имеет дубликаты\");\n        else msg.SAPData.WarehouseGuid = WarehouseId[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Для предприятия с ID = \" + msg.SAPData.PlantId + \" не найден склад с ID = \" + msg.SAPData.WarehouseId);\n\n    var BatchIdsString = \"\";\n    var Batches = msg.SQLCheckRequestData.filter(el => el.Type == 4);\n    if (Batches.length > 0)\n    {\n        for (let i = 0; i < Batches.length; i++)\n        {\n            var BatchSAP = msg.SAPRequest.Data.pallets.find(el => el.sscc == Batches[i].Id);\n            var Batch =\n            {\n                Guid: Batches[i].Guid,\n                BatchNumber: Batches[i].Id,\n                PlantGuid: Batches[i].PlantGuid,\n                StorageLocation: msg.SAPRequest.Data.warehouseid,\n                StorageLocationGuid: Batches[i].StorageLocationGuid,\n                MaterialGuid: Batches[i].MaterialGuid,\n                Comment: BatchSAP.ssccComment,\n                Amount: BatchSAP.amount,\n                BatchSupplier: BatchSAP.batchsupplier,\n                MaterialId: BatchSAP.materialid\n            };\n            msg.SAPData.Batches.push(Batch);\n\n            if (BatchIdsString != \"\") BatchIdsString = BatchIdsString + \", \";\n            BatchIdsString = BatchIdsString + \"N'\" + Batches[i].Guid + \"'\";\n\n            if (!Batches[i].PlantGuid) msg.Response.Messages.push(\"Для партии \" + Batches[i].Id + \" не найдено предприятие\");\n            else\n            {\n                if (Batches[i].PlantGuid?.toLowerCase() != msg.SAPData.PlantGuid?.toLowerCase()) msg.Response.Messages.push(\"Для партии \" + Batches[i].Id + \" предприятие не \" + msg.SAPData.PlantId + \", что недопустимо\");\n            }\n\n            if (!Batches[i].StorageLocationGuid) msg.Response.Messages.push(\"Для партии \" + Batches[i].Id + \" не найдено хранилище\");\n            else\n            {\n                if (Batches[i].StorageLocationGuid?.toLowerCase() != msg.SAPData.WarehouseGuid?.toLowerCase()) msg.Messages.push(\"Для партии \" + Batches[i].Id + \" хранилище не \" + msg.SAPData.WarehouseId + \", что допустимо, но будет использоваться заданное в MES\");\n            }\n            \n        }\n    }\n    else msg.Response.Messages.push(\"Партии не найдены\");\n}\n\nvar StorageLocationTable = global.get(\"DBTable\")?.StorageLocation;\nif ((!StorageLocationTable) || (!StorageLocationTable?.DBTable)) msg.Response.Messages.push(\"Таблица хранилищ не сконфигурирована\");\n\nvar BatchTable = global.get(\"DBTable\")?.Batch;\nif ((!BatchTable) || (!BatchTable?.DBTable)) msg.Response.Messages.push(\"Таблица партий не сконфигурирована\");\n\nvar MaterialTable = global.get(\"DBTable\")?.Material;\nif ((!MaterialTable) || (!MaterialTable?.DBTable)) msg.Response.Messages.push(\"Таблица материалов не сконфигурирована\");\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nif (msg.Response.IsSuccess) {\n    var SQLRequest = \"SELECT\\n\\t\" +\n            \"Batch.[gId] AS BatchId,\\n\\t\" +\n            \"Batch.[nQuantity] AS BatchQuantity,\\n\\t\" +\n            \"Batch.[szNumberSAP] AS BatchNumberSAP,\\n\\t\" +\n            \"Batch.[szBatchNumber] AS BatchBatchNumber,\\n\\t\" +\n            \"Batch.[szComment] AS Comment,\\n\\t\" +\n            \"Batch.[szSupplierNumber] AS SupplierNumber,\\n\\t\" +\n            \"Material.[szName] AS MaterialName,\\n\\t\" +\n            \"StorageLocation.[szExternalSystemSapLink] AS StorageLocationNumberSAP\\n\\t\" +\n        \"FROM \" + BatchTable.DBTable + \" AS Batch\\n\\t\" +\n            \"LEFT OUTER JOIN \" + StorageLocationTable.DBTable + \" AS StorageLocation ON (StorageLocation.[gId] = Batch.[StorageLocationId])\\n\\t\" +\n            \"LEFT OUTER JOIN \" + MaterialTable.DBTable + \" AS Material ON (Material.[gId] = Batch.[gMaterialId])\\n\" +\n        \"WHERE (Batch.[gId] IN (\" + BatchIdsString + \"))\\n\";\n\n    msg.SQLCheckBatchRequest = SQLRequest;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 100,
        "wires": [
            [
                "3070d79a8ed7b12d"
            ]
        ]
    },
    {
        "id": "3070d79a8ed7b12d",
        "type": "switch",
        "z": "5919f716f21fdce1",
        "name": "IsSuccess == true",
        "property": "Response.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 100,
        "wires": [
            [
                "eb2b026335eeac1c"
            ],
            [
                "007115c20a9b84d5"
            ]
        ]
    },
    {
        "id": "77a0a2efdc17c956",
        "type": "function",
        "z": "5919f716f21fdce1",
        "name": "Save Batches Data",
        "func": "var fs = global.get(\"fsextra\");\nvar FilesFolder = msg.Telegram?.Folder?.FilesFolder?.Path; //Каталог хранения кучи файлов поставок\nvar FilePrefix = msg.Telegram?.FilePrefix; //Префикс файлов запроса и ответа (без нижнего подчёркивания)\nvar FileType = msg.Telegram?.Folder?.FilesFolder?.FileType; //Тип файла\nvar StartDateTime = new Date(); //Дата и время начала создания файлов\nvar StartDateTimeString = StartDateTime.getFullYear()\n    + ('0' + (StartDateTime.getMonth() + 1)).slice(-2)\n    + ('0' + StartDateTime.getDate()).slice(-2);\nvar StartDateTimeString_log = StartDateTime.getFullYear()\n    + ('0' + (StartDateTime.getMonth() + 1)).slice(-2)\n    + ('0' + StartDateTime.getDate()).slice(-2) + \"_\"\n    + ('0' + StartDateTime.getHours()).slice(-2)\n    + ('0' + StartDateTime.getMinutes()).slice(-2)\n    + ('0' + StartDateTime.getSeconds()).slice(-2);\nmsg.StartDateTime = StartDateTime;\nmsg.StartDateTimeString = StartDateTimeString;\n\n//Проверка каталога хранения кучи файлов поставок\nif (FilesFolder && (FilesFolder != \"\") && FileType && (FileType != \"\"))\n{\n    if (fs.pathExistsSync(FilesFolder))\n    {\n        var IsSuccess = true;\n        for (let i = 0; (i < msg.SAPData.Batches.length) && IsSuccess; i++)\n        {\n            var Batch = msg.SAPData.Batches[i];\n            var BatchData =\n            {\n                BatchId: Batch.Guid,\n                StorageLocationId: Batch.StorageLocationGuid\n            };\n\n            var SaveData =\n            {\n                Date: StartDateTimeString_log,\n                API: \"ReverseBatch\",\n                Table: \"\",\n                Data: BatchData\n            };\n            var FileName = FilePrefix + \"_\" + StartDateTimeString + \"_\" + msg.SAPData.PlantId + \"_\" + Batch.BatchNumber + \".\" + FileType;\n            var FileNameFull = FilesFolder + FileName;\n            var FileData = JSON.stringify(SaveData, null, \"\\t\");\n            IsSuccess = false;\n            //Запись данных в файл\n            try\n            {\n                fs.appendFile(FileNameFull, FileData);\n            }\n            catch (ex)\n            {\n                msg.Response.Messages.push(\"Ошибка записи данных в файл \" + FileName + \" (\" + ex + \")\");\n            }\n            //Проверка существования конечного файла\n            if (fs.existsSync(FileNameFull)) IsSuccess = true;\n            else msg.Response.Messages.push(\"Конечный файл \" + FileName + \" не существует\");\n            msg.SAPData.WriteFileError = (!IsSuccess);\n        }\n    }\n    else msg.Response.Messages.push(\"Каталог приёма поставок на существует\");\n}\nelse msg.Response.Messages.push(\"Каталог телаграммы \" + msg.TelegramNumber + \" не задан\");\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 220,
        "wires": [
            [
                "cc6baaf81d805708"
            ]
        ]
    },
    {
        "id": "62170f5e8986dad3",
        "type": "catch",
        "z": "5919f716f21fdce1",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 220,
        "y": 280,
        "wires": [
            [
                "68a6a7addf1a9632"
            ]
        ]
    },
    {
        "id": "68a6a7addf1a9632",
        "type": "function",
        "z": "5919f716f21fdce1",
        "name": "Save Error Data",
        "func": "msg.SubflowError = msg.error;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 280,
        "wires": [
            [
                "37b5a4a256d0151d"
            ]
        ]
    },
    {
        "id": "0652f6e56caeebbd",
        "type": "function",
        "z": "5919f716f21fdce1",
        "name": "Subflow Status",
        "func": "var FillColour = \"yellow\";\nvar Text = \"Processing\";\n\nif (msg.Response)\n{\n    if (msg.Response.IsSuccess) FillColour = \"green\";\n    else FillColour = \"red\";\n    Text = \"Processing Completed. Error Count: \" + msg.Response.Messages.length;\n}\n\nmsg.payload = { fill: FillColour, shape: \"dot\", text: Text };\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "5c68b2c93b598102",
        "type": "function",
        "z": "5919f716f21fdce1",
        "name": "Check Batch Data",
        "func": "msg.SQLCheckBatchRequestError = msg.error;\n\nif (msg.SQLCheckBatchRequestError?.details)\n{\n    msg.Response.Messages.push(\"Check Batch Data: \" + msg.SQLCheckBatchRequestError.details);\n    msg.SAPData.MSSQLError = true;\n}\nif (msg.SQLCheckBatchRequestData.length == 0)\n    msg.Response.Messages.push(\"Партии не найдены\");\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nif (msg.Response.IsSuccess)\n{\n    for (let i = 0; i < msg.SAPData.Batches.length; i++)\n    {\n        var BatchSAP = msg.SAPData.Batches[i];\n        var BatchMES = msg.SQLCheckBatchRequestData.find(el => el.BatchId?.toLowerCase() == BatchSAP.Guid?.toLowerCase());\n        if (!BatchMES)\n            msg.Response.Messages.push(\"Партия \" + BatchSAP.BatchNumber + \" не найдена\");\n\n        if (msg.Response.Messages.length == 0) \n        {\n            if (BatchSAP.Comment != BatchMES.Comment)\n                msg.Response.Messages.push(\"Для партии \" + BatchSAP.BatchNumber + \" не соответствует поле sscc\");\n\n            if (BatchSAP.StorageLocation != BatchMES.StorageLocationNumberSAP)\n                msg.Response.Messages.push(\"Для партии \" + BatchSAP.BatchNumber + \" не соответствует поле warehouseId\");\n\n            if (BatchSAP.MaterialId != BatchMES.MaterialName)\n                msg.Response.Messages.push(\"Для партии \" + BatchSAP.BatchNumber + \" не соответствует поле materialId\");\n\n            if (BatchSAP.BatchSupplier != BatchMES.SupplierNumber)\n                msg.Response.Messages.push(\"Для партии \" + BatchSAP.BatchNumber + \" не соответствует поле batchsupplier\");\n\n            if (BatchSAP.Amount != BatchMES.BatchQuantity)\n                msg.Response.Messages.push(\"Для партии \" + BatchSAP.BatchNumber + \" не соответствует поле amount\");\n        }\n    }\n\n    msg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 160,
        "wires": [
            [
                "e1dddffac13a3eaa"
            ]
        ]
    },
    {
        "id": "e1dddffac13a3eaa",
        "type": "switch",
        "z": "5919f716f21fdce1",
        "name": "IsSuccess == true",
        "property": "Response.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 160,
        "wires": [
            [
                "77a0a2efdc17c956"
            ],
            [
                "cc6baaf81d805708"
            ]
        ]
    },
    {
        "id": "75456ab7dee7ef70",
        "type": "MSSQL",
        "z": "5919f716f21fdce1",
        "mssqlCN": "7e5114f542cff14f",
        "name": "Check Data",
        "outField": "SQLCheckRequestData",
        "returnType": 0,
        "throwErrors": "0",
        "query": "--Если запись заказов из таблицы tblCtSData\r\nSELECT * FROM [tblCtSDataHistory]\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "SQLCheckRequest",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 190,
        "y": 100,
        "wires": [
            [
                "282762e1c4d3174e"
            ]
        ]
    },
    {
        "id": "eb2b026335eeac1c",
        "type": "MSSQL",
        "z": "5919f716f21fdce1",
        "mssqlCN": "7e5114f542cff14f",
        "name": "Check Batch Data",
        "outField": "SQLCheckBatchRequestData",
        "returnType": 0,
        "throwErrors": "0",
        "query": "--Если запись заказов из таблицы tblCtSData\r\nSELECT * FROM [tblCtSDataHistory]\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "SQLCheckBatchRequest",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 210,
        "y": 160,
        "wires": [
            [
                "5c68b2c93b598102"
            ]
        ]
    },
    {
        "id": "d11c88127a0973f1",
        "type": "function",
        "z": "eab6334d31d45c68",
        "name": "CheckInputFiles",
        "func": "let newList = [];\nmsg.allFileNames = [];\nmsg.allFileNames = msg.list;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 280,
        "wires": [
            [
                "3b95dad070b58665"
            ]
        ]
    },
    {
        "id": "ceb27629efaa5df2",
        "type": "function",
        "z": "eab6334d31d45c68",
        "name": "GetNewFiles",
        "func": "let last365days = new Date(new Date().getTime() - (2 * 24 * 60 * 60 * 1000));\n\nif (msg.stats >= last365days)\n{\n    let res = msg.currentFileFullPath + '\\\\' + msg.payload;\n    msg.list.push(res);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 200,
        "wires": [
            [
                "0f8cbe3758fbf35a"
            ]
        ]
    },
    {
        "id": "e1840a845acf7d5d",
        "type": "catch",
        "z": "eab6334d31d45c68",
        "name": "NetCatcher",
        "scope": [
            "31179182c848ca02",
            "4ef64400c92a9d72",
            "8593411efb62a8fa",
            "56cf63abf7a73612"
        ],
        "uncaught": false,
        "x": 150,
        "y": 380,
        "wires": [
            [
                "d26a0186cd6113f4"
            ]
        ]
    },
    {
        "id": "69119cc262c7e900",
        "type": "catch",
        "z": "eab6334d31d45c68",
        "name": "FsListCatcher",
        "scope": [
            "9a3da7e91eb0a4fd"
        ],
        "uncaught": false,
        "x": 150,
        "y": 420,
        "wires": [
            [
                "ee0f605a8291bed9"
            ]
        ]
    },
    {
        "id": "4c72f9218fcd0436",
        "type": "debug",
        "z": "eab6334d31d45c68",
        "name": "netPathDebug",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 380,
        "wires": []
    },
    {
        "id": "d26a0186cd6113f4",
        "type": "function",
        "z": "eab6334d31d45c68",
        "name": "function 9",
        "func": "node.warn(\"!!!NetConnection FAILED---->\");\nnode.warn(msg.error);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 380,
        "wires": [
            [
                "4c72f9218fcd0436"
            ]
        ]
    },
    {
        "id": "ee0f605a8291bed9",
        "type": "function",
        "z": "eab6334d31d45c68",
        "name": "function 10",
        "func": "node.warn(\"!!!FsListCatcher\");\nnode.warn(msg.error);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "c7a442529ba2ac01",
        "type": "function",
        "z": "eab6334d31d45c68",
        "name": "listInit",
        "func": "msg.list = [];\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 120,
        "wires": [
            [
                "572d56a0b7190b32"
            ]
        ]
    },
    {
        "id": "4a229fbc4dc78005",
        "type": "exec",
        "z": "eab6334d31d45c68",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Map Net Drive",
        "x": 870,
        "y": 120,
        "wires": [
            [
                "c7a442529ba2ac01"
            ],
            [],
            []
        ]
    },
    {
        "id": "f3d7f0296256f4b8",
        "type": "function",
        "z": "eab6334d31d45c68",
        "name": "prep command",
        "func": "msg.payload = \"net use \" + msg.netDrive + \" \" + msg.netPathTempl + \" /user:\"+msg.netPathLogin+\" \"+msg.netPathPassword +\"\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 120,
        "wires": [
            [
                "4a229fbc4dc78005"
            ]
        ]
    },
    {
        "id": "69af1230df48dcad",
        "type": "function",
        "z": "eab6334d31d45c68",
        "name": "prep command",
        "func": "msg.payload = \"net use \" + msg.netDrive + \" /DELETE\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 120,
        "wires": [
            [
                "954e42bc0cf84ab2"
            ]
        ]
    },
    {
        "id": "954e42bc0cf84ab2",
        "type": "exec",
        "z": "eab6334d31d45c68",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Net Map Delete",
        "x": 450,
        "y": 120,
        "wires": [
            [
                "f3d7f0296256f4b8"
            ],
            [],
            []
        ]
    },
    {
        "id": "15f056c6b917026f",
        "type": "file",
        "z": "eab6334d31d45c68",
        "name": "Write data.json",
        "filename": "dataPath",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1360,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "3b95dad070b58665",
        "type": "file in",
        "z": "eab6334d31d45c68",
        "name": "Read data",
        "filename": "dataPath",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 830,
        "y": 280,
        "wires": [
            [
                "8c4f0b26af709b90"
            ]
        ]
    },
    {
        "id": "8c4f0b26af709b90",
        "type": "function",
        "z": "eab6334d31d45c68",
        "name": "FilterNewFiles",
        "func": "let rawdata = JSON.parse(msg.payload);\n\nlet filterdFileNames = [];\nfor (let i = 0; i < msg.allFileNames.length; i++) {\n    const element = msg.allFileNames[i];\n    if (!rawdata.find(f=>f.Name==element)){\n        filterdFileNames.push(element);\n    }    \n}\n\nmsg.allFileNames = filterdFileNames;\nmsg.list = filterdFileNames;\n\nlet objects = [];\nfor (let i = 0; i < rawdata.length; i++) {\n    objects.push(rawdata[i]);\n}\n\nfor (let i = 0; i < msg.allFileNames.length; i++) {\n    const element = msg.allFileNames[i];\n    var obj = {\n            Name: element,\n            Date: new Date(),\n            LastPosition: 0,\n            LastState: 'Initial',\n            ErrorObject: null\n    }\n    \n    objects.push(obj)\n}\n\nmsg.payload = objects;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 280,
        "wires": [
            [
                "15f056c6b917026f"
            ]
        ]
    },
    {
        "id": "65c3946b5517746b",
        "type": "function",
        "z": "eab6334d31d45c68",
        "name": "SetCurrentFileFullPath",
        "func": "msg.currentFileFullPath = msg.netDrive;\nnode.warn(msg.currentFileFullPath);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 200,
        "wires": [
            [
                "0f8cbe3758fbf35a"
            ]
        ]
    },
    {
        "id": "4d27c036d150a846",
        "type": "comment",
        "z": "eab6334d31d45c68",
        "name": "Получение и фильтрация списка файлов из сетевого диска",
        "info": "",
        "x": 280,
        "y": 60,
        "wires": []
    },
    {
        "id": "572d56a0b7190b32",
        "type": "fs-list",
        "z": "eab6334d31d45c68",
        "name": "",
        "path": "netPath",
        "pathType": "msg",
        "pattern": "*",
        "patternType": "str",
        "filter": "files",
        "recursive": false,
        "follow": true,
        "property": "folderFileList",
        "propertyType": "msg",
        "x": 580,
        "y": 200,
        "wires": [
            [
                "65c3946b5517746b"
            ]
        ]
    },
    {
        "id": "448e09018d7b01e3",
        "type": "fs-stats",
        "z": "eab6334d31d45c68",
        "name": "",
        "path": "currentFileFullPath",
        "pathType": "msg",
        "filename": "payload",
        "filenameType": "msg",
        "attr": "mtime",
        "follow": true,
        "property": "stats",
        "propertyType": "msg",
        "x": 1380,
        "y": 200,
        "wires": [
            [
                "ceb27629efaa5df2"
            ]
        ]
    },
    {
        "id": "0f8cbe3758fbf35a",
        "type": "loop",
        "z": "eab6334d31d45c68",
        "name": "FilesInFolderLoop",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "folderFileList",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-last",
        "x": 1130,
        "y": 200,
        "wires": [
            [
                "d11c88127a0973f1"
            ],
            [
                "448e09018d7b01e3"
            ]
        ]
    },
    {
        "id": "189af50584c4d6d9",
        "type": "function",
        "z": "20dffe6ac0526b37",
        "name": "Main",
        "func": "var item = {\n    SampleId: \"\",\n    LotId: undefined,\n    LaboratoryEquipmentId: msg.EquipmentId,\n    SampledAt: undefined,\n    SampleValues: []\n};\n\nitem.SampleId = msg.payload[0].col2;\nitem.LotId = msg.payload[0].col2;\nitem.LaboratoryEquipmentId = msg.EquipmentId;\nitem.SampledAt = new Date(msg.payload[1].col2.slice(1, 10).split(\".\").reverse().join(\".\") + msg.payload[1].col2.slice(10));\n\nvar map = new Map(msg.Dictionary.map(item => [item.Origin, item.Translate]));\nvar index = 1;\nfor (var i = 5; i < msg.payload.length; i++) {\n    var sampleIndex = msg.payload[i].col1.match(/\\d/g);\n    if (sampleIndex == null || sampleIndex.join(\"\") != index)\n        break;\n\n    item.SampleValues.push({\n        ParameterCode: map.get(msg.payload[i].col2),\n        Value: msg.payload[i].col3.replace(\",\",\".\")\n    });\n    index++;\n}\n\nmsg.object = item;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "4a719cdef805d404",
        "type": "function",
        "z": "20dffe6ac0526b37",
        "name": "DefineFullPathes",
        "func": "msg.currentFileName = msg.loop.value;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 120,
        "wires": [
            [
                "4679e49b4551bd36"
            ]
        ]
    },
    {
        "id": "4679e49b4551bd36",
        "type": "file in",
        "z": "20dffe6ac0526b37",
        "name": "ReadInputFile",
        "filename": "currentFileName",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf-16le",
        "allProps": true,
        "x": 500,
        "y": 120,
        "wires": [
            [
                "26d2ef2dd03f41d4"
            ]
        ]
    },
    {
        "id": "26d2ef2dd03f41d4",
        "type": "csv",
        "z": "20dffe6ac0526b37",
        "name": "data",
        "sep": "\\t",
        "hdrin": "",
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 710,
        "y": 120,
        "wires": [
            [
                "8000e48f52e3046e"
            ]
        ]
    },
    {
        "id": "cc65568896cee17e",
        "type": "file in",
        "z": "20dffe6ac0526b37",
        "name": "",
        "filename": "F:\\MESSync\\Dictionary.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 480,
        "y": 180,
        "wires": [
            [
                "6913577a69689005"
            ]
        ]
    },
    {
        "id": "6913577a69689005",
        "type": "csv",
        "z": "20dffe6ac0526b37",
        "name": "dictionary",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\r\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": true,
        "x": 720,
        "y": 180,
        "wires": [
            [
                "3e454e9f5deeffb2"
            ]
        ]
    },
    {
        "id": "8000e48f52e3046e",
        "type": "function",
        "z": "20dffe6ac0526b37",
        "name": "Save payload",
        "func": "msg.PayloadCopy = msg.payload;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 180,
        "wires": [
            [
                "cc65568896cee17e"
            ]
        ]
    },
    {
        "id": "3e454e9f5deeffb2",
        "type": "function",
        "z": "20dffe6ac0526b37",
        "name": "Save Dictionary and Restore payload",
        "func": "msg.Dictionary = msg.payload;\nmsg.payload = msg.PayloadCopy;\ndelete msg.PayloadCopy;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 180,
        "wires": [
            [
                "189af50584c4d6d9"
            ]
        ]
    },
    {
        "id": "1df99dc31f90b975",
        "type": "comment",
        "z": "20dffe6ac0526b37",
        "name": "Разбираем файл и формирует json для бэка",
        "info": "",
        "x": 330,
        "y": 60,
        "wires": []
    },
    {
        "id": "7ded391e197bc19b",
        "type": "catch",
        "z": "e593d58e62761e62",
        "name": "",
        "scope": [
            "7f2f5c0417dd0ccb"
        ],
        "uncaught": false,
        "x": 120,
        "y": 440,
        "wires": [
            [
                "5e7f9bd51838ab37"
            ]
        ]
    },
    {
        "id": "5e7f9bd51838ab37",
        "type": "function",
        "z": "e593d58e62761e62",
        "name": "netPathExceptionLog",
        "func": "node.warn('Net path not available');\nnode.warn(msg.error);\nnode.warn(msg.netPath);\nnode.warn(msg);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "678915b8453fc9ed",
        "type": "catch",
        "z": "e593d58e62761e62",
        "name": "",
        "scope": [
            "7d75bd50a2d5fde4",
            "186bef165e612f69",
            "1364d432e3211ce3",
            "4268b76ee76c1421"
        ],
        "uncaught": false,
        "x": 120,
        "y": 180,
        "wires": [
            [
                "72fc26edc0721348",
                "b690b61e93f53323"
            ]
        ]
    },
    {
        "id": "7e008d86b0db1452",
        "type": "debug",
        "z": "e593d58e62761e62",
        "name": "CheckInputFile",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "loop.value",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 220,
        "wires": []
    },
    {
        "id": "72fc26edc0721348",
        "type": "debug",
        "z": "e593d58e62761e62",
        "name": "CatchedException",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "loop.value",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 200,
        "wires": []
    },
    {
        "id": "a94a158343c832c1",
        "type": "debug",
        "z": "e593d58e62761e62",
        "name": "DebugFinish",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "{\t    \"Result\" : \"Success\",\t    \"SuccessFiles\": msg.successFiles,    \t    \"ErrorFiles\": msg.errorFiles,\t    \"SuccessRequestCount\": msg.successRequestCount,    \t    \"ErrorRequestCount\": msg.errorRequestCount\t}\t",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 180,
        "wires": []
    },
    {
        "id": "b690b61e93f53323",
        "type": "function",
        "z": "e593d58e62761e62",
        "name": "ErrorCounter",
        "func": "msg.errorFiles.push(msg.loop.value);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 160,
        "wires": [
            [
                "4268b76ee76c1421"
            ]
        ]
    },
    {
        "id": "a2f9e923325c01ff",
        "type": "http request",
        "z": "e593d58e62761e62",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.LabEquipmentUrl}}}/api/LaboratoryDataAssignment/createSample",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1610,
        "y": 260,
        "wires": [
            [
                "4268b76ee76c1421"
            ]
        ]
    },
    {
        "id": "4ed9a1dd826ab3ca",
        "type": "catch",
        "z": "e593d58e62761e62",
        "name": "",
        "scope": [
            "980e79801608ff50",
            "a2f9e923325c01ff",
            "f5f8a5d2aebd59b1"
        ],
        "uncaught": false,
        "x": 120,
        "y": 340,
        "wires": [
            [
                "74a14865c9b9d163",
                "476f73d2aed762c7"
            ]
        ]
    },
    {
        "id": "74a14865c9b9d163",
        "type": "function",
        "z": "e593d58e62761e62",
        "name": "RequestErrorCounter",
        "func": "msg.errorRequestCount = msg.errorRequestCount + 1;\nmsg.payload.errors = \"error\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "476f73d2aed762c7",
        "type": "debug",
        "z": "e593d58e62761e62",
        "name": "CatchedRequestException",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "loop.value",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 380,
        "wires": []
    },
    {
        "id": "8482d5fcc9525f23",
        "type": "function",
        "z": "e593d58e62761e62",
        "name": "curPayload",
        "func": "msg.currentPayload = msg.payload; \nmsg.payload = msg.object;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 260,
        "wires": [
            [
                "a2f9e923325c01ff"
            ]
        ]
    },
    {
        "id": "1364d432e3211ce3",
        "type": "subflow:20dffe6ac0526b37",
        "z": "e593d58e62761e62",
        "name": "FileProcessingSubFlowP",
        "x": 810,
        "y": 260,
        "wires": [
            [
                "0202dd367046bb80"
            ]
        ]
    },
    {
        "id": "7f2f5c0417dd0ccb",
        "type": "subflow:eab6334d31d45c68",
        "z": "e593d58e62761e62",
        "name": "GetFileListP",
        "x": 290,
        "y": 260,
        "wires": [
            [
                "4268b76ee76c1421"
            ]
        ]
    },
    {
        "id": "0202dd367046bb80",
        "type": "subflow:ca94f48e1f18b542",
        "z": "e593d58e62761e62",
        "name": "",
        "x": 1010,
        "y": 260,
        "wires": [
            [
                "98553c5f7d2d8e88"
            ]
        ]
    },
    {
        "id": "98553c5f7d2d8e88",
        "type": "subflow:f2924807aef52857",
        "z": "e593d58e62761e62",
        "name": "",
        "x": 1180,
        "y": 260,
        "wires": [
            [
                "8482d5fcc9525f23"
            ]
        ]
    },
    {
        "id": "4268b76ee76c1421",
        "type": "loop",
        "z": "e593d58e62761e62",
        "name": "Loop",
        "kind": "enum",
        "count": "2",
        "initial": "0",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "list",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 550,
        "y": 260,
        "wires": [
            [
                "a94a158343c832c1"
            ],
            [
                "1364d432e3211ce3",
                "7e008d86b0db1452"
            ]
        ]
    },
    {
        "id": "6b4551078bc6f9bd",
        "type": "function",
        "z": "05971e2c4fad3c6f",
        "name": "DefineFullPathes",
        "func": "msg.currentFileName = msg.loop.value;\nmsg.currentObjIndex = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 460,
        "wires": [
            [
                "7c21a4ed4ae0f98d"
            ]
        ],
        "info": "Присваивается путь исполняемого файла в цикле"
    },
    {
        "id": "7c21a4ed4ae0f98d",
        "type": "file in",
        "z": "05971e2c4fad3c6f",
        "name": "ReadInputFile",
        "filename": "currentFileName",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 620,
        "y": 460,
        "wires": [
            [
                "9cd439cd0e6379ba"
            ]
        ]
    },
    {
        "id": "9cd439cd0e6379ba",
        "type": "csv",
        "z": "05971e2c4fad3c6f",
        "name": "CSV2",
        "sep": ";",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 790,
        "y": 460,
        "wires": [
            [
                "c685f6d025bcdf82"
            ]
        ]
    },
    {
        "id": "c685f6d025bcdf82",
        "type": "function",
        "z": "05971e2c4fad3c6f",
        "name": "getLength",
        "func": "msg.currentFieldLength = Object.keys(msg.payload[0]).length;\n\nvar result = [];\nlet curData = msg.data.find(f => f.Name == msg.currentFileName);\nlet dataIndex = msg.data.indexOf(curData);\nif (curData.LastPosition == msg.payload.length) {    \n    msg.hasChanges = false;\n}\nelse {\n    msg.hasChanges = true;    \n}\n\nmsg.currentObjIndex = curData.LastPosition;\nmsg.zeroCountStart = curData.LastPosition == 0 ? true : false;\nmsg.curData = curData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 460,
        "wires": [
            [
                "0b0bd8b71daf5d48"
            ]
        ]
    },
    {
        "id": "498e84943e451621",
        "type": "catch",
        "z": "05971e2c4fad3c6f",
        "name": "RF/CSV2",
        "scope": [
            "7c21a4ed4ae0f98d",
            "9cd439cd0e6379ba"
        ],
        "uncaught": false,
        "x": 600,
        "y": 380,
        "wires": [
            [
                "907418e8f3d47fb0"
            ]
        ]
    },
    {
        "id": "907418e8f3d47fb0",
        "type": "function",
        "z": "05971e2c4fad3c6f",
        "name": "FileConversionError",
        "func": "throw 'Ошибка конвертации файла! ' + msg.currentFileName;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "8f93ead8e5156572",
        "type": "function",
        "z": "05971e2c4fad3c6f",
        "name": "Main",
        "func": "var result = [];\nfor (var i = msg.curData.LastPosition; i < msg.payload.length; i++) {\n    let obj = msg.payload[i];\n    let j = 0;\n\n    var item = {\n        SampleId: \"\",\n        LotId: undefined,\n        LaboratoryEquipmentId: msg.EquipmentId,\n        SampledAt: undefined,\n        SampleValues: []\n    };\n\n    for (var key in obj) {        \n        if (obj.hasOwnProperty(key)) {\n            let some = obj[key];\n            if(j==0){\n                item.SampledAt = new Date(obj['col1'] + ' ' + obj['col2']);\n            }\n\n            let ind = (some).indexOf('OrderNr: ');\n            let lotId = (some).substring(ind + 9);\n\n            \n            if (ind!=-1){\n                item.LotId = lotId;\n            }\n\n            let Translation = undefined;\n            for (let DictionaryIndex = 0; (!Translation) && (DictionaryIndex < msg.Dictionary?.length); DictionaryIndex++)\n            {\n                if (some.indexOf(msg.Dictionary[DictionaryIndex].Origin) == 0) Translation = msg.Dictionary[DictionaryIndex];\n            }\n            \n            if (Translation && !item.SampleValues.find(f => f[some]?.ParameterCode == some?.toUpperCase()))\n            {\n                item.SampleValues.push({\n                    ParameterCode: Translation.Translate,\n                    Value: obj[`col${j + 2}`]\n                })\n            }\n        }\n        j++;\n    }\n    result.push(item);\n}\nmsg.objects = result;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "61b1ac9acc3f78f0",
        "type": "file in",
        "z": "05971e2c4fad3c6f",
        "name": "Dictionary",
        "filename": "dictionaryPath",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 380,
        "y": 520,
        "wires": [
            [
                "97ce8e13a2b313dd"
            ]
        ]
    },
    {
        "id": "97ce8e13a2b313dd",
        "type": "csv",
        "z": "05971e2c4fad3c6f",
        "name": "",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\r\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": true,
        "x": 530,
        "y": 520,
        "wires": [
            [
                "d13f476ba0f603b1"
            ]
        ]
    },
    {
        "id": "0b0bd8b71daf5d48",
        "type": "function",
        "z": "05971e2c4fad3c6f",
        "name": "Save payload",
        "func": "msg.PayloadCopy = msg.payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 460,
        "wires": [
            [
                "61b1ac9acc3f78f0"
            ]
        ]
    },
    {
        "id": "d13f476ba0f603b1",
        "type": "function",
        "z": "05971e2c4fad3c6f",
        "name": "Save Dictionary and Restore payload",
        "func": "msg.Dictionary = msg.payload;\nmsg.payload = msg.PayloadCopy;\ndelete msg.PayloadCopy;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 520,
        "wires": [
            [
                "8f93ead8e5156572"
            ]
        ]
    },
    {
        "id": "d75c3f899480faec",
        "type": "function",
        "z": "f158519c0d8786f6",
        "name": "CheckInputFiles",
        "func": "let newList = [];\nmsg.allFileNames = [];\nmsg.allFileNames = msg.list;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 300,
        "wires": [
            [
                "42dae1d9e3b5936c"
            ]
        ]
    },
    {
        "id": "e5469926b618ba3c",
        "type": "function",
        "z": "f158519c0d8786f6",
        "name": "GetNewFiles",
        "func": "let last365days = new Date(new Date().getTime() - (2 * 24 * 60 * 60 * 1000));\n\nif (msg.stats >= last365days)\n{\n    let res = msg.currentFileFullPath + '\\\\' + msg.payload;\n    msg.list.push(res);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 220,
        "wires": [
            [
                "0d89c66a65ebe419"
            ]
        ]
    },
    {
        "id": "7e25133a545ced9f",
        "type": "catch",
        "z": "f158519c0d8786f6",
        "name": "NetCatcher",
        "scope": [],
        "uncaught": false,
        "x": 310,
        "y": 400,
        "wires": [
            [
                "1562c7d8fa67962b"
            ]
        ]
    },
    {
        "id": "478b812e090aa31a",
        "type": "catch",
        "z": "f158519c0d8786f6",
        "name": "FsListCatcher",
        "scope": [],
        "uncaught": false,
        "x": 310,
        "y": 440,
        "wires": [
            [
                "96faf99e353d9aa3"
            ]
        ]
    },
    {
        "id": "82a54331954c7bb3",
        "type": "debug",
        "z": "f158519c0d8786f6",
        "name": "netPathDebug",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 400,
        "wires": []
    },
    {
        "id": "1562c7d8fa67962b",
        "type": "function",
        "z": "f158519c0d8786f6",
        "name": "function 19",
        "func": "node.warn(\"!!!NetConnection FAILED---->\");\nnode.warn(msg.error);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 400,
        "wires": [
            [
                "82a54331954c7bb3"
            ]
        ]
    },
    {
        "id": "96faf99e353d9aa3",
        "type": "function",
        "z": "f158519c0d8786f6",
        "name": "function 20",
        "func": "node.warn(\"!!!FsListCatcher\");\nnode.warn(msg.error);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "17c439af4d2148f4",
        "type": "function",
        "z": "f158519c0d8786f6",
        "name": "listInit",
        "func": "msg.list = [];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 140,
        "wires": [
            [
                "98077563288a95c5"
            ]
        ]
    },
    {
        "id": "edbe86da1ae6d1a0",
        "type": "exec",
        "z": "f158519c0d8786f6",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Map Net Drive",
        "x": 1030,
        "y": 140,
        "wires": [
            [
                "17c439af4d2148f4"
            ],
            [],
            []
        ]
    },
    {
        "id": "d18363b9e6ef1f40",
        "type": "function",
        "z": "f158519c0d8786f6",
        "name": "prep command",
        "func": "msg.payload = \"net use \" + msg.netDrive + \" \" + msg.netPathTempl + \" /user:\"+msg.netPathLogin+\" \"+msg.netPathPassword +\"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 140,
        "wires": [
            [
                "edbe86da1ae6d1a0"
            ]
        ]
    },
    {
        "id": "2da2adf6a20e5824",
        "type": "function",
        "z": "f158519c0d8786f6",
        "name": "prep command",
        "func": "msg.payload = \"net use \" + msg.netDrive + \" /DELETE\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 140,
        "wires": [
            [
                "6fd773c256a88fd7"
            ]
        ]
    },
    {
        "id": "6fd773c256a88fd7",
        "type": "exec",
        "z": "f158519c0d8786f6",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Net Map Delete",
        "x": 610,
        "y": 140,
        "wires": [
            [
                "d18363b9e6ef1f40"
            ],
            [],
            []
        ]
    },
    {
        "id": "e2eac8f836ab2c4a",
        "type": "file",
        "z": "f158519c0d8786f6",
        "name": "Write data.json",
        "filename": "dataPath",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1520,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "42dae1d9e3b5936c",
        "type": "file in",
        "z": "f158519c0d8786f6",
        "name": "Read data",
        "filename": "dataPath",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 990,
        "y": 300,
        "wires": [
            [
                "1410509eb4e9f515"
            ]
        ]
    },
    {
        "id": "1410509eb4e9f515",
        "type": "function",
        "z": "f158519c0d8786f6",
        "name": "FilterNewFiles",
        "func": "let rawdata = JSON.parse(msg.payload);\n\nlet filterdFileNames = [];\nfor (let i = 0; i < msg.allFileNames.length; i++) {\n    const element = msg.allFileNames[i];\n    if (!rawdata.find(f=>f.Name==element)){\n        filterdFileNames.push(element);\n    }    \n}\n\nmsg.allFileNames = filterdFileNames;\nmsg.list = filterdFileNames;\n\nlet objects = [];\nfor (let i = 0; i < rawdata.length; i++) {\n    objects.push(rawdata[i]);\n}\n\nfor (let i = 0; i < msg.allFileNames.length; i++) {\n    const element = msg.allFileNames[i];\n    var obj = {\n            Name: element,\n            Date: new Date(),\n            LastPosition: 0,\n            LastState: 'Initial',\n            ErrorObject: null\n    }\n    \n    objects.push(obj)\n}\n\nmsg.payload = objects;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 300,
        "wires": [
            [
                "e2eac8f836ab2c4a"
            ]
        ],
        "info": "Перевод исходных данных msg.payload в JSON объекты и выгрузка их обратно в msg.payload\r\n"
    },
    {
        "id": "462c389470d9efbd",
        "type": "function",
        "z": "f158519c0d8786f6",
        "name": "SetCurrentFileFullPath",
        "func": "msg.currentFileFullPath = msg.netDrive;\n// node.warn(msg.currentFileFullPath);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 220,
        "wires": [
            [
                "0d89c66a65ebe419"
            ]
        ]
    },
    {
        "id": "09a94a8dcb795084",
        "type": "comment",
        "z": "f158519c0d8786f6",
        "name": "Получение и фильтрация списка файлов из сетевого диска",
        "info": "",
        "x": 460,
        "y": 60,
        "wires": []
    },
    {
        "id": "9a4ba54058b96913",
        "type": "comment",
        "z": "f158519c0d8786f6",
        "name": "",
        "info": "list\ncurrentFileFullPath\nallFileNames",
        "x": 1470,
        "y": 40,
        "wires": []
    },
    {
        "id": "98077563288a95c5",
        "type": "fs-list",
        "z": "f158519c0d8786f6",
        "name": "",
        "path": "netPath",
        "pathType": "msg",
        "pattern": "*",
        "patternType": "str",
        "filter": "files",
        "recursive": false,
        "follow": true,
        "property": "folderFileList",
        "propertyType": "msg",
        "x": 740,
        "y": 220,
        "wires": [
            [
                "462c389470d9efbd"
            ]
        ]
    },
    {
        "id": "6978dad7c0827311",
        "type": "fs-stats",
        "z": "f158519c0d8786f6",
        "name": "",
        "path": "currentFileFullPath",
        "pathType": "msg",
        "filename": "payload",
        "filenameType": "msg",
        "attr": "mtime",
        "follow": true,
        "property": "stats",
        "propertyType": "msg",
        "x": 1540,
        "y": 220,
        "wires": [
            [
                "e5469926b618ba3c"
            ]
        ]
    },
    {
        "id": "0d89c66a65ebe419",
        "type": "loop",
        "z": "f158519c0d8786f6",
        "name": "FilesInFolderLoop",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "folderFileList",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-last",
        "x": 1290,
        "y": 220,
        "wires": [
            [
                "d75c3f899480faec"
            ],
            [
                "6978dad7c0827311"
            ]
        ]
    },
    {
        "id": "91a6f29f99e2f0ac",
        "type": "function",
        "z": "a3392fd4e2fe8625",
        "name": "SuccesCounter",
        "func": "if (!msg.successFiles.find(f => f == msg.currentFileName)\n    && !msg.errorFiles.find(f => f == msg.currentFileName)\n)\n    msg.successFiles.push(msg.currentFileName);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "34ea2d6a15b466f5",
        "type": "http request",
        "z": "a3392fd4e2fe8625",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/api/LaboratoryDataAssignment/createSample",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Initiator-user",
                "valueType": "other",
                "valueValue": "b234cfcd-609c-4b3f-b814-cf93bf9c8829"
            }
        ],
        "x": 1290,
        "y": 240,
        "wires": [
            [
                "3b98972d6a91cad3"
            ]
        ]
    },
    {
        "id": "c630a5c6cf3064bd",
        "type": "catch",
        "z": "a3392fd4e2fe8625",
        "name": "",
        "scope": [
            "34ea2d6a15b466f5",
            "08608d855b285b97"
        ],
        "uncaught": false,
        "x": 400,
        "y": 500,
        "wires": [
            [
                "26c5c81132dd0d31",
                "7c66b4dabb7491f0"
            ]
        ]
    },
    {
        "id": "26c5c81132dd0d31",
        "type": "function",
        "z": "a3392fd4e2fe8625",
        "name": "RequestErrorCounter",
        "func": "msg.errorRequestCount = msg.errorRequestCount + 1;\nmsg.payload.errors = \"error\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 480,
        "wires": [
            [
                "2010a675b9cd1b41"
            ]
        ]
    },
    {
        "id": "3b98972d6a91cad3",
        "type": "function",
        "z": "a3392fd4e2fe8625",
        "name": "RequestSuccessCounter",
        "func": "if (msg.payload.errors != undefined && msg.payload.errors != null)\n{\n    msg.errorRequestCount = msg.errorRequestCount + 1;      \n\n    let item = msg.errorResult.find(f => f.fileName == msg.fileInputName);\n    if (msg.errorResult.length==0 || item == undefined){\n        let obj = {\n            fileName: msg.fileInputName,\n            item: msg.currentPayload,\n            error: JSON.stringify(msg.payload.errors)\n        }\n        msg.errorResult.push(obj);    \n        msg.errorFiles.push(msg.currentFileName);\n    }\n    else {\n        let index = msg.errorResult.indexOf(item);\n        item.items.push(msg.currentPayload);\n        msg.errorResult[index]=item;\n    }\n}\nelse\n{\n    msg.successRequestCount = msg.successRequestCount + 1;\n    msg.currentObjIndex = msg.currentObjIndex + 1;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 240,
        "wires": [
            [
                "2010a675b9cd1b41"
            ]
        ]
    },
    {
        "id": "c5318dd844dbd358",
        "type": "file",
        "z": "a3392fd4e2fe8625",
        "name": "Update data.json",
        "filename": "dataPath",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1070,
        "y": 340,
        "wires": [
            [
                "91a6f29f99e2f0ac"
            ]
        ]
    },
    {
        "id": "7c66b4dabb7491f0",
        "type": "debug",
        "z": "a3392fd4e2fe8625",
        "name": "CatchedRequestException",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "loop.value",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 520,
        "wires": []
    },
    {
        "id": "3634d04fe688c3fb",
        "type": "function",
        "z": "a3392fd4e2fe8625",
        "name": "curPayload",
        "func": "msg.currentPayload = msg.payload;\nif (msg.payload.LotId == 1)\n{\n    msg.currentObjIndex = msg.currentObjIndex + 1;\n} \nelse if (msg.payload.LotId == null)\n{\n    msg.errorObjectNumber.push(msg.currentFileName  + ' => ' + msg.currentObjIndex)\n    msg.currentObjIndex = msg.currentObjIndex + 1;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 240,
        "wires": [
            [
                "26d331db06de3e87"
            ]
        ]
    },
    {
        "id": "2010a675b9cd1b41",
        "type": "switch",
        "z": "a3392fd4e2fe8625",
        "name": "",
        "property": "payload.errors",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 340,
        "wires": [
            [
                "08608d855b285b97"
            ],
            [
                "f9031efccf06a351"
            ]
        ]
    },
    {
        "id": "f9031efccf06a351",
        "type": "function",
        "z": "a3392fd4e2fe8625",
        "name": "dataPreupdate",
        "func": "let item = msg.data.find(f => f.Name == msg.currentFileName);\n\n\nlet index = msg.data.indexOf(item);\n\nitem.LastPosition = \n    msg.zeroCountStart \n        ? msg.currentObjIndex  \n        : msg.currentObjIndex ;\n\nlet hasErrorObject = msg.payload.errors != null && msg.payload.errors != undefined    \nitem.LastState = hasErrorObject \n    ? 'RequestError'\n    : 'RequestSuccess';\n\nitem.ErrorObject = hasErrorObject \n?  JSON.stringify(msg.payload.errors)\n: undefined;\n\nmsg.payload.errors = null;\nmsg.data[index] = item;\nmsg.payload = msg.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 340,
        "wires": [
            [
                "c5318dd844dbd358"
            ]
        ]
    },
    {
        "id": "26d331db06de3e87",
        "type": "switch",
        "z": "a3392fd4e2fe8625",
        "name": "",
        "property": "payload.LotId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 1090,
        "y": 220,
        "wires": [
            [
                "08608d855b285b97"
            ],
            [
                "34ea2d6a15b466f5"
            ],
            [
                "08608d855b285b97"
            ]
        ]
    },
    {
        "id": "77a64ae15df3e1c8",
        "type": "catch",
        "z": "a3392fd4e2fe8625",
        "name": "",
        "scope": [
            "c5318dd844dbd358"
        ],
        "uncaught": false,
        "x": 1140,
        "y": 480,
        "wires": [
            [
                "46c36d1f5685760b",
                "238933e314770dfd"
            ]
        ]
    },
    {
        "id": "46c36d1f5685760b",
        "type": "debug",
        "z": "a3392fd4e2fe8625",
        "name": "CatchedException",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "loop.value",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 520,
        "wires": []
    },
    {
        "id": "238933e314770dfd",
        "type": "function",
        "z": "a3392fd4e2fe8625",
        "name": "ErrorCounter",
        "func": "msg.errorFiles.push(msg.loop.value);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "08608d855b285b97",
        "type": "loop",
        "z": "a3392fd4e2fe8625",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "objects",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 710,
        "y": 240,
        "wires": [
            [
                "f9031efccf06a351"
            ],
            [
                "3634d04fe688c3fb"
            ]
        ]
    },
    {
        "id": "072e7e1fd2056f84",
        "type": "function",
        "z": "e3884960e2be6a63",
        "name": "prep command",
        "func": "msg.payload = \"net use \" + msg.netDrive + \" /DELETE\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 400,
        "wires": [
            [
                "8c942bc142037a95"
            ]
        ]
    },
    {
        "id": "505d9c8bc7ae8da2",
        "type": "function",
        "z": "e3884960e2be6a63",
        "name": "prep command",
        "func": "msg.payload = \"net use \" + msg.netDrive + \" \" + msg.netPathTempl + \" /user:\"+msg.netPathLogin+\" \"+msg.netPathPassword +\"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 400,
        "wires": [
            [
                "1decc61188e8a991"
            ]
        ]
    },
    {
        "id": "8c942bc142037a95",
        "type": "exec",
        "z": "e3884960e2be6a63",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Net Map Delete",
        "x": 600,
        "y": 400,
        "wires": [
            [],
            [
                "505d9c8bc7ae8da2"
            ],
            []
        ]
    },
    {
        "id": "1decc61188e8a991",
        "type": "exec",
        "z": "e3884960e2be6a63",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Map Net Drive",
        "x": 1000,
        "y": 400,
        "wires": [
            [],
            [],
            [
                "79bf52a7af1da33f"
            ]
        ]
    },
    {
        "id": "79bf52a7af1da33f",
        "type": "function",
        "z": "e3884960e2be6a63",
        "name": "listInit",
        "func": "msg.list = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 400,
        "wires": [
            [
                "ca844c4cc7043ca9"
            ]
        ]
    },
    {
        "id": "85c9fd260128515c",
        "type": "function",
        "z": "e3884960e2be6a63",
        "name": "SetCurrentFileFullPath",
        "func": "msg.currentFileFullPath = msg.netDrive + '\\\\' + msg.payload + '\\\\';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 480,
        "wires": [
            [
                "81bcf2a0f611be11"
            ]
        ]
    },
    {
        "id": "afa6bc1701ec2df4",
        "type": "file",
        "z": "e3884960e2be6a63",
        "name": "data_hlrurad199.json",
        "filename": "dataPath",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 660,
        "y": 620,
        "wires": [
            [
                "9548cb46202cd158"
            ]
        ]
    },
    {
        "id": "925cc8928372a09b",
        "type": "catch",
        "z": "e3884960e2be6a63",
        "name": "",
        "scope": [
            "9548cb46202cd158"
        ],
        "uncaught": false,
        "x": 300,
        "y": 620,
        "wires": [
            [
                "dc8e59cd960d7c4a"
            ]
        ]
    },
    {
        "id": "dc8e59cd960d7c4a",
        "type": "function",
        "z": "e3884960e2be6a63",
        "name": "NewData",
        "func": "node.warn(\"CREATE NEW DATA.JSON\");\nlet objects = [];\nfor (let i = 0; i < msg.list.length; i++) {\n    const element = msg.list[i];\n    var obj = {\n            Name: element,\n            Date: new Date(),\n            LastPosition: 0,\n            LastState: 'Initial',\n            ErrorObject: null\n    }\n    \n    objects.push(obj)\n}\n\nmsg.payload = objects;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 620,
        "wires": [
            [
                "afa6bc1701ec2df4"
            ]
        ]
    },
    {
        "id": "9548cb46202cd158",
        "type": "file in",
        "z": "e3884960e2be6a63",
        "name": "Read data",
        "filename": "dataPath",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 390,
        "y": 480,
        "wires": [
            [
                "e2a63ab743105b32"
            ]
        ]
    },
    {
        "id": "e2a63ab743105b32",
        "type": "function",
        "z": "e3884960e2be6a63",
        "name": "GetData",
        "func": "msg.allFileNames = [];\nmsg.allFileNames = msg.list;\n\nlet rawdata = JSON.parse(msg.payload);\nlet curData = [];\nfor (let i = 0; i < rawdata.length; i++) {\n    const element = rawdata[i];\n\n    if (msg.allFileNames.find(f=>f == element.Name))\n    {\n        curData.push(element);\n    }\n}\n\nfor (let i = 0; i < msg.allFileNames.length; i++) {\n    const element = msg.allFileNames[i];\n    if (!rawdata.find(f=>f.Name==element)){\n        curData.push(\n            {\n                Name: element,\n                Date: new Date(),\n                LastPosition: 0,\n                LastState: 'Initial',\n                ErrorObject: null,\n                Scheme: undefined,\n                IgnoreFirstLine: undefined\n            }\n        )\n    }  \n}\nmsg.errorResult = [];\n\nmsg.data=curData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 480,
        "wires": [
            [
                "b60ed3d75603715e"
            ]
        ],
        "info": "Если в исходных данных есть файл как во всех файлах, \r\nто добавляет файл в массив\r\nЕсли во всех файлах не находится одинаковые пути,\r\nто создаётся JSON массив с именем пути"
    },
    {
        "id": "b60ed3d75603715e",
        "type": "switch",
        "z": "e3884960e2be6a63",
        "name": "",
        "property": "allFileNames.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 480,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "dd818ff8bc8ada24",
        "type": "catch",
        "z": "e3884960e2be6a63",
        "name": "NetCatcher",
        "scope": [
            "31179182c848ca02",
            "4ef64400c92a9d72",
            "8593411efb62a8fa",
            "56cf63abf7a73612"
        ],
        "uncaught": false,
        "x": 310,
        "y": 680,
        "wires": [
            [
                "f09f8f109fc2b43f"
            ]
        ]
    },
    {
        "id": "856fff261ef04ef7",
        "type": "catch",
        "z": "e3884960e2be6a63",
        "name": "FsListCatcher",
        "scope": [
            "9a3da7e91eb0a4fd"
        ],
        "uncaught": false,
        "x": 770,
        "y": 320,
        "wires": [
            [
                "8e1a0ea65d443629"
            ]
        ]
    },
    {
        "id": "f64d3664d01ba733",
        "type": "debug",
        "z": "e3884960e2be6a63",
        "name": "netPathDebug",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 680,
        "wires": []
    },
    {
        "id": "f09f8f109fc2b43f",
        "type": "function",
        "z": "e3884960e2be6a63",
        "name": "function 16",
        "func": "node.warn(\"!!!NetConnection FAILED---->\");\nnode.warn(msg.error);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 680,
        "wires": [
            [
                "f64d3664d01ba733"
            ]
        ]
    },
    {
        "id": "8e1a0ea65d443629",
        "type": "function",
        "z": "e3884960e2be6a63",
        "name": "function 17",
        "func": "node.warn(\"!!!FsListCatcher\");\nnode.warn(msg.error);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "100b8d5a1627a1f2",
        "type": "function",
        "z": "e3884960e2be6a63",
        "name": "GetNewFiles",
        "func": "let last365days = new Date(new Date().getTime() - (2 * 24 * 60 * 60 * 1000));\n\nif (msg.stats >= last365days && msg.payload.indexOf('caliber') == -1)\n{\n    let res = msg.currentFileFullPath + '\\\\' + msg.payload;\n    msg.list.push(res);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 560,
        "wires": [
            [
                "711b0033eef6c9bf"
            ]
        ]
    },
    {
        "id": "ca844c4cc7043ca9",
        "type": "fs-list",
        "z": "e3884960e2be6a63",
        "name": "FSListNet",
        "path": "netPath",
        "pathType": "msg",
        "pattern": "*",
        "patternType": "str",
        "filter": "folders",
        "recursive": false,
        "follow": true,
        "property": "allFolders",
        "propertyType": "msg",
        "x": 1320,
        "y": 400,
        "wires": [
            [
                "b7196ed10fd5379e"
            ]
        ]
    },
    {
        "id": "81bcf2a0f611be11",
        "type": "fs-list",
        "z": "e3884960e2be6a63",
        "name": "",
        "path": "currentFileFullPath",
        "pathType": "msg",
        "pattern": "*",
        "patternType": "str",
        "filter": "files",
        "recursive": false,
        "follow": true,
        "property": "folderFileList",
        "propertyType": "msg",
        "x": 1470,
        "y": 480,
        "wires": [
            [
                "711b0033eef6c9bf"
            ]
        ]
    },
    {
        "id": "babf02e87377bfad",
        "type": "fs-stats",
        "z": "e3884960e2be6a63",
        "name": "",
        "path": "currentFileFullPath",
        "pathType": "msg",
        "filename": "payload",
        "filenameType": "msg",
        "attr": "mtime",
        "follow": true,
        "property": "stats",
        "propertyType": "msg",
        "x": 1460,
        "y": 560,
        "wires": [
            [
                "100b8d5a1627a1f2"
            ]
        ]
    },
    {
        "id": "b7196ed10fd5379e",
        "type": "loop",
        "z": "e3884960e2be6a63",
        "name": "FoldersLoop",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "allFolders",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 1490,
        "y": 400,
        "wires": [
            [
                "9548cb46202cd158"
            ],
            [
                "85c9fd260128515c"
            ]
        ]
    },
    {
        "id": "711b0033eef6c9bf",
        "type": "loop",
        "z": "e3884960e2be6a63",
        "name": "FilesInFolderLoop",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "folderFileList",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-last",
        "x": 1270,
        "y": 560,
        "wires": [
            [
                "b7196ed10fd5379e"
            ],
            [
                "babf02e87377bfad"
            ]
        ]
    },
    {
        "id": "a59db501206b12d3",
        "type": "subflow:e3884960e2be6a63",
        "z": "30daf455e2857de4",
        "name": "",
        "x": 610,
        "y": 380,
        "wires": [
            [
                "71dd70cdb923f350"
            ]
        ]
    },
    {
        "id": "390e24350608c5e0",
        "type": "switch",
        "z": "30daf455e2857de4",
        "name": "HasChanges",
        "property": "hasChanges",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1310,
        "y": 380,
        "wires": [
            [
                "71dd70cdb923f350"
            ],
            [
                "aaa092bda354c9a7"
            ]
        ]
    },
    {
        "id": "72500d681424e59a",
        "type": "subflow:a3392fd4e2fe8625",
        "z": "30daf455e2857de4",
        "name": "",
        "x": 1850,
        "y": 380,
        "wires": [
            [
                "71dd70cdb923f350"
            ]
        ]
    },
    {
        "id": "aaa092bda354c9a7",
        "type": "subflow:ca94f48e1f18b542",
        "z": "30daf455e2857de4",
        "name": "",
        "env": [
            {
                "name": "AuthUrl",
                "value": "http://10.70.6.61:52431",
                "type": "str"
            }
        ],
        "x": 1470,
        "y": 380,
        "wires": [
            [
                "426c2d2180a1c848"
            ]
        ]
    },
    {
        "id": "e9b7c3d48a6c8890",
        "type": "catch",
        "z": "30daf455e2857de4",
        "name": "",
        "scope": [
            "a59db501206b12d3",
            "55ebfc1b4fb89f71"
        ],
        "uncaught": false,
        "x": 400,
        "y": 540,
        "wires": [
            [
                "024378d8bfe6f144"
            ]
        ]
    },
    {
        "id": "024378d8bfe6f144",
        "type": "function",
        "z": "30daf455e2857de4",
        "name": "netPathExceptionLog",
        "func": "node.warn('Net path not available');\nnode.warn(msg.error);\nnode.warn(msg.netPath);\nnode.warn(msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "0c16151cbbe52929",
        "type": "catch",
        "z": "30daf455e2857de4",
        "name": "",
        "scope": [
            "ffcddbfdf3427ace",
            "e6d922931ecbe21e"
        ],
        "uncaught": false,
        "x": 400,
        "y": 240,
        "wires": [
            [
                "cacbed13b15e3039",
                "ebabc517777155f1"
            ]
        ]
    },
    {
        "id": "0524cecb2fca5b35",
        "type": "debug",
        "z": "30daf455e2857de4",
        "name": "CheckInputFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "loop.value",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 280,
        "wires": []
    },
    {
        "id": "cacbed13b15e3039",
        "type": "debug",
        "z": "30daf455e2857de4",
        "name": "CatchedException",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "loop.value",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 260,
        "wires": []
    },
    {
        "id": "4e4af6f643d80af2",
        "type": "debug",
        "z": "30daf455e2857de4",
        "name": "DebugFinish",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "{\t    \"Result\" : \"Success\",\t    \"SuccessFiles\": msg.successFiles,    \t    \"ErrorFiles\": msg.errorFiles,\t    \"SuccessRequestCount\": msg.successRequestCount,    \t    \"ErrorRequestCount\": msg.errorRequestCount\t}\t",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 240,
        "wires": []
    },
    {
        "id": "ebabc517777155f1",
        "type": "function",
        "z": "30daf455e2857de4",
        "name": "ErrorCounter",
        "func": "msg.errorFiles.push(msg.loop.value);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 220,
        "wires": [
            [
                "e6d922931ecbe21e"
            ]
        ]
    },
    {
        "id": "49cdbe6a691bbb61",
        "type": "http request",
        "z": "30daf455e2857de4",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/api/LaboratoryDataAssignment/createSample",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1850,
        "y": 320,
        "wires": [
            [
                "e6d922931ecbe21e"
            ]
        ]
    },
    {
        "id": "5f0d95a5e42e6f46",
        "type": "function",
        "z": "30daf455e2857de4",
        "name": "curPayload",
        "func": "msg.currentPayload = msg.payload; \nmsg.payload = msg.object;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 320,
        "wires": [
            [
                "49cdbe6a691bbb61"
            ]
        ]
    },
    {
        "id": "ffcddbfdf3427ace",
        "type": "subflow:20dffe6ac0526b37",
        "z": "30daf455e2857de4",
        "name": "FileProcessingSubFlowP",
        "x": 1090,
        "y": 320,
        "wires": [
            [
                "fb480be382c143e6"
            ]
        ]
    },
    {
        "id": "fb480be382c143e6",
        "type": "subflow:ca94f48e1f18b542",
        "z": "30daf455e2857de4",
        "name": "",
        "x": 1290,
        "y": 320,
        "wires": [
            [
                "3c5346b0b69ab069"
            ]
        ]
    },
    {
        "id": "3c5346b0b69ab069",
        "type": "subflow:f2924807aef52857",
        "z": "30daf455e2857de4",
        "name": "",
        "x": 1460,
        "y": 320,
        "wires": [
            [
                "5f0d95a5e42e6f46"
            ]
        ]
    },
    {
        "id": "d538c74665d5dd49",
        "type": "switch",
        "z": "30daf455e2857de4",
        "name": "TypeEquipment",
        "property": "typeEquipment",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Lumex",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Bruker",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 420,
        "y": 340,
        "wires": [
            [
                "55ebfc1b4fb89f71"
            ],
            [
                "a59db501206b12d3"
            ]
        ]
    },
    {
        "id": "55ebfc1b4fb89f71",
        "type": "subflow:f158519c0d8786f6",
        "z": "30daf455e2857de4",
        "name": "",
        "x": 610,
        "y": 320,
        "wires": [
            [
                "e6d922931ecbe21e"
            ]
        ]
    },
    {
        "id": "ca0313249e9fc3cd",
        "type": "subflow:05971e2c4fad3c6f",
        "z": "30daf455e2857de4",
        "name": "FileProcessingSubBruker",
        "x": 1090,
        "y": 380,
        "wires": [
            [
                "390e24350608c5e0"
            ]
        ]
    },
    {
        "id": "9262757fdfef44a4",
        "type": "catch",
        "z": "30daf455e2857de4",
        "name": "",
        "scope": [
            "71dd70cdb923f350",
            "390e24350608c5e0",
            "72500d681424e59a",
            "ca0313249e9fc3cd"
        ],
        "uncaught": false,
        "x": 400,
        "y": 460,
        "wires": [
            [
                "602b4d71b124a53e",
                "12e0af9838bae48f"
            ]
        ]
    },
    {
        "id": "602b4d71b124a53e",
        "type": "debug",
        "z": "30daf455e2857de4",
        "name": "CatchedException",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "loop.value",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 440,
        "wires": []
    },
    {
        "id": "12e0af9838bae48f",
        "type": "function",
        "z": "30daf455e2857de4",
        "name": "ErrorCounter",
        "func": "msg.errorFiles.push(msg.loop.value);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 480,
        "wires": [
            [
                "71dd70cdb923f350"
            ]
        ]
    },
    {
        "id": "426c2d2180a1c848",
        "type": "subflow:f2924807aef52857",
        "z": "30daf455e2857de4",
        "name": "",
        "x": 1640,
        "y": 380,
        "wires": [
            [
                "72500d681424e59a"
            ]
        ]
    },
    {
        "id": "71dd70cdb923f350",
        "type": "loop",
        "z": "30daf455e2857de4",
        "name": "Loop",
        "kind": "enum",
        "count": "2",
        "initial": "0",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "list",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 830,
        "y": 380,
        "wires": [
            [],
            [
                "ca0313249e9fc3cd"
            ]
        ]
    },
    {
        "id": "e6d922931ecbe21e",
        "type": "loop",
        "z": "30daf455e2857de4",
        "name": "Loop",
        "kind": "enum",
        "count": "2",
        "initial": "0",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "list",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 830,
        "y": 320,
        "wires": [
            [
                "4e4af6f643d80af2"
            ],
            [
                "ffcddbfdf3427ace",
                "0524cecb2fca5b35"
            ]
        ]
    },
    {
        "id": "ebd84dd36ff87919",
        "type": "function",
        "z": "7fa7f34a762d9673",
        "name": "Check Data and Http-Request Prepare",
        "func": "msg.TokenCheck =\n{\n    Token : \"\",\n    UserId : null,\n    Role : undefined,\n    Messages : [],\n    IsSuccess : false\n};\n\nvar GuidPattern = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/gi;\n\nif (\"req\" in msg)\n{\n    if (\"rawHeaders\" in msg.req)\n    {\n        var Token = msg.req.rawHeaders.find(el => el.includes(\"Bearer \"));\n        if (Token)\n        {\n            msg.TokenCheck.Token = Token.replace(\"Bearer \", \"\");\n            var TokenData = msg.TokenCheck.Token.split('.')[1];\n            if (TokenData)\n            {\n                var TokenParse = JSON.parse(Buffer.from(TokenData, 'base64').toString());\n                var UserId = TokenParse?.UserId;\n                if (UserId == undefined){\n                    UserId = TokenParse[\"Initiator-user\"];\n                }\n\n                if (UserId == undefined) {\n                    UserId = TokenParse[\"gUserId\"];\n                }\n                \n                if (UserId)\n                {\n                    if (GuidPattern.test(UserId)) msg.TokenCheck.UserId = UserId;\n                    else msg.TokenCheck.Messages.push(\"UserId должен быть типа Guid\");\n                }\n                else msg.TokenCheck.Messages.push(\"UserId в токене не найден\");\n\n                msg.TokenCheck.Role = TokenParse?.Role;\n            }\n            else msg.TokenCheck.Messages.push(\"Токен имеет неправильный формат\");\n        }\n        else msg.TokenCheck.Messages.push(\"Токен в заголовке запроса отсутствует\");\n    }\n    else msg.TokenCheck.Messages.push(\"Структура заголовка запроса отсутствует\");\n}\nelse msg.TokenCheck.Messages.push(\"Структура запроса отсутствует\");\n\nmsg.TokenCheck.IsSuccess = (msg.TokenCheck.Messages.length == 0);\nif (msg.TokenCheck.IsSuccess)\n{\n    msg.headers = {};\n    msg.headers.accept = \"text/plain\";\n    msg.headers.Authorization = \"Bearer \" + msg.TokenCheck.Token;\n    msg.headers[\"Content-Type\"] = \"application/json\"\n    msg.payload = {};\n    msg.payload.Token = msg.TokenCheck.Token;\n    msg.payload.TokenExpirationDateTime = new Date().toISOString();\n    msg.payload.TokenLifeTime = 0\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 80,
        "wires": [
            [
                "bc996b09a056137c"
            ]
        ]
    },
    {
        "id": "bc996b09a056137c",
        "type": "switch",
        "z": "7fa7f34a762d9673",
        "name": "IsSuccess == false",
        "property": "TokenCheck.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 80,
        "wires": [
            [
                "51c72a2eb3d4a742"
            ],
            [
                "9d0ff42951e3a042"
            ]
        ]
    },
    {
        "id": "9d0ff42951e3a042",
        "type": "http request",
        "z": "7fa7f34a762d9673",
        "name": "Check Token",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:52431/api/checktoken",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 190,
        "y": 140,
        "wires": [
            [
                "3d96793383389350"
            ]
        ]
    },
    {
        "id": "19fbb44e88ae0e73",
        "type": "catch",
        "z": "7fa7f34a762d9673",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 200,
        "y": 200,
        "wires": [
            [
                "5a45902ee57a611f"
            ]
        ]
    },
    {
        "id": "5a45902ee57a611f",
        "type": "function",
        "z": "7fa7f34a762d9673",
        "name": "save Data Error",
        "func": "msg.SubflowError = msg.error;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 200,
        "wires": [
            [
                "51c72a2eb3d4a742"
            ]
        ]
    },
    {
        "id": "51c72a2eb3d4a742",
        "type": "function",
        "z": "7fa7f34a762d9673",
        "name": "create Response",
        "func": "if (msg.SubflowError?.message)\n{\n    var TokenCheck =\n    {\n        Token: \"\",\n        UserId: null,\n        Messages: [],\n        IsSuccess: false\n    };\n    var ErrorMessage = msg.SubflowError?.message;\n    if (msg.SubflowError?.source?.name) ErrorMessage = msg.SubflowError.source.name + \": \" + ErrorMessage;\n    if (msg.SubflowError?.source?.type) ErrorMessage = msg.SubflowError.source.type + \": \" + ErrorMessage;\n    TokenCheck.Messages.push(\"Subflow: \" + ErrorMessage);\n    msg.TokenCheck = TokenCheck;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "3d96793383389350",
        "type": "function",
        "z": "7fa7f34a762d9673",
        "name": "Check Token",
        "func": "if (\"statusCode\" in msg)\n{\n    if (msg.statusCode == 200)\n    {\n        if (msg.payload)\n        {\n            msg.payload = JSON.parse(msg.payload);\n            if (!msg.payload.IsSuccess)\n            {\n                msg.TokenCheck.Messages.push(\"Токен не прошёл проверку\");\n                if (msg.payload?.Messages) msg.TokenCheck.Messages = msg.TokenCheck.Messages.concat(msg.payload.Messages); \n            }\n        }\n        else msg.TokenCheck.Messages.push(\"Нет тела проверки токена\");\n    }\n    else msg.TokenCheck.Messages.push(\"Не удалось проверить токен или токен недействителен\");\n}\nelse msg.TokenCheck.Messages.push(\"При проверке токена не поступил статус запроса\");\n\nmsg.TokenCheck.IsSuccess = (msg.TokenCheck.Messages.length == 0);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 140,
        "wires": [
            [
                "51c72a2eb3d4a742"
            ]
        ]
    },
    {
        "id": "7ff7cd91f65d9efa",
        "type": "subflow:7fa7f34a762d9673",
        "z": "6bff06d7846d79c6",
        "name": "",
        "x": 590,
        "y": 60,
        "wires": [
            [],
            [
                "10f57f938d03cb2d"
            ],
            [
                "415763c66bb0e5e1"
            ]
        ]
    },
    {
        "id": "10f57f938d03cb2d",
        "type": "debug",
        "z": "6bff06d7846d79c6",
        "name": "Ошибка проверки токена",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 320,
        "wires": []
    },
    {
        "id": "d83e30e1628a7eea",
        "type": "http request",
        "z": "6bff06d7846d79c6",
        "name": "Получение коллекции пользовательских групп",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 960,
        "y": 160,
        "wires": [
            [
                "92ddc585f04fbb43"
            ]
        ]
    },
    {
        "id": "92ddc585f04fbb43",
        "type": "function",
        "z": "6bff06d7846d79c6",
        "name": "Обработка результатов",
        "func": "node.log(msg);\n\nif (msg.payload === null){\n    return [null, msg];\n}\n\nmsg.payload = { idCollection: msg.payload.filter(dto => dto != null).map(dto => dto.id), payload: msg.payload };\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 160,
        "wires": [
            [],
            [
                "10f57f938d03cb2d"
            ]
        ]
    },
    {
        "id": "415763c66bb0e5e1",
        "type": "function",
        "z": "6bff06d7846d79c6",
        "name": "Формирование URL",
        "func": "if (msg.TokenCheck.UserId == undefined){\n    return [null, msg];\n}\n\nmsg.url = `http://localhost:52431/api/v2/UserGroup/with_children/${msg.TokenCheck.UserId}`;\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 180,
        "wires": [
            [
                "d83e30e1628a7eea"
            ],
            [
                "10f57f938d03cb2d"
            ]
        ]
    },
    {
        "id": "8315aa8fa1837293",
        "type": "function",
        "z": "0a0d93428c00a77c",
        "name": "Запрос: конкретные таргеты",
        "func": "let targets = msg.payload.targets.payload;\nmsg.body = msg.payload.main.payload;\n\nlet main = msg.payload.main.payload.conbinationsData\nlet queries = {}\nfor (const [key, value] of Object.entries(targets)) {\n    queries[key] = `SELECT ${value.col_id} AS id, ${value.col_name} AS name, ${value.cold_description} AS description FROM ${value.col_table} WHERE ${value.col_id} IN (`;\n}\n\nif (main.keys().length === 0) {\n    msg.payload = [];\n    return [null, msg];\n}\n\nlet counted = [];\nfor (const key of main.keys()) {\n    for (const data of main.get(key)){\n        if (queries.hasOwnProperty(data.combination_type_id)){\n            queries[data.combination_type_id] += `'${data.combination_target_id}', `;\n            counted.push(data.combination_type_id);\n        }\n    }\n}\n\nmsg.queries = [];\nmsg.payload = { targets: new Map() };\nfor (const [key, value] of Object.entries(queries)) {\n    if (counted.includes(key)) {\n        msg.queries.push(value.substring(0, value.length - 2) + ');\\r\\n');\n    }\n}\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 180,
        "wires": [
            [
                "27f5b295c8665499"
            ],
            []
        ]
    },
    {
        "id": "a93c5348df076ce4",
        "type": "function",
        "z": "0a0d93428c00a77c",
        "name": "Перекладывание",
        "func": "msg.targets.forEach(target => {\n    if (!msg.payload.targets.has(target.id)) {\n        msg.payload.targets.set(target.id, target);\n    }\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 200,
        "wires": [
            [
                "27f5b295c8665499"
            ]
        ]
    },
    {
        "id": "1967ea07d8143679",
        "type": "function",
        "z": "0a0d93428c00a77c",
        "name": "Reduce",
        "func": "msg = { body: msg.body, targets: msg.payload.targets, res: msg.res };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "27f5b295c8665499",
        "type": "loop",
        "z": "0a0d93428c00a77c",
        "name": "Получение всех таргетов",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "queries",
        "enumerationType": "msg",
        "limit": "15000",
        "loopPayload": "loop-orig",
        "finalPayload": "final-last",
        "x": 610,
        "y": 160,
        "wires": [
            [
                "1967ea07d8143679"
            ],
            [
                "f5b5f356d057f829"
            ]
        ]
    },
    {
        "id": "f5b5f356d057f829",
        "type": "MSSQL",
        "z": "0a0d93428c00a77c",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Выполнение запроса",
        "outField": "targets",
        "returnType": 0,
        "throwErrors": "0",
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "loop.value",
        "queryOptType": "msg",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 880,
        "y": 200,
        "wires": [
            [
                "a93c5348df076ce4"
            ]
        ]
    },
    {
        "id": "baeced958305420f",
        "type": "function",
        "z": "a9425dc4a51ddbde",
        "name": "Check Data and SQLRequest Prepare",
        "func": "//Структура ответа на запрос от SAP\nmsg.Response =\n{\n    Value: {},\n    Messages : [],\n    IsSuccess : false\n};\n//Массив предупреждающих сообщений, будет склеен с массивом Response.Messages в конце обработки\nmsg.Messages = [];\n\nmsg.SAPData =\n{\n    PlantId: null,\n    PlantGuid: null,\n    WarehouseId: null,\n    WarehouseGuid: null,\n    LineId: null,\n    LineGuid: null,\n    Version: null,\n    Processes: [],\n    MaterialId: null,\n    MaterialGuid: null,\n    BatchId: null,\n    ProdDateOrigin: null,\n    ProdDate: null,\n    ProdDateLocal: null,\n    ExpDateOrigin: null,\n    ExpDate: null,\n    ExpDateLocal: null,\n    Amount: null,\n    AmountPE: null,\n    BatchSupplier: null,\n    SSCC: null,\n    SSCCComment: null,\n    TelegramSettingsError: false,\n    MSSQLError: false,\n    WriteFileError: false\n};\n\nmsg.TelegramNumber = \"13\";\nmsg.Telegram = undefined;\nvar Telegrams = global.get(\"Telegram\");\nvar DataValid = false;\nif (Telegrams\n    && (typeof Telegrams?.DataValidGenerateByName == \"function\")\n    && (typeof Telegrams?.DataValidGenerateByObject == \"function\")\n    && (typeof Telegrams?.DataValidCheck == \"function\")\n)\n{\n    msg.Telegram = Telegrams[msg.TelegramNumber];\n    if (msg.Telegram)\n    {\n        DataValid = Telegrams.DataValidCheck(msg.TelegramNumber);\n        if (!DataValid) msg.Response.Messages.push(\"Телеграмма \" + msg.TelegramNumber + \" имеет ошибочные настройки\");\n    }\n    else msg.Response.Messages.push(\"Телеграмма \" + msg.TelegramNumber + \" не настроена\");\n}\nelse msg.Response.Messages.push(\"Глобальный справочник телеграмм не настроен\");\nmsg.SAPData.TelegramSettingsError = (!DataValid);\n\nif (\"plantid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.plantid && (msg.SAPRequest.Data.plantid != \"\")) msg.SAPData.PlantId = msg.SAPRequest.Data.plantid;\n    else msg.Response.Messages.push(\"Поле plantid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле plantid отсутствует\");\n\nif (\"warehouseid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.warehouseid && (msg.SAPRequest.Data.warehouseid != \"\")) msg.SAPData.WarehouseId = msg.SAPRequest.Data.warehouseid;\n    else msg.Response.Messages.push(\"Поле warehouseid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле warehouseid отсутствует\");\n\nif (\"lineid\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.lineid && (msg.SAPRequest.Data.lineid != \"\")) msg.SAPData.LineId = msg.SAPRequest.Data.lineid;\n    else msg.Response.Messages.push(\"Поле lineid должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле lineid отсутствует\");\n\nif (\"version\" in msg.SAPRequest?.Data)\n{\n    if (msg.SAPRequest.Data.version && (msg.SAPRequest.Data.version != \"\")) msg.SAPData.Version = msg.SAPRequest.Data.version;\n    else msg.Response.Messages.push(\"Поле version должно иметь значение\");\n}\nelse msg.Response.Messages.push(\"Поле version отсутствует\");\n\nvar AmountSum = 0;\nvar Shifts = [\"a\", \"b\", \"c\", \"d\"];\nvar AmountShiftCount = 0;\nvar AmountShiftString = \"\";\nfor (let i = 0; i < Shifts.length; i++)\n{\n    var FieldName = \"amountshift\" + Shifts[i];\n    if (AmountShiftString != \"\") AmountShiftString = AmountShiftString + \", \";\n    AmountShiftString = AmountShiftString + FieldName;\n    if (FieldName in msg.SAPRequest?.Data)\n    {\n        if (msg.SAPRequest.Data[FieldName] && (msg.SAPRequest.Data[FieldName] != \"\"))\n        {\n            if (!isNaN(parseFloat(msg.SAPRequest.Data[FieldName])))\n            {\n                var ProcessData =\n                {\n                    Guid: null,\n                    PlantGuid: null,\n                    LineGuid: null,\n                    StorageLocationGuid: null,\n                    OperationGuid: null,\n                    MaterialGuid: null,\n                    ShiftName: Shifts[i].toUpperCase(),\n                    Amount: parseFloat(msg.SAPRequest.Data[FieldName])                   \n                };\n                msg.SAPData.Processes.push(ProcessData);\n                AmountSum = AmountSum + ProcessData.Amount;\n                AmountShiftCount = AmountShiftCount + 1;\n            }\n            else msg.Response.Messages.push(\"Поле \" + FieldName + \" должно иметь числовое значение\");\n        }\n    }\n}\nif (AmountShiftCount > 0)\n{\n    if (AmountShiftCount > 2) msg.Response.Messages.push(\"Должно быть не более двух полей amountshiftX (\" + AmountShiftString + \") с значением\");\n}\nelse msg.Response.Messages.push(\"Должно быть хотя бы одно поле amountshiftX (\" + AmountShiftString + \") с значением\");\n\nif (\"pallets\" in msg.SAPRequest?.Data)\n{\n    if (Array.isArray(msg.SAPRequest.Data.pallets))\n    {\n        if (msg.SAPRequest.Data.pallets.length == 1)\n        {\n            var PalletData = msg.SAPRequest.Data.pallets[0];\n\n            if (\"materialid\" in PalletData)\n            {\n                if (PalletData.materialid && (PalletData.materialid != \"\")) msg.SAPData.MaterialId = PalletData.materialid;\n                else msg.Response.Messages.push(\"Поле materialid должно иметь значение\");\n            }\n            else msg.Response.Messages.push(\"Поле materialid отсутствует\");\n\n            if (\"batchid\" in PalletData)\n            {\n                if (PalletData.batchid && (PalletData.batchid != \"\")) msg.SAPData.BatchId = PalletData.batchid;\n                else msg.Response.Messages.push(\"Поле batchid должно иметь значение\");\n            }\n            else msg.Response.Messages.push(\"Поле batchid отсутствует\");\n\n            if (\"proddate\" in PalletData)\n            {\n                if (PalletData.proddate)\n                {\n                    if (!isNaN(Date.parse(PalletData.proddate)))\n                    {\n                        if (Date.parse(PalletData.proddate) > 0)\n                        {\n                            msg.SAPData.ProdDateOrigin = PalletData.proddate;\n                            msg.SAPData.ProdDate = new Date(msg.SAPData.ProdDateOrigin);\n                            msg.SAPData.ProdDateLocal = new Date(Number(msg.SAPData.ProdDate) + msg.SAPData.ProdDate.getTimezoneOffset() * 60000);\n                        }\n                    }\n                }\n                if (!msg.SAPData.ProdDate) msg.Response.Messages.push(\"Поле proddate должно иметь значение даты позже \\\"1970-01-01T00:00:00.000Z\\\"\");\n            }\n            else msg.Response.Messages.push(\"Поле proddate отсутствует\");\n            \n            if (\"expdate\" in PalletData)\n            {\n                if (PalletData.expdate)\n                {\n                    if (!isNaN(Date.parse(PalletData.expdate)))\n                    {\n                        if (Date.parse(PalletData.expdate) > 0)\n                        {\n                            msg.SAPData.ExpDateOrigin = PalletData.expdate;\n                            msg.SAPData.ExpDate = new Date(msg.SAPData.ExpDateOrigin);\n                            msg.SAPData.ExpDateLocal = new Date(Number(msg.SAPData.ExpDate) + msg.SAPData.ExpDate.getTimezoneOffset() * 60000);\n                            if (msg.SAPData.ExpDate <= msg.SAPData.ProdDate) msg.Response.Messages.push(\"Значение proddate должно быть раньше значения expdate\");\n                        }\n                    }\n                }\n                if (!msg.SAPData.ExpDate) msg.Response.Messages.push(\"Поле expdate должно иметь значение даты позже \\\"1970-01-01T00:00:00.000Z\\\"\");\n            }\n            else msg.Response.Messages.push(\"Поле expdate отсутствует\");\n\n            if (\"amount\" in PalletData)\n            {\n                if ((PalletData.amount > 0) && (!isNaN(parseFloat(PalletData.amount))))\n                {\n                    msg.SAPData.Amount = parseFloat(PalletData.amount);\n                    if (Math.abs(AmountSum - msg.SAPData.Amount) > 1e-3) msg.Response.Messages.push(\"Поле amount должно быть равным сумме посменных объёмов\");\n                }\n                else msg.Response.Messages.push(\"Поле amount должно иметь положительное числовое значение\");\n            }\n            else msg.Response.Messages.push(\"Поле amount отсутствует\");\n\n            if (\"amountcou\" in PalletData) {\n                if ((PalletData.amountcou > 0) && (!isNaN(parseFloat(PalletData.amountcou)))) {\n                    msg.SAPData.AmountPE = parseFloat(PalletData.amountcou);\n                }\n                else msg.Response.Messages.push(\"Поле amountcou должно иметь положительное числовое значение\");\n            }\n\n            if (\"batchsupplier\" in PalletData)\n            {\n                if (PalletData.batchsupplier && (PalletData.batchsupplier != \"\")) msg.SAPData.BatchSupplier = PalletData.batchsupplier;\n            }\n\n            if (\"sscc\" in PalletData)\n            {\n                if (PalletData.sscc && (PalletData.sscc != \"\")) msg.SAPData.SSCC = PalletData.sscc;\n                else msg.Response.Messages.push(\"Поле sscc должно иметь значение\");\n            }\n            else msg.Response.Messages.push(\"Поле sscc отсутствует\");\n\n            if (\"ssccComment\" in PalletData)\n            {\n                if (PalletData.ssccComment && (PalletData.ssccComment != \"\")) msg.SAPData.SSCCComment = PalletData.ssccComment;\n            }\n            else msg.Response.Messages.push(\"Поле sscccomment отсутствует\");\n        }\n        else msg.Response.Messages.push(\"Поле pallets должно иметь только один элемент\");\n    }\n    else msg.Response.Messages.push(\"pallets должен быть типа Array\");\n}\nelse msg.Response.Messages.push(\"Поле pallets отсутствует\");\n\nvar EquipmentTreeTable = global.get(\"DBTable\")?.EquipmentTree;\nif ((!EquipmentTreeTable) || (!EquipmentTreeTable?.DBTable)) msg.Response.Messages.push(\"Таблица дерева оборудования не сконфигурирована\");\n\n\nvar MaterialTable = global.get(\"DBTable\")?.Material;\nif ((!MaterialTable) || (!MaterialTable?.DBTable)) msg.Response.Messages.push(\"Таблица материалов не сконфигурирована\");\n\n\nvar StorageLocationTable = global.get(\"DBTable\")?.StorageLocation;\nif ((!StorageLocationTable) || (!StorageLocationTable?.DBTable)) msg.Response.Messages.push(\"Таблица хранилищ не сконфигурирована\");\n\n\nvar ExternalVertexTable = global.get(\"DBTable\")?.ExternalVertex;\nif ((!ExternalVertexTable) || (!ExternalVertexTable?.DBTable)) msg.Response.Messages.push(\"Таблица внешних вершин не сконфигурирована\");\n\n\nvar ProcessByNumberSAPTable = global.get(\"DBTable\")?.ProcessByNumberSAP;\nif ((!ProcessByNumberSAPTable) || (!ProcessByNumberSAPTable?.DBTable)) msg.Response.Messages.push(\"Таблица процессов по названию SAP не сконфигурирована\");\n\n\nvar ProcessTable = global.get(\"DBTable\")?.Process;\nif ((!ProcessTable) || (!ProcessTable?.DBTable)) msg.Response.Messages.push(\"Таблица процессов не сконфигурирована\");\n\n\nvar OperationTable = global.get(\"DBTable\")?.Operation;\nif ((!OperationTable) || (!OperationTable?.DBTable)) msg.Response.Messages.push(\"Таблица операций не сконфигурирована\");\n\n\nvar ProductionOrderTable = global.get(\"DBTable\")?.ProductionOrder;\nif ((!ProductionOrderTable) || (!ProductionOrderTable?.DBTable)) msg.Response.Messages.push(\"Таблица производственных заказов не сконфигурирована\");\n\n\nvar ShiftRuntimeTable = global.get(\"DBTable\")?.ShiftRuntime;\nif ((!ShiftRuntimeTable) || (!ShiftRuntimeTable?.DBTable)) msg.Response.Messages.push(\"Таблица активных смен не сконфигурирована\");\n\n\nvar OperationProduceStorageLocationTable = global.get(\"DBTable\")?.OperationProduceStorageLocation;\nif ((!OperationProduceStorageLocationTable) || (!OperationProduceStorageLocationTable?.DBTable)) msg.Response.Messages.push(\"Таблица хранилищ по операциям не сконфигурирована\");\nmsg.Tables = { EquipmentTreeTable, MaterialTable, StorageLocationTable, ExternalVertexTable, ProcessByNumberSAPTable, ProcessTable, OperationTable, ProductionOrderTable, ShiftRuntimeTable, OperationProduceStorageLocationTable };\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 340,
        "wires": [
            [
                "d27b3ff48be4690d"
            ]
        ]
    },
    {
        "id": "d27b3ff48be4690d",
        "type": "switch",
        "z": "a9425dc4a51ddbde",
        "name": "IsSuccess == true",
        "property": "Response.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 870,
        "y": 340,
        "wires": [
            [
                "28798c2c30023b63"
            ],
            [
                "72eaacd7f857a515"
            ]
        ]
    },
    {
        "id": "b990a779ffd95241",
        "type": "function",
        "z": "a9425dc4a51ddbde",
        "name": "Create Response",
        "func": "if (msg.SubflowError?.message)\n{\n    var Response =\n    {\n        Value: {},\n        Messages: [],\n        IsSuccess: false\n    };\n    var ErrorMessage = msg.SubflowError?.message;\n    if (msg.SubflowError?.source?.name) ErrorMessage = msg.SubflowError.source.name + \": \" + ErrorMessage;\n    if (msg.SubflowError?.source?.type) ErrorMessage = msg.SubflowError.source.type + \": \" + ErrorMessage;\n    Response.Messages.push(\"Subflow: \" + ErrorMessage);\n    msg.Response = Response;\n    msg.statusCode = 500;\n}\nelse\n{\n    if (msg.SAPData.MSSQLError || msg.SAPData.WriteFileError || msg.SAPData.TelegramSettingsError) msg.statusCode = 500;\n    else\n    {\n        if (msg.Response.IsSuccess) msg.statusCode = 200;\n        else msg.statusCode = 400;\n    }\n    if (msg.Messages) msg.Response.Messages = msg.Response.Messages.concat(msg.Messages);\n}\n\nmsg.payload = msg.Response;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 520,
        "wires": [
            [
                "39a7e62d11e413cf"
            ]
        ]
    },
    {
        "id": "0428237100f4e2fc",
        "type": "function",
        "z": "a9425dc4a51ddbde",
        "name": "Check Data",
        "func": "msg.SQLCheckRequestError = msg.error;\n\nif (msg.SQLCheckRequestError?.details)\n{\n    msg.Response.Messages.push(\"Check Data: \" + msg.SQLCheckRequestError.details);\n    msg.SAPData.MSSQLError = true;\n}\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nif (msg.Response.IsSuccess)\n{\n    var PlantId = msg.SQLCheckRequestData.filter(el => el.Type == 0);\n    if (PlantId.length > 0)\n    {\n        if (PlantId.length > 1) msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" имеет дубликаты\");\n        else msg.SAPData.PlantGuid = PlantId[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Завод с ID = \" + msg.SAPData.PlantId + \" не найден\");\n    \n    var LineId = msg.SQLCheckRequestData.filter(el => el.Type == 1);\n    if (LineId.length > 0)\n    {\n        if (LineId.length > 1) msg.Response.Messages.push(\"Для предприятия с ID = \" + msg.SAPData.PlantId + \" линия с ID = \" + msg.SAPData.LineId + \" имеет дубликаты\");\n        else msg.SAPData.LineGuid = LineId[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Для предприятия с ID = \" + msg.SAPData.PlantId + \" не найдена линия с ID = \" + msg.SAPData.LineId);\n\n    var MaterialId = msg.SQLCheckRequestData.filter(el => el.Type == 2);\n    if (MaterialId.length > 0)\n    {\n        if (MaterialId.length > 1) msg.Response.Messages.push(\"Материал с ID = \" + msg.SAPData.MaterialId + \" имеет дубликаты\");\n        else msg.SAPData.MaterialGuid = MaterialId[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Материал с ID = \" + msg.SAPData.MaterialId + \" не найден\");\n\n    var WarehouseId = msg.SQLCheckRequestData.filter(el => el.Type == 3);\n    if (WarehouseId.length > 0)\n    {\n        if (WarehouseId.length > 1) msg.Response.Messages.push(\"Для предприятия с ID = \" + msg.SAPData.PlantId + \" склад с ID = \" + msg.SAPData.WarehouseId + \" имеет дубликаты\");\n        else msg.SAPData.WarehouseGuid = WarehouseId[0].Guid;\n    }\n    else msg.Response.Messages.push(\"Для предприятия с ID = \" + msg.SAPData.PlantId + \" не найден склад с ID = \" + msg.SAPData.WarehouseId);\n\n    var ProcessIdsString = \"\";\n    var Processes = msg.SQLCheckRequestData.filter(el => el.Type == 4);\n    if (Processes.length > 0)\n    {\n        for (let i = 0; i < msg.SAPData.Processes.length; i++)\n        {\n            var Process = Processes.filter(el => el.ShiftName?.toUpperCase() == msg.SAPData.Processes[i].ShiftName?.toUpperCase() && el.MaterialGuid == msg.SAPData.MaterialGuid);\n            if (Process.length > 0)\n            {\n                if (Process.length > 1) msg.Response.Messages.push(\"Для смены \" + msg.SAPData.Processes[i].ShiftName + \" найдены несколько процессов партии \" + msg.SAPData.BatchId);\n                else\n                {\n                    msg.SAPData.Processes[i].Guid = Process[0].Guid;\n                    msg.SAPData.Processes[i].PlantGuid = Process[0].PlantGuid;\n                    msg.SAPData.Processes[i].LineGuid = Process[0].LineGuid;\n                    msg.SAPData.Processes[i].StorageLocationGuid = Process[0].StorageLocationGuid;\n                    msg.SAPData.Processes[i].OperationGuid = Process[0].OperationGuid;\n                    msg.SAPData.Processes[i].MaterialGuid = Process[0].MaterialGuid;\n\n                    if (ProcessIdsString != \"\") ProcessIdsString = ProcessIdsString + \", \";\n                    ProcessIdsString = ProcessIdsString + \"N'\" + msg.SAPData.Processes[i].Guid + \"'\";\n\n                    if (!msg.SAPData.Processes[i].PlantGuid) msg.Response.Messages.push(\"Для смены \" + msg.SAPData.Processes[i].ShiftName + \" процесса партии \" + msg.SAPData.BatchId + \" не найдено предприятие\");\n                    else\n                    {\n                        if (Process[0].PlantGuid?.toLowerCase() != msg.SAPData.PlantGuid?.toLowerCase()) msg.Response.Messages.push(\"Для смены \" + msg.SAPData.Processes[i].ShiftName + \" процесса партии \" + msg.SAPData.BatchId + \" предприятие не \" + msg.SAPData.PlantId + \", что недопустимо\");\n                    }\n\n                    if (!msg.SAPData.Processes[i].StorageLocationGuid) msg.Response.Messages.push(\"Для смены \" + msg.SAPData.Processes[i].ShiftName + \" процесса партии \" + msg.SAPData.BatchId + \" не найдено хранилище\");\n                    else\n                    {\n                        if (Process[0].StorageLocationGuid?.toLowerCase() != msg.SAPData.WarehouseGuid?.toLowerCase()) msg.Messages.push(\"Для смены \" + msg.SAPData.Processes[i].ShiftName + \" процесса партии \" + msg.SAPData.BatchId + \" хранилище не \" + msg.SAPData.WarehouseId + \", что допустимо, но будет использоваться заданное в MES\");\n                    }\n\n                    if (!msg.SAPData.Processes[i].LineGuid) msg.Response.Messages.push(\"Для смены \" + msg.SAPData.Processes[i].ShiftName + \" процесса партии \" + msg.SAPData.BatchId + \" не найдена линия\");\n                    else\n                    {\n                        if (Process[0].LineGuid?.toLowerCase() != msg.SAPData.LineGuid?.toLowerCase()) msg.Response.Messages.push(\"Для смены \" + msg.SAPData.Processes[i].ShiftName + \" процесса партии \" + msg.SAPData.BatchId + \" линия не \" + msg.SAPData.LineId + \", что недопустимо\");\n                    }\n\n                    if (!msg.SAPData.Processes[i].OperationGuid) msg.Response.Messages.push(\"Для смены \" + msg.SAPData.Processes[i].ShiftName + \" процесса партии \" + msg.SAPData.BatchId + \" не найден процесс\");\n\n                    if (!msg.SAPData.Processes[i].PlantGuid) msg.Response.Messages.push(\"Для смены \" + msg.SAPData.Processes[i].ShiftName + \" процесса партии \" + msg.SAPData.BatchId + \" не найден материал\");\n                    else\n                    {\n                        if (Process[0].MaterialGuid?.toLowerCase() != msg.SAPData.MaterialGuid?.toLowerCase()) msg.Response.Messages.push(\"Для смены \" + msg.SAPData.Processes[i].ShiftName + \" процесса партии \" + msg.SAPData.BatchId + \" материал не \" + msg.SAPData.MaterialId + \", что недопустимо\");\n                    }\n\n                }\n            }\n            else msg.Response.Messages.push(\"Для смены \" + msg.SAPData.Processes[i].ShiftName + \" не найден процесс партии \" + msg.SAPData.BatchId);\n        }\n    }\n    else msg.Response.Messages.push(\"Для партии с ID = \" + msg.SAPData.BatchId + \" не найдены процессы\");\n\n    var ProcessSpecificationTable = global.get(\"DBTable\")?.ProcessSpecification;\n    if ((!ProcessSpecificationTable) || (!ProcessSpecificationTable?.DBTable)) msg.Response.Messages.push(\"Таблица рецептов процессов не сконфигурирована\");\n\n    var ProcessTable = global.get(\"DBTable\")?.Process;\n    if ((!ProcessTable) || (!ProcessTable?.DBTable)) msg.Response.Messages.push(\"Таблица процессов не сконфигурирована\");\n\n    var OperationTable = global.get(\"DBTable\")?.Operation;\n    if ((!OperationTable) || (!OperationTable?.DBTable)) msg.Response.Messages.push(\"Таблица операций не сконфигурирована\");\n\n    var OperationConsumeStorageLocationTable = global.get(\"DBTable\")?.OperationConsumeStorageLocation;\n    if ((!OperationConsumeStorageLocationTable) || (!OperationConsumeStorageLocationTable?.DBTable)) msg.Response.Messages.push(\"Таблица хранилищ потребляемого материала не сконфигурирована\");\n\n    var StorageLocationTable = global.get(\"DBTable\")?.StorageLocation;\n    if ((!StorageLocationTable) || (!StorageLocationTable?.DBTable)) msg.Response.Messages.push(\"Таблица хранилищ не сконфигурирована\");\n\n    var BatchTable = global.get(\"DBTable\")?.Batch;\n    if ((!BatchTable) || (!BatchTable?.DBTable)) msg.Response.Messages.push(\"Таблица партий не сконфигурирована\");\n\n    var MaterialTable = global.get(\"DBTable\")?.Material;\n    if ((!MaterialTable) || (!MaterialTable?.DBTable)) msg.Response.Messages.push(\"Таблица материалов не сконфигурирована\");\n\n    msg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n    if (msg.Response.IsSuccess)\n    {\n        var SQLRequest = \"SELECT\\n\\t\" +\n                \"ProcessSpecification.[gId] AS Id,\\n\\t\" +\n                \"ProcessSpecification.[gProcessId] AS ProcessId,\\n\\t\" +\n                \"Process.[szName] AS ProcessName,\\n\\t\" +\n                \"Process.[gOperationId] AS OperationId,\\n\\t\" +\n                \"Operation.[szName] AS OperationName,\\n\\t\" +\n                \"OperationConsumeStorageLocation.[gStorageLocationId] AS StorageLocationId,\\n\\t\" +\n                \"StorageLocation.[szExternalSystemSapLink] AS StorageLocationNumberSAP,\\n\\t\" +\n                \"OperationConsumeStorageLocation.[gEquipmentId] AS EquipmentId,\\n\\t\" +\n                \"Batch.[gId] AS BatchId,\\n\\t\" +\n                \"Batch.[nQuantity] AS BatchQuantity,\\n\\t\" +\n                \"Batch.[szNumberSAP] AS BatchNumberSAP,\\n\\t\" +\n                \"Batch.[szBatchNumber] AS BatchBatchNumber,\\n\\t\" +\n                \"ProcessSpecification.[gMaterialId] AS MaterialId,\\n\\t\" +\n                \"Material.[szName] AS MaterialName,\\n\\t\" +\n                \"Material.[szDescription] AS MaterialDescription,\\n\\t\" +\n                \"ProcessSpecification.[fAmount] AS Amount,\\n\\t\" +\n                \"ProcessSpecification.[nItemClass] AS ItemClass,\\n\\t\" +\n                \"ProcessSpecification.[nProduceItemType] AS ProduceItemType,\\n\\t\" +\n                \"ProcessSpecification.[nConsumeBomItemClass] AS ConsumeBomItemClass\\n\" +\n            \"FROM \" + ProcessSpecificationTable.DBTable + \" AS ProcessSpecification\\n\\t\" +\n                \"LEFT OUTER JOIN \" + ProcessTable.DBTable + \" AS Process ON (Process.[gId] = ProcessSpecification.[gProcessId])\\n\\t\" +\n                \"LEFT OUTER JOIN \" + OperationTable.DBTable + \" AS Operation ON (Operation.[gId] = Process.[gOperationId])\\n\\t\" +\n            \"LEFT OUTER JOIN \" + OperationConsumeStorageLocationTable.DBTable + \" AS OperationConsumeStorageLocation ON ((OperationConsumeStorageLocation.[gOperationId] = Operation.[gId]) AND (OperationConsumeStorageLocation.[gEquipmentId] = '\" + msg.SAPData.LineGuid + \"') AND (ProcessSpecification.[nItemClass] = 1) AND (ProcessSpecification.[nConsumeBomItemClass] = 2))\\n\\t\" +\n                \"LEFT OUTER JOIN \" + StorageLocationTable.DBTable + \" AS StorageLocation ON (StorageLocation.[gId] = OperationConsumeStorageLocation.[gStorageLocationId])\\n\\t\" +\n                \"LEFT OUTER JOIN \" + BatchTable.DBTable + \" AS Batch ON ((Batch.[StorageLocationId] = OperationConsumeStorageLocation.[gStorageLocationId]) AND (Batch.[gMaterialId] = ProcessSpecification.[gMaterialId]) AND (Batch.[bIsCompleted] = 0))\\n\\t\" +\n                \"LEFT OUTER JOIN \" + MaterialTable.DBTable + \" AS Material ON (Material.[gId] = ProcessSpecification.[gMaterialId])\\n\"+\n            \"WHERE ((ProcessSpecification.[gProcessId] IN (\" + ProcessIdsString + \")) AND (((ProcessSpecification.[nItemClass] = 2) AND (ProcessSpecification.[nProduceItemType] = 1)) OR ((ProcessSpecification.[nItemClass] = 1) AND (ProcessSpecification.[nConsumeBomItemClass] = 2))))\\n\";\n        \n        msg.SQLCheckOuttakeRequest = SQLRequest;\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 400,
        "wires": [
            [
                "d21c43d25ad571a4"
            ]
        ]
    },
    {
        "id": "d21c43d25ad571a4",
        "type": "switch",
        "z": "a9425dc4a51ddbde",
        "name": "IsSuccess == true",
        "property": "Response.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 910,
        "y": 400,
        "wires": [
            [
                "810e95342d37ca71"
            ],
            [
                "516ac95b64d9f059"
            ]
        ]
    },
    {
        "id": "d72cda0da4f868be",
        "type": "function",
        "z": "a9425dc4a51ddbde",
        "name": "Save Batches Data",
        "func": "var fs = global.get(\"fsextra\");\nvar FilesFolder = msg.Telegram?.Folder?.FilesFolder?.Path; //Каталог хранения кучи файлов поставок\nvar FilePrefix = msg.Telegram?.FilePrefix; //Префикс файлов запроса и ответа (без нижнего подчёркивания)\nvar FileType = msg.Telegram?.Folder?.FilesFolder?.FileType; //Тип файла\nvar StartDateTime = new Date(); //Дата и время начала создания файлов\nvar StartDateTimeString = StartDateTime.getFullYear()\n    + ('0' + (StartDateTime.getMonth() + 1)).slice(-2)\n    + ('0' + StartDateTime.getDate()).slice(-2) + \"_\"\n    + ('0' + StartDateTime.getHours()).slice(-2)\n    + ('0' + StartDateTime.getMinutes()).slice(-2)\n    + ('0' + StartDateTime.getSeconds()).slice(-2);\nmsg.StartDateTime = StartDateTime;\nmsg.StartDateTimeString = StartDateTimeString;\n\n//Проверка каталога хранения кучи файлов поставок\nif (FilesFolder && (FilesFolder != \"\") && FileType && (FileType != \"\"))\n{\n    if (fs.pathExistsSync(FilesFolder))\n    {\n        var IsSuccess = true;\n        for (let i = 0; (i < msg.SAPData.Processes.length) && IsSuccess; i++)\n        {\n            var Process = msg.SAPData.Processes[i];\n            var ProcessData =\n            {\n                ProcessId: Process.Guid,\n                OperationId: Process.OperationGuid,\n                MaterialId: Process.MaterialGuid,\n                EquipmentId: Process.LineGuid,\n                StorageLocationId: Process.StorageLocationGuid,\n                Quantity: Process.Amount,\n                QuantityPE: msg.SAPData.AmountPE ? (Process.Amount / (msg.SAPData.Amount / msg.SAPData.AmountPE)) : null,\n                Comment: msg.SAPData.SSCCComment,\n                Expiration: msg.SAPData.ExpDateLocal.toISOString()?.replaceAll(\"Z\", \"\"),\n                PackagingDate: msg.SAPData.ProdDateLocal.toISOString()?.replaceAll(\"Z\", \"\"),\n                //Expiration: msg.SAPData.ExpDateLocal.toISOString()?.replaceAll(\"Z\", \"\"),//ExpDate.toISOString(),\n                //PackagingDate: msg.SAPData.ProdDateLocal.toISOString()?.replaceAll(\"Z\", \"\"),//ProdDate.toISOString(),\n                NumberSAP: msg.SAPData.BatchId,\n                BatchNumber: msg.SAPData.SSCC,\n                SupplierNumber: msg.SAPData.BatchSupplier,\n                Version: msg.SAPData.Version\n            };\n\n            var SaveData =\n            {\n                API: \"\",\n                Table: \"\",\n                Data: ProcessData\n            };\n            var FileName = FilePrefix + \"_\" + StartDateTimeString + \"_\" + msg.SAPData.PlantId + \"_\" + msg.SAPData.BatchId + \"_Shift\" + Process.ShiftName + \".\" + FileType;\n            var FileNameFull = FilesFolder + FileName;\n            var FileData = JSON.stringify(SaveData, null, \"\\t\");\n            IsSuccess = false;\n            //Запись данных в файл\n            try\n            {\n                fs.writeFileSync(FileNameFull, FileData);\n            }\n            catch (ex)\n            {\n                msg.Response.Messages.push(\"Ошибка записи данных в файл \" + FileName + \" (\" + ex + \")\");\n            }\n            //Проверка существования конечного файла\n            if (fs.existsSync(FileNameFull)) IsSuccess = true;\n            else msg.Response.Messages.push(\"Конечный файл \" + FileName + \" не существует\");\n            msg.SAPData.WriteFileError = (!IsSuccess);\n\n\n/*\n            for (let j = 0; (j <Material.Batches.length) && IsSuccess; j++)\n            {\n                var Batch = Material.Batches[j];\n                var BatchData =\n                {\n                    CounterpartyId: msg.SAPData.SupplierGuid,\n                    MaterialId: Material.MaterialGuid,\n                    ExternalBatchNumber: Batch.BatchId,\n                    SupplierNumber: msg.SAPData.Waybill,\n                    Status: 10,\n                    ActualDelivery: StartDateTime.toISOString(),\n                    StorageLocationId: msg.SAPData.WarehouseGuid,\n                    Items: []\n                };\n                for (var Pallet of Batch.Pallets)\n                {\n                    var PalletData =\n                    {\n                        BatchNumber: Pallet.SSCC,\n                        ExternalBatchNumber: Batch.BatchId,\n                        SupplierNumber: Pallet.BatchSupplier,\n                        Quantity: Pallet.Amount,\n                        PackagingDate: Pallet.ProdDate,\n                        Expiration: Pallet.ExpDate,\n                        Comment: Pallet.SSCCComment\n                    };\n                    BatchData.Items.push(PalletData);\n                }\n                \n                var SaveData =\n                {\n                    API: \"CreateDelivery\",\n                    Table: \"\",\n                    Data: BatchData\n                };\n                var FileName = FilePrefix + \"_\" + StartDateTimeString + \"_\" + Material.MaterialId + \"_\" + Batch.BatchId + \".\" + FileType;\n                var FileNameFull = FilesFolder + FileName;\n                var FileData = JSON.stringify(SaveData, null, \"\\t\");\n                IsSuccess = false;\n                //Запись данных в файл\n                try\n                {\n                    fs.writeFileSync(FileNameFull, FileData);\n                }\n                catch (ex)\n                {\n                    msg.Response.Messages.push(\"Ошибка записи данных в файл \" + FileName + \" (\" + ex + \")\");\n                }\n                //Проверка существования конечного файла\n                if (fs.existsSync(FileNameFull)) IsSuccess = true;\n                else msg.Response.Messages.push(\"Конечный файл \" + FileName + \" не существует\");\n                msg.SAPData.WriteFileError = (!IsSuccess);\n            }*/\n        }\n    }\n    else msg.Response.Messages.push(\"Каталог приёма поставок на существует\");\n}\nelse msg.Response.Messages.push(\"Каталог телаграммы \" + msg.TelegramNumber + \" не задан\");\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 520,
        "wires": [
            [
                "b990a779ffd95241"
            ]
        ]
    },
    {
        "id": "6f65ece993c5ca70",
        "type": "catch",
        "z": "a9425dc4a51ddbde",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 500,
        "y": 580,
        "wires": [
            [
                "0f6c305b18b3e5db"
            ]
        ]
    },
    {
        "id": "0f6c305b18b3e5db",
        "type": "function",
        "z": "a9425dc4a51ddbde",
        "name": "Save Error Data",
        "func": "msg.SubflowError = msg.error;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 580,
        "wires": [
            [
                "0eb43726f89c5de0"
            ]
        ]
    },
    {
        "id": "39a7e62d11e413cf",
        "type": "function",
        "z": "a9425dc4a51ddbde",
        "name": "Subflow Status",
        "func": "var FillColour = \"yellow\";\nvar Text = \"Processing\";\n\nif (msg.Response)\n{\n    if (msg.Response.IsSuccess) FillColour = \"green\";\n    else FillColour = \"red\";\n    Text = \"Processing Completed. Error Count: \" + msg.Response.Messages.length;\n}\n\nmsg.payload = { fill: FillColour, shape: \"dot\", text: Text };\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "e829c738ee6445ed",
        "type": "function",
        "z": "a9425dc4a51ddbde",
        "name": "Check Outtake Data",
        "func": "msg.SQLCheckOuttakeRequestError = msg.error;\n\nif (msg.SQLCheckOuttakeRequestError?.details)\n{\n    msg.Response.Messages.push(\"Check Outtake Data: \" + msg.SQLCheckOuttakeRequestError.details);\n    msg.SAPData.MSSQLError = true;\n}\n\nmsg.Response.IsSuccess = (msg.Response.Messages.length == 0);\nif (msg.Response.IsSuccess)\n{\n    for (let i = 0; i < msg.SAPData.Processes.length; i++)\n    {\n        var ProcessSpecification = msg.SQLCheckOuttakeRequestData.filter(el => el.ProcessId?.toLowerCase() == msg.SAPData.Processes[i].Guid?.toLowerCase());\n        if (ProcessSpecification.length > 0)\n        {\n            var OutMaterial = ProcessSpecification.filter(el => ((el.ItemClass == 2) && (el.ProduceItemType == 1)));\n            if (OutMaterial.length > 0)\n            {\n                if (OutMaterial.length > 1) msg.Response.Messages.push(\"Для смены \" + msg.SAPData.Processes[i].ShiftName + \" процесса партии \" + msg.SAPData.BatchId + \" найдено несколько выпускаемых материалов, что недопустимо\");\n                else\n                {\n                    if (OutMaterial[0].MaterialId?.toLowerCase() != msg.SAPData.MaterialGuid?.toLowerCase()) msg.Response.Messages.push(\"Для смены \" + msg.SAPData.Processes[i].ShiftName + \" процесса партии \" + msg.SAPData.BatchId + \" указан неправильный выпускаемый материал\");\n                    else\n                    {\n                        var InMaterial = ProcessSpecification.filter(el => ((el.ItemClass == 1) && (el.ConsumeBomItemClass == 2)));\n                        if (InMaterial.length > 0)\n                        {\n                            var InMaterialUnique =[];\n                            for (let j = 0; j < InMaterial.length; j++)\n                            {\n                                if (!InMaterialUnique.find(el => el.MaterialId == InMaterial[j].MaterialId)) InMaterialUnique.push(InMaterial[j]);\n                            }\n                            for (let j = 0; j < InMaterialUnique.length; j++)\n                            {\n                                var InMaterialBatches = InMaterial.filter(el => (el.MaterialId == InMaterialUnique[j].MaterialId) && el.BatchId);\n                                if (InMaterialBatches.length == 0) msg.WithoutOuttake = true;//msg.Response.Messages.push(\"Для смены \" + msg.SAPData.Processes[i].ShiftName + \" процесса партии \" + msg.SAPData.BatchId + \" нет партий потребляемого материала \" + InMaterialUnique[j].MaterialName);\n                            }\n                        }\n                        else msg.Response.Messages.push(\"Для смены \" + msg.SAPData.Processes[i].ShiftName + \" процесса партии \" + msg.SAPData.BatchId + \" не найдены потребляемые материалы\");\n                    }\n                }\n            }\n            else msg.Response.Messages.push(\"Для смены \" + msg.SAPData.Processes[i].ShiftName + \" процесса партии \" + msg.SAPData.BatchId + \" не найден выпускаемый материал\");\n        }\n        else msg.Response.Messages.push(\"Для смены \" + msg.SAPData.Processes[i].ShiftName + \" процесса партии \" + msg.SAPData.BatchId + \" не найдена спецификация\");\n    }\n\n    msg.Response.IsSuccess = (msg.Response.Messages.length == 0);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 460,
        "wires": [
            [
                "29224bcf94741e7e"
            ]
        ]
    },
    {
        "id": "29224bcf94741e7e",
        "type": "switch",
        "z": "a9425dc4a51ddbde",
        "name": "IsSuccess == true",
        "property": "Response.IsSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1030,
        "y": 460,
        "wires": [
            [
                "d72cda0da4f868be"
            ],
            [
                "1fa71e94a3ba3b6a"
            ]
        ]
    },
    {
        "id": "4117967be6d271a1",
        "type": "switch",
        "z": "a9425dc4a51ddbde",
        "name": "plantid?",
        "property": "SAPRequest.Data.plantid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1950",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 480,
        "y": 280,
        "wires": [
            [
                "baeced958305420f"
            ],
            [
                "baeced958305420f"
            ]
        ]
    },
    {
        "id": "0dd6857ea23e5c48",
        "type": "switch",
        "z": "a9425dc4a51ddbde",
        "name": "CheckArticle",
        "property": "CheckArticle.0",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "error",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "szValue",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "massage",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 850,
        "y": 280,
        "wires": [
            [
                "12237c83f4b1a62e"
            ],
            [
                "50b248fb4ae6adc5"
            ],
            [
                "baeced958305420f"
            ]
        ]
    },
    {
        "id": "50b248fb4ae6adc5",
        "type": "change",
        "z": "a9425dc4a51ddbde",
        "name": "ChangeArticle",
        "rules": [
            {
                "t": "set",
                "p": "SAPRequest.Data.pallets[0].materialid",
                "pt": "msg",
                "to": "CheckArticle[0].szValue",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 280,
        "wires": [
            [
                "baeced958305420f"
            ]
        ]
    },
    {
        "id": "12237c83f4b1a62e",
        "type": "function",
        "z": "a9425dc4a51ddbde",
        "name": "Error",
        "func": "msg.TelegramNumber = \"13\";\nmsg.SAPData = {}\nlet Telegrams = global.get(\"Telegram\")\nmsg.Telegram = Telegrams[msg.TelegramNumber];\nmsg.Response = \n{\n    Value: {},\n    Messages: [msg.CheckArticle[0].error],\n    IsSuccess: false\n} \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 240,
        "wires": [
            [
                "b990a779ffd95241"
            ]
        ]
    },
    {
        "id": "28798c2c30023b63",
        "type": "MSSQL",
        "z": "a9425dc4a51ddbde",
        "mssqlCN": "7e5114f542cff14f",
        "name": "Check Data",
        "outField": "SQLCheckRequestData",
        "returnType": 0,
        "throwErrors": "0",
        "query": "DECLARE @tbl TABLE ( [Type] int,[Guid] uniqueidentifier,Id nvarchar(255),EquipmentTreeId uniqueidentifier,PlantId nvarchar(255),ShiftName nvarchar(100),PlantGuid uniqueidentifier\r\n\t,LineGuid uniqueidentifier,StorageLocationGuid uniqueidentifier,OperationGuid uniqueidentifier,MaterialGuid uniqueidentifier,PlanStart datetime2(7))\r\nDECLARE @tblPO TABLE (nKey int IDENTITY(1,1),[Guid] uniqueidentifier,Id nvarchar(255),ShiftName nvarchar(100),PlantGuid uniqueidentifier\r\n\t,LineGuid uniqueidentifier,StorageLocationGuid uniqueidentifier,OperationGuid uniqueidentifier,MaterialGuid uniqueidentifier,PlanStart datetime2(7))\r\nDECLARE @tblPODouble TABLE (nLink int)\r\nDECLARE @gMaterialId uniqueidentifier,@szPlantSAP nvarchar(50) = N'{{{SAPData.PlantId}}}',@szMaterialName nvarchar(50) =  N'{{{SAPData.MaterialId}}}'\r\n\t\t,@szWarehouseSAP nvarchar(50) = N'{{{SAPData.WarehouseId}}}',@szBatchSAP nvarchar(50) = N'{{{SAPData.BatchId}}}',@szLineSAP nvarchar(50) = N'{{{SAPData.LineId}}}'\r\n\r\nINSERT INTO @tbl([Type],[Guid],Id)\r\n\tSELECT 0,gId,szName FROM {{{Tables.EquipmentTreeTable.DBTable}}} WHERE szNumberSAP = @szPlantSAP\r\n\r\nINSERT INTO @tbl([Type],[Guid],Id,PlantId)\r\n\tSELECT 1,l.gId,l.szNumberSAP,p.szName \r\n\tFROM {{{Tables.EquipmentTreeTable.DBTable}}} l\r\n\t\tINNER JOIN {{{Tables.EquipmentTreeTable.DBTable}}} p ON p.gId = l.gAccessId\r\n\tWHERE l.szNumberSAP = @szLineSAP AND l.nType = 4 AND p.szNumberSAP = @szPlantSAP\r\n\r\nINSERT INTO @tbl([Type],[Guid],Id)\r\n\tSELECT 2,gId,szName FROM {{{Tables.MaterialTable.DBTable}}} WHERE szName = @szMaterialName\r\n\r\nSELECT @gMaterialId=[Guid] FROM @tbl WHERE [Type]=2\r\n\r\nINSERT INTO @tbl([Type],[Guid],Id,EquipmentTreeId,PlantId)\r\n\tSELECT 3,s.[gId],s.[szExternalSystemSapLink],v.[gEquipmentTreeId],p.[szName]\r\n\tFROM {{{Tables.StorageLocationTable.DBTable}}} s\r\n\t\tINNER JOIN {{{Tables.ExternalVertexTable.DBTable}}} v ON v.gExternalObjectId = s.gId AND v.gExternalObjectId IS NOT NULL\r\n\t\tINNER JOIN {{{Tables.EquipmentTreeTable.DBTable}}} p ON p.gId = v.gAccessId\r\n\tWHERE s.szExternalSystemSapLink = @szWarehouseSAP AND p.szNumberSAP = @szPlantSAP\r\n\r\nINSERT INTO @tblPO\r\n\tSELECT p.gId,pns.szNumberSAP,s.szName,p.gAccessId,p.gEquipmentId,psl.gStorageLocationId,p.gOperationId,po.gMaterialId,po.dtPlanStart\r\n\tFROM {{{Tables.ProcessByNumberSAPTable.DBTable}}} pns\r\n\t\tLEFT OUTER JOIN {{{Tables.ProcessTable.DBTable}}} p ON p.gId = pns.gProcessId\r\n\t\tLEFT OUTER JOIN {{{Tables.EquipmentTreeTable.DBTable}}} e ON e.gId = p.gAccessId\r\n\t\tLEFT OUTER JOIN {{{Tables.OperationProduceStorageLocationTable.DBTable}}} psl ON psl.gOperationId = p.gOperationId AND psl.gEquipmentId = p.gEquipmentId\r\n\t\tLEFT OUTER JOIN {{{Tables.OperationTable.DBTable}}} o ON o.gId = p.gOperationId\r\n\t\tLEFT OUTER JOIN {{{Tables.ProductionOrderTable.DBTable}}} po ON po.gId = o.gProductionOrderId\r\n\t\tLEFT OUTER JOIN {{{Tables.ShiftRuntimeTable.DBTable}}} s ON s.gId = po.gShiftRuntimeId\r\n\tWHERE pns.szNumberSAP = @szBatchSAP AND e.szNumberSAP = @szPlantSAP AND po.szStep != N'New' AND po.gMaterialId=@gMaterialId\r\n\tORDER BY po.dtPlanStart DESC\r\n\r\nIF EXISTS (SELECT 1 FROM @tblPO)\r\n\tBEGIN\r\n\t\tINSERT INTO @tblPODouble\r\n\t\t\tSELECT nKey FROM (SELECT Id, ShiftName,MaterialGuid,PlanStart,nKey\r\n\t\t\t\t\t, row_number() over (partition by Id,ShiftName,MaterialGuid  order by PlanStart desc) as rownum\r\n\t\t\t\t\tFROM  @tblPO) x\r\n\t\t\tWHERE rownum > 1\r\n\tEND\r\n\r\nIF EXISTS (SELECT 1 FROM @tblPODouble)\r\n\tDELETE FROM @tblPO WHERE nKey IN (SELECT nLink FROM @tblPODouble) \r\n\r\nINSERT INTO @tbl([Type],[Guid],Id,ShiftName,PlantGuid,LineGuid,StorageLocationGuid,OperationGuid,MaterialGuid,PlanStart)\r\n\tSELECT 4,[Guid],Id,ShiftName,PlantGuid,LineGuid,StorageLocationGuid,OperationGuid,MaterialGuid,PlanStart FROM @tblPO\r\n\r\nSELECT * FROM @tbl",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 490,
        "y": 400,
        "wires": [
            [
                "0428237100f4e2fc"
            ]
        ]
    },
    {
        "id": "810e95342d37ca71",
        "type": "MSSQL",
        "z": "a9425dc4a51ddbde",
        "mssqlCN": "7e5114f542cff14f",
        "name": "Check Outtake Data",
        "outField": "SQLCheckOuttakeRequestData",
        "returnType": 0,
        "throwErrors": "0",
        "query": "--Если запись заказов из таблицы tblCtSData\r\nSELECT * FROM [tblCtSDataHistory]\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "SQLCheckOuttakeRequest",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 520,
        "y": 460,
        "wires": [
            [
                "e829c738ee6445ed"
            ]
        ]
    },
    {
        "id": "4f0a5daa866a55f7",
        "type": "MSSQL",
        "z": "a9425dc4a51ddbde",
        "mssqlCN": "7e5114f542cff14f",
        "name": "CheckArticle",
        "outField": "CheckArticle",
        "returnType": 0,
        "throwErrors": "0",
        "query": "DECLARE @tblArticleData TABLE  (szValue NVARCHAR(255),szParam NVARCHAR(255));\r\nDECLARE @szMaterial NVARCHAR(255) = '{{{SAPRequest.Data.pallets.0.materialid}}}'\r\nINSERT INTO @tblArticleData (szValue, szParam)\r\n\tSELECT m.szName, v.szValue\r\n    FROM [Universal].[dbo].[tblValue] v\r\n     INNER JOIN [Universal].[dbo].[tblValueCombination] vc ON vc.value_id = v.gId\r\n     INNER JOIN [Universal].[dbo].[tblTargetCombination] tc ON tc.gCombinationId = vc.combination_id\r\n     INNER JOIN [Universal].[dbo].[tblParameter] p ON p.gId = v.gParameterId AND p.szName = 'Telegram13'\r\n     INNER JOIN [Universal].[dbo].[tblParameterGroup] pg ON pg.gId = tc.gGroupId AND pg.szName = 'MaterialParametr'\r\n     INNER JOIN [BaseClassifiers].[dbo].[tblMaterial] m ON m.gId = tc.gTargetId\r\n\r\n IF @szMaterial LIKE 'RE%'\r\n\t BEGIN\r\n\t\tIF EXISTS (SELECT 1 FROM @tblArticleData WHERE szValue = @szMaterial)\r\n\t\t\tBEGIN\r\n\t\t\t\tSELECT szParam as szValue FROM @tblArticleData WHERE szValue = @szMaterial\r\n\t\t\tEND\r\n\t\tELSE\r\n\t\t\tBEGIN\r\n\t\t\t\tSELECT N'Артикул не найден в УС материалов' AS massage;\r\n\t\t\tEND\r\n\tEND\r\nELSE\r\n\tBEGIN\r\n\t\tIF EXISTS (SELECT 1 FROM @tblArticleData WHERE szParam = @szMaterial)\r\n\t\t\tBEGIN\r\n\t\t\t\tSELECT N'Ошибка: Артикул готовой продукции найден в универсальном спрвочнике RE' AS error;\r\n\t\t\tEND\r\n\t\tELSE\r\n\t\t\tBEGIN\r\n\t\t\t\tSELECT N'Артикул не найден в параметре материалов ' AS massage;\r\n\t\t\tEND\r\n\tEND",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 650,
        "y": 280,
        "wires": [
            [
                "0dd6857ea23e5c48"
            ]
        ]
    },
    {
        "id": "fdfe9dc55aa74f5e",
        "type": "function",
        "z": "56467187de39c9ba",
        "name": "Get Telegram Settings",
        "func": "var fs = global.get(\"fsextra\");\n\nmsg.Errors =\n{\n    PrepareFilesData: [],\n    GetToken: [],\n    GetServiceUser: [],\n    FileProcessing: []\n};\n\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\n\nvar Telegrams = global.get(\"Telegram\");\nvar FilesNames = [];\nmsg.ErrorCount = 0;\nmsg.Repite = true\nmsg.TelegramNumber = \"13\"\nmsg.Telegram = Telegrams[msg.TelegramNumber];\n\nmsg.SAPRepiteFolder = msg.Telegram?.Folder?.SAPRepiteFolder?.Path; \n\nif (msg.SAPRepiteFolder && (msg.SAPRepiteFolder != \"\"))\n{\n    if (fs.pathExistsSync(msg.SAPRepiteFolder)) \n    {\n        try \n        {\n            FilesNames = fs.readdirSync(msg.SAPRepiteFolder);\n        }\n        catch (ex) {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n            ErrorData.error.message = \"Directory '\" + msg.SAPRepiteFolder + \"' could not be read (\" + ex + \")\";\n            msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n            msg.ErrorCount = msg.ErrorCount + 1;\n            return [null, ErrorData]\n        }\n        if (FilesNames.lenth != 0){\n            msg.FilesNames = FilesNames\n            return [msg, null];\n        }\n    }\n    else {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n        ErrorData.error.message = \"Directory '\" + msg.SAPRepiteFolder + \"' does not exist\";\n        msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n        msg.ErrorCount = msg.ErrorCount + 1;\n        return [null, ErrorData]\n    }\n}\nelse {\n    ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings Error\";\n    ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" is not Сonfigured\";\n    msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n    msg.ErrorCount = msg.ErrorCount + 1;\n    return [null, msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 200,
        "wires": [
            [
                "b0adebc4e351d152"
            ],
            []
        ]
    },
    {
        "id": "0fcf913121d5048d",
        "type": "function",
        "z": "56467187de39c9ba",
        "name": "TakeDataFromFile",
        "func": "var fs = global.get(\"fsextra\");\nmsg.Errors =\n{\n    PrepareFilesData: [],\n    GetToken: [],\n    GetServiceUser: [],\n    FileProcessing: []\n};\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\nmsg.ErrorCount = 0;\nmsg.TelegramNumber = \"13\";\nmsg.ActiveFileName = msg.payload; //Сохранение имени активного файла\nvar FullFileName = msg.SAPRepiteFolder + msg.ActiveFileName; //Полное имя файлов\nvar FileDataStringify = undefined; //Данные из файла\nvar FileData = undefined; //Данные из файла, преобразованные в объект\nvar ErrorCount = 0; //Количество возникших ошибок\nvar IsError = false;\n\n\n//Чтение данных из файла\nvar options =\n{\n    encoding: \"utf8\"\n};\n\ntry\n{\n    FileDataStringify = fs.readFileSync(FullFileName, options);\n    \n}\ncatch (ex)\n{\n    ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" File Error\";\n    ErrorData.error.message = \"File '\" + FullFileName + \"' could not be read (\" + ex + \")\";\n    IsError = true;\n}\n\n//Преобразование файла в объект\nif (FileDataStringify)\n{\n    try\n    {\n        FileData = JSON.parse(FileDataStringify);\n    }\n    catch (ex)\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Data Error\";\n        ErrorData.error.message = \"File '\" + FullFileName + \"' Data could not be Parse to Object. This File is sent to the Bad Directory. (\" + ex + \")\";\n        IsError = true;\n    }\n    if (FileData)\n    {\n        msg.FileRequest = FileData.Request;\n    }\n    else\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Data Error\";\n        ErrorData.error.message = \"File '\" + FullFileName + \"' has no Data.\";\n        IsError = true;\n    }\n}  \nif (IsError)\n{\n    msg.Errors.PrepareFilesData.push(ErrorData.error.message);\n    msg.ErrorCount = msg.ErrorCount + 1;\n    return [null, msg];\n}\nmsg.SAPRequest={}\nmsg.SAPRequest.Data = msg.FileRequest;\nreturn [msg, null]",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 200,
        "wires": [
            [
                "946a5e4f664bd3f7"
            ],
            [
                "26a307908769b480"
            ]
        ]
    },
    {
        "id": "2f14710e68315094",
        "type": "switch",
        "z": "56467187de39c9ba",
        "name": "statusCode",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            },
            {
                "t": "eq",
                "v": "400",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "500",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 150,
        "y": 220,
        "wires": [
            [
                "5c9e5b9aecd3f5da"
            ],
            [
                "fdfe9dc55aa74f5e"
            ],
            [
                "203b917ae4c42833"
            ],
            [
                "203b917ae4c42833"
            ]
        ]
    },
    {
        "id": "55f51a6507e5e363",
        "type": "function",
        "z": "56467187de39c9ba",
        "name": "200",
        "func": "var fs = global.get(\"fsextra\");\n\nvar FullFileName = msg.SAPRepiteFolder + msg.ActiveFileName\nfs.remove(FullFileName)\nmsg.payload = undefined \n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 160,
        "wires": [
            [
                "26a307908769b480"
            ]
        ]
    },
    {
        "id": "5c9e5b9aecd3f5da",
        "type": "switch",
        "z": "56467187de39c9ba",
        "name": "Repite",
        "property": "Repite",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 160,
        "wires": [
            [
                "55f51a6507e5e363"
            ],
            []
        ]
    },
    {
        "id": "e4b7652d8f2a8616",
        "type": "catch",
        "z": "56467187de39c9ba",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 950,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "26a307908769b480",
        "type": "delay",
        "z": "56467187de39c9ba",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 590,
        "y": 160,
        "wires": [
            [
                "b0adebc4e351d152"
            ]
        ]
    },
    {
        "id": "946a5e4f664bd3f7",
        "type": "debug",
        "z": "56467187de39c9ba",
        "d": true,
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 120,
        "wires": []
    },
    {
        "id": "5d04f83b2b0aec15",
        "type": "debug",
        "z": "56467187de39c9ba",
        "d": true,
        "name": "debug 48",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 120,
        "wires": []
    },
    {
        "id": "203b917ae4c42833",
        "type": "switch",
        "z": "56467187de39c9ba",
        "name": "Repite",
        "property": "Repite",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 240,
        "wires": [
            [
                "05513f96c1ad0402"
            ],
            []
        ]
    },
    {
        "id": "05513f96c1ad0402",
        "type": "function",
        "z": "56467187de39c9ba",
        "name": "Errors",
        "func": "msg.Errors.PrepareFilesData.push(msg.Response.Messages[0])\nmsg.ErrorCount = msg.ErrorCount + 1;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "b0adebc4e351d152",
        "type": "array-loop",
        "z": "56467187de39c9ba",
        "name": "",
        "key": "alb0adebc4e351d152",
        "keyType": "msg",
        "reset": false,
        "resetValue": "value-null",
        "array": "FilesNames",
        "arrayType": "msg",
        "x": 770,
        "y": 200,
        "wires": [
            [],
            [
                "0fcf913121d5048d",
                "5d04f83b2b0aec15"
            ]
        ]
    },
    {
        "id": "a45a6fcb2b2645a4",
        "type": "inject",
        "z": "845e1abd965019b2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 260,
        "wires": [
            [
                "76252b674e9cbae5"
            ]
        ]
    },
    {
        "id": "76252b674e9cbae5",
        "type": "http request",
        "z": "845e1abd965019b2",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "localhost:55539/api/webserver/websites",
        "tls": "c7f2a4669e750ffc",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Host",
                "valueType": "other",
                "valueValue": "localhost:55539"
            },
            {
                "keyType": "other",
                "keyValue": "Access-Token",
                "valueType": "other",
                "valueValue": "Bearer XRjlCcuBfVAWFA_5b8bgDy2xWz1dlbzbKwePcUkN4Blz29E3YxI6UQ"
            },
            {
                "keyType": "Accept",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "application/hal+json"
            }
        ],
        "x": 390,
        "y": 240,
        "wires": [
            [
                "a9aa20ca8bbc69c3"
            ]
        ]
    },
    {
        "id": "a9aa20ca8bbc69c3",
        "type": "debug",
        "z": "845e1abd965019b2",
        "name": "debug 218",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 240,
        "wires": []
    },
    {
        "id": "4293a5ef2ed10d3f",
        "type": "inject",
        "z": "845e1abd965019b2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 340,
        "wires": [
            [
                "f485cf0462c8f387"
            ]
        ]
    },
    {
        "id": "f485cf0462c8f387",
        "type": "function",
        "z": "845e1abd965019b2",
        "name": "function 25",
        "func": "msg.headers = {'Access-Token' : 'Bearer XRjlCcuBfVAWFA_5b8bgDy2xWz1dlbzbKwePcUkN4Blz29E3YxI6UQ'};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 340,
        "wires": [
            [
                "b0a36012355357e4"
            ]
        ]
    },
    {
        "id": "b0a36012355357e4",
        "type": "http-ntlm-req",
        "z": "845e1abd965019b2",
        "name": "",
        "url": "https://localhost:55539/api/webserver/websites",
        "method": 0,
        "auth": "dd2d446f52636e01",
        "x": 550,
        "y": 340,
        "wires": [
            [
                "a9aa20ca8bbc69c3"
            ]
        ]
    },
    {
        "id": "0bda422c673ae1cc",
        "type": "inject",
        "z": "c5651ddd0c24ddf4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "errorPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\In\\\\Error\\\\",
                "vt": "str"
            },
            {
                "p": "successPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\In\\\\Success\\\\",
                "vt": "str"
            },
            {
                "p": "successFiles",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "errorFiles",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "successRequestCount",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "errorRequestCount",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "currentFileName",
                "v": "undefined",
                "vt": "str"
            },
            {
                "p": "currentPath",
                "v": "C:\\\\Vekas\\\\FileOp",
                "vt": "str"
            },
            {
                "p": "configPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\config.json",
                "vt": "str"
            },
            {
                "p": "dataPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\data_hlrurad263.json",
                "vt": "str"
            },
            {
                "p": "errorObjectNumber",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "netPath",
                "v": "Z:\\",
                "vt": "str"
            },
            {
                "p": "EquipmentId",
                "v": "4a351463-c88c-40c6-8713-34e5319948be",
                "vt": "str"
            },
            {
                "p": "netDrive",
                "v": "Z:",
                "vt": "str"
            },
            {
                "p": "netPathTempl",
                "v": "\\\\hlrurad263\\Log",
                "vt": "str"
            },
            {
                "p": "netPathLogin",
                "v": "Hochland\\C-Solisoft_RA5",
                "vt": "str"
            },
            {
                "p": "netPathPassword",
                "v": "A70C0C9A35-",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "f66d8488db6103d7"
            ]
        ]
    },
    {
        "id": "82c65fce4e51cc2f",
        "type": "function",
        "z": "c5651ddd0c24ddf4",
        "name": "10.36.96.70",
        "func": "//node.warn(\"FINISHED\");\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "f66d8488db6103d7",
        "type": "subflow:b5263af018a59806",
        "z": "c5651ddd0c24ddf4",
        "name": "MAIN",
        "x": 550,
        "y": 420,
        "wires": [
            [
                "82c65fce4e51cc2f"
            ]
        ]
    },
    {
        "id": "a6d90e9562e5f680",
        "type": "inject",
        "z": "c5651ddd0c24ddf4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "errorPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\In\\\\Error\\\\",
                "vt": "str"
            },
            {
                "p": "successPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\In\\\\Success\\\\",
                "vt": "str"
            },
            {
                "p": "successFiles",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "errorFiles",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "successRequestCount",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "errorRequestCount",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "currentFileName",
                "v": "undefined",
                "vt": "str"
            },
            {
                "p": "currentPath",
                "v": "C:\\\\Vekas\\\\FileOp",
                "vt": "str"
            },
            {
                "p": "configPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\config.json",
                "vt": "str"
            },
            {
                "p": "dataPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\data_hlrurad231.json",
                "vt": "str"
            },
            {
                "p": "errorObjectNumber",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "netPath",
                "v": "Y:\\",
                "vt": "str"
            },
            {
                "p": "EquipmentId",
                "v": "b009f4bd-c865-40c4-9ca4-221c32a679c6",
                "vt": "str"
            },
            {
                "p": "netDrive",
                "v": "Y:",
                "vt": "str"
            },
            {
                "p": "netPathTempl",
                "v": "\\\\hlrurad231\\Log",
                "vt": "str"
            },
            {
                "p": "netPathLogin",
                "v": "Hochland\\C-Solisoft_RA5",
                "vt": "str"
            },
            {
                "p": "netPathPassword",
                "v": "A70C0C9A35-",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 500,
        "wires": [
            [
                "75bc943a0c6f3de9"
            ]
        ]
    },
    {
        "id": "6a1e7a709d9982ea",
        "type": "function",
        "z": "c5651ddd0c24ddf4",
        "name": "10.36.96.52",
        "func": "//node.warn(\"FINISHED\");\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "75bc943a0c6f3de9",
        "type": "subflow:b5263af018a59806",
        "z": "c5651ddd0c24ddf4",
        "name": "MAIN",
        "x": 550,
        "y": 500,
        "wires": [
            [
                "6a1e7a709d9982ea"
            ]
        ]
    },
    {
        "id": "211fa9e555dda495",
        "type": "inject",
        "z": "c5651ddd0c24ddf4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "errorPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\In\\\\Error\\\\",
                "vt": "str"
            },
            {
                "p": "successPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\In\\\\Success\\\\",
                "vt": "str"
            },
            {
                "p": "successFiles",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "errorFiles",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "successRequestCount",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "errorRequestCount",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "currentFileName",
                "v": "undefined",
                "vt": "str"
            },
            {
                "p": "currentPath",
                "v": "C:\\\\Vekas\\\\FileOp",
                "vt": "str"
            },
            {
                "p": "configPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\config.json",
                "vt": "str"
            },
            {
                "p": "dataPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\data_hlrurad199.json",
                "vt": "str"
            },
            {
                "p": "errorObjectNumber",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "netPath",
                "v": "X:\\",
                "vt": "str"
            },
            {
                "p": "EquipmentId",
                "v": "6eacc49c-441b-4b4a-b267-29a632f5a7c3",
                "vt": "str"
            },
            {
                "p": "netDrive",
                "v": "X:",
                "vt": "str"
            },
            {
                "p": "netPathTempl",
                "v": "\\\\hlrurad342\\Log",
                "vt": "str"
            },
            {
                "p": "netPathLogin",
                "v": "Hochland\\C-Solisoft_RA5",
                "vt": "str"
            },
            {
                "p": "netPathPassword",
                "v": "A70C0C9A35-",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 580,
        "wires": [
            [
                "0b276f196fac279f"
            ]
        ]
    },
    {
        "id": "b1fd6116d67086f3",
        "type": "function",
        "z": "c5651ddd0c24ddf4",
        "name": "10.36.96.113",
        "func": "//node.warn(\"FINISHED\");\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "0b276f196fac279f",
        "type": "subflow:b5263af018a59806",
        "z": "c5651ddd0c24ddf4",
        "name": "MAIN",
        "x": 550,
        "y": 580,
        "wires": [
            [
                "b1fd6116d67086f3"
            ]
        ]
    },
    {
        "id": "fe80cea3935a081d",
        "type": "catch",
        "z": "c5651ddd0c24ddf4",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 180,
        "y": 740,
        "wires": [
            [
                "ac2d7b8259a1c213"
            ]
        ]
    },
    {
        "id": "61dfae27f6b76299",
        "type": "debug",
        "z": "c5651ddd0c24ddf4",
        "name": "Debug Save Catch Data",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 740,
        "wires": []
    },
    {
        "id": "ac2d7b8259a1c213",
        "type": "subflow:f8fc59a8d3d93ef9",
        "z": "c5651ddd0c24ddf4",
        "name": "",
        "x": 390,
        "y": 740,
        "wires": [
            [
                "61dfae27f6b76299"
            ]
        ]
    },
    {
        "id": "c2753d29240a262b",
        "type": "comment",
        "z": "c5651ddd0c24ddf4",
        "name": "Обработчик исключений потока и отправка ошибок в файлы логирования",
        "info": "",
        "x": 390,
        "y": 660,
        "wires": []
    },
    {
        "id": "6e2cd90dd928c190",
        "type": "comment",
        "z": "c5651ddd0c24ddf4",
        "name": "заменили брукер 122 на 10.36.96.113(hlrurad342)",
        "info": "заменили брукер 122\n10.36.96.113",
        "x": 1130,
        "y": 580,
        "wires": []
    },
    {
        "id": "dc8796eaac51a63c",
        "type": "http request",
        "z": "31ab9164236cebec",
        "name": "Ping",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 380,
        "wires": [
            [
                "bae147551dbbc611"
            ]
        ]
    },
    {
        "id": "bae147551dbbc611",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "response",
        "func": "// ok = true если код ответа равен 200\nconst ok = msg.statusCode === 200 ? true : false;\n\n// если статус изменился с прошлой проверки\nconst isChange = global.get(msg.name) !== ok;\n\n// запоминаем новое значение если изменилось\nif (isChange) {\n    global.set(msg.name, ok);\n}\n\n// формируем блок ответа\nmsg.response = {\n    serviceName: msg.name,\n    ok: ok,\n    isChange: isChange,\n    time: new Date().getTime() - msg.timeStart\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 500,
        "wires": [
            [
                "15d477c771f5ce98"
            ]
        ]
    },
    {
        "id": "15d477c771f5ce98",
        "type": "join",
        "z": "31ab9164236cebec",
        "name": "join",
        "mode": "custom",
        "build": "array",
        "property": "response",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "18",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 830,
        "y": 540,
        "wires": [
            [
                "fe7dfcb73d2c37ab"
            ]
        ]
    },
    {
        "id": "e22a90d2c8c292c8",
        "type": "delay",
        "z": "31ab9164236cebec",
        "name": "1",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 420,
        "wires": [
            [
                "db4fab655a4717c0",
                "8713ccd969e9f67d"
            ]
        ]
    },
    {
        "id": "c81ace9bb68530b2",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "Auth",
        "func": "const name = 'Auth';\nconst port = 52431;\n\n\n// настройки\nconst url = 'http://localhost'\nconst path = '/api/ping'\n\nmsg.timeStart = new Date().getTime();\nmsg.name = name;\nmsg.url = `${url}:${port}${path}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\nglobal.set('Auth', false);\n",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 380,
        "wires": [
            [
                "dc8796eaac51a63c"
            ]
        ]
    },
    {
        "id": "12ed77a462754e41",
        "type": "http request",
        "z": "31ab9164236cebec",
        "name": "Ping",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 420,
        "wires": [
            [
                "bae147551dbbc611"
            ]
        ]
    },
    {
        "id": "db4fab655a4717c0",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "BaseClassifiers",
        "func": "const name = 'BaseClassifiers';\nconst port = 52432;\n\n\n// настройки\nconst url = 'http://localhost'\nconst path = '/api/ping'\n\n\nmsg.timeStart = new Date().getTime();\nmsg.name = name;\nmsg.url = `${url}:${port}${path}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\nglobal.set('BaseClassifiers', false);",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 420,
        "wires": [
            [
                "12ed77a462754e41"
            ]
        ]
    },
    {
        "id": "8713ccd969e9f67d",
        "type": "delay",
        "z": "31ab9164236cebec",
        "name": "1",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 460,
        "wires": [
            [
                "a9377378005ee5af",
                "3bc0db8c3f88edb6"
            ]
        ]
    },
    {
        "id": "48421e04b7fc2ac3",
        "type": "http request",
        "z": "31ab9164236cebec",
        "name": "Ping",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 460,
        "wires": [
            [
                "bae147551dbbc611"
            ]
        ]
    },
    {
        "id": "a9377378005ee5af",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "QA",
        "func": "const name = 'QA';\nconst port = 52433;\n\n\n// настройки\nconst url = 'http://localhost'\nconst path = '/api/ping'\n\n\nmsg.timeStart = new Date().getTime();\nmsg.name = name;\nmsg.url = `${url}:${port}${path}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\nglobal.set('QA', false);",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 460,
        "wires": [
            [
                "48421e04b7fc2ac3"
            ]
        ]
    },
    {
        "id": "3bc0db8c3f88edb6",
        "type": "delay",
        "z": "31ab9164236cebec",
        "name": "1",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 500,
        "wires": [
            [
                "3a18902336b208d4",
                "e32e14e0e06d137f"
            ]
        ]
    },
    {
        "id": "da4f0c7aa11de9f8",
        "type": "http request",
        "z": "31ab9164236cebec",
        "name": "Ping",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 500,
        "wires": [
            [
                "bae147551dbbc611"
            ]
        ]
    },
    {
        "id": "3a18902336b208d4",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "CIP",
        "func": "const name = 'CIP';\nconst port = 52434;\n\n\n// настройки\nconst url = 'http://localhost'\nconst path = '/api/ping'\n\n\nmsg.timeStart = new Date().getTime();\nmsg.name = name;\nmsg.url = `${url}:${port}${path}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\nglobal.set('CIP', false);",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 500,
        "wires": [
            [
                "da4f0c7aa11de9f8"
            ]
        ]
    },
    {
        "id": "e32e14e0e06d137f",
        "type": "delay",
        "z": "31ab9164236cebec",
        "name": "1",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 540,
        "wires": [
            [
                "a934ea92e7d5ee8e",
                "fd3e111c8f6088b1"
            ]
        ]
    },
    {
        "id": "12c9090853f955a2",
        "type": "http request",
        "z": "31ab9164236cebec",
        "name": "Ping",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 540,
        "wires": [
            [
                "bae147551dbbc611"
            ]
        ]
    },
    {
        "id": "a934ea92e7d5ee8e",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "Checklists",
        "func": "const name = 'Checklists';\nconst port = 52435;\n\n\n// настройки\nconst url = 'http://localhost'\nconst path = '/api/ping'\n\n\nmsg.timeStart = new Date().getTime();\nmsg.name = name;\nmsg.url = `${url}:${port}${path}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\nglobal.set('Checklists', false);",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 540,
        "wires": [
            [
                "12c9090853f955a2"
            ]
        ]
    },
    {
        "id": "fd3e111c8f6088b1",
        "type": "delay",
        "z": "31ab9164236cebec",
        "name": "1",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 580,
        "wires": [
            [
                "99c28a5c8014b942",
                "2c7e2377f2b5d57f"
            ]
        ]
    },
    {
        "id": "7c40de97e60490e6",
        "type": "http request",
        "z": "31ab9164236cebec",
        "name": "Ping",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 580,
        "wires": [
            [
                "bae147551dbbc611"
            ]
        ]
    },
    {
        "id": "99c28a5c8014b942",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "TaskManagement",
        "func": "const name = 'TaskManagement';\nconst port = 52436;\n\n\n// настройки\nconst url = 'http://localhost'\nconst path = '/api/ping'\n\n\nmsg.timeStart = new Date().getTime();\nmsg.name = name;\nmsg.url = `${url}:${port}${path}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\nglobal.set('TaskManagement', false);",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 580,
        "wires": [
            [
                "7c40de97e60490e6"
            ]
        ]
    },
    {
        "id": "2c7e2377f2b5d57f",
        "type": "delay",
        "z": "31ab9164236cebec",
        "name": "1",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 620,
        "wires": [
            [
                "81911de6f3bf7924",
                "3255938f7b37e914"
            ]
        ]
    },
    {
        "id": "e528c97c63b05b47",
        "type": "http request",
        "z": "31ab9164236cebec",
        "name": "Ping",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 620,
        "wires": [
            [
                "bae147551dbbc611"
            ]
        ]
    },
    {
        "id": "81911de6f3bf7924",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "Scheduler",
        "func": "const name = 'Scheduler';\nconst port = 52437;\n\n\n// настройки\nconst url = 'http://localhost'\nconst path = '/api/ping'\n\n\nmsg.timeStart = new Date().getTime();\nmsg.name = name;\nmsg.url = `${url}:${port}${path}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\nglobal.set('Scheduler', false);",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 620,
        "wires": [
            [
                "e528c97c63b05b47"
            ]
        ]
    },
    {
        "id": "3255938f7b37e914",
        "type": "delay",
        "z": "31ab9164236cebec",
        "name": "1",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 660,
        "wires": [
            [
                "daee3214e92d357c",
                "a77db8ab12629842"
            ]
        ]
    },
    {
        "id": "84263173e729c1ec",
        "type": "http request",
        "z": "31ab9164236cebec",
        "name": "Ping",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 660,
        "wires": [
            [
                "bae147551dbbc611"
            ]
        ]
    },
    {
        "id": "daee3214e92d357c",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "Workflow",
        "func": "const name = 'Workflow';\nconst port = 52438;\n\n\n// настройки\nconst url = 'http://localhost'\nconst path = '/api/ping'\n\n\nmsg.timeStart = new Date().getTime();\nmsg.name = name;\nmsg.url = `${url}:${port}${path}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\nglobal.set('Workflow', false);",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 660,
        "wires": [
            [
                "84263173e729c1ec"
            ]
        ]
    },
    {
        "id": "a77db8ab12629842",
        "type": "delay",
        "z": "31ab9164236cebec",
        "name": "1",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 700,
        "wires": [
            [
                "aa89438bfd5137b5",
                "94ca6c37265df959"
            ]
        ]
    },
    {
        "id": "04e86219ccd5ae1a",
        "type": "http request",
        "z": "31ab9164236cebec",
        "name": "Ping",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 700,
        "wires": [
            [
                "bae147551dbbc611"
            ]
        ]
    },
    {
        "id": "aa89438bfd5137b5",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "ChecklistCreatorBySchedule",
        "func": "const name = 'ChecklistCreatorBySchedule';\nconst port = 52439;\n\n\n// настройки\nconst url = 'http://localhost'\nconst path = '/api/ping'\n\n\nmsg.timeStart = new Date().getTime();\nmsg.name = name;\nmsg.url = `${url}:${port}${path}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\nglobal.set('ChecklistCreatorBySchedule', false);",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 700,
        "wires": [
            [
                "04e86219ccd5ae1a"
            ]
        ]
    },
    {
        "id": "94ca6c37265df959",
        "type": "delay",
        "z": "31ab9164236cebec",
        "name": "1",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 740,
        "wires": [
            [
                "ecea7b9b7934419b",
                "485c5a73b578b613"
            ]
        ]
    },
    {
        "id": "8410fc75694c140f",
        "type": "http request",
        "z": "31ab9164236cebec",
        "name": "Ping",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 740,
        "wires": [
            [
                "bae147551dbbc611"
            ]
        ]
    },
    {
        "id": "ecea7b9b7934419b",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "LabEquipment",
        "func": "const name = 'LabEquipment';\nconst port = 52441;\n\n\n// настройки\nconst url = 'http://localhost'\nconst path = '/api/ping'\n\n\nmsg.timeStart = new Date().getTime();\nmsg.name = name;\nmsg.url = `${url}:${port}${path}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\nglobal.set('LabEquipment', false);",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 740,
        "wires": [
            [
                "8410fc75694c140f"
            ]
        ]
    },
    {
        "id": "485c5a73b578b613",
        "type": "delay",
        "z": "31ab9164236cebec",
        "name": "1",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 780,
        "wires": [
            [
                "f70e1c2b3f8862bb",
                "4be07427145490ba"
            ]
        ]
    },
    {
        "id": "146abe09de0de2bc",
        "type": "http request",
        "z": "31ab9164236cebec",
        "name": "Ping",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 780,
        "wires": [
            [
                "bae147551dbbc611"
            ]
        ]
    },
    {
        "id": "f70e1c2b3f8862bb",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "Notifications",
        "func": "const name = 'Notifications';\nconst port = 52442;\n\n\n// настройки\nconst url = 'http://localhost'\nconst path = '/api/ping'\n\n\nmsg.timeStart = new Date().getTime();\nmsg.name = name;\nmsg.url = `${url}:${port}${path}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\nglobal.set('Notifications', false);",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 780,
        "wires": [
            [
                "146abe09de0de2bc"
            ]
        ]
    },
    {
        "id": "4be07427145490ba",
        "type": "delay",
        "z": "31ab9164236cebec",
        "name": "1",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 820,
        "wires": [
            [
                "94029650daf25211",
                "b2964e05d3e91530"
            ]
        ]
    },
    {
        "id": "e56c212d1c77a4b4",
        "type": "http request",
        "z": "31ab9164236cebec",
        "name": "Ping",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 820,
        "wires": [
            [
                "bae147551dbbc611"
            ]
        ]
    },
    {
        "id": "94029650daf25211",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "FileManager",
        "func": "const name = 'FileManager';\nconst port = 52446;\n\n\n// настройки\nconst url = 'http://localhost'\nconst path = '/api/ping'\n\n\nmsg.timeStart = new Date().getTime();\nmsg.name = name;\nmsg.url = `${url}:${port}${path}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\nglobal.set('FileManager', false);",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 820,
        "wires": [
            [
                "e56c212d1c77a4b4"
            ]
        ]
    },
    {
        "id": "b2964e05d3e91530",
        "type": "delay",
        "z": "31ab9164236cebec",
        "name": "1",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 860,
        "wires": [
            [
                "bfb7259343163f04",
                "6fed178d78678304"
            ]
        ]
    },
    {
        "id": "9601b355545859e7",
        "type": "http request",
        "z": "31ab9164236cebec",
        "name": "Ping",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 860,
        "wires": [
            [
                "bae147551dbbc611"
            ]
        ]
    },
    {
        "id": "bfb7259343163f04",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "BatchManagement",
        "func": "const name = 'BatchManagement';\nconst port = 52448;\n\n\n// настройки\nconst url = 'http://localhost'\nconst path = '/api/ping'\n\n\nmsg.timeStart = new Date().getTime();\nmsg.name = name;\nmsg.url = `${url}:${port}${path}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\nglobal.set('BatchManagement', false);",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 860,
        "wires": [
            [
                "9601b355545859e7"
            ]
        ]
    },
    {
        "id": "6fed178d78678304",
        "type": "delay",
        "z": "31ab9164236cebec",
        "name": "1",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 900,
        "wires": [
            [
                "023a086d026e90ce",
                "1930c8bdc61212d4"
            ]
        ]
    },
    {
        "id": "cc27b8b6a95f56ac",
        "type": "http request",
        "z": "31ab9164236cebec",
        "name": "Ping",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 900,
        "wires": [
            [
                "bae147551dbbc611"
            ]
        ]
    },
    {
        "id": "023a086d026e90ce",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "ProductionManagement",
        "func": "const name = 'ProductionManagement';\nconst port = 52449;\n\n\n// настройки\nconst url = 'http://localhost'\nconst path = '/api/ping'\n\n\nmsg.timeStart = new Date().getTime();\nmsg.name = name;\nmsg.url = `${url}:${port}${path}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\nglobal.set('ProductionManagement', false);",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 900,
        "wires": [
            [
                "cc27b8b6a95f56ac"
            ]
        ]
    },
    {
        "id": "1930c8bdc61212d4",
        "type": "delay",
        "z": "31ab9164236cebec",
        "name": "1",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 940,
        "wires": [
            [
                "2e9bec5f88457402",
                "c73af6afb74a68b1"
            ]
        ]
    },
    {
        "id": "6c3fc79b48fe924e",
        "type": "http request",
        "z": "31ab9164236cebec",
        "name": "Ping",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 940,
        "wires": [
            [
                "bae147551dbbc611"
            ]
        ]
    },
    {
        "id": "2e9bec5f88457402",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "DisplayManagement",
        "func": "const name = 'DisplayManagement';\nconst port = 52452;\n\n\n// настройки\nconst url = 'http://localhost'\nconst path = '/api/ping'\n\n\nmsg.timeStart = new Date().getTime();\nmsg.name = name;\nmsg.url = `${url}:${port}${path}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\nglobal.set('DisplayManagement', false);",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 940,
        "wires": [
            [
                "6c3fc79b48fe924e"
            ]
        ]
    },
    {
        "id": "c73af6afb74a68b1",
        "type": "delay",
        "z": "31ab9164236cebec",
        "name": "1",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 980,
        "wires": [
            [
                "3e03509d5844d497",
                "1d78da4cc6d7bc4b"
            ]
        ]
    },
    {
        "id": "5c715ead1aab6bfd",
        "type": "http request",
        "z": "31ab9164236cebec",
        "name": "Ping",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 980,
        "wires": [
            [
                "bae147551dbbc611"
            ]
        ]
    },
    {
        "id": "3e03509d5844d497",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "ServiceManager",
        "func": "const name = 'ServiceManager';\nconst port = 52453;\n\n\n// настройки\nconst url = 'http://localhost'\nconst path = '/api/ping'\n\n\nmsg.timeStart = new Date().getTime();\nmsg.name = name;\nmsg.url = `${url}:${port}${path}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\nglobal.set('ServiceManager', false);",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 980,
        "wires": [
            [
                "5c715ead1aab6bfd"
            ]
        ]
    },
    {
        "id": "1d78da4cc6d7bc4b",
        "type": "delay",
        "z": "31ab9164236cebec",
        "name": "1",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 1020,
        "wires": [
            [
                "3bab47fcad2f7d9d",
                "036144b9a18968e6"
            ]
        ]
    },
    {
        "id": "47fef28a43a455f9",
        "type": "http request",
        "z": "31ab9164236cebec",
        "name": "Ping",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 1020,
        "wires": [
            [
                "bae147551dbbc611"
            ]
        ]
    },
    {
        "id": "3bab47fcad2f7d9d",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "IncidentManager",
        "func": "const name = 'IncidentManager';\nconst port = 52455;\n\n\n// настройки\nconst url = 'http://localhost'\nconst path = '/api/ping'\n\n\nmsg.timeStart = new Date().getTime();\nmsg.name = name;\nmsg.url = `${url}:${port}${path}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\nglobal.set('IncidentManager', false);",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1020,
        "wires": [
            [
                "47fef28a43a455f9"
            ]
        ]
    },
    {
        "id": "036144b9a18968e6",
        "type": "delay",
        "z": "31ab9164236cebec",
        "name": "1",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 1060,
        "wires": [
            [
                "8c338b664d5cd769"
            ]
        ]
    },
    {
        "id": "5b1d6c95c742e89e",
        "type": "http request",
        "z": "31ab9164236cebec",
        "name": "Ping",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 1060,
        "wires": [
            [
                "bae147551dbbc611"
            ]
        ]
    },
    {
        "id": "8c338b664d5cd769",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "Reception",
        "func": "const name = 'Reception';\nconst port = 52461;\n\n\n// настройки\nconst url = 'http://localhost'\nconst path = '/api/ping'\n\n\nmsg.timeStart = new Date().getTime();\nmsg.name = name;\nmsg.url = `${url}:${port}${path}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\nglobal.set('Reception', false);",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1060,
        "wires": [
            [
                "5b1d6c95c742e89e"
            ]
        ]
    },
    {
        "id": "fe7dfcb73d2c37ab",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "Create Msg",
        "func": "const all = global.get('firstRun');\nconst server = global.get('server');\n\nconst icon = {\n    true: '✅',\n    false: '🛑'\n}\n\nlet message = ``;\n\nfor (let item of msg.response) {\n    if (item.isChange || all) {\n        message += `${icon[item.ok]} ${item.serviceName} (${item.time}ms)  \\r\\n`;\n    }\n}\n\nlet chatId = '';\n\nif (msg.topic !== 'auto' && !!msg.chatId) {\n    chatId = msg.chatId;\n} else {\n    chatId = -4054697456;//486991331; //\n}\n\nmsg.message = message;\n\nmsg.payload = {\n    content: message,\n    chatId: chatId,\n    type: 'message',\n    options: {\n        parse_mode: 'HTML'\n    }\n}\n\nglobal.set('firstRun', false);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 580,
        "wires": [
            [
                "89e23be9765c3332",
                "354f306a0cf41b7d",
                "725248f0bb1683f5"
            ]
        ]
    },
    {
        "id": "c8cfcfef1ea5f174",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "Settings",
        "func": "if (!!msg.payload.chatId) {\n    msg.chatId = msg.payload.chatId;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\nglobal.set('firstRun', false);\nglobal.set('server', 'Develop_226');",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 320,
        "wires": [
            [
                "c81ace9bb68530b2",
                "e22a90d2c8c292c8"
            ]
        ]
    },
    {
        "id": "173e2584df81fa21",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "Setup",
        "func": "global.set('firstRun', true);\nmsg.noSend = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 360,
        "wires": [
            [
                "c8cfcfef1ea5f174"
            ]
        ]
    },
    {
        "id": "e47496e25b5a32bc",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "function 1",
        "func": "msg.topic = \n\"SELECT serviceName, \\\n       JSON_GROUP_ARRAY(status) AS status_history \\\nFROM ServiceStatus \\\nWHERE dateChecked >= date('now', '-60 days') \\\nGROUP BY serviceName;\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 580,
        "wires": [
            [
                "c3bf94f311548d73"
            ]
        ]
    },
    {
        "id": "89e23be9765c3332",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "SQL",
        "func": "\nlet b = '';\nfor (const item of msg.response) {\n    b += `('${item.serviceName}', '${item.ok.toString()}', DATE('now')), `\n}\nb = b.slice(0, -2);\n\nconst a = 'INSERT INTO ServiceStatus (serviceName, status, dateChecked) VALUES ';\nconst c = ' ON CONFLICT(serviceName, dateChecked) DO UPDATE SET status=excluded.status';\n\nmsg.topic = a + b + c;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 340,
        "wires": [
            [
                "6e6194f7308cb9b2"
            ]
        ]
    },
    {
        "id": "04230879b2017a37",
        "type": "http in",
        "z": "31ab9164236cebec",
        "name": "",
        "url": "/api/ping",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1170,
        "y": 540,
        "wires": [
            [
                "e47496e25b5a32bc"
            ]
        ]
    },
    {
        "id": "ce3bf8351036b541",
        "type": "http response",
        "z": "31ab9164236cebec",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1150,
        "y": 680,
        "wires": []
    },
    {
        "id": "1c595b34ef405806",
        "type": "websocket out",
        "z": "31ab9164236cebec",
        "name": "",
        "server": "222c41f74918bbe8",
        "client": "",
        "x": 1290,
        "y": 440,
        "wires": []
    },
    {
        "id": "354f306a0cf41b7d",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "WS",
        "func": "msg.payload = msg.response;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 440,
        "wires": [
            [
                "1c595b34ef405806"
            ]
        ]
    },
    {
        "id": "74c1b408dfb5e7c2",
        "type": "http in",
        "z": "31ab9164236cebec",
        "name": "",
        "url": "/api/ping/ws",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1180,
        "y": 140,
        "wires": [
            [
                "fbd5173afd327e67"
            ]
        ]
    },
    {
        "id": "fbd5173afd327e67",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "Setup",
        "func": "global.set('firstRun', true);\nmsg.noSend = true;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 180,
        "wires": [
            [
                "c8cfcfef1ea5f174"
            ]
        ]
    },
    {
        "id": "725248f0bb1683f5",
        "type": "switch",
        "z": "31ab9164236cebec",
        "name": "",
        "property": "noSend",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 850,
        "y": 620,
        "wires": [
            [
                "c943cbb0ef42af52"
            ]
        ]
    },
    {
        "id": "5d40ac377a659212",
        "type": "function",
        "z": "31ab9164236cebec",
        "name": "Setup",
        "func": "\nmsg.noSend = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 160,
        "wires": [
            [
                "c8cfcfef1ea5f174"
            ]
        ]
    },
    {
        "id": "8fbc9f9158d9c37f",
        "type": "comment",
        "z": "31ab9164236cebec",
        "name": "Request new data",
        "info": "",
        "x": 1190,
        "y": 100,
        "wires": []
    },
    {
        "id": "01196696f42e9f83",
        "type": "comment",
        "z": "31ab9164236cebec",
        "name": "Write to DB",
        "info": "",
        "x": 1170,
        "y": 300,
        "wires": []
    },
    {
        "id": "41301d3e833d3053",
        "type": "comment",
        "z": "31ab9164236cebec",
        "name": "Send actual data",
        "info": "",
        "x": 1180,
        "y": 400,
        "wires": []
    },
    {
        "id": "0f272aa6f8b46299",
        "type": "comment",
        "z": "31ab9164236cebec",
        "name": "Send historical data",
        "info": "",
        "x": 1190,
        "y": 500,
        "wires": []
    },
    {
        "id": "665f79a7a02a6520",
        "type": "cronplus",
        "z": "31ab9164236cebec",
        "d": true,
        "name": "Cron",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "auto",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */10 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 190,
        "y": 140,
        "wires": [
            [
                "5d40ac377a659212"
            ]
        ]
    },
    {
        "id": "8644b38279ce8bea",
        "type": "telegram command",
        "z": "31ab9164236cebec",
        "name": "",
        "command": "/check",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "a64df35521da0350",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 870,
        "y": 300,
        "wires": [
            [
                "173e2584df81fa21"
            ],
            []
        ]
    },
    {
        "id": "c943cbb0ef42af52",
        "type": "telegram sender",
        "z": "31ab9164236cebec",
        "name": "Send Message",
        "bot": "a64df35521da0350",
        "haserroroutput": false,
        "outputs": 1,
        "x": 860,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "6e6194f7308cb9b2",
        "type": "sqlite",
        "z": "31ab9164236cebec",
        "mydb": "1747653260eb100c",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Write",
        "x": 1270,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "c3bf94f311548d73",
        "type": "sqlite",
        "z": "31ab9164236cebec",
        "mydb": "1747653260eb100c",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Read",
        "x": 1150,
        "y": 620,
        "wires": [
            [
                "ce3bf8351036b541"
            ]
        ]
    },
    {
        "id": "a0cf78130b567910",
        "type": "inject",
        "z": "d97e10b66dcfec69",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "62720b9f24d722f0"
            ]
        ]
    },
    {
        "id": "a0bee20e8f884b0f",
        "type": "debug",
        "z": "d97e10b66dcfec69",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 80,
        "wires": []
    },
    {
        "id": "25633f038dbc8f54",
        "type": "inject",
        "z": "d97e10b66dcfec69",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "84913d9ce43e947c"
            ]
        ]
    },
    {
        "id": "6d133d2f3047e46a",
        "type": "debug",
        "z": "d97e10b66dcfec69",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 220,
        "wires": []
    },
    {
        "id": "23c8210d4af3a8ce",
        "type": "function",
        "z": "d97e10b66dcfec69",
        "name": "listInit",
        "func": "node.warn('ListInit after Net connection');\nnode.warn(msg.payload);\nmsg.list = [];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 80,
        "wires": [
            [
                "380a459e9e47fdbb"
            ]
        ]
    },
    {
        "id": "e5a62f5c513ea5fb",
        "type": "function",
        "z": "d97e10b66dcfec69",
        "name": "PrepareNetUseCommand",
        "func": "\nlet networkResource = \"G: \\\\\\\\10.36.96.70\\\\Log\"\nmsg.payload = \"net use \" + networkResource + \" /user:Hochland\\\\C-Solisoft_RA5 A70C0C9A35-\"\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 420,
        "wires": [
            [
                "4a714b09e6ea8115"
            ]
        ]
    },
    {
        "id": "bed8c6b12a8e419e",
        "type": "debug",
        "z": "d97e10b66dcfec69",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "allFolders",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 420,
        "wires": []
    },
    {
        "id": "a9ad29b672143c78",
        "type": "inject",
        "z": "d97e10b66dcfec69",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 420,
        "wires": [
            [
                "e5a62f5c513ea5fb"
            ]
        ]
    },
    {
        "id": "0a94d021bae70cfa",
        "type": "exec",
        "z": "d97e10b66dcfec69",
        "command": "net use G: /DELETE",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "delete",
        "x": 390,
        "y": 560,
        "wires": [
            [],
            [
                "ae27992cfc2cbbc4"
            ],
            []
        ]
    },
    {
        "id": "b3b1c33e864c34df",
        "type": "inject",
        "z": "d97e10b66dcfec69",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 560,
        "wires": [
            [
                "0a94d021bae70cfa"
            ]
        ]
    },
    {
        "id": "ae27992cfc2cbbc4",
        "type": "debug",
        "z": "d97e10b66dcfec69",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 560,
        "wires": []
    },
    {
        "id": "4a714b09e6ea8115",
        "type": "exec",
        "z": "d97e10b66dcfec69",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "execNetUse",
        "x": 630,
        "y": 420,
        "wires": [
            [
                "fe4cc7e4f49a6427"
            ],
            [],
            []
        ]
    },
    {
        "id": "fe4cc7e4f49a6427",
        "type": "delay",
        "z": "d97e10b66dcfec69",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 820,
        "y": 420,
        "wires": [
            [
                "92a444a277589ea3",
                "60ad4d97e86167e9"
            ]
        ]
    },
    {
        "id": "895b3d32ded7664b",
        "type": "debug",
        "z": "d97e10b66dcfec69",
        "name": "debug 11",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "allFiles",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 480,
        "wires": []
    },
    {
        "id": "c72108e4f03fb656",
        "type": "inject",
        "z": "d97e10b66dcfec69",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "test message",
        "payload": "this is a test message",
        "payloadType": "str",
        "x": 240,
        "y": 700,
        "wires": [
            [
                "a63a4be16ca34818",
                "bac169d0d6e12ee5"
            ]
        ]
    },
    {
        "id": "bac169d0d6e12ee5",
        "type": "debug",
        "z": "d97e10b66dcfec69",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 760,
        "wires": []
    },
    {
        "id": "b69892fd27789b6c",
        "type": "catch",
        "z": "d97e10b66dcfec69",
        "d": true,
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 200,
        "y": 900,
        "wires": [
            [
                "5cfe6dc7cd1ef350"
            ]
        ]
    },
    {
        "id": "0f956b608493f7d6",
        "type": "debug",
        "z": "d97e10b66dcfec69",
        "name": "Debug Save Catch Data",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 900,
        "wires": []
    },
    {
        "id": "5cfe6dc7cd1ef350",
        "type": "subflow:f8fc59a8d3d93ef9",
        "z": "d97e10b66dcfec69",
        "name": "",
        "x": 410,
        "y": 900,
        "wires": [
            [
                "0f956b608493f7d6"
            ]
        ]
    },
    {
        "id": "380a459e9e47fdbb",
        "type": "fs-list",
        "z": "d97e10b66dcfec69",
        "name": "FSListNet",
        "path": "\\\\10.36.96.70\\Log\\\\",
        "pathType": "str",
        "pattern": "*",
        "patternType": "str",
        "filter": "all",
        "recursive": false,
        "follow": true,
        "property": "allFolders",
        "propertyType": "msg",
        "x": 780,
        "y": 80,
        "wires": [
            [
                "a0bee20e8f884b0f"
            ]
        ]
    },
    {
        "id": "92a444a277589ea3",
        "type": "fs-list",
        "z": "d97e10b66dcfec69",
        "name": "FSFolders",
        "path": "G:\\\\",
        "pathType": "str",
        "pattern": "*",
        "patternType": "str",
        "filter": "folders",
        "recursive": false,
        "follow": true,
        "property": "allFolders",
        "propertyType": "msg",
        "x": 1030,
        "y": 420,
        "wires": [
            [
                "bed8c6b12a8e419e"
            ]
        ]
    },
    {
        "id": "60ad4d97e86167e9",
        "type": "fs-list",
        "z": "d97e10b66dcfec69",
        "name": "FSFiles",
        "path": "G:\\\\fetaxa\\",
        "pathType": "str",
        "pattern": "*",
        "patternType": "str",
        "filter": "files",
        "recursive": false,
        "follow": true,
        "property": "allFiles",
        "propertyType": "msg",
        "x": 1020,
        "y": 480,
        "wires": [
            [
                "895b3d32ded7664b"
            ]
        ]
    },
    {
        "id": "62720b9f24d722f0",
        "type": "SMB",
        "z": "d97e10b66dcfec69",
        "name": "read filed",
        "config": "5f7a5f9954426220",
        "operation": "read-dir",
        "path": "",
        "path_new": "",
        "format": "string",
        "x": 400,
        "y": 80,
        "wires": [
            [
                "23c8210d4af3a8ce"
            ]
        ]
    },
    {
        "id": "84913d9ce43e947c",
        "type": "SMB",
        "z": "d97e10b66dcfec69",
        "name": "read filed",
        "config": "5f7a5f9954426220",
        "operation": "read-dir",
        "path": "",
        "path_new": "",
        "format": "string",
        "x": 380,
        "y": 220,
        "wires": [
            [
                "6d133d2f3047e46a"
            ]
        ]
    },
    {
        "id": "a63a4be16ca34818",
        "type": "e-mail",
        "z": "d97e10b66dcfec69",
        "server": "hl-smtp.hochland.com",
        "port": "25",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": false,
        "tls": false,
        "name": "rutsky.d@gmail.com",
        "dname": "mail-test",
        "x": 480,
        "y": 700,
        "wires": []
    },
    {
        "id": "a838df702b23cae0",
        "type": "inject",
        "z": "68b965bc92482715",
        "d": true,
        "name": "каждый день в 21",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 21 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Scheduler\":{\"Id\":\"64bb64c7-c024-4836-a59f-4b52b3a85938\",\"SchedulerId\":\"60e1c0ad-327d-49d0-a3be-30ed2557f432\",\"CreationDateTime\":\"2024-01-04T18:06:00.6148132Z\"}}",
        "payloadType": "json",
        "x": 170,
        "y": 180,
        "wires": [
            [
                "eb15877042c8eb52",
                "fa44782637a87d21"
            ]
        ]
    },
    {
        "id": "bdd523eb497b37b3",
        "type": "inject",
        "z": "68b965bc92482715",
        "d": true,
        "name": "каждый день в 6",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 06 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Scheduler\":{\"Id\":\"64bb64c7-c024-4836-a59f-4b52b3a85938\",\"SchedulerId\":\"DA7BB92E-0D30-4F72-83B5-3717536746F2\",\"CreationDateTime\":\"2024-01-04T18:06:00.6148132Z\"}}",
        "payloadType": "json",
        "x": 170,
        "y": 260,
        "wires": [
            [
                "eb15877042c8eb52",
                "fa44782637a87d21"
            ]
        ]
    },
    {
        "id": "27f49f76c04024e6",
        "type": "inject",
        "z": "68b965bc92482715",
        "d": true,
        "name": "каждый день в 8",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 08 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Scheduler\":{\"Id\":\"64bb64c7-c024-4836-a59f-4b52b3a85938\",\"SchedulerId\":\"B1274E0D-6F10-4DA6-8F21-6911AEFF7E72\",\"CreationDateTime\":\"2024-01-04T18:06:00.6148132Z\"}}",
        "payloadType": "json",
        "x": 170,
        "y": 320,
        "wires": [
            [
                "eb15877042c8eb52",
                "fa44782637a87d21"
            ]
        ]
    },
    {
        "id": "711772b9e8acdc90",
        "type": "inject",
        "z": "68b965bc92482715",
        "d": true,
        "name": "каждый день в 23",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Scheduler\":{\"Id\":\"64bb64c7-c024-4836-a59f-4b52b3a85938\",\"SchedulerId\":\"6606F879-5355-4F2D-B3BB-8FBECB6D76EC\",\"CreationDateTime\":\"2024-01-04T18:06:00.6148132Z\"}}",
        "payloadType": "json",
        "x": 170,
        "y": 360,
        "wires": [
            [
                "eb15877042c8eb52",
                "fa44782637a87d21"
            ]
        ]
    },
    {
        "id": "ab9a603929c71f42",
        "type": "inject",
        "z": "68b965bc92482715",
        "d": true,
        "name": "каждый день в 9",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 09 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Scheduler\":{\"Id\":\"64bb64c7-c024-4836-a59f-4b52b3a85938\",\"SchedulerId\":\"16E1FC04-3C48-49CA-9787-9BEA65E23BA1\",\"CreationDateTime\":\"2024-01-04T18:06:00.6148132Z\"}}",
        "payloadType": "json",
        "x": 170,
        "y": 420,
        "wires": [
            [
                "eb15877042c8eb52",
                "fa44782637a87d21"
            ]
        ]
    },
    {
        "id": "eb15877042c8eb52",
        "type": "amqp-out",
        "z": "68b965bc92482715",
        "d": true,
        "name": "",
        "broker": "6797e8f5ccec93cf",
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "SchedulerEventForChecklist",
        "exchangeRoutingKeyType": "str",
        "exchangeDurable": true,
        "amqpProperties": "{ \"headers\": {} }",
        "rpcTimeoutMilliseconds": 3000,
        "outputs": 0,
        "x": 580,
        "y": 240,
        "wires": []
    },
    {
        "id": "fa44782637a87d21",
        "type": "amqp-out",
        "z": "68b965bc92482715",
        "d": true,
        "name": "",
        "broker": "6797e8f5ccec93cf",
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "SchedulerEventToTaskManagement",
        "exchangeRoutingKeyType": "str",
        "exchangeDurable": true,
        "amqpProperties": "{ \"headers\": {} }",
        "rpcTimeoutMilliseconds": 3000,
        "outputs": 0,
        "x": 610,
        "y": 340,
        "wires": []
    },
    {
        "id": "fa3a6aed0d162a35",
        "type": "function",
        "z": "6706bca3af779f31",
        "name": "Subject",
        "func": "msg.topic = \"Несоответствие показателям (\" + msg.DeliveryData[0].szName + \"-\" + msg.DeliveryData[0].szDescription + \",\" + msg.DeliveryData[0].NumberSAP + \")\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 240,
        "wires": [
            [
                "36e5d3b3cb99e5cc"
            ]
        ]
    },
    {
        "id": "2709cc87ccce76ca",
        "type": "template",
        "z": "6706bca3af779f31",
        "name": "Body Email",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<html>\n\n<head></head>\n\n<body>\n    <table border=\"1\" cellspacing=\"0\" class=\"MsoTableGrid\"\n        style=\"border-collapse:collapse; border:solid windowtext 1.0pt; width:1011px\">\n        <tbody>\n            <tr>\n                <td style=\"background-color:#d9e2f3; width:49.4pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\">Артикул</span></span>\n                    </p>\n                </td>\n                <td style=\"background-color:#d9e2f3; width:120.45pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\"><span style=\"color:black\">Наименование</span></span></span>\n                    </p>\n                </td>\n                <td style=\"background-color:#d9e2f3; width:70.9pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\"><span style=\"color:black\">Код поставщика</span></span></span>\n                    </p>\n                </td>\n                <td style=\"background-color:#d9e2f3; width:92.15pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\"><span style=\"color:black\">Поставщик</span></span></span>\n                    </p>\n                </td>\n                <td style=\"background-color:#d9e2f3; width:3.0cm\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\"><span style=\"color:black\">Производитель</span></span></span>\n                    </p>\n                </td>\n                <td style=\"background-color:#d9e2f3; width:49.6pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\"><span style=\"color:black\">№ партии производителя</span></span></span>\n                    </p>\n                </td>\n                <td style=\"background-color:#d9e2f3; width:77.95pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\"><span style=\"color:black\">Дата производства</span></span></span>\n                    </p>\n                </td>\n                <td style=\"background-color:#d9e2f3; width:70.9pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\"><span style=\"color:black\">Дата приёмки на склад</span></span></span>\n                    </p>\n                </td>\n                <td style=\"background-color:#d9e2f3; width:63.75pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\"><span style=\"color:black\">Партия SAP</span></span></span>\n                    </p>\n                </td>\n                <td style=\"background-color:#d9e2f3; width:78.0pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\"><span style=\"color:black\">Номер КЗ</span></span></span>\n                    </p>\n                </td>\n            </tr>\n            <tr>\n                <td style=\"width:49.4pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\">{{{DeliveryData.0.szName}}}</span></span></p>\n                </td>\n                <td style=\"width:120.45pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\">{{{DeliveryData.0.szDescription}}}</span></span>\n                    </p>\n                </td>\n                <td style=\"width:70.9pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\">{{{DeliveryData.0.Counterparty}}}</span></span></p>\n                </td>\n                <td style=\"width:92.15pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\">{{{DeliveryData.0.CounterpartyName}}}</span></span>\n                    </p>\n                </td>\n                <td style=\"width:3.0cm\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\">{{{DeliveryData.0.ProducerName}}}</span></span>\n                    </p>\n                </td>\n                <td style=\"width:49.6pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\">{{{DeliveryData.0.SupplierNumber}}}</span></span></p>\n                </td>\n                <td style=\"width:77.95pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\">{{{DeliveryData.0.BatchComment}}}</span></span>\n                    </p>\n                </td>\n                <td style=\"width:70.9pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\">{{{DeliveryData.0.dtMeasuredAt}}}</span></span>\n                    </p>\n                </td>\n                <td style=\"width:63.75pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\">{{{DeliveryData.0.NumberSAP}}}</span></span></p>\n                </td>\n                <td style=\"width:78.0pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\">{{{DeliveryData.0.ILNumber}}}</span></span>\n                    </p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n\n    <p>&nbsp;</p>\n\n    <p style=\"margin-left:0cm; margin-right:0cm\">&nbsp;</p>\n\n    <table border=\"1\" cellspacing=\"0\" class=\"MsoTableGrid\"\n        style=\"border-collapse:collapse; border:solid windowtext 1.0pt\">\n        <tbody>\n            <tr>\n                <td style=\"background-color:#e2efd9; width:130pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\">Анализ</span></span>\n                    </p>\n                </td>\n                <td style=\"background-color:#e2efd9; width:130pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\"><span style=\"color:black\">Значение</span></span></span>\n                    </p>\n                </td>\n                <td style=\"background-color:#e2efd9; width:130pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\"><span style=\"color:black\">Спецификация</span></span></span>\n                    </p>\n                </td>\n            </tr>\n            {{{Row}}}\n        </tbody>\n    </table>\n</body>\n\n</html>",
        "output": "str",
        "x": 690,
        "y": 240,
        "wires": [
            [
                "fa3a6aed0d162a35"
            ]
        ]
    },
    {
        "id": "31bc722f8f23a29e",
        "type": "json",
        "z": "6706bca3af779f31",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 270,
        "y": 100,
        "wires": [
            [
                "a17898794a07325d"
            ]
        ]
    },
    {
        "id": "1cb240142351c62e",
        "type": "debug",
        "z": "6706bca3af779f31",
        "name": "debug 23",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 300,
        "wires": []
    },
    {
        "id": "acb59aa820e0c568",
        "type": "switch",
        "z": "6706bca3af779f31",
        "name": "gDeliveryId != NULL",
        "property": "DeliveryData[0].gDeliveryId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1240,
        "y": 100,
        "wires": [
            [
                "e0f0fc83510aaaea"
            ]
        ]
    },
    {
        "id": "a4c660edf3caca36",
        "type": "inject",
        "z": "6706bca3af779f31",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Workflow\":\"HochlandIngredientsReceptionDeliveryItemWorkflow\",\"WorkflowId\":\"64B11E69-E015-4CBB-B2C0-C14D1B3890DB\",\"Step\":\"CompleteNotOk\",\"TimeStamp\":\"2023-12-27T13:26:03.5539433Z\"}",
        "payloadType": "json",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "31bc722f8f23a29e"
            ]
        ]
    },
    {
        "id": "a17898794a07325d",
        "type": "switch",
        "z": "6706bca3af779f31",
        "name": "Workflow = IngredientsReception",
        "property": "payload.Workflow",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "IngredientsReception",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 480,
        "y": 100,
        "wires": [
            [
                "5e0238353f3ad118"
            ]
        ]
    },
    {
        "id": "c0ba685ce9484b52",
        "type": "function",
        "z": "6706bca3af779f31",
        "name": "AnalysisDataRow",
        "func": "var BodyAll = '';\nvar BodyRowStart ='<tr>';\nvar BodyFieldStart = '<td style=\"vertical-align: top; width: 130pt\"><p style=\"margin - left: 0cm; margin - right: 0cm\"><span style=\"font - size: 11pt\"><span style=\"font - family: Calibri, sans - serif\">';\nvar BodyFieldStop ='</span></span></p></td>';\nvar BodyRowStop ='</tr>'; \nfor (var i=0; i<msg.AnalysisData.length; i++)\n        {\n        BodyAll = BodyAll + BodyRowStart + BodyFieldStart + msg.AnalysisData[i].szDescription + BodyFieldStop + BodyFieldStart + msg.AnalysisData[i].szValue + BodyFieldStop + BodyFieldStart + msg.AnalysisData[i].szLevel + BodyFieldStop + BodyRowStop                                    \n        }\nmsg.Row = BodyAll; \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 240,
        "wires": [
            [
                "2709cc87ccce76ca"
            ]
        ]
    },
    {
        "id": "a45fe8b6cacb0601",
        "type": "function",
        "z": "6706bca3af779f31",
        "name": "to",
        "func": "msg.to = msg.Email[0].toEmail;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 240,
        "wires": [
            [
                "f836fc99a2c7d418",
                "1cb240142351c62e"
            ]
        ]
    },
    {
        "id": "5e0238353f3ad118",
        "type": "switch",
        "z": "6706bca3af779f31",
        "name": "Step = CompleteNotOk",
        "property": "payload.Step",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "CompleteNotOk",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 790,
        "y": 100,
        "wires": [
            [
                "470ef9641ed6cb18"
            ]
        ]
    },
    {
        "id": "0f79baab5fa10180",
        "type": "comment",
        "z": "6706bca3af779f31",
        "name": "PZo",
        "info": "",
        "x": 70,
        "y": 40,
        "wires": []
    },
    {
        "id": "cf743763cca914c8",
        "type": "amqp-in",
        "z": "6706bca3af779f31",
        "name": "WorkflowEvent",
        "broker": "2f76d8b874d08554",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "NR_WorkflowEventEmail",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 100,
        "y": 100,
        "wires": [
            [
                "31bc722f8f23a29e"
            ]
        ]
    },
    {
        "id": "470ef9641ed6cb18",
        "type": "MSSQL",
        "z": "6706bca3af779f31",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Get DeliveryId",
        "outField": "DeliveryData",
        "returnType": "0",
        "throwErrors": 1,
        "query": "DECLARE @gInspLotId uniqueidentifier,@Batch uniqueidentifier,@gIM uniqueidentifier,@gDelivery uniqueidentifier,@nIMLink int,@szILNumber nvarchar(255),@dtIM datetime,@szNumberSAP nvarchar(255),@BatchComment nvarchar(255),@SupplierNumber int\r\nSELECT @gInspLotId=Reference FROM [HLRURASAP99].[WorkflowData].[wfc].[Workflow] WHERE InstanceId='{{{payload.WorkflowId}}}'\r\nSELECT @Batch=gBatchId,@gIM =gInspectionMeasurementId,@szILNumber=szFullNumber FROM [HLRURASAP99].[BatchManagementDb].[dbo].[tblInspectionLot] WHERE gId=@gInspLotId\r\nSELECT @nIMLink=nKey,@dtIM=dtMeasuredAt FROM [HLRURASAP99].[QARunTimeData].[dbo].[tblInspectionMeasurement] WHERE gId=@gIM AND bIsCompleted=1 AND nUsageDecision = 2\r\nIF @nIMLink IS NOT NULL\r\n\tBEGIN\r\n\t\tSELECT @gDelivery=gDeliveryId,@szNumberSAP=szNumberSAP,@BatchComment=szComment FROM [HLRURASAP99].[BatchManagementDb].[dbo].[tblBatch] WHERE gId=@Batch\r\n\t\tSELECT @SupplierNumber =CAST(nNumericValue as int) FROM [HLRURASAP99].[QARunTimeData].[dbo].[tblInspectionCharacteristicValue] WHERE gInspectionMeasurementId = @gIM AND szCode=N'Номер партии производителя'\r\n\t\tSELECT m.szName,m.szDescription,c.szCode as 'Counterparty',c.szName as 'CounterpartyName',p.szName as 'ProducerName'\r\n\t\t\t,format(CAST(d.dtActualDelivery AS datetime)+'03:00:00','dd-MM-yyyy HH:mm') as 'dtMeasuredAt',@szNumberSAP as 'NumberSAP',@szILNumber as 'ILNumber',@SupplierNumber as 'SupplierNumber'\r\n\t\t\t,@BatchComment as 'BatchComment',@gDelivery as 'gDeliveryId',@gIM as 'gIMId',d.gAccessId\r\n\t\tFROM [HLRURASAP99].[ReceptionRuntime].[dbo].[tblDelivery] d\r\n\t\t\tINNER JOIN [BaseClassifiers].[dbo].[tblMaterial] m ON m.gId=d.gMaterialId\r\n\t\t\tINNER JOIN [BaseClassifiers].[dbo].[tblCounterparty] c ON c.gId=d.gCounterpartyId\r\n\t\t\tLEFT JOIN [ReceptionMasterData].[dbo].[tblProducers] p ON p.gId=d.gProducerId\r\n\t\tWHERE d.gId=@gDelivery\r\n\tEND\r\n\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "gInspLotId",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "0",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 1020,
        "y": 100,
        "wires": [
            [
                "acb59aa820e0c568"
            ]
        ]
    },
    {
        "id": "e0f0fc83510aaaea",
        "type": "MSSQL",
        "z": "6706bca3af779f31",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Get InspcharValue",
        "outField": "AnalysisData",
        "returnType": "0",
        "throwErrors": 1,
        "query": "SELECT icv.szCode,icv.szDescription,ISNULL(cv.szValue,CAST(icv.nNumericValue as decimal(18,2))) as 'szValue'\r\n\t\t,CASE \r\n\t\t\tWHEN icv.nNumericValue IS NOT NULL \r\n\t\t\tTHEN  ISNULL(CAST(CAST(icv.nNumericLVL as decimal(18,2)) as nvarchar(21)),N'-∞') + '...' \r\n\t\t\t\t+ ISNULL(CAST(CAST(icv.nNumericLL as decimal(18,2)) as nvarchar(21)),N'') + '...'\r\n\t\t\t\t+ ISNULL(CAST(CAST(icv.nNumericUL as decimal(18,2)) as nvarchar(21)),N'') + '...'\r\n\t\t\t\t+ ISNULL(CAST(CAST(icv.nNumericUVL as decimal(18,2)) as nvarchar(21)),N'∞')\r\n\t\tELSE '' \r\n\t\tEND as 'szLevel'\t\t\r\nFROM [HLRURASAP99].[QARunTimeData].[dbo].[tblInspectionCharacteristicValue] icv\r\n  LEFT JOIN [BaseClassifiers].[dbo].[tblCatalogValue] cv ON cv.gId=icv.gCatalogValueId\r\nWHERE nUsageDecision =2 AND gInspectionMeasurementId='{{{DeliveryData.0.gIMId}}}'\r\n ",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "gInspLotId",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "0",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 170,
        "y": 240,
        "wires": [
            [
                "c0ba685ce9484b52"
            ]
        ]
    },
    {
        "id": "36e5d3b3cb99e5cc",
        "type": "MSSQL",
        "z": "6706bca3af779f31",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Get Email user",
        "outField": "Email",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @Emals VARCHAR(8000) \r\nSELECT @Emals=  COALESCE(@Emals+ '; ', '') + u.Email   \r\nFROM [UserManagement].[dbo].[AspNetUsers] u\r\n\tINNER JOIN [UserManagement].[dbo].[tblUserUserGroupRelation] r ON u.Id=r.UserId\r\n\tINNER JOIN [UserManagement].[dbo].[tblUserGroup] g ON g.gId=r.UserGroupId\r\n\tINNER JOIN [BaseClassifiers].[dbo].[tblUser2Plant] up ON up.gUserId=u.Id\r\nWHERE g.szName=N'QA Fault Email' AND u.Email IS NOT NULL AND up.gPlantId = @plantid\r\n\r\nSELECT @Emals as 'toEmail'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "plantid",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "DeliveryData[0].gAccessId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 1040,
        "y": 240,
        "wires": [
            [
                "a45fe8b6cacb0601"
            ]
        ]
    },
    {
        "id": "f836fc99a2c7d418",
        "type": "e-mail",
        "z": "6706bca3af779f31",
        "server": "hl-smtp.hochland.com",
        "port": "25",
        "authtype": "NONE",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": false,
        "tls": false,
        "name": "",
        "dname": "",
        "x": 1330,
        "y": 240,
        "wires": []
    },
    {
        "id": "3c3816485032917e",
        "type": "inject",
        "z": "e4049991eaeb177a",
        "name": "",
        "props": [
            {
                "p": "payload.ResearchId",
                "v": "C1B11271-930E-49F3-9422-08DCBE02D4E8",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 260,
        "y": 60,
        "wires": [
            [
                "d73f84183f25b5e9"
            ]
        ]
    },
    {
        "id": "bc0ebcf13ffd2bb2",
        "type": "template",
        "z": "e4049991eaeb177a",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Новое исследование</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        p {\n            font-size: 16px;\n            color: #555;\n        }\n        a {\n            color: #1a73e8;\n            text-decoration: none;\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n    </style>\n</head>\n<body>\n    <h1>Исследование {{{UserName}}} опубликовано!</h1>\n    <p>Опубликовано новое исследование. Чтобы перейти к нему, перейдите по следующей ссылке:</p>\n    <p><a href=\"https://test.com/{{{ResearchId}}}\" target=\"_blank\">Перейти к исследованию</a></p>\n</body>\n</html>",
        "output": "str",
        "x": 940,
        "y": 320,
        "wires": [
            [
                "43b7d1a369bb0e8d",
                "67a5fd83c9e6b325",
                "09d9a59fe83369c9"
            ]
        ]
    },
    {
        "id": "67a5fd83c9e6b325",
        "type": "debug",
        "z": "e4049991eaeb177a",
        "name": "debug 122",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 480,
        "wires": []
    },
    {
        "id": "8bf70b31bada5038",
        "type": "function",
        "z": "e4049991eaeb177a",
        "name": "Data",
        "func": "msg.ResearchName = msg.infoResearch[0].description;\nmsg.ResearchId = msg.infoResearch[0].id;\n\nmsg.topic = \"Опубликовано событие \" + msg.infoResearch[0].description;\nmsg.to = msg.loop.value.email;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 320,
        "wires": [
            [
                "bc0ebcf13ffd2bb2"
            ]
        ]
    },
    {
        "id": "c4c38a3484783618",
        "type": "http response",
        "z": "e4049991eaeb177a",
        "name": "http",
        "statusCode": "",
        "headers": {},
        "x": 1230,
        "y": 160,
        "wires": []
    },
    {
        "id": "c4cb6e6dba645715",
        "type": "amqp-in",
        "z": "e4049991eaeb177a",
        "name": "SurveyResearchPublish",
        "broker": "8ef9824f1e7254c9",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "SurveyResearchPublishEvent",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 280,
        "y": 160,
        "wires": [
            [
                "d73f84183f25b5e9"
            ]
        ]
    },
    {
        "id": "43b7d1a369bb0e8d",
        "type": "loop",
        "z": "e4049991eaeb177a",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "infoUsers",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-last",
        "x": 1010,
        "y": 160,
        "wires": [
            [
                "c4c38a3484783618"
            ],
            [
                "8bf70b31bada5038"
            ]
        ]
    },
    {
        "id": "d09a8f8de77a466c",
        "type": "MSSQL",
        "z": "e4049991eaeb177a",
        "mssqlCN": "4dc6d7677dad14e8",
        "name": "Get Users Info",
        "outField": "infoUsers",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @researchId uniqueidentifier = @researchIdInfo;\r\n\r\n-- Таблица переменных для хранения списка групп\r\nDECLARE @GroupList TABLE (\r\n    GroupName NVARCHAR(max)\r\n);\r\n\r\n-- Заполняем таблицу именами групп\r\nINSERT INTO @GroupList (GroupName)\r\nVALUES ('Дегустация'); -- Добавьте все необходимые группы\r\n\r\n-- Таблица для хранения идентификаторов пользователей\r\nDECLARE @ResulUsersFromParticipant TABLE (\r\n    gUserId uniqueidentifier\r\n);\r\n\r\n-- Получаем список активных пользователей относительно исследования\r\nINSERT INTO @ResulUsersFromParticipant\r\nSELECT DISTINCT p.gUserId\r\nFROM [SurveyRunTime].[dbo].[tblParticipant] AS p\r\nINNER JOIN [Survey].[dbo].[tblUser2Survey] AS u2s ON u2s.gUserId = p.gUserId\r\nWHERE p.gResearchId = @researchId AND u2s.bIsActive = 1;\r\n\r\n-- Получаем пользователей из групп с учетом списка выше\r\nSELECT u.Id as id, u.UserName as userName, u.Email as email\r\nFROM [UserManagement].[dbo].[AspNetUsers] AS u\r\nINNER JOIN [UserManagement].[dbo].[tblUserUserGroupRelation] AS ug ON u.Id = ug.UserId\r\nINNER JOIN [UserManagement].[dbo].[tblUserGroup] AS g ON ug.UserGroupId = g.gId\r\nWHERE g.szName IN (SELECT GroupName FROM @GroupList)\r\n  AND (u.Id IN (SELECT gUserId FROM @ResulUsersFromParticipant) \r\n       OR NOT EXISTS (SELECT 1 FROM @ResulUsersFromParticipant))\r\n  AND u.Email IS NOT NULL\r\n  AND LTRIM(RTRIM(u.Email)) <> '';",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "researchIdInfo",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "payload.ResearchId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 760,
        "y": 160,
        "wires": [
            [
                "43b7d1a369bb0e8d"
            ]
        ]
    },
    {
        "id": "d73f84183f25b5e9",
        "type": "MSSQL",
        "z": "e4049991eaeb177a",
        "mssqlCN": "4dc6d7677dad14e8",
        "name": "Get Info Research",
        "outField": "infoResearch",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @researchId uniqueidentifier = @researchIdInfo;\r\n\r\n-- Таблица переменных для хранения информации об исследовании\r\nDECLARE @ResearchInfo TABLE (\r\n    id uniqueidentifier,\r\n    description NVARCHAR(1024)\r\n);\r\n\r\n-- Получаем информацию об исследовании\r\nINSERT INTO @ResearchInfo (id, description)\r\nSELECT r.gId, r.szDescription\r\nFROM [SurveyRunTime].[dbo].[tblResearch] r\r\nWHERE r.gId = @researchId;\r\n\r\nIF NOT EXISTS (SELECT 1 FROM @ResearchInfo)\r\nBEGIN\r\n    -- Если запись не найдена, вызываем ошибку\r\n    RAISERROR ('Исследование с указанным ID не найдено.', 16, 1);\r\nEND\r\n\r\nSELECT * FROM @ResearchInfo;",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "researchIdInfo",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "payload.ResearchId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 550,
        "y": 160,
        "wires": [
            [
                "d09a8f8de77a466c"
            ]
        ]
    },
    {
        "id": "09d9a59fe83369c9",
        "type": "e-mail",
        "z": "e4049991eaeb177a",
        "server": "hl-smtp.hochland.com",
        "port": "25",
        "authtype": "NONE",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": false,
        "tls": false,
        "name": "",
        "dname": "",
        "x": 1190,
        "y": 320,
        "wires": []
    },
    {
        "id": "bdc00dc5a42e9fe0",
        "type": "debug",
        "z": "3e2ac01fe73e3c6a",
        "name": "debug 123",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 120,
        "wires": []
    },
    {
        "id": "31a6f24f20c9727c",
        "type": "amqp-in",
        "z": "3e2ac01fe73e3c6a",
        "name": "SurveyResearchPublish",
        "broker": "2f76d8b874d08554",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "SurveyResearchPublishEvent",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "bdc00dc5a42e9fe0"
            ]
        ]
    },
    {
        "id": "bd6c6061ea9c4a8d",
        "type": "http in",
        "z": "069222a25fd75e28",
        "name": "",
        "url": "/api/equipmentAllocation/:equipmentId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 400,
        "wires": [
            [
                "7655d271f53acf39",
                "715dfa4f34097c27"
            ]
        ]
    },
    {
        "id": "7655d271f53acf39",
        "type": "debug",
        "z": "069222a25fd75e28",
        "name": "debug 28",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 160,
        "wires": []
    },
    {
        "id": "421918dbd8a3b8cd",
        "type": "http in",
        "z": "069222a25fd75e28",
        "name": "",
        "url": "/api/equipmentAllocation/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 320,
        "wires": [
            [
                "f4429b10837269c9",
                "7655d271f53acf39"
            ]
        ]
    },
    {
        "id": "e9a01ce42f901dea",
        "type": "http in",
        "z": "069222a25fd75e28",
        "name": "",
        "url": "/api/equipmentAllocation/:equipmentId",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 480,
        "wires": [
            [
                "7655d271f53acf39",
                "d02ed04b84b53f61"
            ]
        ]
    },
    {
        "id": "2465de1302824f88",
        "type": "http response",
        "z": "069222a25fd75e28",
        "name": "http Result 200",
        "statusCode": "",
        "headers": {},
        "x": 1200,
        "y": 440,
        "wires": []
    },
    {
        "id": "d05a64b3af2ae846",
        "type": "http in",
        "z": "069222a25fd75e28",
        "name": "",
        "url": "/api/equipmentAllocation/:equipmentId",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 560,
        "wires": [
            [
                "f7086123d4a7447d",
                "7655d271f53acf39"
            ]
        ]
    },
    {
        "id": "45c45c9d898332f8",
        "type": "http response",
        "z": "069222a25fd75e28",
        "name": "",
        "statusCode": "500",
        "headers": {},
        "x": 1180,
        "y": 80,
        "wires": []
    },
    {
        "id": "760e2cd67d5123ed",
        "type": "function",
        "z": "069222a25fd75e28",
        "name": "Unforeseen Error",
        "func": "msg.payload = {\n    error: \"Непредвиденная ошибка\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 80,
        "wires": [
            [
                "45c45c9d898332f8"
            ]
        ]
    },
    {
        "id": "31da90d101be417f",
        "type": "catch",
        "z": "069222a25fd75e28",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 170,
        "y": 80,
        "wires": [
            [
                "7655d271f53acf39",
                "760e2cd67d5123ed"
            ]
        ]
    },
    {
        "id": "430606e075363be4",
        "type": "function",
        "z": "069222a25fd75e28",
        "name": "Convert N to 1",
        "func": "if(msg.result?.length > 0){\n    msg.payload = msg.result[0];\n    return msg;\n}\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 440,
        "wires": [
            [
                "2465de1302824f88"
            ]
        ]
    },
    {
        "id": "f4429b10837269c9",
        "type": "MSSQL",
        "z": "069222a25fd75e28",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "GetAll",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "IF OBJECT_ID('[ProductionManagementRunTimeDb].[dbo].[tblEquipmentAllocationWork]', 'U') IS NULL\r\nBEGIN\r\n    CREATE TABLE [ProductionManagementRunTimeDb].[dbo].[tblEquipmentAllocationWork] (\r\n        gEquipmentId UNIQUEIDENTIFIER  PRIMARY KEY NOT NULL,\r\n        gOperationId UNIQUEIDENTIFIER NOT NULL,\r\n        dtCreatedAt DATETIME2(7) NOT NULL,\r\n        dtUpdateAt DATETIME2(7) NULL\r\n    );\r\nEND\r\n\r\nSELECT \r\n    gEquipmentId AS equipmentId,\r\n    gOperationId AS operationId,\r\n    dtCreatedAt AS createdAt,\r\n    dtUpdateAt AS updateAt\r\nFROM [ProductionManagementRunTimeDb].[dbo].[tblEquipmentAllocationWork]",
        "modeOpt": "",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 630,
        "y": 320,
        "wires": [
            [
                "2465de1302824f88"
            ]
        ]
    },
    {
        "id": "715dfa4f34097c27",
        "type": "MSSQL",
        "z": "069222a25fd75e28",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "GetByQuipmentId",
        "outField": "result",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @equipmentId UNIQUEIDENTIFIER = @equipmentIdInfo\r\n\r\nIF OBJECT_ID('[ProductionManagementRunTimeDb].[dbo].[tblEquipmentAllocationWork]', 'U') IS NULL\r\nBEGIN\r\n    CREATE TABLE [ProductionManagementRunTimeDb].[dbo].[tblEquipmentAllocationWork] (\r\n        gEquipmentId UNIQUEIDENTIFIER  PRIMARY KEY NOT NULL,\r\n        gOperationId UNIQUEIDENTIFIER NOT NULL,\r\n        dtCreatedAt DATETIME2(7) NOT NULL,\r\n        dtUpdateAt DATETIME2(7) NULL\r\n    );\r\nEND\r\n\r\nSELECT \r\n    gEquipmentId AS equipmentId,\r\n    gOperationId AS operationId,\r\n    dtCreatedAt AS createdAt,\r\n    dtUpdateAt AS updateAt\r\nFROM [ProductionManagementRunTimeDb].[dbo].[tblEquipmentAllocationWork]\r\n    WHERE gEquipmentId = @equipmentId",
        "modeOpt": "",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "equipmentIdInfo",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "req.params.equipmentId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 670,
        "y": 400,
        "wires": [
            [
                "430606e075363be4"
            ]
        ]
    },
    {
        "id": "d02ed04b84b53f61",
        "type": "MSSQL",
        "z": "069222a25fd75e28",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Create/Update",
        "outField": "result",
        "returnType": 0,
        "throwErrors": "1",
        "query": "DECLARE @equipmentId UNIQUEIDENTIFIER = @equipmentIdInfo,\r\n        @operationId UNIQUEIDENTIFIER = @operationIdInfo;\r\n\r\nDECLARE @Row TABLE (\r\n    equipmentId UNIQUEIDENTIFIER,\r\n    operationId UNIQUEIDENTIFIER,\r\n    createdAt DATETIME2(7),\r\n    updateAt DATETIME2(7)\r\n);\r\n\r\nIF OBJECT_ID('[ProductionManagementRunTimeDb].[dbo].[tblEquipmentAllocationWork]', 'U') IS NULL\r\nBEGIN\r\n    CREATE TABLE [ProductionManagementRunTimeDb].[dbo].[tblEquipmentAllocationWork] (\r\n        gEquipmentId UNIQUEIDENTIFIER  PRIMARY KEY NOT NULL,\r\n        gOperationId UNIQUEIDENTIFIER NOT NULL,\r\n        dtCreatedAt DATETIME2(7) NOT NULL,\r\n        dtUpdateAt DATETIME2(7) NULL\r\n    );\r\nEND\r\n\r\n-- Обновление или создание записи\r\nMERGE INTO [ProductionManagementRunTimeDb].[dbo].[tblEquipmentAllocationWork] AS target\r\nUSING (VALUES (@equipmentId, @OperationId)) AS source (gEquipmentId, gOperationId)\r\nON target.gEquipmentId = source.gEquipmentId\r\nWHEN MATCHED THEN\r\n    UPDATE SET target.gOperationId = source.gOperationId, target.dtUpdateAt = GETUTCDATE()\r\nWHEN NOT MATCHED THEN\r\n    INSERT (gEquipmentId, gOperationId, dtCreatedAt, dtUpdateAt)\r\n    VALUES (source.gEquipmentId, source.gOperationId, GETUTCDATE(), NULL)\r\n    OUTPUT inserted.gEquipmentId, inserted.gOperationId, inserted.dtCreatedAt, inserted.dtUpdateAt\r\n    INTO @Row;\r\n\r\nSELECT * FROM @Row",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "equipmentIdInfo",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "req.params.equipmentId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "operationIdInfo",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "req.body.operationId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 660,
        "y": 480,
        "wires": [
            [
                "430606e075363be4"
            ]
        ]
    },
    {
        "id": "f7086123d4a7447d",
        "type": "MSSQL",
        "z": "069222a25fd75e28",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Delete",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @equipmentId UNIQUEIDENTIFIER = @equipmentIdInfo;\r\n\r\nIF OBJECT_ID('[ProductionManagementRunTimeDb].[dbo].[tblEquipmentAllocationWork]', 'U') IS NULL\r\nBEGIN\r\n    CREATE TABLE [ProductionManagementRunTimeDb].[dbo].[tblEquipmentAllocationWork] (\r\n        gEquipmentId UNIQUEIDENTIFIER  PRIMARY KEY NOT NULL,\r\n        gOperationId UNIQUEIDENTIFIER NOT NULL,\r\n        dtCreatedAt DATETIME2(7) NOT NULL,\r\n        dtUpdateAt DATETIME2(7) NULL\r\n    );\r\nEND\r\n\r\nBEGIN\r\n    DELETE FROM [ProductionManagementRunTimeDb].[dbo].[tblEquipmentAllocationWork]\r\n    WHERE gEquipmentId = @equipmentId;\r\nEND",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "equipmentIdInfo",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "req.params.equipmentId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 630,
        "y": 560,
        "wires": [
            [
                "2465de1302824f88"
            ]
        ]
    },
    {
        "id": "40eb4a6d29af1242",
        "type": "http in",
        "z": "75a9fd38f6b46ffa",
        "name": "",
        "url": "/api/Standardization",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "4c9193998cd1c57f",
                "eb8c737925778223",
                "bcace64cba740d4b"
            ]
        ]
    },
    {
        "id": "70b8b16af56b8eb1",
        "type": "http response",
        "z": "75a9fd38f6b46ffa",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1270,
        "y": 180,
        "wires": []
    },
    {
        "id": "eb4811360de47464",
        "type": "inject",
        "z": "75a9fd38f6b46ffa",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Output\":\"Жбан 1\",\"WeightSet\":\"230\",\"WeightPV\":\"230\"}",
        "payloadType": "json",
        "x": 100,
        "y": 140,
        "wires": [
            [
                "eb8c737925778223"
            ]
        ]
    },
    {
        "id": "e631dd353130238c",
        "type": "subflow:ca94f48e1f18b542",
        "z": "75a9fd38f6b46ffa",
        "name": "",
        "x": 870,
        "y": 100,
        "wires": [
            [
                "18f541ce3b763f26"
            ]
        ]
    },
    {
        "id": "18f541ce3b763f26",
        "type": "subflow:f2924807aef52857",
        "z": "75a9fd38f6b46ffa",
        "name": "",
        "x": 1020,
        "y": 100,
        "wires": [
            [
                "efd1abe5063ec77d"
            ]
        ]
    },
    {
        "id": "35e215966953b860",
        "type": "function",
        "z": "75a9fd38f6b46ffa",
        "name": "prep Outtake",
        "func": "let Outtake=\n{\n    ProcessId: msg.Process[0].ProcessId,\n    BatchId: msg.Batch[0].BatchId,\n    StorageLocationId: msg.Process[0].ConsumeStorageLocationId,\n    OperationId: msg.Process[0].OperationId,\n    Quantity: msg.Input.WeightPV,\n    CompleteOuttake: false,\n    };\nmsg.payload = Outtake;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 200,
        "wires": [
            [
                "35b576e8899306db"
            ]
        ]
    },
    {
        "id": "eb8c737925778223",
        "type": "change",
        "z": "75a9fd38f6b46ffa",
        "name": "payload->Input",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "Input",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 100,
        "wires": [
            [
                "27d0863063ac4236"
            ]
        ]
    },
    {
        "id": "35b576e8899306db",
        "type": "http request",
        "z": "75a9fd38f6b46ffa",
        "name": "htttp put outtake",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/outtake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 500,
        "y": 200,
        "wires": [
            [
                "f4fc71417e172eaa"
            ]
        ]
    },
    {
        "id": "2d9c9cdaaab19482",
        "type": "debug",
        "z": "75a9fd38f6b46ffa",
        "name": "debug 40",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 340,
        "wires": []
    },
    {
        "id": "eb27e5f24b73a1c2",
        "type": "switch",
        "z": "75a9fd38f6b46ffa",
        "name": "BatchId",
        "property": "Batch[0].BatchId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 100,
        "y": 200,
        "wires": [
            [
                "35e215966953b860"
            ],
            [
                "f4fc71417e172eaa"
            ]
        ]
    },
    {
        "id": "6a96d0d2b88d1a9d",
        "type": "http request",
        "z": "75a9fd38f6b46ffa",
        "name": "Intake",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/Intake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 790,
        "y": 260,
        "wires": [
            [
                "2d9c9cdaaab19482",
                "c26172524776bf68",
                "e87f62ce720a6f6f",
                "faa83a12d90f848e"
            ]
        ]
    },
    {
        "id": "36832d2fe0b878f6",
        "type": "function",
        "z": "75a9fd38f6b46ffa",
        "name": "prepere intake data",
        "func": "let Intake = {\n                processId: msg.Process[0].ProcessId,\n                operationId: msg.Process[0].OperationId,\n                materialId: msg.Batch[0].MaterialId,\n                storageLocationId: msg.SLRP[0].SLRPId,\n                quantity: msg.Input.WeightPV,\n                dateTime: msg.Process[0].dtCreated,\n                doNotCheckQuality: \"true\",\n                comment: null,\n                batchId: null\n            }\nmsg.payload = Intake;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 260,
        "wires": [
            [
                "6a96d0d2b88d1a9d",
                "2d9c9cdaaab19482"
            ]
        ]
    },
    {
        "id": "89c766dcf4e3a616",
        "type": "switch",
        "z": "75a9fd38f6b46ffa",
        "name": "SLRP !=null",
        "property": "SLRP[0].SLRPId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 280,
        "wires": [
            [
                "36832d2fe0b878f6"
            ],
            [
                "70b8b16af56b8eb1"
            ]
        ]
    },
    {
        "id": "ced871d37b29125a",
        "type": "http in",
        "z": "75a9fd38f6b46ffa",
        "name": "",
        "url": "/api/Standardization/Water",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "9dc07420239387d1",
                "259c45666c7662df"
            ]
        ]
    },
    {
        "id": "baabc38cedea796b",
        "type": "http response",
        "z": "75a9fd38f6b46ffa",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1170,
        "y": 480,
        "wires": []
    },
    {
        "id": "46d7c45d64c96b02",
        "type": "debug",
        "z": "75a9fd38f6b46ffa",
        "name": "debug 42",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 560,
        "wires": []
    },
    {
        "id": "d7ac1ee3cb7a2472",
        "type": "inject",
        "z": "75a9fd38f6b46ffa",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Volume\":\"20.1\",\"EventDateTime\":\"2024-03-20T08:18:04\"}",
        "payloadType": "json",
        "x": 380,
        "y": 440,
        "wires": [
            [
                "d0048a5eb6927a9e"
            ]
        ]
    },
    {
        "id": "41f2a03b04721ca5",
        "type": "switch",
        "z": "75a9fd38f6b46ffa",
        "name": "ProcessId  is not null",
        "property": "Process[0].ProcessId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 700,
        "y": 100,
        "wires": [
            [
                "e631dd353130238c"
            ],
            [
                "70b8b16af56b8eb1"
            ]
        ]
    },
    {
        "id": "e87f62ce720a6f6f",
        "type": "function",
        "z": "75a9fd38f6b46ffa",
        "d": true,
        "name": "prep Process setEnd",
        "func": "let QueryParameterCommand =\"?eventName=ProductionProcess.LeaveInProcessStep&EventKey=\"+msg.Process[0].ProcessId;\n//var BodyCommand ={ NewStepOutcome : \"Completed\" } \nlet BodyCommand = { \"Source\": 4, \"Target\": 5 }\nmsg.QueryParameter = QueryParameterCommand;\nmsg.payload = BodyCommand;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 180,
        "wires": [
            [
                "d1ababe91558c4da",
                "faa83a12d90f848e"
            ]
        ]
    },
    {
        "id": "d1ababe91558c4da",
        "type": "http request",
        "z": "75a9fd38f6b46ffa",
        "d": true,
        "name": "end Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.WorkflowUrl}}}/api/Events{{{QueryParameter}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1070,
        "y": 180,
        "wires": [
            [
                "faa83a12d90f848e",
                "70b8b16af56b8eb1"
            ]
        ]
    },
    {
        "id": "faa83a12d90f848e",
        "type": "debug",
        "z": "75a9fd38f6b46ffa",
        "name": "debug 49",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 320,
        "wires": []
    },
    {
        "id": "880fc1fbb297c3c7",
        "type": "comment",
        "z": "75a9fd38f6b46ffa",
        "name": "PZo",
        "info": "",
        "x": 50,
        "y": 20,
        "wires": []
    },
    {
        "id": "e7fa878a4aa7e516",
        "type": "comment",
        "z": "75a9fd38f6b46ffa",
        "name": "Приход веса с выхода",
        "info": "",
        "x": 100,
        "y": 60,
        "wires": []
    },
    {
        "id": "f5753c29345c84af",
        "type": "comment",
        "z": "75a9fd38f6b46ffa",
        "name": "Приход воды ",
        "info": "",
        "x": 70,
        "y": 340,
        "wires": []
    },
    {
        "id": "259c45666c7662df",
        "type": "switch",
        "z": "75a9fd38f6b46ffa",
        "name": "Volume !=0",
        "property": "payload.Volume",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 380,
        "wires": [
            [
                "d0048a5eb6927a9e"
            ],
            [
                "baabc38cedea796b"
            ]
        ]
    },
    {
        "id": "1ac6656f41892f74",
        "type": "switch",
        "z": "75a9fd38f6b46ffa",
        "name": "ProcessId I= null",
        "property": "Process[0].ProcessId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 380,
        "wires": [
            [
                "ba1698354bebc02c"
            ],
            [
                "baabc38cedea796b"
            ]
        ]
    },
    {
        "id": "425d4d95060bc813",
        "type": "function",
        "z": "75a9fd38f6b46ffa",
        "name": "prepare Outtake",
        "func": " let Outtake = {\n                ProcessId: msg.Process[0].ProcessId,\n                BatchId: msg.Batch[0].BatchId,\n                StorageLocationId:msg.Batch[0].StorageLocationId,\n                OperationId: msg.Process[0].OperationId,\n                Quantity: msg.Batch[0].Quantity,\n                CompleteOuttake: false\n                };\n msg.payload=Outtake;            \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 500,
        "wires": [
            [
                "c59ba83201a54838"
            ]
        ]
    },
    {
        "id": "7ca956884f7fc38d",
        "type": "switch",
        "z": "75a9fd38f6b46ffa",
        "name": "Batch !=0",
        "property": "Batch[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1120,
        "y": 380,
        "wires": [
            [
                "f61b49a89c8baad6"
            ],
            [
                "baabc38cedea796b"
            ]
        ]
    },
    {
        "id": "f61b49a89c8baad6",
        "type": "subflow:ca94f48e1f18b542",
        "z": "75a9fd38f6b46ffa",
        "name": "",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "1c0c3e2074bf683b"
            ]
        ]
    },
    {
        "id": "1c0c3e2074bf683b",
        "type": "subflow:f2924807aef52857",
        "z": "75a9fd38f6b46ffa",
        "name": "",
        "x": 280,
        "y": 500,
        "wires": [
            [
                "425d4d95060bc813"
            ]
        ]
    },
    {
        "id": "c59ba83201a54838",
        "type": "http request",
        "z": "75a9fd38f6b46ffa",
        "name": "htttp put outtake",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/outtake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 640,
        "y": 500,
        "wires": [
            [
                "46d7c45d64c96b02",
                "baabc38cedea796b"
            ]
        ]
    },
    {
        "id": "bcace64cba740d4b",
        "type": "debug",
        "z": "75a9fd38f6b46ffa",
        "name": "debug 51",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 160,
        "wires": []
    },
    {
        "id": "67d0f2f3f7b32612",
        "type": "catch",
        "z": "75a9fd38f6b46ffa",
        "name": "",
        "scope": [
            "27d0863063ac4236",
            "efd1abe5063ec77d",
            "d0048a5eb6927a9e",
            "ba1698354bebc02c",
            "f4fc71417e172eaa"
        ],
        "uncaught": false,
        "x": 120,
        "y": 640,
        "wires": [
            [
                "a923b0abba2d8e65"
            ]
        ]
    },
    {
        "id": "a923b0abba2d8e65",
        "type": "function",
        "z": "75a9fd38f6b46ffa",
        "name": "SQL Error",
        "func": "msg.payload = {\n    error: \"Ошибка SQL запроса\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 640,
        "wires": [
            [
                "f6ee3a9335b33c29"
            ]
        ]
    },
    {
        "id": "f6ee3a9335b33c29",
        "type": "http response",
        "z": "75a9fd38f6b46ffa",
        "name": "",
        "statusCode": "500",
        "headers": {},
        "x": 540,
        "y": 640,
        "wires": []
    },
    {
        "id": "98c4b63af0c04cc6",
        "type": "catch",
        "z": "75a9fd38f6b46ffa",
        "name": "",
        "scope": [
            "35b576e8899306db",
            "6a96d0d2b88d1a9d",
            "d1ababe91558c4da",
            "c59ba83201a54838"
        ],
        "uncaught": false,
        "x": 120,
        "y": 680,
        "wires": [
            [
                "aa30f01aa23ef8d3"
            ]
        ]
    },
    {
        "id": "aa30f01aa23ef8d3",
        "type": "function",
        "z": "75a9fd38f6b46ffa",
        "name": "BachManagement Error",
        "func": "msg.payload = {\n    error: \"Ошибка обращения к BachManagement\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 680,
        "wires": [
            [
                "0785a8502890e270"
            ]
        ]
    },
    {
        "id": "0785a8502890e270",
        "type": "http response",
        "z": "75a9fd38f6b46ffa",
        "name": "",
        "statusCode": "500",
        "headers": {},
        "x": 540,
        "y": 680,
        "wires": []
    },
    {
        "id": "c26172524776bf68",
        "type": "http request",
        "z": "75a9fd38f6b46ffa",
        "name": "end Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.MesCoreUrl}}}/api/UserTasks/do_action/{{{Process.0.UserTaskId}}}/Complete",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1010,
        "y": 260,
        "wires": [
            [
                "70b8b16af56b8eb1",
                "faa83a12d90f848e"
            ]
        ]
    },
    {
        "id": "9e93d0f8a1a22f93",
        "type": "catch",
        "z": "75a9fd38f6b46ffa",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 110,
        "y": 740,
        "wires": [
            [
                "1655c94cc044032e"
            ]
        ]
    },
    {
        "id": "44ccfd541e372cb5",
        "type": "debug",
        "z": "75a9fd38f6b46ffa",
        "name": "Debug Save Catch Data",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 740,
        "wires": []
    },
    {
        "id": "1655c94cc044032e",
        "type": "subflow:f8fc59a8d3d93ef9",
        "z": "75a9fd38f6b46ffa",
        "name": "",
        "x": 320,
        "y": 740,
        "wires": [
            [
                "44ccfd541e372cb5"
            ]
        ]
    },
    {
        "id": "4c9193998cd1c57f",
        "type": "MSSQL",
        "z": "75a9fd38f6b46ffa",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "tblStandartNRLog",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "INSERT INTO [dbExchange].[dbo].[tblStandartNRLog]\r\nVALUES(N'{{{payload.Output}}}','{{{payload.WeightSet}}}','{{{payload.WeightPV}}}',GETDATE(),'{{{payload.EventDateTime}}}')",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 390,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "27d0863063ac4236",
        "type": "MSSQL",
        "z": "75a9fd38f6b46ffa",
        "mssqlCN": "6c4551b7b08b27f9",
        "name": "Find Process",
        "outField": "Process",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT TOP 1 p.gId as 'ProcessId',p.gOperationId as 'OperationId',csl.gStorageLocationId as 'ConsumeStorageLocationId'\r\n\t,psl.gStorageLocationId as 'ProduceStorageLocationId', GETUTCDATE() as 'dtCreated', p.gUserTaskId as 'UserTaskId'\r\n  FROM [ProductionManagementRunTimeDb].[dbo].[tblProcess] p \r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ee ON ee.gEquipmentTreeId=p.gEquipmentId\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystem] es ON es.gId=ee.gExternalSystemId AND es.szName='RFID'\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationConsumeStorageLocation] csl ON csl.gOperationId=p.gOperationId AND csl.gEquipmentId=p.gEquipmentId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationProduceStorageLocation] psl ON psl.gOperationId=p.gOperationId AND psl.gEquipmentId=p.gEquipmentId\r\n\tWHERE ee.szExternalId = CASE WHEN N'{{{Input.Output}}}' = N'Жбан 1' THEN '910'\r\n\t\t\t\t\t\t\t  WHEN N'{{{Input.Output}}}' = N'Жбан 2' THEN '909'\r\n\t\t\t\t\t\tEND\r\n\t\tAND p.szStep = 'InProcess'\r\n\t --p.gId='CA0458CA-0330-4E87-AD20-355BC127B77F'\r\n\tORDER BY dtStartedAt DESC",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 510,
        "y": 100,
        "wires": [
            [
                "41f2a03b04721ca5",
                "bcace64cba740d4b"
            ]
        ]
    },
    {
        "id": "efd1abe5063ec77d",
        "type": "MSSQL",
        "z": "75a9fd38f6b46ffa",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get Batch",
        "outField": "Batch",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT TOP 1 gId as 'BatchId', gMaterialId as 'MaterialId'    \r\n  FROM [BatchManagementDb].[dbo].[tblBatch] \r\n  where bIsCompleted=0\r\n  AND StorageLocationId='{{{Process.0.ConsumeStorageLocationId}}}'\r\n  \r\n  order by nKey desc",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1200,
        "y": 100,
        "wires": [
            [
                "eb27e5f24b73a1c2"
            ]
        ]
    },
    {
        "id": "f4fc71417e172eaa",
        "type": "MSSQL",
        "z": "75a9fd38f6b46ffa",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get SLRP",
        "outField": "SLRP",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT TOP (1) [gId] as 'SLRPId'    \r\n  FROM [BatchManagementDb].[dbo].[tblStorageLocation]\r\n  WHERE gParentId='{{{Process.0.ProduceStorageLocationId}}}'\r\n  ORDER BY nKey DESC",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 300,
        "y": 280,
        "wires": [
            [
                "89c766dcf4e3a616"
            ]
        ]
    },
    {
        "id": "9dc07420239387d1",
        "type": "MSSQL",
        "z": "75a9fd38f6b46ffa",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "tblStandartWaterNRLog",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "INSERT INTO [dbExchange].[dbo].[tblStandartWaterNRLog]\r\nVALUES(N'{{{payload.Volume}}}','{{{payload.EventDateTime}}}',GETDATE())",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 410,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "d0048a5eb6927a9e",
        "type": "MSSQL",
        "z": "75a9fd38f6b46ffa",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Select last run process",
        "outField": "Process",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT TOP (1) p.gId AS 'ProcessId', p.gOperationId AS 'OperationId'\r\n\tFROM [ProductionManagementRunTimeDb].[dbo].[tblProcess] p\r\n\t\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ese ON ese.gEquipmentTreeId = p.gEquipmentId\r\n\t\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystem] es ON es.gId = ese.[gExternalSystemId]\r\n\t\tWHERE ese.szExternalId IN ('Zhban1', 'Zhban2') AND p.szStep = 'InProcess' AND es.[szName] = 'RFID'\r\n\t\tORDER BY p.dtStartedAt DESC",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 560,
        "y": 380,
        "wires": [
            [
                "1ac6656f41892f74"
            ]
        ]
    },
    {
        "id": "ba1698354bebc02c",
        "type": "MSSQL",
        "z": "75a9fd38f6b46ffa",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get Water Batch",
        "outField": "Batch",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT TOP (1) [gId] as 'BatchId',[StorageLocationId] as 'StorageLocationId', '{{{payload.Volume}}}' as 'Quantity'\r\nFROM [BatchManagementDb].[dbo].[tblBatch] \r\nWHERE szBatchNumber='Water' AND gAccessId='898634A9-46B5-40C7-8267-C4641FC4C3AD'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 960,
        "y": 380,
        "wires": [
            [
                "7ca956884f7fc38d"
            ]
        ]
    },
    {
        "id": "81cb12305268387f",
        "type": "http in",
        "z": "7789b9bd921d5983",
        "name": "",
        "url": "/api/Intake/OneToOne",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "bfe96dab16e5b71c",
                "bf93fa4a7486211d"
            ]
        ]
    },
    {
        "id": "f39f7879c5d55a08",
        "type": "http response",
        "z": "7789b9bd921d5983",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 220,
        "wires": []
    },
    {
        "id": "8a388052d8abf9be",
        "type": "http in",
        "z": "7789b9bd921d5983",
        "name": "",
        "url": "/api/Intake/BOM",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 600,
        "wires": [
            [
                "59917777b3c9fe62",
                "9ed5ad5c093036a1"
            ]
        ]
    },
    {
        "id": "42c92c91dce1244c",
        "type": "http response",
        "z": "7789b9bd921d5983",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1490,
        "y": 680,
        "wires": []
    },
    {
        "id": "bfe96dab16e5b71c",
        "type": "debug",
        "z": "7789b9bd921d5983",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 180,
        "wires": []
    },
    {
        "id": "59917777b3c9fe62",
        "type": "debug",
        "z": "7789b9bd921d5983",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 520,
        "wires": []
    },
    {
        "id": "f29cef4ffb701893",
        "type": "subflow:ca94f48e1f18b542",
        "z": "7789b9bd921d5983",
        "name": "",
        "x": 1270,
        "y": 600,
        "wires": [
            [
                "6ead84377047d979"
            ]
        ]
    },
    {
        "id": "47efb2b88bd49bac",
        "type": "inject",
        "z": "7789b9bd921d5983",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"processId\":\"7E4630E4-0D6F-4FD2-ABFD-CE271EA0FB05\",\"storageLocationId\":\"BE49A8BD-963A-4E01-8EC4-99F3F59FFE70\"}",
        "payloadType": "json",
        "x": 100,
        "y": 520,
        "wires": [
            [
                "91fc36037d707204"
            ]
        ]
    },
    {
        "id": "91fc36037d707204",
        "type": "json",
        "z": "7789b9bd921d5983",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 230,
        "y": 520,
        "wires": [
            [
                "9ed5ad5c093036a1"
            ]
        ]
    },
    {
        "id": "4a2763894f4ceee9",
        "type": "switch",
        "z": "7789b9bd921d5983",
        "name": "BatchId ==null",
        "property": "Intake",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 140,
        "y": 700,
        "wires": [
            [
                "7c3dec4364225e45"
            ],
            [
                "3a4659703104c35c",
                "b6cbb901f2af5b47"
            ]
        ]
    },
    {
        "id": "4faa3e0e6a36cae6",
        "type": "function",
        "z": "7789b9bd921d5983",
        "d": true,
        "name": "prepere create data",
        "func": "let Batch ={\n            operationId: msg.BOM[0].operationId,\n            materialId: msg.BOM[0].materialId,\n            storageLocationId:msg.Input.storageLocationId,\n            dateTime: msg.BOM[0].dateTime,\n            doNotCheckQuality: \"true\",\n            batchNumber : null,\n            supplierNumber : null,\n            comment: null,\n            processId: msg.BOM[0].processId,\n            shipmentId: null,\n            deliveryId: null,\n            expiration : null,\n            isCreateApplyRules: \"true\"\n            }\nmsg.payload = Batch;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 540,
        "wires": [
            [
                "51afe4ac380ac835"
            ]
        ]
    },
    {
        "id": "49bf2e228bcb15c2",
        "type": "comment",
        "z": "7789b9bd921d5983",
        "name": "создание выпуска",
        "info": "",
        "x": 370,
        "y": 640,
        "wires": []
    },
    {
        "id": "51afe4ac380ac835",
        "type": "http request",
        "z": "7789b9bd921d5983",
        "d": true,
        "name": "CreateBatch",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/Create",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1070,
        "y": 540,
        "wires": [
            [
                "beebffec73ffd8da"
            ]
        ]
    },
    {
        "id": "2b410e28a90ef245",
        "type": "change",
        "z": "7789b9bd921d5983",
        "name": "payload->Input",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "Input",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 600,
        "wires": [
            [
                "f29cef4ffb701893"
            ]
        ]
    },
    {
        "id": "beebffec73ffd8da",
        "type": "function",
        "z": "7789b9bd921d5983",
        "d": true,
        "name": "prepere intake data",
        "func": "let Intake = {\n                processId: msg.Input.processId,\n                operationId: msg.BOM[0].operationId,\n                materialId: msg.payload.materialId,\n                storageLocationId: msg.payload.storageLocation.id,\n                quantity: msg.Outtake[0].Quantity,\n                dateTime: msg.payload.createdAt,\n                doNotCheckQuality: \"true\",\n                comment: null,\n                batchId: msg.payload.id\n            }\nmsg.payload = Intake;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "5ac9e51ed5af0eb2",
        "type": "http request",
        "z": "7789b9bd921d5983",
        "name": "Intake",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/Intake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1350,
        "y": 680,
        "wires": [
            [
                "42c92c91dce1244c",
                "71874a4002830402"
            ]
        ]
    },
    {
        "id": "c6b6530fd9a2aab5",
        "type": "function",
        "z": "7789b9bd921d5983",
        "name": "NewData",
        "func": "let QuantityNew=0;\n\nif (msg.Outtake[0].Quantity!=msg.Intake[0].Quantity)  \n  QuantityNew = msg.Outtake[0].Quantity - msg.Intake[0].Quantity\n\nmsg.NewData={\"QuantityNew\":QuantityNew}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 740,
        "wires": [
            [
                "b0248e9c0c97986d"
            ]
        ]
    },
    {
        "id": "b0248e9c0c97986d",
        "type": "switch",
        "z": "7789b9bd921d5983",
        "name": "",
        "property": "NewData.QuantityNew",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 810,
        "y": 740,
        "wires": [
            [
                "5970192bb366309c"
            ]
        ]
    },
    {
        "id": "5970192bb366309c",
        "type": "function",
        "z": "7789b9bd921d5983",
        "name": "prepere intake data",
        "func": "let Intake = {\n                processId: msg.Input.processId,\n                operationId: msg.Intake[0].OperationId,\n                materialId: msg.Intake[0].MaterialId,\n                storageLocationId: msg.Intake[0].StorageLocationId,\n                quantity: msg.NewData.QuantityNew,\n                dateTime: msg.Intake[0].createdAt,\n                doNotCheckQuality: \"true\",\n                comment: null,\n                batchId: msg.Intake[0].BatchId\n            }\nmsg.payload = Intake;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 740,
        "wires": [
            [
                "5ac9e51ed5af0eb2"
            ]
        ]
    },
    {
        "id": "0c68e3c55cee2e37",
        "type": "comment",
        "z": "7789b9bd921d5983",
        "name": "обновление выпуска",
        "info": "",
        "x": 360,
        "y": 740,
        "wires": []
    },
    {
        "id": "71874a4002830402",
        "type": "debug",
        "z": "7789b9bd921d5983",
        "name": "debug 37",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 720,
        "wires": []
    },
    {
        "id": "d9291b4274a34505",
        "type": "inject",
        "z": "7789b9bd921d5983",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"ProcessId\":\"9E366C7E-4382-4472-9F32-8E744CB1B540\",\"StorageLocationId\":\"BE49A8BD-963A-4E01-8EC4-99F3F59FFE70\"}",
        "payloadType": "json",
        "x": 100,
        "y": 40,
        "wires": [
            [
                "d899ebf87f0bce34"
            ]
        ]
    },
    {
        "id": "d899ebf87f0bce34",
        "type": "json",
        "z": "7789b9bd921d5983",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 230,
        "y": 40,
        "wires": [
            [
                "bf93fa4a7486211d"
            ]
        ]
    },
    {
        "id": "d969fccea7559071",
        "type": "debug",
        "z": "7789b9bd921d5983",
        "name": "debug 32",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 260,
        "wires": []
    },
    {
        "id": "dac0adbac6268947",
        "type": "switch",
        "z": "7789b9bd921d5983",
        "name": "BatchId ==null",
        "property": "Intake",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1580,
        "y": 140,
        "wires": [
            [
                "da0b4c7b249aeea8"
            ],
            [
                "76740d340d5dc8d7"
            ]
        ]
    },
    {
        "id": "e5f08568171b8475",
        "type": "switch",
        "z": "7789b9bd921d5983",
        "name": "Outtake !=null",
        "property": "Outtake",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 640,
        "y": 140,
        "wires": [
            [
                "6264f8b893c7f874"
            ]
        ]
    },
    {
        "id": "10c639d17fe2d79e",
        "type": "comment",
        "z": "7789b9bd921d5983",
        "name": "создание выпуска",
        "info": "",
        "x": 110,
        "y": 220,
        "wires": []
    },
    {
        "id": "d4fc8b8ed786be2c",
        "type": "debug",
        "z": "7789b9bd921d5983",
        "name": "debug 33",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 260,
        "wires": []
    },
    {
        "id": "76740d340d5dc8d7",
        "type": "function",
        "z": "7789b9bd921d5983",
        "name": "NewData",
        "func": "let DataBatch = [];\nlet QuantityNew;\nlet Cicle = 0;\nfor (let i=0; i<msg.Outtake.length; i++)\n  {\n  for (let k=0; k<msg.Intake.length; k++)\n      {\n        if (msg.Outtake[i].MaterialId==msg.Intake[k].MaterialId)  \n          {\n            if (msg.Outtake[i].Quantity != msg.Intake[k].Quantity)\n              {\n                QuantityNew = msg.Outtake[i].Quantity - msg.Intake[k].Quantity;                                \n                DataBatch[i] = {\n                                  processId: msg.Intake[k].ProcessId,\n                                  operationId: msg.Intake[k].OperationId,                                 \n                                  materialId:msg.Intake[k].MaterialId,\n                                  storageLocationId: msg.Intake[k].StorageLocationId,\n                                  quantity:QuantityNew,\n                                  dateTime: msg.Intake[k].CreatedAt,\n                                  doNotCheckQuality: \"true\",\n                                  comment: null,\n                                  batchId:msg.Intake[k].BatchId,                                  \n                                  Action:\"QuantityChange\"\n                                };\n              }\n            else\n                {\n                 DataBatch[i] = {BatchId:msg.Intake[k].BatchId,MaterialId:msg.Intake[k].MaterialId,Quantity:msg.Intake[k].Quantity}; \n                };                     \n          };\n      };\n    if (DataBatch[i] == null)\n      {\n        DataBatch[i] = {\n                          operationId: msg.Outtake[i].OperationId,\n                          materialId: msg.Outtake[i].MaterialId,\n                          storageLocationId:msg.Input.StorageLocationId,\n                          dateTime: msg.Outtake[i].CreatedAt,\n                          doNotCheckQuality: \"true\",\n                          batchNumber : null,\n                          supplierNumber : null,\n                          comment: null,\n                          processId: msg.Input.ProcessId,\n                          shipmentId: null,\n                          deliveryId: null,\n                          expiration : null,\n                          isCreateApplyRules: \"true\",\n                          quantity: msg.Outtake[i].Quantity,\n                          Action:\"NewMaterial\"\n                        };  \n      };\n  };\nfor (let m=0; m < msg.Intake.length; m++)\n  {\n  for (let n=0; n < msg.Outtake.length; n++)\n    {\n      if (msg.Intake[m].MaterialId == msg.Outtake[n].MaterialId)\n      {\n        DataBatch[DataBatch.length+1] = { BatchId: msg.Intake[m].BatchId, MaterialId: msg.Intake[m].MaterialId, Quantity: msg.Intake[m].Quantity }; \n        Cicle=Cicle+1;\n      }\n    }\n  if (Cicle != m+1)    \n    DataBatch[DataBatch.length + 1] = { \n                                        operationId: msg.Intake[m].OperationId,\n                                        storageLocationId: msg.Intake[m].StorageLocationId,\n                                        batchId: msg.Intake[m].BatchId,\n                                        processId: msg.Intake[m].ProcessId,                                        \n                                        Action: \"BatchDelete\" \n                                      };    \n  }\nmsg.NewData=DataBatch\nreturn msg; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 260,
        "wires": [
            [
                "a37d35b7846a1408"
            ]
        ]
    },
    {
        "id": "226e7a8f109d20e4",
        "type": "switch",
        "z": "7789b9bd921d5983",
        "name": "",
        "property": "payload.Action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "QuantityChange",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "NewMaterial",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BatchDelete",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1050,
        "y": 360,
        "wires": [
            [
                "806dab8e012b374b"
            ],
            [
                "586e9476133d3e7b"
            ],
            [
                "81cd9df92c3376e2"
            ],
            [
                "a37d35b7846a1408"
            ]
        ]
    },
    {
        "id": "91bdb0db59fe2724",
        "type": "comment",
        "z": "7789b9bd921d5983",
        "name": "обновление выпуска",
        "info": "",
        "x": 980,
        "y": 220,
        "wires": []
    },
    {
        "id": "b2925702f4ef291f",
        "type": "comment",
        "z": "7789b9bd921d5983",
        "name": "1к1",
        "info": "",
        "x": 90,
        "y": 100,
        "wires": []
    },
    {
        "id": "2730a823b5586551",
        "type": "http request",
        "z": "7789b9bd921d5983",
        "name": "CreateBatch",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/Create",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 270,
        "y": 340,
        "wires": [
            [
                "b0477a396fb79519"
            ]
        ]
    },
    {
        "id": "b0477a396fb79519",
        "type": "function",
        "z": "7789b9bd921d5983",
        "name": "prepere intake data",
        "func": "let Intake = {\n                processId: msg.Output.processId,\n                operationId: msg.Output.operationId,\n                materialId: msg.payload.materialId,\n                storageLocationId: msg.payload.storageLocation.id,\n                quantity: msg.Output.quantity,\n                dateTime: msg.payload.createdAt,\n                doNotCheckQuality: \"true\",\n                comment: null,\n                batchId: msg.payload.id\n            }\nmsg.payload = Intake;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 340,
        "wires": [
            [
                "b04a60f34e1954cd"
            ]
        ]
    },
    {
        "id": "b04a60f34e1954cd",
        "type": "http request",
        "z": "7789b9bd921d5983",
        "name": "Intake",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/Intake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 630,
        "y": 340,
        "wires": [
            [
                "6f2bbe4470f609b7"
            ]
        ]
    },
    {
        "id": "abaecec652b0ae84",
        "type": "change",
        "z": "7789b9bd921d5983",
        "name": "payload->Input",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "Input",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 140,
        "wires": [
            [
                "477946015052df2b"
            ]
        ]
    },
    {
        "id": "da0b4c7b249aeea8",
        "type": "function",
        "z": "7789b9bd921d5983",
        "name": "NewData",
        "func": "let DataBatch = [];\n\nfor (let i=0; i<msg.Outtake.length; i++)\n  {                     \n    DataBatch[i] = {\n                      operationId: msg.Outtake[i].OperationId,\n                      materialId: msg.Outtake[i].MaterialId,\n                      storageLocationId:msg.Input.storageLocationId,\n                      dateTime: msg.Outtake[i].CreatedAt,\n                      doNotCheckQuality: \"true\",\n                      batchNumber : null,\n                      supplierNumber : null,\n                      comment: null,\n                      processId: msg.Input.processId,\n                      shipmentId: null,\n                      deliveryId: null,\n                      expiration : null,\n                      isCreateApplyRules: \"true\", \n                      quantity: msg.Outtake[i].Quantity                   \n                    };          \n  };\nmsg.NewData=DataBatch\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 260,
        "wires": [
            [
                "6f2bbe4470f609b7"
            ]
        ]
    },
    {
        "id": "5f2174dff0652a06",
        "type": "function",
        "z": "7789b9bd921d5983",
        "name": "msg.Output",
        "func": "let Output = msg.payload;\nmsg.Output=Output;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 340,
        "wires": [
            [
                "2730a823b5586551"
            ]
        ]
    },
    {
        "id": "477946015052df2b",
        "type": "subflow:ca94f48e1f18b542",
        "z": "7789b9bd921d5983",
        "name": "",
        "x": 1250,
        "y": 140,
        "wires": [
            [
                "74a6e4b4a90ca2b3"
            ]
        ]
    },
    {
        "id": "2e8a501651f82555",
        "type": "function",
        "z": "7789b9bd921d5983",
        "name": "msg.Output",
        "func": "let Output = msg.payload;\nmsg.Output=Output;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 360,
        "wires": [
            [
                "226e7a8f109d20e4"
            ]
        ]
    },
    {
        "id": "806dab8e012b374b",
        "type": "http request",
        "z": "7789b9bd921d5983",
        "name": "Intake",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/Intake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1510,
        "y": 320,
        "wires": [
            [
                "a37d35b7846a1408"
            ]
        ]
    },
    {
        "id": "586e9476133d3e7b",
        "type": "http request",
        "z": "7789b9bd921d5983",
        "name": "CreateBatch",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/Create",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1250,
        "y": 380,
        "wires": [
            [
                "d055c8225822753a"
            ]
        ]
    },
    {
        "id": "d055c8225822753a",
        "type": "function",
        "z": "7789b9bd921d5983",
        "name": "prepere intake data",
        "func": "let Intake = {\n                processId: msg.Output.processId,\n                operationId: msg.Output.operationId,\n                materialId: msg.payload.materialId,\n                storageLocationId: msg.payload.storageLocation.id,\n                quantity: msg.Output.quantity,\n                dateTime: msg.payload.createdAt,\n                doNotCheckQuality: \"true\",\n                comment: null,\n                batchId: msg.payload.id\n            }\nmsg.payload = Intake;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 380,
        "wires": [
            [
                "806dab8e012b374b"
            ]
        ]
    },
    {
        "id": "4e33216759dd0676",
        "type": "comment",
        "z": "7789b9bd921d5983",
        "name": "BOM",
        "info": "",
        "x": 70,
        "y": 560,
        "wires": []
    },
    {
        "id": "e13fcb9d5a9afcbf",
        "type": "catch",
        "z": "7789b9bd921d5983",
        "name": "",
        "scope": [
            "9ed5ad5c093036a1",
            "e4aaf73c8263c129",
            "dc34ff8373f04a8f",
            "6264f8b893c7f874",
            "bf93fa4a7486211d"
        ],
        "uncaught": false,
        "x": 100,
        "y": 940,
        "wires": [
            [
                "6bbab178a2e19b49"
            ]
        ]
    },
    {
        "id": "6bbab178a2e19b49",
        "type": "function",
        "z": "7789b9bd921d5983",
        "name": "SQL Error",
        "func": "msg.payload = {\n    error: \"Ошибка SQL запроса\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 940,
        "wires": [
            [
                "9c6fd483c1fa170c"
            ]
        ]
    },
    {
        "id": "9c6fd483c1fa170c",
        "type": "http response",
        "z": "7789b9bd921d5983",
        "name": "",
        "statusCode": "500",
        "headers": {},
        "x": 520,
        "y": 940,
        "wires": []
    },
    {
        "id": "0c437d92b89c9ff5",
        "type": "catch",
        "z": "7789b9bd921d5983",
        "name": "",
        "scope": [
            "51afe4ac380ac835",
            "beebffec73ffd8da",
            "5ac9e51ed5af0eb2",
            "2730a823b5586551",
            "b04a60f34e1954cd",
            "806dab8e012b374b",
            "586e9476133d3e7b",
            "5970192bb366309c",
            "b0477a396fb79519",
            "d055c8225822753a",
            "e814a8ef253029d8",
            "76740d340d5dc8d7",
            "4faa3e0e6a36cae6",
            "c6b6530fd9a2aab5",
            "da0b4c7b249aeea8",
            "5f2174dff0652a06",
            "2e8a501651f82555"
        ],
        "uncaught": false,
        "x": 100,
        "y": 980,
        "wires": [
            [
                "9d8ca03fa156685a"
            ]
        ]
    },
    {
        "id": "9d8ca03fa156685a",
        "type": "function",
        "z": "7789b9bd921d5983",
        "name": "BachManagement Error",
        "func": "msg.payload = {\n    error: \"Ошибка обращения к BachManagement\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 980,
        "wires": [
            [
                "21eb2364fdd9bf2f"
            ]
        ]
    },
    {
        "id": "21eb2364fdd9bf2f",
        "type": "http response",
        "z": "7789b9bd921d5983",
        "name": "",
        "statusCode": "500",
        "headers": {},
        "x": 520,
        "y": 980,
        "wires": []
    },
    {
        "id": "81cd9df92c3376e2",
        "type": "http request",
        "z": "7789b9bd921d5983",
        "name": "DeleteBatch",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/DeleteBatch",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1250,
        "y": 420,
        "wires": [
            [
                "a37d35b7846a1408"
            ]
        ]
    },
    {
        "id": "7c3dec4364225e45",
        "type": "switch",
        "z": "7789b9bd921d5983",
        "name": "Outtake !=null",
        "property": "Outtake",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 360,
        "y": 680,
        "wires": [
            [
                "dc34ff8373f04a8f"
            ]
        ]
    },
    {
        "id": "3a4659703104c35c",
        "type": "switch",
        "z": "7789b9bd921d5983",
        "name": "Outtake !=null",
        "property": "Outtake",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 360,
        "y": 780,
        "wires": [
            [
                "c6b6530fd9a2aab5"
            ],
            [
                "e814a8ef253029d8"
            ]
        ]
    },
    {
        "id": "e814a8ef253029d8",
        "type": "function",
        "z": "7789b9bd921d5983",
        "name": "prepere create data",
        "func": "let Batch ={\n            operationId: msg.Intake[0].OperationId,\n            storageLocationId: msg.Intake[0].StorageLocationId,\n            batchId: msg.Intake[0].BatchId,\n            processId: msg.Input.processId\n            }\nmsg.payload = Batch;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 800,
        "wires": [
            [
                "d46eccbdc37898e9"
            ]
        ]
    },
    {
        "id": "d46eccbdc37898e9",
        "type": "http request",
        "z": "7789b9bd921d5983",
        "name": "DeleteBatch",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/DeleteBatch",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 810,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "6ead84377047d979",
        "type": "subflow:f2924807aef52857",
        "z": "7789b9bd921d5983",
        "name": "",
        "x": 1420,
        "y": 600,
        "wires": [
            [
                "4a2763894f4ceee9"
            ]
        ]
    },
    {
        "id": "74a6e4b4a90ca2b3",
        "type": "subflow:f2924807aef52857",
        "z": "7789b9bd921d5983",
        "name": "",
        "x": 1400,
        "y": 140,
        "wires": [
            [
                "dac0adbac6268947"
            ]
        ]
    },
    {
        "id": "6c2ac54cb65d1556",
        "type": "comment",
        "z": "7789b9bd921d5983",
        "name": "PZo",
        "info": "",
        "x": 390,
        "y": 20,
        "wires": []
    },
    {
        "id": "db4ca57907684751",
        "type": "function",
        "z": "7789b9bd921d5983",
        "name": "prepere intake data",
        "func": "let Intake = {\n                processId: msg.BOM[0].processId,\n    operationId: msg.BOM[0].operationId,\n    materialId: msg.BOM[0].materialId,\n    storageLocationId: msg.Input.storageLocationId,\n    quantity: msg.Outtake[0].Quantity,\n    dateTime: msg.BOM[0].dateTime,\n    doNotCheckQuality: \"true\",\n    comment: null,\n            }\nmsg.payload = Intake;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 680,
        "wires": [
            [
                "5ac9e51ed5af0eb2"
            ]
        ]
    },
    {
        "id": "b6cbb901f2af5b47",
        "type": "change",
        "z": "7789b9bd921d5983",
        "name": "Intake->payload",
        "rules": [
            {
                "t": "move",
                "p": "Intake",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 880,
        "wires": [
            [
                "f5b211bb6ca3b22b"
            ]
        ]
    },
    {
        "id": "631de44c5c98fb3b",
        "type": "comment",
        "z": "7789b9bd921d5983",
        "name": "отправка события \"обновление выпуска\"  в RMQ",
        "info": "",
        "x": 430,
        "y": 840,
        "wires": []
    },
    {
        "id": "f5b211bb6ca3b22b",
        "type": "amqp-out",
        "z": "7789b9bd921d5983",
        "name": "",
        "broker": "2f76d8b874d08554",
        "exchangeName": "NR_ChangeIntake",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeRoutingKeyType": "str",
        "exchangeDurable": true,
        "amqpProperties": "{    \"headers\": {}}",
        "rpcTimeoutMilliseconds": 3000,
        "outputs": 0,
        "x": 510,
        "y": 880,
        "wires": []
    },
    {
        "id": "6f2bbe4470f609b7",
        "type": "loop",
        "z": "7789b9bd921d5983",
        "name": "for first Button",
        "kind": "enum",
        "count": "5",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "NewData",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-last",
        "x": 380,
        "y": 260,
        "wires": [
            [
                "d969fccea7559071",
                "f39f7879c5d55a08"
            ],
            [
                "5f2174dff0652a06"
            ]
        ]
    },
    {
        "id": "a37d35b7846a1408",
        "type": "loop",
        "z": "7789b9bd921d5983",
        "name": "for Repeat button",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "NewData",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 1210,
        "y": 260,
        "wires": [
            [
                "d4fc8b8ed786be2c",
                "f39f7879c5d55a08"
            ],
            [
                "2e8a501651f82555"
            ]
        ]
    },
    {
        "id": "9ed5ad5c093036a1",
        "type": "MSSQL",
        "z": "7789b9bd921d5983",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Outtake from Process",
        "outField": "Outtake",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT ABS(SUM(nQuantity)) as N'Quantity'\r\n  FROM [BatchManagementDb].[dbo].[tblBatchEvent]\r\n  WHERE ntype = 200 AND gProcessId = '{{{payload.processId}}}'\r\n  GROUP BY gProcessId\r\n  ",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 420,
        "y": 600,
        "wires": [
            [
                "e4aaf73c8263c129"
            ]
        ]
    },
    {
        "id": "e4aaf73c8263c129",
        "type": "MSSQL",
        "z": "7789b9bd921d5983",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Select Batchs from Process",
        "outField": "Intake",
        "returnType": 0,
        "throwErrors": 1,
        "query": " SELECT b.gId as 'BatchId',min(b.gMaterialId) as N'MaterialId', SUM(be.nQuantity) as N'Quantity'\r\n \t\t,min(b.StorageLocationId) as N'StorageLocationId', GETUTCDATE() as N'createdAt',min(b.gOperationId) as N'OperationId'\r\n FROM [BatchManagementDb].[dbo].[tblBatchEvent] be \r\n\tINNER JOIN [BatchManagementDb].[dbo].[tblBatch] b ON b.gId=be.gBatchId AND b.gProcessId = be.gProcessId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p ON p.gId = b.gProcessId\r\n\tINNER JOIN [HLRURASAP100].[ProductionManagementMasterData].[dbo].[tblBillOfMaterial] bm ON bm.gId=p.gBillOfMaterialId AND bm.gMaterialId=b.gMaterialId\r\n WHERE be.nType = 100 AND b.gProcessId = '{{{payload.processId}}}'\t\t\t\t\t\t\r\n GROUP BY b.gId  ",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 880,
        "y": 600,
        "wires": [
            [
                "2b410e28a90ef245"
            ]
        ]
    },
    {
        "id": "dc34ff8373f04a8f",
        "type": "MSSQL",
        "z": "7789b9bd921d5983",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get Material from BOMProcess",
        "outField": "BOM",
        "returnType": 0,
        "throwErrors": 1,
        "query": " SELECT p.gOperationId as N'operationId',bm.gMaterialId as N'materialId', GETUTCDATE() as N'dateTime',p.gId as N'processId'\t\t \t \t\r\n FROM [ProductionManagementRunTimeDb].[dbo].[tblProcess] p\r\n\tINNER JOIN [HLRURASAP100].[ProductionManagementMasterData].[dbo].[tblBillOfMaterial] bm ON bm.gId=p.gBillOfMaterialId\r\n WHERE p.gId ='{{{Input.processId}}}'\t\t\t\t\t",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 590,
        "y": 680,
        "wires": [
            [
                "db4ca57907684751"
            ]
        ]
    },
    {
        "id": "6264f8b893c7f874",
        "type": "MSSQL",
        "z": "7789b9bd921d5983",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Select Batchs from Process",
        "outField": "Intake",
        "returnType": 0,
        "throwErrors": 1,
        "query": " SELECT b.gId as 'BatchId',min(b.gMaterialId) as N'MaterialId', SUM(be.nQuantity) as N'Quantity',min(b.StorageLocationId) as N'StorageLocationId',\r\n  GETUTCDATE() as N'CreatedAt',min(b.gOperationId) as N'OperationId',min(b.gProcessId) as  N'ProcessId'\r\n FROM [BatchManagementDb].[dbo].[tblBatchEvent] be \r\n\tINNER JOIN [BatchManagementDb].[dbo].[tblBatch] b ON b.gId=be.gBatchId AND b.gProcessId = be.gProcessId\r\n WHERE be.nType = 100 AND b.gProcessId = '{{{payload.processId}}}'\t\t\t\t\t\t\r\n GROUP BY b.gId",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 880,
        "y": 140,
        "wires": [
            [
                "abaecec652b0ae84"
            ]
        ]
    },
    {
        "id": "bf93fa4a7486211d",
        "type": "MSSQL",
        "z": "7789b9bd921d5983",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Outtake from Process",
        "outField": "Outtake",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT b.gMaterialId as N'MaterialId'     \r\n      ,ABS(SUM(be.nQuantity)) as N'Quantity' \r\n      ,min(p.gOperationId) as N'OperationId'\r\n      ,GETUTCDATE() as N'CreatedAt'\r\n  FROM [BatchManagementDb].[dbo].[tblBatchEvent] be\r\n\t  INNER JOIN [BatchManagementDb].[dbo].[tblBatch] b ON b.gId=be.gBatchId\r\n    INNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p ON p.gId = be.gProcessId\r\n  WHERE ntype = 200\r\n  AND be.gProcessId = '{{{payload.processId}}}'\r\n  GROUP BY b.gMaterialId\r\n  ",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 420,
        "y": 140,
        "wires": [
            [
                "e5f08568171b8475"
            ]
        ]
    },
    {
        "id": "bc3edf57ba3b1f76",
        "type": "inject",
        "z": "ee18062312a58cf2",
        "name": "",
        "props": [
            {
                "p": "TransferStorageLocationEventMessage.StorageLocationRfidLink",
                "v": "000000000000000500000712",
                "vt": "str"
            },
            {
                "p": "TransferStorageLocationEventMessage.RelatedStorageLocationRfidLink",
                "v": "78",
                "vt": "str"
            },
            {
                "p": "TransferStorageLocationEventMessage.TransferStorageLocationType",
                "v": "5",
                "vt": "num"
            },
            {
                "p": "TransferStorageLocationEventMessage.MovementDirection",
                "v": "1",
                "vt": "num"
            },
            {
                "p": "TransferStorageLocationEventMessage.EventDateTime",
                "v": "2024-05-28T15:27:12",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 740,
        "y": 20,
        "wires": [
            [
                "c36789e539316bd8"
            ]
        ]
    },
    {
        "id": "c36789e539316bd8",
        "type": "subflow:ca94f48e1f18b542",
        "z": "ee18062312a58cf2",
        "name": "",
        "x": 730,
        "y": 120,
        "wires": [
            [
                "ae774265b03ee491"
            ]
        ]
    },
    {
        "id": "e3df5ade4136f1e2",
        "type": "switch",
        "z": "ee18062312a58cf2",
        "name": "SL найден?",
        "property": "SL[0].Id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1510,
        "y": 120,
        "wires": [
            [
                "bbba4b6edcf43b07"
            ],
            [
                "549946b8a29de480"
            ]
        ]
    },
    {
        "id": "d5267906268e3d15",
        "type": "comment",
        "z": "ee18062312a58cf2",
        "name": "описание БП",
        "info": "SLRP-оборотная тара\nБуфер\n если соурс не сущ, а таргет и тергет.альтернатив есть, то создать и переместить в таргет.альтернатив\n\n если соурс был найден\n  то при входе если соурс еще не под таргетом, то переместить в таргет\n иначе если выход и у таргета есть альтернатив, \n то переместить в альтренатив\n\nЗона потребления\n если соурс не сущ, а таргет есть, то создать и переместить под таргет\n\n если соурс есть и вход, то опустошить в таргет\n\nОчистка\n если соурс не сущ, а таргет есть, то создать и переместить под таргет\n\n если сорус есть и вход, то ПЕРЕМЕСТИТЬ в таргет, а затем ОЧИСТИТЬ",
        "x": 1250,
        "y": 20,
        "wires": []
    },
    {
        "id": "bbba4b6edcf43b07",
        "type": "switch",
        "z": "ee18062312a58cf2",
        "name": "switch TransferStorageLocationType",
        "property": "SL[0].StaticStorageLocationType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 190,
        "y": 460,
        "wires": [
            [
                "b4c171099285af92"
            ],
            [
                "53f76fe258c4011b"
            ],
            [
                "d5201d58bdeff1c8"
            ],
            [
                "549946b8a29de480"
            ]
        ],
        "outputLabels": [
            "BuferTransfer",
            "ConsumptionArea",
            "Cleaning",
            null
        ]
    },
    {
        "id": "9320242aaafeed9e",
        "type": "switch",
        "z": "ee18062312a58cf2",
        "name": "SLRP==null?",
        "property": "SLRP",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 400,
        "wires": [
            [
                "94a546fcf932f4e8"
            ],
            [
                "82667c74522a951a"
            ]
        ],
        "outputLabels": [
            "is null",
            "not null"
        ]
    },
    {
        "id": "53f76fe258c4011b",
        "type": "switch",
        "z": "ee18062312a58cf2",
        "name": "SLRP==null?",
        "property": "SLRP",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 560,
        "wires": [
            [
                "d55123ee86023a59"
            ],
            [
                "8863bba2ba10e17a"
            ]
        ],
        "outputLabels": [
            "is null",
            "not null"
        ]
    },
    {
        "id": "d5201d58bdeff1c8",
        "type": "switch",
        "z": "ee18062312a58cf2",
        "name": "SLRP==null?",
        "property": "SLRP",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 620,
        "wires": [
            [
                "2ddf58a689a5c23b"
            ],
            [
                "f8a7e12029a9a9a4"
            ]
        ],
        "outputLabels": [
            "is null",
            "not null"
        ]
    },
    {
        "id": "94a546fcf932f4e8",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "prep SLRP create cmd",
        "func": "let type\n\nswitch (msg.TransferStorageLocationEventMessage.TransferStorageLocationType) {\n  case 1:\n        type = 'Ведро мал.';\n    break;\n  case 2:\n        type = 'Ведро больш.';\n    break;\n  case 3:\n        type = 'Ящик';\n    break;\n    case 4:\n        type = 'Тележка';\n    break;\n    case 5:\n        type = 'Паллета';\n    break;\n  default:\n        type = '';\n}\n\nlet createStorageLocationCommand =\n{\n    AccessId: msg.SL[0].AccessId,\n    Description: type +' ('+ parseInt(msg.TransferStorageLocationEventMessage.StorageLocationRfidLink.substring(16, msg.TransferStorageLocationEventMessage.StorageLocationRfidLink.length), 16) + ')',\n    ExternalSystemRfidLink: msg.TransferStorageLocationEventMessage.StorageLocationRfidLink,\n    TransferStorageLocationType: msg.TransferStorageLocationEventMessage.TransferStorageLocationType\n}\n\nmsg.payload = createStorageLocationCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 380,
        "wires": [
            [
                "fbbf0a1c48a40c93"
            ]
        ]
    },
    {
        "id": "fbbf0a1c48a40c93",
        "type": "http request",
        "z": "ee18062312a58cf2",
        "name": "create SLRP",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/createTransferStorageLocation",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1110,
        "y": 380,
        "wires": [
            [
                "aa0b389fa3eaa40f",
                "1546fce13db9ebdd"
            ]
        ]
    },
    {
        "id": "d55123ee86023a59",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "prep SLRP create cmd",
        "func": "let type\n\nswitch (msg.TransferStorageLocationEventMessage.TransferStorageLocationType) {\n   case 1:\n        type = 'Ведро мал.';\n    break;\n  case 2:\n        type = 'Ведро больш.';\n    break;\n  case 3:\n        type = 'Ящик';\n    break;\n    case 4:\n        type = 'Тележка';\n    break;\n    case 5:\n        type = 'Паллета';\n    break;\n  default:\n        type = '';\n}\n\nlet createStorageLocationCommand =\n{\n    AccessId: msg.SL[0].AccessId,\n    Description: type +' ('+ parseInt(msg.TransferStorageLocationEventMessage.StorageLocationRfidLink.substring(16, msg.TransferStorageLocationEventMessage.StorageLocationRfidLink.length), 16) + ')',\n    ExternalSystemRfidLink: msg.TransferStorageLocationEventMessage.StorageLocationRfidLink,\n    TransferStorageLocationType: msg.TransferStorageLocationEventMessage.TransferStorageLocationType\n}\n\nmsg.payload = createStorageLocationCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 540,
        "wires": [
            [
                "8541d78f1de0b2a1"
            ]
        ]
    },
    {
        "id": "8541d78f1de0b2a1",
        "type": "http request",
        "z": "ee18062312a58cf2",
        "name": "create SLRP",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/createTransferStorageLocation",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1110,
        "y": 540,
        "wires": [
            [
                "bc4ca4204ff57734",
                "1546fce13db9ebdd"
            ]
        ]
    },
    {
        "id": "92452f932f9b1962",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "prep SLRP transfer cmd",
        "func": "msg.SourceStorageLocation = msg.payload;\n\nlet transferStorageLocationCommand =\n{\n    StorageLocationId: msg.SourceStorageLocation.Id,\n    TargetStorageLocationId: msg.TargetStorageLocation.Id,\n    EventDateTime: msg.TransferStorageLocationEventMessage.EventDateTime\n}\n\nmsg.payload = transferStorageLocationCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 540,
        "wires": [
            [
                "65987a25cddcca74"
            ]
        ]
    },
    {
        "id": "65987a25cddcca74",
        "type": "http request",
        "z": "ee18062312a58cf2",
        "name": "transfer SLRP",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/v2/Operation/transferStorageLocation",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1720,
        "y": 540,
        "wires": [
            [
                "994f663e10ef071a"
            ]
        ]
    },
    {
        "id": "b4c171099285af92",
        "type": "switch",
        "z": "ee18062312a58cf2",
        "name": "MovementDirection",
        "property": "TransferStorageLocationEventMessage.MovementDirection",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 420,
        "wires": [
            [
                "9320242aaafeed9e"
            ],
            [
                "422a6f71eb97f30f"
            ]
        ],
        "outputLabels": [
            "Enter",
            "Exit"
        ]
    },
    {
        "id": "82667c74522a951a",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "prep SL transfer cmd",
        "func": "let transferStorageLocationCommand =\n{\n    StorageLocationId: msg.SLRP[0].Id,\n    TargetStorageLocationId: msg.SL[0].Id,\n    EventDateTime: msg.TransferStorageLocationEventMessage.EventDateTime\n}\n\nmsg.payload = transferStorageLocationCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 420,
        "wires": [
            [
                "16f626822fcfc865"
            ]
        ]
    },
    {
        "id": "31e2322ab9d1fca7",
        "type": "http request",
        "z": "ee18062312a58cf2",
        "name": "transfer SLRP",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/v2/Operation/transferStorageLocation",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1720,
        "y": 460,
        "wires": [
            [
                "994f663e10ef071a"
            ]
        ]
    },
    {
        "id": "422a6f71eb97f30f",
        "type": "switch",
        "z": "ee18062312a58cf2",
        "name": "SL.alternative!=null?",
        "property": "SL[0].AlternativeStorageLocationId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 480,
        "wires": [
            [
                "645a02b62b265abc"
            ],
            [
                "549946b8a29de480"
            ]
        ],
        "outputLabels": [
            "not null",
            null
        ]
    },
    {
        "id": "8863bba2ba10e17a",
        "type": "switch",
        "z": "ee18062312a58cf2",
        "name": "MovementDirection=Enter?",
        "property": "TransferStorageLocationEventMessage.MovementDirection",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 720,
        "y": 580,
        "wires": [
            [
                "2403fa544f7a9409"
            ],
            [
                "994f663e10ef071a"
            ]
        ],
        "outputLabels": [
            "Enter",
            null
        ]
    },
    {
        "id": "2230e7412f2b8e93",
        "type": "function",
        "z": "ee18062312a58cf2",
        "d": true,
        "name": "prep SLRP empty to cmd",
        "func": "\nvar emptyStorageLocationCommand =\n{\n    SourceStorageLocation: msg.SLRP[0].Id,\n    TargetStorageLocationId: msg.SL[0].Id,\n    EventDateTime: msg.TransferStorageLocationEventMessage.EventDateTime\n}\n\nmsg.payload = emptyStorageLocationCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 580,
        "wires": [
            [
                "1b59e8a92fa8f4f0"
            ]
        ]
    },
    {
        "id": "1b59e8a92fa8f4f0",
        "type": "http request",
        "z": "ee18062312a58cf2",
        "d": true,
        "name": "empty SLRP",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/emptyTo",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "token"
            }
        ],
        "x": 2250,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "f8a7e12029a9a9a4",
        "type": "switch",
        "z": "ee18062312a58cf2",
        "name": "MovementDirection=Enter?",
        "property": "TransferStorageLocationEventMessage.MovementDirection",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 720,
        "y": 660,
        "wires": [
            [
                "72ba8467a856a2d3"
            ],
            [
                "549946b8a29de480"
            ]
        ],
        "outputLabels": [
            "Enter",
            null
        ]
    },
    {
        "id": "72ba8467a856a2d3",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "prep SLRP transfer cmd",
        "func": "let transferStorageLocationCommand =\n{\n    StorageLocationId: msg.SLRP[0].Id,\n    TargetStorageLocationId: msg.SL[0].Id,\n    EventDateTime: msg.TransferStorageLocationEventMessage.EventDateTime\n}\n\nmsg.payload = transferStorageLocationCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 660,
        "wires": [
            [
                "bdb3f521b4828074"
            ]
        ]
    },
    {
        "id": "bdb3f521b4828074",
        "type": "http request",
        "z": "ee18062312a58cf2",
        "name": "transfer SLRP",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/v2/Operation/transferStorageLocation",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1300,
        "y": 660,
        "wires": [
            [
                "2b38c51e87cbf184"
            ]
        ]
    },
    {
        "id": "2b38c51e87cbf184",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "prep sl clean cmd",
        "func": "let cleanStorageLocationCommand =\n{\n    StorageLocationId: msg.SLRP[0].Id,\n    EventDateTime: msg.TransferStorageLocationEventMessage.EventDateTime\n}\n\nmsg.payload = cleanStorageLocationCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 660,
        "wires": [
            [
                "03421550ec0ce401"
            ]
        ]
    },
    {
        "id": "03421550ec0ce401",
        "type": "http request",
        "z": "ee18062312a58cf2",
        "name": "clean SLRP",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/cleanStorageLocation",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1710,
        "y": 660,
        "wires": [
            [
                "994f663e10ef071a"
            ]
        ]
    },
    {
        "id": "c0722aa86f476d91",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "prep SLRP transfer cmd (alt)",
        "func": "let transferStorageLocationCommand =\n{\n    StorageLocationId: msg.SLRP[0].Id,\n    TargetStorageLocationId: msg.SL[0].AlternativeStorageLocationId,\n    EventDateTime: msg.TransferStorageLocationEventMessage.EventDateTime\n}\n\nmsg.payload = transferStorageLocationCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 500,
        "wires": [
            [
                "ee9810bade47512e"
            ]
        ]
    },
    {
        "id": "54dad133eb615f83",
        "type": "change",
        "z": "ee18062312a58cf2",
        "name": "payload->TransferStorageLocationEventMessage",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "TransferStorageLocationEventMessage",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 120,
        "wires": [
            [
                "c36789e539316bd8"
            ]
        ]
    },
    {
        "id": "645a02b62b265abc",
        "type": "switch",
        "z": "ee18062312a58cf2",
        "name": "SLRP==null?",
        "property": "SLRP",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 870,
        "y": 480,
        "wires": [
            [
                "549946b8a29de480"
            ],
            [
                "c0722aa86f476d91"
            ]
        ],
        "outputLabels": [
            "is null",
            "not null"
        ]
    },
    {
        "id": "e3be44d0067e2974",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "prep SLRP create cmd",
        "func": "let type\n\nswitch (msg.TransferStorageLocationEventMessage.TransferStorageLocationType) {\n   case 1:\n        type = 'Ведро мал.';\n    break;\n  case 2:\n        type = 'Ведро больш.';\n    break;\n  case 3:\n        type = 'Ящик';\n    break;\n    case 4:\n        type = 'Тележка';\n    break;\n    case 5:\n        type = 'Паллета';\n    break;\n  default:\n        type = '';\n}\n\nlet createStorageLocationCommand =\n{\n    AccessId: msg.SL[0].AccessId,\n    Description: type +' ('+ parseInt(msg.TransferStorageLocationEventMessage.StorageLocationRfidLink.substring(16, msg.TransferStorageLocationEventMessage.StorageLocationRfidLink.length), 16) + ')',\n    ExternalSystemRfidLink: msg.TransferStorageLocationEventMessage.StorageLocationRfidLink,\n    TransferStorageLocationType: msg.TransferStorageLocationEventMessage.TransferStorageLocationType\n}\n\nmsg.payload = createStorageLocationCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 460,
        "wires": [
            [
                "c7c99b76fa60ffcd"
            ]
        ]
    },
    {
        "id": "c7c99b76fa60ffcd",
        "type": "http request",
        "z": "ee18062312a58cf2",
        "name": "create SLRP",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/createTransferStorageLocation",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1290,
        "y": 460,
        "wires": [
            [
                "63dc5a07f9d3b529",
                "1546fce13db9ebdd"
            ]
        ]
    },
    {
        "id": "d2d24eaee589b50d",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "prep SLRP transfer cmd",
        "func": "let transferStorageLocationCommand =\n{\n    StorageLocationId: msg.payload.id,\n    TargetStorageLocationId: msg.SL[0].Id,\n    EventDateTime: msg.TransferStorageLocationEventMessage.EventDateTime\n}\n\nmsg.payload = transferStorageLocationCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 380,
        "wires": [
            [
                "2074e357f57ebfbd"
            ]
        ]
    },
    {
        "id": "63dc5a07f9d3b529",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "prep SLRP transfer cmd (alt)",
        "func": "let transferStorageLocationCommand =\n{\n    StorageLocationId: msg.payload.id,\n    TargetStorageLocationId: msg.SL[0].AlternativeStorageLocationId,\n    EventDateTime: msg.TransferStorageLocationEventMessage.EventDateTime\n}\n\nmsg.payload = transferStorageLocationCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 460,
        "wires": [
            [
                "31e2322ab9d1fca7"
            ]
        ]
    },
    {
        "id": "16f626822fcfc865",
        "type": "http request",
        "z": "ee18062312a58cf2",
        "name": "transfer SLRP",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/v2/Operation/transferStorageLocation",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1720,
        "y": 420,
        "wires": [
            [
                "994f663e10ef071a"
            ]
        ]
    },
    {
        "id": "ee9810bade47512e",
        "type": "http request",
        "z": "ee18062312a58cf2",
        "name": "transfer SLRP",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/v2/Operation/transferStorageLocation",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1720,
        "y": 500,
        "wires": [
            [
                "994f663e10ef071a"
            ]
        ]
    },
    {
        "id": "2074e357f57ebfbd",
        "type": "http request",
        "z": "ee18062312a58cf2",
        "name": "transfer SLRP",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/v2/Operation/transferStorageLocation",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1720,
        "y": 380,
        "wires": [
            [
                "994f663e10ef071a"
            ]
        ]
    },
    {
        "id": "7163bddbb37da3dc",
        "type": "comment",
        "z": "ee18062312a58cf2",
        "name": "Создание,перемещение и мойка ОТ",
        "info": "",
        "x": 910,
        "y": 60,
        "wires": []
    },
    {
        "id": "2ddf58a689a5c23b",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "prep SLRP create cmd",
        "func": "let type\n\nswitch (msg.TransferStorageLocationEventMessage.TransferStorageLocationType) {\n   case 1:\n        type = 'Ведро мал.';\n    break;\n  case 2:\n        type = 'Ведро больш.';\n    break;\n  case 3:\n        type = 'Ящик';\n    break;\n    case 4:\n        type = 'Тележка';\n    break;\n    case 5:\n        type = 'Паллета';\n    break;\n  default:\n        type = '';\n}\n\nlet createStorageLocationCommand =\n{\n    AccessId: msg.SL[0].AccessId,\n    Description: type +' ('+ parseInt(msg.TransferStorageLocationEventMessage.StorageLocationRfidLink.substring(16, msg.TransferStorageLocationEventMessage.StorageLocationRfidLink.length), 16) + ')',\n    ExternalSystemRfidLink: msg.TransferStorageLocationEventMessage.StorageLocationRfidLink,\n    TransferStorageLocationType: msg.TransferStorageLocationEventMessage.TransferStorageLocationType\n}\n\nmsg.payload = createStorageLocationCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 620,
        "wires": [
            [
                "cdc7e5d95dd76160"
            ]
        ]
    },
    {
        "id": "cdc7e5d95dd76160",
        "type": "http request",
        "z": "ee18062312a58cf2",
        "name": "create SLRP",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/createTransferStorageLocation",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1110,
        "y": 620,
        "wires": [
            [
                "0d7469195e72471a",
                "1546fce13db9ebdd"
            ]
        ]
    },
    {
        "id": "2df6d08754f8ddd8",
        "type": "http request",
        "z": "ee18062312a58cf2",
        "name": "transfer SLRP",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/v2/Operation/transferStorageLocation",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1720,
        "y": 620,
        "wires": [
            [
                "e82246f561ce4b49"
            ]
        ]
    },
    {
        "id": "beac89e591f60836",
        "type": "http request",
        "z": "ee18062312a58cf2",
        "name": "transfer SLRP",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/v2/Operation/transferStorageLocation",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1720,
        "y": 580,
        "wires": [
            [
                "994f663e10ef071a"
            ]
        ]
    },
    {
        "id": "2403fa544f7a9409",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "prep SL transfer cmd",
        "func": "let transferStorageLocationCommand =\n{\n    StorageLocationId: msg.SLRP[0].Id,\n    TargetStorageLocationId: msg.SL[0].Id,\n    EventDateTime: msg.TransferStorageLocationEventMessage.EventDateTime\n}\n\nmsg.payload = transferStorageLocationCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 580,
        "wires": [
            [
                "beac89e591f60836"
            ]
        ]
    },
    {
        "id": "ae774265b03ee491",
        "type": "subflow:f2924807aef52857",
        "z": "ee18062312a58cf2",
        "name": "",
        "x": 880,
        "y": 120,
        "wires": [
            [
                "20345cbb73016931"
            ]
        ]
    },
    {
        "id": "dc4f9cbc4a8f525e",
        "type": "comment",
        "z": "ee18062312a58cf2",
        "name": "PZo",
        "info": "",
        "x": 50,
        "y": 20,
        "wires": []
    },
    {
        "id": "413f9d8cc7e05409",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "prep SLRP transfer cmd",
        "func": "let transferStorageLocationCommand =\n{\n    StorageLocationId: msg.payload.id,\n    TargetStorageLocationId: msg.SL[0].Id,\n    EventDateTime: msg.TransferStorageLocationEventMessage.EventDateTime\n}\n\nmsg.payload = transferStorageLocationCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 620,
        "wires": [
            [
                "2df6d08754f8ddd8"
            ]
        ]
    },
    {
        "id": "e82246f561ce4b49",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "prep sl clean cmd",
        "func": "let cleanStorageLocationCommand =\n{\n    StorageLocationId: msg.payload.id,\n    EventDateTime: msg.TransferStorageLocationEventMessage.EventDateTime\n}\n\nmsg.payload = cleanStorageLocationCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 620,
        "wires": [
            [
                "03421550ec0ce401"
            ]
        ]
    },
    {
        "id": "994f663e10ef071a",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "prepere data exhange",
        "func": "let Data;\nData={  RFIDId :msg.SLRP[0].Id ,\n        Zone :msg.TransferStorageLocationEventMessage.RelatedStorageLocationRfidLink,\n        StorageLocationId : msg.SL[0].Id,\n        StaticStorageLocationType: msg.SL[0].StaticStorageLocationType,\n        EquipmentId : msg.SL[0].EquipmentTreeId,\n        MovementDirection : msg.TransferStorageLocationEventMessage.MovementDirection,\n        AccessId : msg.SL[0].AccessId,\n        Token : msg.Token\n};\nmsg.payload=Data;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 480,
        "wires": [
            [
                "01c82026f78ff9ec",
                "549946b8a29de480"
            ]
        ]
    },
    {
        "id": "aa0b389fa3eaa40f",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "RFID ID",
        "func": "let SLRP = [{Id : msg.payload.id}]; \nmsg.SLRP = SLRP\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 380,
        "wires": [
            [
                "d2d24eaee589b50d"
            ]
        ]
    },
    {
        "id": "bc4ca4204ff57734",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "RFID ID",
        "func": "let SLRP = [{Id : msg.payload.id}]; \nmsg.SLRP = SLRP\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 540,
        "wires": [
            [
                "92452f932f9b1962"
            ]
        ]
    },
    {
        "id": "0d7469195e72471a",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "RFID ID",
        "func": "let SLRP = [{Id : msg.payload.id}]; \nmsg.SLRP = SLRP\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 620,
        "wires": [
            [
                "413f9d8cc7e05409"
            ]
        ]
    },
    {
        "id": "03cd536b027e52b1",
        "type": "debug",
        "z": "ee18062312a58cf2",
        "name": "debug 70",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 60,
        "wires": []
    },
    {
        "id": "47e376bcf0434fcc",
        "type": "catch",
        "z": "ee18062312a58cf2",
        "d": true,
        "name": "все, кроме http",
        "scope": [
            "bc3edf57ba3b1f76",
            "c36789e539316bd8",
            "e3df5ade4136f1e2",
            "d5267906268e3d15",
            "bbba4b6edcf43b07",
            "9320242aaafeed9e",
            "53f76fe258c4011b",
            "d5201d58bdeff1c8",
            "94a546fcf932f4e8",
            "d55123ee86023a59",
            "92452f932f9b1962",
            "b4c171099285af92",
            "82667c74522a951a",
            "422a6f71eb97f30f",
            "8863bba2ba10e17a",
            "f8a7e12029a9a9a4",
            "72ba8467a856a2d3",
            "2b38c51e87cbf184",
            "c0722aa86f476d91",
            "54dad133eb615f83",
            "20345cbb73016931",
            "6a86a459f23d979a",
            "645a02b62b265abc",
            "e3be44d0067e2974",
            "d2d24eaee589b50d",
            "63dc5a07f9d3b529",
            "2ddf58a689a5c23b",
            "2403fa544f7a9409",
            "413f9d8cc7e05409",
            "e82246f561ce4b49",
            "994f663e10ef071a",
            "aa0b389fa3eaa40f",
            "bc4ca4204ff57734",
            "0d7469195e72471a"
        ],
        "uncaught": false,
        "x": 420,
        "y": 860,
        "wires": [
            [
                "7a6a6ad809fd0fbb"
            ]
        ]
    },
    {
        "id": "f1836a67b728a91f",
        "type": "debug",
        "z": "ee18062312a58cf2",
        "name": "Debug Save Catch Data",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 740,
        "wires": []
    },
    {
        "id": "7a6a6ad809fd0fbb",
        "type": "subflow:f8fc59a8d3d93ef9",
        "z": "ee18062312a58cf2",
        "name": "",
        "x": 340,
        "y": 740,
        "wires": [
            [
                "f1836a67b728a91f"
            ]
        ]
    },
    {
        "id": "1546fce13db9ebdd",
        "type": "debug",
        "z": "ee18062312a58cf2",
        "name": "create SLRP result",
        "active": true,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 760,
        "wires": []
    },
    {
        "id": "7059a962e6897ac7",
        "type": "comment",
        "z": "ee18062312a58cf2",
        "d": true,
        "name": "почему?",
        "info": "Если ошибка происходит в http узле, то выполнение потока не прерывается и ошибка еще раз происходит, но уже далее в функциях.\nПо этой причине, если ловить все ошибки, то по одному сообщению прилетит 2 ошибки, соответственно дважды прилетит на вход ноды AMQP\nи в результате отвалится консюмер. Возврат по сообщению в эту ноду делать нужно только 1 раз.",
        "x": 400,
        "y": 900,
        "wires": []
    },
    {
        "id": "549946b8a29de480",
        "type": "rbe",
        "z": "ee18062312a58cf2",
        "name": "only unique msgId",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "_msgid",
        "topi": "topic",
        "x": 150,
        "y": 840,
        "wires": [
            [
                "b02147e170733132",
                "6e047dedc5d51687",
                "c3a1ac9349e30812"
            ]
        ]
    },
    {
        "id": "68ce4477c67ef8b5",
        "type": "catch",
        "z": "ee18062312a58cf2",
        "name": "ловить все",
        "scope": null,
        "uncaught": false,
        "x": 110,
        "y": 740,
        "wires": [
            [
                "549946b8a29de480",
                "7a6a6ad809fd0fbb"
            ]
        ]
    },
    {
        "id": "d0853bc52a5097cb",
        "type": "debug",
        "z": "ee18062312a58cf2",
        "name": "debug ackDiagMsgId",
        "active": true,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "ackDiagMsgId",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 960,
        "wires": []
    },
    {
        "id": "6e047dedc5d51687",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "AckForMsgId=",
        "func": "msg.ackDiagMsgId = 'AckForMsgId: ' +  msg._msgid;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 900,
        "wires": [
            [
                "d0853bc52a5097cb"
            ]
        ]
    },
    {
        "id": "3877f22ba8e5c571",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "rfidMessages buffer",
        "func": "let rfidMessages = flow.get('rfidMessages');\n\nif(!rfidMessages)\n{\n    rfidMessages = [];\n    flow.set('rfidMessages', rfidMessages);\n}\n\nrfidMessages.push(msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "25e38f7b23b4c42d",
        "type": "inject",
        "z": "ee18062312a58cf2",
        "name": "раз в 1 сек",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 220,
        "wires": [
            [
                "aac5fdae0d64ce39"
            ]
        ]
    },
    {
        "id": "aac5fdae0d64ce39",
        "type": "switch",
        "z": "ee18062312a58cf2",
        "name": "processingRunning?",
        "property": "processingRunning",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 400,
        "y": 220,
        "wires": [
            [
                "b764e48147388cd3"
            ],
            [
                "b764e48147388cd3"
            ]
        ]
    },
    {
        "id": "b764e48147388cd3",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "message to process",
        "func": "flow.set('processingRunning', true);\nlet rfidMessages = flow.get('rfidMessages');\n\nmsg.payload = null;\n\nif (rfidMessages) {\n    msg.payload = rfidMessages.shift();\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 200,
        "wires": [
            [
                "c1634d044cb59284"
            ]
        ]
    },
    {
        "id": "c1634d044cb59284",
        "type": "switch",
        "z": "ee18062312a58cf2",
        "name": "payload not null?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 180,
        "wires": [
            [
                "d46d74eae2e2ab86",
                "54dad133eb615f83"
            ],
            [
                "cb7699a83609b6c0"
            ]
        ]
    },
    {
        "id": "cb7699a83609b6c0",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "processingRunning=false",
        "func": "flow.set('processingRunning', false);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "d46d74eae2e2ab86",
        "type": "debug",
        "z": "ee18062312a58cf2",
        "name": "debug 121",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 180,
        "wires": []
    },
    {
        "id": "2858f2eaa3b83305",
        "type": "inject",
        "z": "ee18062312a58cf2",
        "name": "сброс метки \"в обработке\"",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 900,
        "y": 220,
        "wires": [
            [
                "cb7699a83609b6c0"
            ]
        ]
    },
    {
        "id": "94cf43bc4ebb8903",
        "type": "function",
        "z": "ee18062312a58cf2",
        "name": "clear rfidMessages",
        "func": "flow.set('rfidMessages', []);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "d32b508334f9672b",
        "type": "inject",
        "z": "ee18062312a58cf2",
        "name": "сброс буфера",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 260,
        "wires": [
            [
                "94cf43bc4ebb8903"
            ]
        ]
    },
    {
        "id": "2d1e0a2f36bbf72f",
        "type": "comment",
        "z": "ee18062312a58cf2",
        "name": "Как работает?",
        "info": "Из RMQ считываются сообщения сразу же с подтверждением.\nСообщения помещацются в буфер потока (flow.set...)\nРаз в 1 сек идет чтение из буфера первой записи и отправка ее на обработку\nПока идет обработка в переменной потока выставлен бит, что обработка активна.\nБит сбрасывается в конце обработки или по ошибке.\nЕсли обработка еще не завершилась (бит в true), очередной цикл пропускается.\n",
        "x": 140,
        "y": 120,
        "wires": []
    },
    {
        "id": "4ea8dbb8a071dfb4",
        "type": "amqp-in",
        "z": "ee18062312a58cf2",
        "name": "StorageLocationTransferEvent",
        "broker": "2f76d8b874d08554",
        "prefetch": "1",
        "noAck": false,
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "StorageLocationTransferEvent",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "3877f22ba8e5c571",
                "3c314fa39997328f",
                "03cd536b027e52b1"
            ]
        ]
    },
    {
        "id": "01c82026f78ff9ec",
        "type": "amqp-out",
        "z": "ee18062312a58cf2",
        "name": "",
        "broker": "2f76d8b874d08554",
        "exchangeName": "NR_BusinessProcess_RFID",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeRoutingKeyType": "str",
        "exchangeDurable": true,
        "amqpProperties": "{ \"headers\": {} }",
        "rpcTimeoutMilliseconds": 3000,
        "outputs": 0,
        "x": 2380,
        "y": 480,
        "wires": []
    },
    {
        "id": "b02147e170733132",
        "type": "amqp-in-manual-ack",
        "z": "ee18062312a58cf2",
        "d": true,
        "name": "StorageLocationTransferEvent",
        "broker": "2f76d8b874d08554",
        "prefetch": "1",
        "noAck": false,
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "StorageLocationTransferEvent",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 190,
        "y": 40,
        "wires": [
            [
                "54dad133eb615f83",
                "3c314fa39997328f",
                "03cd536b027e52b1"
            ]
        ]
    },
    {
        "id": "20345cbb73016931",
        "type": "MSSQL",
        "z": "ee18062312a58cf2",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "SelectSLRPByRfId",
        "outField": "SLRP",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT gId as 'Id' FROM [BatchManagementDb].[dbo].[tblStorageLocation]   \r\nWHERE nStorageLocationType = 2 AND szExternalSystemRfidLink='{{{TransferStorageLocationEventMessage.StorageLocationRfidLink}}}' --AND gAccessId='0CD985C2-68B4-447F-BB59-22BD1778886E'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1070,
        "y": 120,
        "wires": [
            [
                "6a86a459f23d979a"
            ]
        ]
    },
    {
        "id": "6a86a459f23d979a",
        "type": "MSSQL",
        "z": "ee18062312a58cf2",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "SelectSLbyExternalSystem",
        "outField": "SL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "  SELECT sl.gId as 'Id',sl.gAlternativeStorageLocationId as 'AlternativeStorageLocationId',sl.nStaticStorageLocationType as 'StaticStorageLocationType'\r\n        ,sl.gAccessId as 'AccessId', ev.gEquipmentTreeId as 'EquipmentTreeId'\r\n  FROM [BatchManagementDb].[dbo].[tblStorageLocation] sl\r\n\t  INNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalVertex] ev ON ev.gExternalObjectId=sl.gId\r\n\t  INNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ee ON ee.gExternalVertexId = ev.gId\r\n\t  INNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystem] es ON es.gId = ee.gExternalSystemId\r\n    WHERE es.szName=N'RFID' AND ee.szExternalId='{{{TransferStorageLocationEventMessage.RelatedStorageLocationRfidLink}}}' --AND gAccessId='0CD985C2-68B4-447F-BB59-22BD1778886E'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1300,
        "y": 120,
        "wires": [
            [
                "e3df5ade4136f1e2"
            ]
        ]
    },
    {
        "id": "3c314fa39997328f",
        "type": "MSSQL",
        "z": "ee18062312a58cf2",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "tblRFIDNRLog",
        "outField": "Log",
        "returnType": 0,
        "throwErrors": 1,
        "query": "INSERT INTO [dbExchange].[dbo].[tblRFIDNRLog]\r\nVALUES(N'{{{payload.StorageLocationRfidLink}}}','{{{payload.RelatedStorageLocationRfidLink}}}'\r\n,'{{{payload.TransferStorageLocationType}}}','{{{payload.MovementDirection}}}','{{{payload.EventDateTime}}}',GETDATE())",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 520,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "db29a12b74a14ecd",
        "type": "debug",
        "z": "a216597345f740e6",
        "name": "debug 53",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 20,
        "wires": []
    },
    {
        "id": "3e5a288f1e7496ec",
        "type": "function",
        "z": "a216597345f740e6",
        "d": true,
        "name": "prep Process setEnd",
        "func": "let QueryParameterCommand =\"?eventName=ProductionProcess.LeaveInProcessStep&EventKey=\"+msg.Process[0].ProcessId;\n//var BodyCommand ={ NewStepOutcome : \"Completed\" } \nlet BodyCommand = { \"Source\": 4, \"Target\": 5 }\nmsg.QueryParameter = QueryParameterCommand;\nmsg.payload = BodyCommand;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 340,
        "wires": [
            [
                "6c1b6ba3be9254b7"
            ]
        ]
    },
    {
        "id": "1037868555120477",
        "type": "http request",
        "z": "a216597345f740e6",
        "name": "create Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.ProductionUrl}}}/api/Process",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1520,
        "y": 220,
        "wires": [
            [
                "63d1225f9c36fde2"
            ]
        ]
    },
    {
        "id": "7b7156d0a5a1368f",
        "type": "switch",
        "z": "a216597345f740e6",
        "name": "MovementDirection",
        "property": "payload.MovementDirection",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 720,
        "wires": [
            [
                "8d24cb70e8a1f199"
            ],
            []
        ],
        "outputLabels": [
            "Enter",
            "Exit"
        ]
    },
    {
        "id": "8d4df8b416210227",
        "type": "function",
        "z": "a216597345f740e6",
        "name": "OuttakeDataConvert",
        "func": "const datas = msg.dataFromOuttake;\nlet outputMsgs = [];\ndatas.forEach(function(element) {\n    const data = {\n        ProcessId: element.ProcessId,\n        BatchId: element.BatchId,\n        StorageLocationId: element.StorageLocationId,\n        OperationId: element.OperationId,\n        Quantity: element.Quantity,\n        CompleteOuttake: true,\n    }\n    let ele = msg;\n    ele.payload = data;\n    outputMsgs.push(ele);\n});\n\nreturn [outputMsgs];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 460,
        "wires": [
            [
                "60847f223f7e8ab0"
            ]
        ]
    },
    {
        "id": "a5dd4bcbf41a3f07",
        "type": "comment",
        "z": "a216597345f740e6",
        "name": "Создание процесса",
        "info": "",
        "x": 1330,
        "y": 180,
        "wires": []
    },
    {
        "id": "15aa223472c09c76",
        "type": "switch",
        "z": "a216597345f740e6",
        "name": "Zone ==?",
        "property": "payload.Zone",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "78",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "79",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "81",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "83",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "257",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "258",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "80",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SDI",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "9",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "10",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "911",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "45",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "47",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "49",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "52",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "55",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "36",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "37",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "9999",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "13",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "30",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "13",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "28",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "82",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "84",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "157",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "158",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "978",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 29,
        "x": 220,
        "y": 380,
        "wires": [
            [
                "a92c825496f0d084"
            ],
            [
                "a92c825496f0d084"
            ],
            [
                "a92c825496f0d084"
            ],
            [
                "a92c825496f0d084"
            ],
            [
                "a92c825496f0d084"
            ],
            [
                "a92c825496f0d084"
            ],
            [
                "a92c825496f0d084"
            ],
            [
                "a92c825496f0d084"
            ],
            [],
            [],
            [
                "d8914c437054104e"
            ],
            [
                "d8914c437054104e"
            ],
            [
                "d8914c437054104e"
            ],
            [
                "d8914c437054104e"
            ],
            [
                "d8914c437054104e"
            ],
            [
                "d8914c437054104e"
            ],
            [
                "dd1ec53966db4452"
            ],
            [
                "dd1ec53966db4452"
            ],
            [
                "89ac2535e1f31c0a"
            ],
            [
                "4ef4652c5e35558a"
            ],
            [
                "4ef4652c5e35558a"
            ],
            [
                "4ef4652c5e35558a"
            ],
            [
                "4ef4652c5e35558a"
            ],
            [
                "4ef4652c5e35558a"
            ],
            [
                "7b7156d0a5a1368f"
            ],
            [
                "7b7156d0a5a1368f"
            ],
            [
                "bc2b5fe1ef8021c2"
            ],
            [
                "bc2b5fe1ef8021c2"
            ],
            []
        ]
    },
    {
        "id": "0545275d4726e148",
        "type": "switch",
        "z": "a216597345f740e6",
        "d": true,
        "name": "BatchId !=0",
        "property": "Batch[0].BatchId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 80,
        "wires": [
            [
                "4ac68fe5610d1f04"
            ],
            [
                "a92c825496f0d084"
            ]
        ]
    },
    {
        "id": "4ac68fe5610d1f04",
        "type": "switch",
        "z": "a216597345f740e6",
        "d": true,
        "name": "MovementDirection",
        "property": "payload.MovementDirection",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 80,
        "wires": [
            [
                "4c5a893a96282bd5"
            ],
            [
                "b0b4b6dc8b5fe799"
            ]
        ],
        "outputLabels": [
            "Enter",
            "Exit"
        ]
    },
    {
        "id": "4c5a893a96282bd5",
        "type": "function",
        "z": "a216597345f740e6",
        "d": true,
        "name": "prep Process setStart",
        "func": "let QueryParameterCommand =\"?eventName=ProductionProcess.LeaveNewStep&EventKey=\"+msg.Batch[0].gProcessId;\nlet BodyCommand ={ NewStepOutcome : \"InProcess\" } \nmsg.QueryParameter = QueryParameterCommand;\nmsg.payload = BodyCommand;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 60,
        "wires": [
            [
                "3c00ee999b7b7bb7"
            ]
        ]
    },
    {
        "id": "b0b4b6dc8b5fe799",
        "type": "function",
        "z": "a216597345f740e6",
        "d": true,
        "name": "prep Process Suspended",
        "func": "let QueryParameterCommand =\"?eventName=ProductionProcess.LeaveInProcessStep&EventKey=\"+msg.Batch[0].gProcessId;\nlet BodyCommand ={ NewStepOutcome : \"Suspended\" } \nmsg.QueryParameter = QueryParameterCommand;\nmsg.payload = BodyCommand;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 120,
        "wires": [
            [
                "4e2f4cc4d69ee300"
            ]
        ]
    },
    {
        "id": "3c00ee999b7b7bb7",
        "type": "http request",
        "z": "a216597345f740e6",
        "d": true,
        "name": "start Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.WorkflowUrl}}}/api/Events{{{QueryParameter}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1310,
        "y": 60,
        "wires": [
            [
                "6869e9da2114f17b"
            ]
        ]
    },
    {
        "id": "6869e9da2114f17b",
        "type": "function",
        "z": "a216597345f740e6",
        "d": true,
        "name": "prep Process Suspended",
        "func": "let QueryParameterCommand =\"/publish/ProductionProcess.LeaveSuspendedStep/\"+msg.Batch[0].gProcessId;\n\nmsg.QueryParameter = QueryParameterCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 60,
        "wires": [
            [
                "7e33fe256aa88897"
            ]
        ]
    },
    {
        "id": "4e2f4cc4d69ee300",
        "type": "http request",
        "z": "a216597345f740e6",
        "d": true,
        "name": "Suspended Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.WorkflowUrl}}}/api/Events{{{QueryParameter}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1360,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "da460774c621724d",
        "type": "function",
        "z": "a216597345f740e6",
        "name": "prep Process create",
        "func": "let ProcessCreateCommand =\n{\n    OperationId: msg.Operation[0].OperationId,\n    ProcessAmount: 0,\n    EquipmentId: msg.payload.EquipmentId,\n    BillOfMaterialId: '',\n    CreateTypeId: 1\n}\n\nmsg.payload = ProcessCreateCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 220,
        "wires": [
            [
                "1037868555120477"
            ]
        ]
    },
    {
        "id": "c31e7bf3e2f0dc32",
        "type": "comment",
        "z": "a216597345f740e6",
        "name": "Завершение процесса",
        "info": "",
        "x": 1340,
        "y": 260,
        "wires": []
    },
    {
        "id": "a45c9b34eb1662f2",
        "type": "switch",
        "z": "a216597345f740e6",
        "name": "MovementDirection",
        "property": "payload.MovementDirection",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1090,
        "y": 260,
        "wires": [
            [
                "da460774c621724d"
            ],
            [
                "ea39c0fb7469c614",
                "5d7f151a70d40eb4"
            ]
        ],
        "outputLabels": [
            "Enter",
            "Exit"
        ]
    },
    {
        "id": "d738db79cf71f38a",
        "type": "switch",
        "z": "a216597345f740e6",
        "name": "Operation !=NULL",
        "property": "Operation",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 260,
        "wires": [
            [
                "a45c9b34eb1662f2"
            ],
            []
        ]
    },
    {
        "id": "05ab7f097fcea83a",
        "type": "comment",
        "z": "a216597345f740e6",
        "name": "Создание\\завершение процесса по RFID",
        "info": "",
        "x": 720,
        "y": 220,
        "wires": []
    },
    {
        "id": "d8914c437054104e",
        "type": "switch",
        "z": "a216597345f740e6",
        "name": "MovementDirection",
        "property": "payload.MovementDirection",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 320,
        "wires": [
            [],
            [
                "a92c825496f0d084"
            ]
        ],
        "outputLabels": [
            "Enter",
            "Exit"
        ]
    },
    {
        "id": "b972f77b2d2acf0f",
        "type": "comment",
        "z": "a216597345f740e6",
        "name": "Миксер стандартизации",
        "info": "",
        "x": 590,
        "y": 420,
        "wires": []
    },
    {
        "id": "6f9a672b2be6d275",
        "type": "switch",
        "z": "a216597345f740e6",
        "name": "Check Is Not Null",
        "property": "dataFromOuttake[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 810,
        "y": 460,
        "wires": [
            [
                "8d4df8b416210227"
            ]
        ]
    },
    {
        "id": "60847f223f7e8ab0",
        "type": "http request",
        "z": "a216597345f740e6",
        "name": "htttp put outtake",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/outtake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1220,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "5d7f151a70d40eb4",
        "type": "debug",
        "z": "a216597345f740e6",
        "name": "debug 54",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 360,
        "wires": []
    },
    {
        "id": "4cb26d45662cbdad",
        "type": "http request",
        "z": "a216597345f740e6",
        "name": "htttp put TransferBatch",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/TransferBatch",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 880,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "f9605cad601a76f8",
        "type": "function",
        "z": "a216597345f740e6",
        "name": "prepare transfer",
        "func": "let DataBatch;\nlet BatchId = [];\n\nfor (let i=0; i<msg.Batch.length; i++)\n  {                     \n  BatchId[i] = msg.Batch[i].BatchId;          \n  };\n DataBatch= {\n              \"batchIds\": BatchId,\n              \"targetStorageLocationId\": msg.payload.StorageLocationId\n            }\nmsg.payload=DataBatch\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 580,
        "wires": [
            [
                "4cb26d45662cbdad"
            ]
        ]
    },
    {
        "id": "e0712f40099f3fd9",
        "type": "comment",
        "z": "a216597345f740e6",
        "name": "партии из ОТ в Хранилище",
        "info": "",
        "x": 580,
        "y": 540,
        "wires": []
    },
    {
        "id": "3fd140d947123641",
        "type": "comment",
        "z": "a216597345f740e6",
        "name": "выпуск 0 партии",
        "info": "",
        "x": 440,
        "y": 680,
        "wires": []
    },
    {
        "id": "9a1383f1efbfadec",
        "type": "function",
        "z": "a216597345f740e6",
        "name": "prepere create data",
        "func": "let Batch ={\n            operationId: msg.Process[0].operationId,\n            materialId: msg.Process[0].materialId,\n            storageLocationId:msg.payload.RFIDId,\n           \n            doNotCheckQuality: \"true\",\n            batchNumber : null,\n            supplierNumber : null,\n            comment: null,\n            processId: msg.Process[0].processId,\n            shipmentId: null,\n            deliveryId: null,\n            expiration : null,\n            isCreateApplyRules: \"true\"\n            }\nmsg.payload = Batch;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 720,
        "wires": [
            [
                "18d2826b65ad013c"
            ]
        ]
    },
    {
        "id": "18d2826b65ad013c",
        "type": "http request",
        "z": "a216597345f740e6",
        "name": "CreateBatch",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/Create",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1010,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "7e33fe256aa88897",
        "type": "http request",
        "z": "a216597345f740e6",
        "d": true,
        "name": "Suspended Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.WorkflowUrl}}}/api/Events{{{QueryParameter}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1740,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "e1947107c89377d4",
        "type": "switch",
        "z": "a216597345f740e6",
        "name": "ProcessId  is not null",
        "property": "Process[0].ProcessId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1620,
        "y": 300,
        "wires": [
            [
                "3e5a288f1e7496ec",
                "ba679cc619a1a7d6"
            ]
        ]
    },
    {
        "id": "6c1b6ba3be9254b7",
        "type": "http request",
        "z": "a216597345f740e6",
        "d": true,
        "name": "end Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.WorkflowUrl}}}/api/Events{{{QueryParameter}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 2030,
        "y": 340,
        "wires": [
            [
                "3bd6542da1ff5e7c"
            ]
        ]
    },
    {
        "id": "3fd6ad23e69b2bb8",
        "type": "subflow:ca94f48e1f18b542",
        "z": "a216597345f740e6",
        "name": "",
        "x": 230,
        "y": 60,
        "wires": [
            [
                "0b056d581a13a699"
            ]
        ]
    },
    {
        "id": "0b056d581a13a699",
        "type": "change",
        "z": "a216597345f740e6",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.Token",
                "pt": "msg",
                "to": "Token",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 120,
        "wires": [
            [
                "15aa223472c09c76"
            ]
        ]
    },
    {
        "id": "8f01d1c11c7d423b",
        "type": "comment",
        "z": "a216597345f740e6",
        "name": "Старт\\остановка процесса по RFID с партией",
        "info": "",
        "x": 660,
        "y": 40,
        "wires": []
    },
    {
        "id": "0ad4ef5fc0ef46c4",
        "type": "comment",
        "z": "a216597345f740e6",
        "name": "Потребление и выпуск из ОТ в ОТ",
        "info": "",
        "x": 500,
        "y": 840,
        "wires": []
    },
    {
        "id": "bc2b5fe1ef8021c2",
        "type": "switch",
        "z": "a216597345f740e6",
        "name": "MovementDirection",
        "property": "payload.MovementDirection",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 880,
        "wires": [
            [
                "4744454aee9dc14e"
            ],
            []
        ],
        "outputLabels": [
            "Enter",
            "Exit"
        ]
    },
    {
        "id": "9135619ed1c79108",
        "type": "http request",
        "z": "a216597345f740e6",
        "name": "htttp put outtake",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/outtake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1120,
        "y": 900,
        "wires": [
            [
                "99decd967cf82de1"
            ]
        ]
    },
    {
        "id": "dd05092af26646a3",
        "type": "function",
        "z": "a216597345f740e6",
        "name": "prepere intake data",
        "func": "let Intake = [];\nfor (let i=0; i<msg.SQL.length; i++)\n  {                     \n  Intake[i] = {\n                processId: msg.SQL[i].ProcessId,\n                operationId: msg.SQL[i].OperationId,\n                materialId: msg.SQL[i].MaterialId,\n                storageLocationId: msg.SQL[i].ProduceStorageLocationId,\n                quantity: msg.SQL[i].Quantity,\n                dateTime: null,\n                doNotCheckQuality: \"true\",\n                comment: null,\n                };        \n  };\n \nmsg.payload = Intake;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 980,
        "wires": [
            [
                "42ea7e7f9091a004"
            ]
        ]
    },
    {
        "id": "ab5f21ba6efcc602",
        "type": "http request",
        "z": "a216597345f740e6",
        "name": "Intake",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/Intake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1130,
        "y": 1060,
        "wires": [
            [
                "42ea7e7f9091a004"
            ]
        ]
    },
    {
        "id": "c458e18d803a76f8",
        "type": "function",
        "z": "a216597345f740e6",
        "name": "prepare Outtake",
        "func": "let Outtake = [];\nfor (let i=0; i<msg.SQL.length; i++)\n  {                     \n  Outtake[i] = {\n                ProcessId: msg.SQL[i].ProcessId,\n                BatchId: msg.SQL[i].BatchId,\n                StorageLocationId:msg.SQL[i].ConsumeStorageLocationId,\n                OperationId: msg.SQL[i].OperationId,\n                Quantity: msg.SQL[i].Quantity,\n                CompleteOuttake: true\n                };        \n  };\n \n msg.payload=Outtake;            \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 820,
        "wires": [
            [
                "99decd967cf82de1"
            ]
        ]
    },
    {
        "id": "3bd6542da1ff5e7c",
        "type": "debug",
        "z": "a216597345f740e6",
        "name": "debug 60",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2020,
        "y": 300,
        "wires": []
    },
    {
        "id": "63d1225f9c36fde2",
        "type": "debug",
        "z": "a216597345f740e6",
        "name": "debug 65",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1700,
        "y": 220,
        "wires": []
    },
    {
        "id": "53d48c22308ed37a",
        "type": "catch",
        "z": "a216597345f740e6",
        "name": "",
        "scope": [
            "89ac2535e1f31c0a",
            "ea39c0fb7469c614",
            "7510d78afd46585c",
            "4ef4652c5e35558a",
            "8d24cb70e8a1f199",
            "4744454aee9dc14e",
            "dd1ec53966db4452"
        ],
        "uncaught": false,
        "x": 160,
        "y": 1100,
        "wires": [
            [
                "efaed0145ed8114d"
            ]
        ]
    },
    {
        "id": "efaed0145ed8114d",
        "type": "debug",
        "z": "a216597345f740e6",
        "name": "debug 76",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 1100,
        "wires": []
    },
    {
        "id": "ba679cc619a1a7d6",
        "type": "http request",
        "z": "a216597345f740e6",
        "name": "end Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.MesCoreUrl}}}/api/UserTasks/do_action/{{{Process.0.UserTaskId}}}/Complete",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1830,
        "y": 300,
        "wires": [
            [
                "3bd6542da1ff5e7c"
            ]
        ]
    },
    {
        "id": "888cf7a687e247b5",
        "type": "catch",
        "z": "a216597345f740e6",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 150,
        "y": 1160,
        "wires": [
            [
                "12e8f932f8c147c5"
            ]
        ]
    },
    {
        "id": "1973750d1548d473",
        "type": "debug",
        "z": "a216597345f740e6",
        "name": "Debug Save Catch Data",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1160,
        "wires": []
    },
    {
        "id": "12e8f932f8c147c5",
        "type": "subflow:f8fc59a8d3d93ef9",
        "z": "a216597345f740e6",
        "name": "",
        "x": 360,
        "y": 1160,
        "wires": [
            [
                "1973750d1548d473"
            ]
        ]
    },
    {
        "id": "82cb2f4111e5d516",
        "type": "debug",
        "z": "a216597345f740e6",
        "name": "debug 117",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 200,
        "wires": []
    },
    {
        "id": "a7db4d94e6b6bff7",
        "type": "amqp-in",
        "z": "a216597345f740e6",
        "name": "",
        "broker": "2f76d8b874d08554",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "NR_BusinessProcess_RFID",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 80,
        "y": 60,
        "wires": [
            [
                "db29a12b74a14ecd",
                "3fd6ad23e69b2bb8"
            ]
        ]
    },
    {
        "id": "99decd967cf82de1",
        "type": "loop",
        "z": "a216597345f740e6",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "payload",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 1110,
        "y": 820,
        "wires": [
            [],
            [
                "9135619ed1c79108"
            ]
        ]
    },
    {
        "id": "42ea7e7f9091a004",
        "type": "loop",
        "z": "a216597345f740e6",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "payload",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 1150,
        "y": 980,
        "wires": [
            [],
            [
                "ab5f21ba6efcc602"
            ]
        ]
    },
    {
        "id": "89ac2535e1f31c0a",
        "type": "MSSQL",
        "z": "a216597345f740e6",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Select Batch from SLRP",
        "outField": "dataFromOuttake",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @storageLocationId UNIQUEIDENTIFIER = @storageLocationIdInfo;\r\n\r\nSELECT * FROM (\r\n\tSELECT TOP (1) p.gId AS ProcessId, p.gOperationId AS OperationId \r\n\tFROM [ProductionManagementRunTimeDb].[dbo].[tblProcess] p\r\n\t\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ese ON ese.gEquipmentTreeId = p.gEquipmentId\r\n\t\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystem] es ON es.gId = ese.[gExternalSystemId]\r\n\t\tWHERE ese.szExternalId IN ('Zhban1', 'Zhban2') AND p.szStep = 'InProcess' AND es.[szName] = 'RFID'\r\n\t\tORDER BY p.dtStartedAt DESC\r\n) l\r\nCROSS JOIN (\r\n\tSELECT b.gId as BatchId, b.nQuantity AS Quantity, b.StorageLocationId AS StorageLocationId\r\n\tFROM [BatchManagementDb].[dbo].[tblBatch] b\r\n\tWHERE b.bIsCompleted = 0 AND b.StorageLocationId = @storageLocationId\r\n) tl",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "storageLocationIdInfo",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "SLRP.0.Id",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 590,
        "y": 460,
        "wires": [
            [
                "6f9a672b2be6d275"
            ]
        ]
    },
    {
        "id": "ea39c0fb7469c614",
        "type": "MSSQL",
        "z": "a216597345f740e6",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "SelectProcessInStartbyOperation",
        "outField": "Process",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT TOP 1 p.[gId] as 'ProcessId', p.[gUserTaskId] as 'UserTaskId' --, ee.szExternalId as 'RFIDEquipmentId'   \r\nFROM [ProductionManagementRunTimeDb].[dbo].[tblProcess] p\r\n   -- LEFT JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ee ON ee.gEquipmentTreeId=p.gEquipmentId\r\n--\tLEFT JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystem] es ON es.gId=ee.gExternalSystemId AND es.szName=N'RFID'\r\nWHERE szStep='InProcess' AND gOperationId=nullif('{{{Operation.0.OperationId}}}','')\r\nORDER BY p.nKey DESC",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1360,
        "y": 300,
        "wires": [
            [
                "e1947107c89377d4"
            ]
        ]
    },
    {
        "id": "7510d78afd46585c",
        "type": "MSSQL",
        "z": "a216597345f740e6",
        "d": true,
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get Batch",
        "outField": "Batch",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT [gId] as 'BatchId',gProcessId  \r\n  FROM [BatchManagementDb].[dbo].[tblBatch](nolock)\r\n  WHERE bIsCompleted=0 AND [StorageLocationId]='{{{payload.RFIDId}}}' ",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 540,
        "y": 80,
        "wires": [
            [
                "0545275d4726e148"
            ]
        ]
    },
    {
        "id": "a92c825496f0d084",
        "type": "MSSQL",
        "z": "a216597345f740e6",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "SelectOperationByEquipment",
        "outField": "Operation",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @gOperationId uniqueidentifier, @data datetime = GETUTCDATE()\r\n\r\nSELECT @gOperationId= o.gId \r\nFROM [ProductionManagementRunTimeDb].[dbo].[tblOperation] o\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProductionOrder] po ON po.gId=o.gProductionOrderId\r\n\tINNER JOIN [HLRURASAP100].[ProductionManagementMasterData].[dbo].[tblOperationTemplateEquipment] t ON t.gOperationTemplateId=o.gOperationTemplateId\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblShiftRuntime] sr ON sr.gId=po.gShiftRuntimeId\r\nWHERE  @data BETWEEN sr.[dtStart] AND sr.[dtEnd]\r\n\tAND t.gEquipmentId='{{{payload.EquipmentId}}}'\t\r\n\t\t\t\r\nIF @gOperationId IS NULL \r\n\tBEGIN\r\n\t\tSELECT TOP 1 @gOperationId= o.gId\r\n\t\tFROM [ProductionManagementRunTimeDb].[dbo].[tblOperation] o\r\n\t\t\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProductionOrder] po ON po.gId=o.gProductionOrderId\r\n\t\t\tINNER JOIN [HLRURASAP100].[ProductionManagementMasterData].[dbo].[tblOperationTemplateEquipment] t ON t.gOperationTemplateId=o.gOperationTemplateId\t\t\t\r\n\t\tWHERE po.dtPlanStart < @data\r\n\t\t\t\tAND t.gEquipmentId='{{{payload.EquipmentId}}}'\r\n\t\tORDER BY po.nKey DESC\r\n\tEND\r\n\t\r\nSELECT @gOperationId as 'OperationId'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 650,
        "y": 260,
        "wires": [
            [
                "d738db79cf71f38a",
                "82cb2f4111e5d516"
            ]
        ]
    },
    {
        "id": "4ef4652c5e35558a",
        "type": "MSSQL",
        "z": "a216597345f740e6",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get Batch",
        "outField": "Batch",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT [gId] as 'BatchId'  \r\n  FROM [BatchManagementDb].[dbo].[tblBatch](nolock)\r\n  WHERE bIsCompleted=0 AND [StorageLocationId]='{{{payload.RFIDId}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 520,
        "y": 580,
        "wires": [
            [
                "f9605cad601a76f8"
            ]
        ]
    },
    {
        "id": "8d24cb70e8a1f199",
        "type": "MSSQL",
        "z": "a216597345f740e6",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get Process",
        "outField": "Process",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @gProcessId uniqueidentifier,@gOperationId uniqueidentifier,@gMaterialId uniqueidentifier\r\nSELECT TOP 1 @gProcessId=gId ,@gOperationId=gOperationId    \r\nFROM [ProductionManagementRunTimeDb].[dbo].[tblProcess]\r\nWHERE gEquipmentId ='{{{payload.EquipmentId}}}'\r\nORDER BY nKey DESC\r\n\r\nSELECT TOP 1 @gMaterialId=b.gMaterialId\r\nFROM [BatchManagementDb].[dbo].[tblBatchEvent] be\r\n\tINNER JOIN [BatchManagementDb].[dbo].[tblBatch] b ON b.gId=be.gBatchId\r\nWHERE be.nType=200 AND be.gProcessId=@gProcessId\r\n\r\nSELECT @gProcessId as 'processId',@gOperationId as 'operationId',@gMaterialId as 'materialId'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 630,
        "y": 720,
        "wires": [
            [
                "9a1383f1efbfadec"
            ]
        ]
    },
    {
        "id": "4744454aee9dc14e",
        "type": "MSSQL",
        "z": "a216597345f740e6",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Select data",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @gProcessId uniqueidentifier,@gOperationId uniqueidentifier,@gEquipmentId uniqueidentifier,@gProduceStorageLocationId uniqueidentifier\r\nSELECT TOP 1 @gProcessId = p.gId, @gOperationId = p.gOperationId,@gEquipmentId = p.gEquipmentId,@gProduceStorageLocationId = s.gId\r\nFROM [ProductionManagementRunTimeDb].[dbo].[tblProcess] p\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationProduceStorageLocation] psl ON psl.gOperationId=p.gOperationId AND  psl.gEquipmentId=p.gEquipmentId\r\n\tINNER JOIN [BatchManagementDb].[dbo].[tblStorageLocation] s ON s.gParentId=psl.gStorageLocationId\r\nWHERE p.gEquipmentId ='{{{payload.EquipmentId}}}' \r\nORDER BY p.nKey DESC\r\n\r\nSELECT @gProcessId as 'ProcessId',b.gId as'BatchId',s1.gId as 'ConsumeStorageLocationId',@gOperationId as 'OperationId',b.nQuantity as 'Quantity', b.gMaterialId as 'MaterialId',@gProduceStorageLocationId as 'ProduceStorageLocationId'\r\nFROM [BatchManagementDb].[dbo].[tblBatch] b\r\n\tINNER JOIN  [BatchManagementDb].[dbo].[tblStorageLocation] s1 ON s1.gId=b.StorageLocationId AND s1.nStorageLocationType=2\r\n\tINNER JOIN [BatchManagementDb].[dbo].[tblStorageLocation] s ON s1.gParentId=s.gId AND s.nStaticStorageLocationType = 2\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationConsumeStorageLocation] csl ON csl.gStorageLocationId=s.gId AND csl.gOperationId=@gOperationId AND csl.gEquipmentId=@gEquipmentId\r\nWHERE b.bIsCompleted=0 AND b.nQuantity > 0\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 650,
        "y": 880,
        "wires": [
            [
                "c458e18d803a76f8",
                "dd05092af26646a3"
            ]
        ]
    },
    {
        "id": "dd1ec53966db4452",
        "type": "MSSQL",
        "z": "a216597345f740e6",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get OperationByEquipmentAndSL",
        "outField": "Operation",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @gOperationId uniqueidentifier, @data datetime = GETUTCDATE()\r\n\r\nSELECT @gOperationId= o.gId \r\nFROM [ProductionManagementRunTimeDb].[dbo].[tblOperation] o\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProductionOrder] po ON po.gId=o.gProductionOrderId\r\n\tINNER JOIN [HLRURASAP100].[ProductionManagementMasterData].[dbo].[tblOperationTemplateEquipment] t ON t.gOperationTemplateId=o.gOperationTemplateId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationConsumeStorageLocation] csl ON csl.gOperationId=o.gId AND csl.gEquipmentId=t.gEquipmentId\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblShiftRuntime] sr ON sr.gId=po.gShiftRuntimeId\r\nWHERE  @data BETWEEN sr.[dtStart] AND sr.[dtEnd] AND csl.gStorageLocationId='{{{payload.StorageLocationId}}}'\r\n\tAND t.gEquipmentId='{{{payload.EquipmentId}}}'\t\r\n\t\t\t\r\nIF @gOperationId IS NULL \r\n\tBEGIN\r\n\t\tSELECT TOP 1 @gOperationId= o.gId\r\n\t\tFROM [ProductionManagementRunTimeDb].[dbo].[tblOperation] o\r\n\t\t\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProductionOrder] po ON po.gId=o.gProductionOrderId\r\n\t\t\tINNER JOIN [HLRURASAP100].[ProductionManagementMasterData].[dbo].[tblOperationTemplateEquipment] t ON t.gOperationTemplateId=o.gOperationTemplateId\r\n\t\t\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationConsumeStorageLocation] csl ON csl.gOperationId=o.gId AND csl.gEquipmentId=t.gEquipmentId\r\n\t\tWHERE po.dtPlanStart < @data AND csl.gStorageLocationId='{{{payload.StorageLocationId}}}'\r\n\t\t\t\tAND t.gEquipmentId='{{{payload.EquipmentId}}}'\r\n\t\tORDER BY po.nKey DESC\r\n\tEND\r\n\t\r\nSELECT @gOperationId as 'OperationId'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 640,
        "y": 360,
        "wires": [
            [
                "d738db79cf71f38a"
            ]
        ]
    },
    {
        "id": "4a92b55604bd2011",
        "type": "debug",
        "z": "dddcaf8ac15798b1",
        "name": "debug 36",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 60,
        "wires": []
    },
    {
        "id": "3b5315059a0416f8",
        "type": "switch",
        "z": "dddcaf8ac15798b1",
        "name": "Check is not null batch",
        "property": "payload.BatchIds[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 300,
        "y": 80,
        "wires": [
            [
                "470538f8704e3ff5"
            ]
        ]
    },
    {
        "id": "f194b63959c1fd35",
        "type": "switch",
        "z": "dddcaf8ac15798b1",
        "name": "Checking is not null",
        "property": "payload[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 650,
        "y": 80,
        "wires": [
            [
                "22686bb3a9fd8adf"
            ]
        ]
    },
    {
        "id": "22686bb3a9fd8adf",
        "type": "subflow:ca94f48e1f18b542",
        "z": "dddcaf8ac15798b1",
        "name": "",
        "x": 810,
        "y": 80,
        "wires": [
            [
                "d69629acf8e5a56a"
            ]
        ]
    },
    {
        "id": "f47bdd76286c5ae9",
        "type": "function",
        "z": "dddcaf8ac15798b1",
        "d": true,
        "name": "parse Data",
        "func": "const datas = msg.payload;\nvar outputMsgs = [];\nmsg.payload = [];\ndatas.forEach(function(element) {\n    const data = {\n        ProcessId: element.ProcessId,\n        BatchId: element.BatchId,\n        StorageLocationId: element.StorageLocationId,\n        OperationId: element.OperationId,\n        Quantity: element.Quantity,\n        CompleteOuttake: true,\n    }\n    outputMsgs.push({data: data});\n});\n\nreturn [outputMsgs];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "8d5504298ebd19b0",
        "type": "http request",
        "z": "dddcaf8ac15798b1",
        "name": "htttp put outtake",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/outtake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1180,
        "y": 160,
        "wires": [
            [
                "3523dfc457cf0198"
            ]
        ]
    },
    {
        "id": "01090fc2e53eaeae",
        "type": "comment",
        "z": "dddcaf8ac15798b1",
        "name": "PZo",
        "info": "",
        "x": 50,
        "y": 20,
        "wires": []
    },
    {
        "id": "d69629acf8e5a56a",
        "type": "subflow:f2924807aef52857",
        "z": "dddcaf8ac15798b1",
        "name": "",
        "x": 960,
        "y": 80,
        "wires": [
            [
                "3523dfc457cf0198"
            ]
        ]
    },
    {
        "id": "7cf0947942804224",
        "type": "amqp-in",
        "z": "dddcaf8ac15798b1",
        "name": "TransferBatchEvent",
        "broker": "2f76d8b874d08554",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "NR_TransferBatchEvent",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "3b5315059a0416f8"
            ]
        ]
    },
    {
        "id": "3523dfc457cf0198",
        "type": "loop",
        "z": "dddcaf8ac15798b1",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "SQL",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 1170,
        "y": 80,
        "wires": [
            [
                "4a92b55604bd2011"
            ],
            [
                "8d5504298ebd19b0"
            ]
        ]
    },
    {
        "id": "470538f8704e3ff5",
        "type": "MSSQL",
        "z": "dddcaf8ac15798b1",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get Data",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @destinationStorageLocationId UNIQUEIDENTIFIER = @destinationStorageLocationIdInfo,\r\n\t\t@BatchIds NVarChar(max) = '{{{payload.BatchIds}}}';\r\n\r\nwith BatchIds as (\r\n\tSELECT value as Batch FROM STRING_SPLIT(@BatchIds, ',')\r\n)\r\n, Result as (\r\n\tSELECT * FROM (\r\n\t\tSELECT TOP 1 p.gId As 'ProcessId', osc.gStorageLocationId AS 'StorageLocationId', osc.gOperationId AS 'OperationId'\r\n\t\t  FROM [ProductionManagementRunTimeDb].[dbo].[tblOperationConsumeStorageLocation] osc\r\n\t\t\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p ON osc.gOperationId = p.gOperationId\r\n\t\t\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ese ON p.gEquipmentId = ese.gEquipmentTreeId\r\n\t\t\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystem] es ON ese.gExternalSystemId = es.gId and es.szName = 'RFID'\r\n\t\t  WHERE osc.gStorageLocationId = @destinationStorageLocationId and ese.szExternalId In ('901') and p.szStep = 'InProcess'\r\n\t\t  ORDER BY dtStartedAt DESC\r\n\t) l\r\n\tCROSS JOIN (\r\n\t\tSELECT b.gId AS 'BatchId', b.nQuantity AS 'Quantity', 'true' as 'CompleteOuttake'\r\n\t\tFROM [BatchManagementDb].[dbo].[tblBatch] b\r\n\t\t\tINNER JOIN BatchIds bi ON b.gId = bi.Batch\r\n\t\tWHERE b.bIsCompleted = 0\r\n\t) tl\r\n)\r\nSELECT * FROM Result;",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "destinationStorageLocationIdInfo",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "payload.DestinationStorageLocationId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 480,
        "y": 80,
        "wires": [
            [
                "f194b63959c1fd35"
            ]
        ]
    },
    {
        "id": "e4de1e5e3bfccd4e",
        "type": "debug",
        "z": "35d28987f569ce61",
        "name": "debug 24",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 160,
        "wires": []
    },
    {
        "id": "12f215c88cb4e195",
        "type": "switch",
        "z": "35d28987f569ce61",
        "name": "ProcessId is not null",
        "property": "Process[0].gId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 580,
        "y": 60,
        "wires": [
            [
                "e87b4ed59b0a4352"
            ]
        ]
    },
    {
        "id": "dd3265c8e318dab2",
        "type": "http response",
        "z": "35d28987f569ce61",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 220,
        "wires": []
    },
    {
        "id": "c5ba6c2a46cad2f0",
        "type": "http in",
        "z": "35d28987f569ce61",
        "name": "",
        "url": "/api/ProcessByNumberSAP",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "905ced102cad0d5a"
            ]
        ]
    },
    {
        "id": "70f1156c6c72c8d3",
        "type": "debug",
        "z": "35d28987f569ce61",
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 260,
        "wires": []
    },
    {
        "id": "3f40ada230bc625a",
        "type": "http in",
        "z": "35d28987f569ce61",
        "name": "",
        "url": "/api/ProcessByNumberSAP",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "2c56e50e54c531e9"
            ]
        ]
    },
    {
        "id": "f5358ae2a0811d32",
        "type": "http response",
        "z": "35d28987f569ce61",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 770,
        "y": 300,
        "wires": []
    },
    {
        "id": "376cf0c784654473",
        "type": "debug",
        "z": "35d28987f569ce61",
        "name": "debug 27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 340,
        "wires": []
    },
    {
        "id": "2b85de9022c001eb",
        "type": "function",
        "z": "35d28987f569ce61",
        "name": "SQL in JSON",
        "func": "msg.payload={\"Info\":msg.payload[0].NumberSAP}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 300,
        "wires": [
            [
                "f5358ae2a0811d32",
                "376cf0c784654473"
            ]
        ]
    },
    {
        "id": "dfeb991b7d1c834c",
        "type": "comment",
        "z": "35d28987f569ce61",
        "name": "PZo",
        "info": "",
        "x": 50,
        "y": 20,
        "wires": []
    },
    {
        "id": "3fa3ca10a071de1c",
        "type": "catch",
        "z": "35d28987f569ce61",
        "name": "",
        "scope": [
            "a9779c9c585934f5",
            "e87b4ed59b0a4352",
            "905ced102cad0d5a",
            "2c56e50e54c531e9",
            "68f2f60a04cdb72c"
        ],
        "uncaught": false,
        "x": 80,
        "y": 520,
        "wires": [
            [
                "b670092489f0d45f"
            ]
        ]
    },
    {
        "id": "b670092489f0d45f",
        "type": "function",
        "z": "35d28987f569ce61",
        "name": "SQL Error",
        "func": "msg.payload = {\n    error: \"Ошибка SQL запроса\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 520,
        "wires": [
            [
                "5a6f01b9644c9d09"
            ]
        ]
    },
    {
        "id": "5a6f01b9644c9d09",
        "type": "http response",
        "z": "35d28987f569ce61",
        "name": "",
        "statusCode": "500",
        "headers": {},
        "x": 380,
        "y": 520,
        "wires": []
    },
    {
        "id": "5d71a0edeba04a11",
        "type": "http in",
        "z": "35d28987f569ce61",
        "name": "",
        "url": "/api/ProcessByNumberSAP/byProcessIds",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 420,
        "wires": [
            [
                "315943795f9ccbe5"
            ]
        ]
    },
    {
        "id": "315943795f9ccbe5",
        "type": "switch",
        "z": "35d28987f569ce61",
        "name": "processIds is not null",
        "property": "payload.processIds[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 500,
        "y": 420,
        "wires": [
            [
                "68f2f60a04cdb72c"
            ],
            [
                "a20ef9e53498cf57"
            ]
        ]
    },
    {
        "id": "a20ef9e53498cf57",
        "type": "function",
        "z": "35d28987f569ce61",
        "name": "SQL in JSON",
        "func": "msg.payload = msg.SQL ?? [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 420,
        "wires": [
            [
                "f42054b66b04898e",
                "9811cc1b8b09fb66"
            ]
        ]
    },
    {
        "id": "9811cc1b8b09fb66",
        "type": "debug",
        "z": "35d28987f569ce61",
        "name": "debug 49",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 460,
        "wires": []
    },
    {
        "id": "f42054b66b04898e",
        "type": "http response",
        "z": "35d28987f569ce61",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1110,
        "y": 420,
        "wires": []
    },
    {
        "id": "4d2e943d386e673b",
        "type": "switch",
        "z": "35d28987f569ce61",
        "name": "PO is not null",
        "property": "payload.ProductionOrderId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 160,
        "wires": [
            [
                "4a52cbad72441ea2"
            ]
        ]
    },
    {
        "id": "50401140a35de193",
        "type": "comment",
        "z": "35d28987f569ce61",
        "name": "Запись таргета СВ для ПЗ",
        "info": "",
        "x": 360,
        "y": 120,
        "wires": []
    },
    {
        "id": "867567dc4a18b4e0",
        "type": "amqp-in",
        "z": "35d28987f569ce61",
        "name": "ProdProcessCreated",
        "broker": "2f76d8b874d08554",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "NR_ProdProcessCreated",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "a9779c9c585934f5",
                "4d2e943d386e673b",
                "e4de1e5e3bfccd4e"
            ]
        ]
    },
    {
        "id": "a9779c9c585934f5",
        "type": "MSSQL",
        "z": "35d28987f569ce61",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Выбор только автофасовки",
        "outField": "Process",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT  p.[gId],wi.[szInfo]    \r\nFROM [ProductionManagementRunTimeDb].[dbo].[tblProcess] p \r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperation] o ON o.gId=p.gOperationId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProductionOrder] po ON po.gId=o.gProductionOrderId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblWeeklyScheduleToProductionOrder] wo ON wo.gProductionOrderId=po.gId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblWeeklyScheduleItem] wi ON wi.gId=wo.gWeeklyScheduleItemId\r\n\tLEFT JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcessByNumberSAP] ps ON ps.gProcessId=p.gId\r\n  where p.nCreateTypeId=2 AND wi.nLevel=0 AND ps.gProcessId IS NULL AND p.gId='{{{payload.Id}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 340,
        "y": 60,
        "wires": [
            [
                "12f215c88cb4e195"
            ]
        ]
    },
    {
        "id": "e87b4ed59b0a4352",
        "type": "MSSQL",
        "z": "35d28987f569ce61",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Insert tblProcessByNumberSAP",
        "outField": "ProcessInsert",
        "returnType": 0,
        "throwErrors": 1,
        "query": "IF @info IS NOT NULL\r\n\tBEGIN\t\t\r\n\t\tIF EXISTS(SELECT [gProcessId] FROM [ProductionManagementRunTimeDb].[dbo].[tblProcessByNumberSAP] WHERE gProcessId = @id)\r\n\t\t\tDELETE FROM [ProductionManagementRunTimeDb].[dbo].[tblProcessByNumberSAP] WHERE gProcessId =  @id\r\n\t\t\t\t\t\r\n\t\tINSERT INTO [ProductionManagementRunTimeDb].[dbo].[tblProcessByNumberSAP]([gProcessId],[szNumberSAP])\r\n\t\t\tSELECT  @id,[value] FROM STRING_SPLIT(@info, ',') WHERE [value] <> ''\r\n\tEND",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "info",
                "type": "NVarChar(400)",
                "valueType": "msg",
                "value": "Process[0].szInfo",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "id",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "msg.Process[0].gId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 850,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "905ced102cad0d5a",
        "type": "MSSQL",
        "z": "35d28987f569ce61",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "recreate row  for gProcessId",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @sequence nvarchar(400)=@info\r\n\t,@separator nvarchar(50)=','\r\n\t,@nIndex smallint\r\n\t,@nStart smallint\r\n\t,@nDelSize smallint\r\n\r\nIF @sequence IS NOT NULL\r\n\tBEGIN\r\n\t\tDECLARE @tblArray TABLE ([nKey] int identity(1,1), [szElement]\tnvarchar(1000))\r\n\r\n\t\tIF EXISTS(SELECT [gProcessId] FROM [ProductionManagementRunTimeDb].[dbo].[tblProcessByNumberSAP] WHERE gProcessId = @id)\r\n\t\t\tDELETE FROM [ProductionManagementRunTimeDb].[dbo].[tblProcessByNumberSAP] WHERE gProcessId =  @id\r\n\t\t\t\r\n\t\tSET @nDelSize = LEN(@separator)\r\n\r\n\t\tWHILE LEN(@sequence) > 0\r\n\t\t\tBEGIN\t\r\n\t\t\t\tSET @nIndex = CHARINDEX(@separator, @sequence)\r\n\t\t\t\r\n\t\t\t\tIF @nIndex = 0\r\n\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\tINSERT INTO @tblArray([szElement])\r\n\t\t\t\t\t\t\tVALUES (LTRIM(RTRIM(@sequence)))\r\n\t\t\t\t\t\tBREAK\r\n\t\t\t\t\tEND\r\n\t\t\t\tELSE\r\n\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\tINSERT INTO\t@tblArray ([szElement])\r\n\t\t\t\t\t\t\tVALUES (LTRIM(RTRIM(SUBSTRING(@sequence, 1,@nIndex - 1))))\r\n\r\n\t\t\t\t\t\tSET @nStart = @nIndex + @nDelSize\r\n\t\t\t\t\t\tSET @sequence = SUBSTRING(@sequence, @nStart , LEN(@sequence) - @nStart + 1)\t\r\n\t\t\t\t\tEND\r\n\t\t\tEND\r\n\t\tINSERT INTO [ProductionManagementRunTimeDb].[dbo].[tblProcessByNumberSAP]([gProcessId],[szNumberSAP])\r\n\t\t\tSELECT  @id, [szElement] FROM @tblArray\r\n\r\n\tEND",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "info",
                "type": "NVarChar(400)",
                "valueType": "msg",
                "value": "payload.Info",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "id",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "payload.Id",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 420,
        "y": 220,
        "wires": [
            [
                "70f1156c6c72c8d3",
                "dd3265c8e318dab2"
            ]
        ]
    },
    {
        "id": "2c56e50e54c531e9",
        "type": "MSSQL",
        "z": "35d28987f569ce61",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Select NumberSAP",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT STRING_AGG([szNumberSAP],',') as NumberSAP\r\n  FROM [ProductionManagementRunTimeDb].[dbo].[tblProcessByNumberSAP]\r\n  WHERE gProcessId ='{{{payload.Id}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 390,
        "y": 300,
        "wires": [
            [
                "2b85de9022c001eb"
            ]
        ]
    },
    {
        "id": "68f2f60a04cdb72c",
        "type": "MSSQL",
        "z": "35d28987f569ce61",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Select NumberSAP",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @ProcessIds NVarChar(max) = '{{{payload.processIds}}}';\r\n\r\nwith ProcessIds as (\r\n\tSELECT DISTINCT [value] as Process FROM STRING_SPLIT(@ProcessIds, ',')\r\n)\r\n, Result as (\r\n\tSELECT [gProcessId] as Id, STRING_AGG([szNumberSAP],',') as Info\r\n\tFROM [ProductionManagementRunTimeDb].[dbo].[tblProcessByNumberSAP] sap\r\n\tINNER JOIN ProcessIds ON sap.gProcessId = ProcessIds.Process\r\n\tGROUP BY [gProcessId]\r\n)\r\nSELECT * FROM Result;",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 730,
        "y": 380,
        "wires": [
            [
                "a20ef9e53498cf57"
            ]
        ]
    },
    {
        "id": "4a52cbad72441ea2",
        "type": "MSSQL",
        "z": "35d28987f569ce61",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "tblProductionOrderDMSetpoint",
        "outField": "SQLDMSET",
        "returnType": 0,
        "throwErrors": 1,
        "query": "IF NOT EXISTS(SELECT nKey FROM [dbExchange].[dbo].[tblProductionOrderDMSetpoint] WHERE gOrderId='{{{payload.ProductionOrderId}}}')\r\n\tBEGIN\r\n\t\tINSERT INTO [dbExchange].[dbo].[tblProductionOrderDMSetpoint]\r\n\t\t\tSELECT po.[gId],cv.szValue,GETDATE()     \r\n\t\t\tFROM [ProductionManagementRunTimeDb].[dbo].[tblProductionOrder] po WITH (NOLOCK)\r\n\t\t\t\t  INNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblMaterial] m WITH (NOLOCK) ON m.gId=po.gMaterialId\r\n\t\t\t\t  INNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblCatalogValue] cv WITH (NOLOCK) ON cv.szCode=m.szName AND cv.CatalogGroupId='E1EA56E7-5E7B-48E7-A0E3-C12306654D4B'\r\n\t\t\tWHERE po.gId='{{{payload.ProductionOrderId}}}' AND po.szDescription LIKE N'Фасовка%'\r\n\tEND",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 530,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "4a7576376d4624a3",
        "type": "debug",
        "z": "97e1a989e145c1f8",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 160,
        "wires": []
    },
    {
        "id": "a0610cd56a82302d",
        "type": "switch",
        "z": "97e1a989e145c1f8",
        "name": "NumberRule==?",
        "property": "NumberRule[0].nRule",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "num"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 500,
        "y": 60,
        "wires": [
            [
                "dfc105cefd300c13"
            ],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "5fdd34cb648be845",
        "type": "switch",
        "z": "97e1a989e145c1f8",
        "name": "Name != NULL",
        "property": "Name[0].Name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 920,
        "y": 60,
        "wires": [
            [
                "627044361cbfc870"
            ]
        ]
    },
    {
        "id": "017d210e457fbda3",
        "type": "http request",
        "z": "97e1a989e145c1f8",
        "name": "SetBatchParameters",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/SetBatchParameters",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 940,
        "y": 160,
        "wires": [
            [
                "4a7576376d4624a3"
            ]
        ]
    },
    {
        "id": "627044361cbfc870",
        "type": "subflow:ca94f48e1f18b542",
        "z": "97e1a989e145c1f8",
        "name": "",
        "env": [
            {
                "name": "SqlIp",
                "value": "10.197.4.23",
                "type": "str"
            }
        ],
        "x": 130,
        "y": 160,
        "wires": [
            [
                "1d585c754fc67ad2"
            ]
        ]
    },
    {
        "id": "a275176f30f6fe24",
        "type": "function",
        "z": "97e1a989e145c1f8",
        "name": "prep SLRP create cmd",
        "func": "var SetParametersCommand =\n{\n    batchId: msg.NumberRule[0].gId,\n    batchNumber: msg.Name[0].Name  \n}\n\nmsg.payload = SetParametersCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 160,
        "wires": [
            [
                "017d210e457fbda3"
            ]
        ]
    },
    {
        "id": "5d30b25e4dfd3ad0",
        "type": "comment",
        "z": "97e1a989e145c1f8",
        "name": "PZo",
        "info": "",
        "x": 70,
        "y": 20,
        "wires": []
    },
    {
        "id": "1d585c754fc67ad2",
        "type": "subflow:f2924807aef52857",
        "z": "97e1a989e145c1f8",
        "name": "",
        "x": 300,
        "y": 160,
        "wires": [
            [
                "a275176f30f6fe24",
                "34cb878853c22022"
            ]
        ]
    },
    {
        "id": "34cb878853c22022",
        "type": "function",
        "z": "97e1a989e145c1f8",
        "name": "prep SLRP create cmd",
        "func": "var SetParametersCommand =\n{\n    batchId: msg.NumberRule[0].gId,\n    numberSAP: msg.Name[0].Name  \n}\n\nmsg.payload = SetParametersCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 200,
        "wires": [
            [
                "a91a3fd0f4ac7533"
            ]
        ]
    },
    {
        "id": "a91a3fd0f4ac7533",
        "type": "http request",
        "z": "97e1a989e145c1f8",
        "name": "SetBatchNumberBatch",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/SetBatchNumderSAP",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 940,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "19e12da2d5447d49",
        "type": "amqp-in",
        "z": "97e1a989e145c1f8",
        "name": "BatchCreatedEvent",
        "broker": "2f76d8b874d08554",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "NR_BatchCreatedEvent",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "fcd428db06ce7f2b"
            ]
        ]
    },
    {
        "id": "fcd428db06ce7f2b",
        "type": "MSSQL",
        "z": "97e1a989e145c1f8",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Select nRule",
        "outField": "NumberRule",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT t.nRule,b.gId\r\nFROM [BatchManagementDb].[dbo].[tblBatch] b\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperation] o ON o.gId=b.gOperationId\r\n\tINNER JOIN [HLRURASAP100].[ProductionManagementMasterData].[dbo].[tblOperationTemplate] t ON t.gId=o.gOperationTemplateId\r\nWHERE b.gId = '{{{payload.BatchId}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 310,
        "y": 60,
        "wires": [
            [
                "a0610cd56a82302d"
            ]
        ]
    },
    {
        "id": "dfc105cefd300c13",
        "type": "MSSQL",
        "z": "97e1a989e145c1f8",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Select Name",
        "outField": "Name",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @Year nvarchar(2) = (YEAR(GETDATE())- 1990)\r\n\t\t,@Day nvarchar(3)= DATENAME(dy , GETDATE())\r\n\t\t,@Number nvarchar(3)\r\n\t\t,@dDate date = GETDATE()\r\n\t\t\r\nSELECT @Number = COUNT(b.nKey)\r\nFROM [BatchManagementDb].[dbo].[tblBatch] b\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p ON p.gId=b.gProcessId\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ee ON ee.[gEquipmentTreeId]=p.gEquipmentId\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystem] es ON es.[gId]=ee.[gExternalSystemId]\t\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperation] o ON o.gId=p.gOperationId\r\n\tINNER JOIN [HLRURASAP100].[ProductionManagementMasterData].[dbo].[tblOperationTemplate] t ON t.gId=o.gOperationTemplateId\r\nWHERE DATEADD(hh,3,b.dtCreatedAt) >= @dDate AND t.nRule= {{{NumberRule.0.nRule}}} AND es.[szName] = 'RFID'\r\n\t\tAND ee.szExternalId IN ('Zhban1','Zhban2')\r\nIF @Number =0 SET @Number=1\r\nSELECT N'9' + @Year + STUFF('000',4-LEN(@Day),3,@Day) + STUFF('000',4-LEN(@Number),3,@Number) as 'Name'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 730,
        "y": 60,
        "wires": [
            [
                "5fdd34cb648be845"
            ]
        ]
    },
    {
        "id": "46c71939e06c26f5",
        "type": "debug",
        "z": "f6f0e22b5d52cde1",
        "name": "debug 19",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 180,
        "wires": []
    },
    {
        "id": "0ed0891edab31359",
        "type": "function",
        "z": "f6f0e22b5d52cde1",
        "name": "prep data",
        "func": "msg.payload ={\n    status:msg.SQL[0].nStatusNew,\n    shipmentId: msg.SQL[0].gShipmentId\n     };                                      \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 260,
        "wires": [
            [
                "9eab1c4d27b77dec"
            ]
        ]
    },
    {
        "id": "9eab1c4d27b77dec",
        "type": "http request",
        "z": "f6f0e22b5d52cde1",
        "name": "/api/Shipment/SetStatus",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "query",
        "url": "{{{Config.ReceptionUrl}}}/api/Shipment/SetStatus",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-Type",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 590,
        "y": 260,
        "wires": [
            [
                "80dff040bb148845"
            ]
        ]
    },
    {
        "id": "80dff040bb148845",
        "type": "switch",
        "z": "f6f0e22b5d52cde1",
        "name": "out1  - statusCode =200",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 260,
        "wires": [
            [
                "f1f850cf9f5df800"
            ],
            [
                "6773001d99cec9be"
            ]
        ]
    },
    {
        "id": "a1b1616be86e2dd9",
        "type": "debug",
        "z": "f6f0e22b5d52cde1",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 220,
        "wires": []
    },
    {
        "id": "6773001d99cec9be",
        "type": "debug",
        "z": "f6f0e22b5d52cde1",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 280,
        "wires": []
    },
    {
        "id": "0427a0bd06624f6e",
        "type": "switch",
        "z": "f6f0e22b5d52cde1",
        "name": "nStatusOld != nStatusNew",
        "property": "SQL[0].nStatusNew",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "SQL[0].nStatusOld",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1320,
        "y": 120,
        "wires": [
            [
                "adac60bf92fddf74"
            ]
        ]
    },
    {
        "id": "ea60aa333f2b63d6",
        "type": "json",
        "z": "f6f0e22b5d52cde1",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 250,
        "y": 140,
        "wires": [
            [
                "82da135be920837a"
            ]
        ]
    },
    {
        "id": "278a12f4fa9b24d3",
        "type": "switch",
        "z": "f6f0e22b5d52cde1",
        "name": "gShipmentId != NULL",
        "property": "Shipment[0].gShipmentId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 820,
        "y": 140,
        "wires": [
            [
                "dca0b97bbb52503e"
            ]
        ]
    },
    {
        "id": "82da135be920837a",
        "type": "switch",
        "z": "f6f0e22b5d52cde1",
        "name": "Workflow Reception",
        "property": "payload.Workflow",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Reception",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 420,
        "y": 140,
        "wires": [
            [
                "6beae5bca9a3cc28"
            ]
        ]
    },
    {
        "id": "0cba72e17ed1046d",
        "type": "comment",
        "z": "f6f0e22b5d52cde1",
        "name": "PZO",
        "info": "",
        "x": 110,
        "y": 20,
        "wires": []
    },
    {
        "id": "adac60bf92fddf74",
        "type": "subflow:ca94f48e1f18b542",
        "z": "f6f0e22b5d52cde1",
        "name": "",
        "x": 90,
        "y": 260,
        "wires": [
            [
                "22a120c4cbf1dae8"
            ]
        ]
    },
    {
        "id": "22a120c4cbf1dae8",
        "type": "subflow:f2924807aef52857",
        "z": "f6f0e22b5d52cde1",
        "name": "",
        "x": 240,
        "y": 260,
        "wires": [
            [
                "0ed0891edab31359"
            ]
        ]
    },
    {
        "id": "1069dbc20bf3cc64",
        "type": "amqp-in",
        "z": "f6f0e22b5d52cde1",
        "name": "ShipmentEvent",
        "broker": "2f76d8b874d08554",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "NR_ShipmentEvent",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "f249c515cc0adfb6"
            ]
        ]
    },
    {
        "id": "42b39f9330bf5915",
        "type": "amqp-in",
        "z": "f6f0e22b5d52cde1",
        "name": "WorkflowEvent",
        "broker": "2f76d8b874d08554",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "NR_WorkflowEventShipment",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 100,
        "y": 140,
        "wires": [
            [
                "ea60aa333f2b63d6"
            ]
        ]
    },
    {
        "id": "f249c515cc0adfb6",
        "type": "MSSQL",
        "z": "f6f0e22b5d52cde1",
        "mssqlCN": "6c4551b7b08b27f9",
        "name": "sp_GetShipmentStatus",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "dbExchange.dbo.sp_GetShipmentStatus ",
        "modeOpt": "",
        "modeOptType": "execute",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "gShipmentId",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "payload.ShipmentId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "szEventType",
                "type": "NVarChar(25)",
                "valueType": "msg",
                "value": "payload.EventType",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 310,
        "y": 60,
        "wires": [
            [
                "0427a0bd06624f6e"
            ]
        ]
    },
    {
        "id": "6beae5bca9a3cc28",
        "type": "MSSQL",
        "z": "f6f0e22b5d52cde1",
        "mssqlCN": "6c4551b7b08b27f9",
        "name": "Get ShipmentId",
        "outField": "Shipment",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @gInspLotId uniqueidentifier,@Batch uniqueidentifier\r\nSELECT @gInspLotId=Reference FROM [WorkflowData].[wfc].[Workflow] where InstanceId='{{{payload.WorkflowId}}}'\r\nSELECT @Batch=gBatchId FROM [BatchManagementDb].[dbo].[tblInspectionLot] WHERE gId=@gInspLotId\r\nSELECT gShipmentId FROM [BatchManagementDb].[dbo].[tblBatch] WHERE gId=@Batch",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "gInspLotId",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "0",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 620,
        "y": 140,
        "wires": [
            [
                "278a12f4fa9b24d3"
            ]
        ]
    },
    {
        "id": "dca0b97bbb52503e",
        "type": "MSSQL",
        "z": "f6f0e22b5d52cde1",
        "mssqlCN": "6c4551b7b08b27f9",
        "name": "sp_GetShipmentStatus ",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "dbExchange.dbo.sp_GetShipmentStatus  ",
        "modeOpt": "",
        "modeOptType": "execute",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "gShipmentId",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "Shipment[0].gShipmentId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "szEventType",
                "type": "NVarChar(25)",
                "valueType": "msg",
                "value": "payload.EventType",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 1050,
        "y": 140,
        "wires": [
            [
                "0427a0bd06624f6e",
                "46c71939e06c26f5"
            ]
        ]
    },
    {
        "id": "f1f850cf9f5df800",
        "type": "MSSQL",
        "z": "f6f0e22b5d52cde1",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "tblShipmentStatusLog",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": " DECLARE @nLinkLast int,@dtNow datetime = GETUTCDATE()\r\n\r\n  SELECT @nLinkLast = nKey FROM [ReceptionRuntime].[dbo].[tblShipmentStatusLog] WHERE gShipmentId='{{{SQL.0.gShipmentId}}}'\r\n\r\n  IF @nLinkLast IS NOT NULL\r\n\tUPDATE [ReceptionRuntime].[dbo].[tblShipmentStatusLog]\r\n\t\tSET dtEndAt = @dtNow\r\n\t\tWHERE nKey = @nLinkLast\r\n\r\n  INSERT INTO [ReceptionRuntime].[dbo].[tblShipmentStatusLog]\r\n\tVALUES('{{{SQL.0.gShipmentId}}}',{{{SQL.0.nStatusNew}}},@dtNow,null)",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1080,
        "y": 220,
        "wires": [
            [
                "a1b1616be86e2dd9"
            ]
        ]
    },
    {
        "id": "9e4c994be6b69a2b",
        "type": "http in",
        "z": "e504da0640e31740",
        "name": "",
        "url": "/api/cooking",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "32676bee71e9da99",
                "823dbd8c160fa962",
                "e780ec36d541f3e8"
            ]
        ]
    },
    {
        "id": "c78424c9dbd5618a",
        "type": "http response",
        "z": "e504da0640e31740",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1610,
        "y": 180,
        "wires": []
    },
    {
        "id": "823dbd8c160fa962",
        "type": "debug",
        "z": "e504da0640e31740",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 100,
        "wires": []
    },
    {
        "id": "9867d511e04ea330",
        "type": "inject",
        "z": "e504da0640e31740",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Type\":\"1\",\"RowId\":\"204250\",\"BoilerNumber\":\"KS 3\",\"Factory\":\"1900\"}",
        "payloadType": "json",
        "x": 120,
        "y": 260,
        "wires": [
            [
                "e780ec36d541f3e8"
            ]
        ]
    },
    {
        "id": "6bf142ae6d80a3fc",
        "type": "debug",
        "z": "e504da0640e31740",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 120,
        "wires": []
    },
    {
        "id": "5b550754a58e1bb9",
        "type": "comment",
        "z": "e504da0640e31740",
        "name": "PZO",
        "info": "",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "e58b1602ecdbbbcc",
        "type": "switch",
        "z": "e504da0640e31740",
        "name": "Process != null",
        "property": "Process",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 560,
        "y": 140,
        "wires": [
            [
                "f1449acc422fcb2c"
            ],
            [
                "c78424c9dbd5618a"
            ]
        ]
    },
    {
        "id": "0931593ec2651c72",
        "type": "switch",
        "z": "e504da0640e31740",
        "name": "Type",
        "property": "payload.Type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 180,
        "wires": [
            [
                "03ef0115e703ca42"
            ],
            [
                "6e13c4283be54ace"
            ]
        ]
    },
    {
        "id": "9956a903dffbf3ce",
        "type": "debug",
        "z": "e504da0640e31740",
        "name": "debug 39",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 240,
        "wires": []
    },
    {
        "id": "e780ec36d541f3e8",
        "type": "subflow:ca94f48e1f18b542",
        "z": "e504da0640e31740",
        "name": "",
        "x": 90,
        "y": 180,
        "wires": [
            [
                "0931593ec2651c72"
            ]
        ]
    },
    {
        "id": "235211e106efee7f",
        "type": "function",
        "z": "e504da0640e31740",
        "d": true,
        "name": "prep Process setStart",
        "func": "var QueryParameterCommand =\"?eventName=ProductionProcess.LeaveNewStep&EventKey=\"+msg.Process[0].ProcessId;\nvar BodyCommand ={ NewStepOutcome : \"InProcess\" } \nmsg.QueryParameter = QueryParameterCommand;\nmsg.payload = BodyCommand;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 120,
        "wires": [
            [
                "82b297df7f67573f"
            ]
        ]
    },
    {
        "id": "82b297df7f67573f",
        "type": "http request",
        "z": "e504da0640e31740",
        "d": true,
        "name": "start Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.WorkflowUrl}}}/api/Events{{{QueryParameter}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1390,
        "y": 120,
        "wires": [
            [
                "6bf142ae6d80a3fc",
                "c78424c9dbd5618a"
            ]
        ]
    },
    {
        "id": "d12daa0b5cd0dd0b",
        "type": "switch",
        "z": "e504da0640e31740",
        "name": "Process = null",
        "property": "Process",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 800,
        "y": 220,
        "wires": [
            [
                "c78424c9dbd5618a"
            ],
            [
                "2f1a2946e83340e4"
            ]
        ]
    },
    {
        "id": "0e0e2fe15470db55",
        "type": "function",
        "z": "e504da0640e31740",
        "d": true,
        "name": "prep Process setEnd",
        "func": "var QueryParameterCommand =\"?eventName=ProductionProcess.LeaveInProcessStep&EventKey=\"+msg.Process[0].ProcessId;\n//var BodyCommand ={ NewStepOutcome : \"Completed\" } \nvar BodyCommand = { \"Source\": 4, \"Target\": 5 }\nmsg.QueryParameter = QueryParameterCommand;\nmsg.payload = BodyCommand;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 240,
        "wires": [
            [
                "ab1352d79f403ffb"
            ]
        ]
    },
    {
        "id": "ab1352d79f403ffb",
        "type": "http request",
        "z": "e504da0640e31740",
        "d": true,
        "name": "end Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.WorkflowUrl}}}/api/Events{{{QueryParameter}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1390,
        "y": 240,
        "wires": [
            [
                "9956a903dffbf3ce",
                "c78424c9dbd5618a"
            ]
        ]
    },
    {
        "id": "1a0dd03b6461f48c",
        "type": "subflow:f2924807aef52857",
        "z": "e504da0640e31740",
        "name": "",
        "x": 1000,
        "y": 120,
        "wires": [
            [
                "235211e106efee7f",
                "1fae82e738f69b2a"
            ]
        ]
    },
    {
        "id": "2f1a2946e83340e4",
        "type": "subflow:f2924807aef52857",
        "z": "e504da0640e31740",
        "name": "",
        "x": 1000,
        "y": 240,
        "wires": [
            [
                "0e0e2fe15470db55",
                "b5f5703be7d0a9d3"
            ]
        ]
    },
    {
        "id": "a6b7c668bd31b686",
        "type": "catch",
        "z": "e504da0640e31740",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 110,
        "y": 360,
        "wires": [
            [
                "d60c9c643aeae2f7"
            ]
        ]
    },
    {
        "id": "9945843993a044a7",
        "type": "debug",
        "z": "e504da0640e31740",
        "name": "Debug Save Catch Data",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 360,
        "wires": []
    },
    {
        "id": "d60c9c643aeae2f7",
        "type": "subflow:f8fc59a8d3d93ef9",
        "z": "e504da0640e31740",
        "name": "",
        "x": 320,
        "y": 360,
        "wires": [
            [
                "9945843993a044a7"
            ]
        ]
    },
    {
        "id": "1fae82e738f69b2a",
        "type": "http request",
        "z": "e504da0640e31740",
        "name": "start Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.MesCoreUrl}}}/api/UserTasks/do_action/{{{Process.0.UserTaskId}}}/InProcess",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1290,
        "y": 80,
        "wires": [
            [
                "6bf142ae6d80a3fc",
                "c78424c9dbd5618a"
            ]
        ]
    },
    {
        "id": "b5f5703be7d0a9d3",
        "type": "http request",
        "z": "e504da0640e31740",
        "name": "end Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.MesCoreUrl}}}/api/UserTasks/do_action/{{{Process.0.UserTaskId}}}/Complete",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1290,
        "y": 280,
        "wires": [
            [
                "c78424c9dbd5618a",
                "9956a903dffbf3ce"
            ]
        ]
    },
    {
        "id": "32676bee71e9da99",
        "type": "MSSQL",
        "z": "e504da0640e31740",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "tblCookingNRLog",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "INSERT INTO [dbExchange].[dbo].[tblCookingNRLog]\r\nVALUES({{{payload.Type}}},{{{payload.RowId}}},'{{{payload.BoilerNumber}}}','{{{payload.Factory}}}',GETDATE())",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 350,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "03ef0115e703ca42",
        "type": "MSSQL",
        "z": "e504da0640e31740",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "Get ProccesId start",
        "outField": "Process",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT TOP (1)  p.gId as 'ProcessId', p.gUserTaskId as 'UserTaskId'\r\nFROM [HLRURASAP100].[BaseClassifiers].[dbo].[tblEquipmentTree] et\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblEquipmentAllocationWork] ew ON ew.gEquipmentId=et.gId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p ON p.gOperationId = ew.gOperationId AND p.gEquipmentId=et.gId\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ee ON ee.[gEquipmentTreeId]=p.gEquipmentId\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystem] es ON es.gId=ee.[gExternalSystemId] AND es.szName=N'ASUTP'\r\nWHERE p.szStep='New' AND ee.[szExternalId]='{{{payload.BoilerNumber}}}'\r\nORDER BY p.nKey\r\n\r\n/* SELECT TOP (1)  p.gId as 'ProcessId'\r\nFROM [HLRURASAP100].[BaseClassifiers].[dbo].[tblEquipmentTree] et\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblEquipmentAllocationWork] ew ON ew.gEquipmentId=et.gId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p ON p.gOperationId = ew.gOperationId AND p.gEquipmentId=et.gId\r\nWHERE p.szStep='New' AND upper(rtrim(et.szName))=upper(rtrim('{{{payload.BoilerNumber}}}'))\r\nORDER BY p.nKey */",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 370,
        "y": 140,
        "wires": [
            [
                "e58b1602ecdbbbcc"
            ]
        ]
    },
    {
        "id": "6e13c4283be54ace",
        "type": "MSSQL",
        "z": "e504da0640e31740",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "Get ProccesId stop",
        "outField": "Process",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT m.gProcessId as 'ProcessId', p.gUserTaskId as 'UserTaskId'\r\nFROM [dbExchange].[dbo].[tblProcessCheeseMapping] m\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p ON p.gId = m.gProcessId\r\nWHERE p.szStep='InProcess' AND m.nCheeseMakerLink={{{payload.RowId}}}",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 370,
        "y": 220,
        "wires": [
            [
                "8416bd20fb550814"
            ]
        ]
    },
    {
        "id": "f1449acc422fcb2c",
        "type": "MSSQL",
        "z": "e504da0640e31740",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "tblProcessCheeseMapping",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "INSERT INTO [dbExchange].[dbo].[tblProcessCheeseMapping]\r\nVALUES('{{{Process.0.ProcessId}}}',@row,GETUTCDATE())",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "row",
                "type": "BigInt",
                "valueType": "msg",
                "value": "payload.RowId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 780,
        "y": 120,
        "wires": [
            [
                "1a0dd03b6461f48c"
            ]
        ]
    },
    {
        "id": "8416bd20fb550814",
        "type": "MSSQL",
        "z": "e504da0640e31740",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "tblCheeseMakerReport",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "INSERT INTO [dbExchange].[dbo].[tblCheeseMakerReport]\r\nSELECT [RowId]\r\n      ,[DataTime]\r\n      ,[CookingNumber]\r\n      ,[ProgramNumber]\r\n      ,[CookingStartTime]\r\n      ,[CookingEndTime]\r\n      ,[CookingSetTemperature]\r\n      ,[CookingActualTemperature]\r\n      ,[DrainStartTime]\r\n      ,[DrainEndTime]\r\n      ,[DrainTemperature]\r\n      ,[Water1SetValue]\r\n      ,[Water1ActualValue]\r\n      ,[Water2SetValue]\r\n      ,[Water2ActualValue]\r\n      ,[VakuumTime]\r\n      ,[ChangeFilterDateTime]\r\n      ,[BoilerNumber]\r\n      ,[Factory]\r\n\t,GETUTCDATE()\r\n  FROM [INDUSOFT].[CIP].[public].[CheeseMakerReport] \r\n  WHERE  [RowId] = {{{payload.RowId}}}",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 590,
        "y": 220,
        "wires": [
            [
                "d12daa0b5cd0dd0b"
            ]
        ]
    },
    {
        "id": "b1e30393e1e5c524",
        "type": "function",
        "z": "8de0de88b224a7ef",
        "name": "JsonToString",
        "func": "msg.payload.Parameters = JSON.stringify(msg.payload.Parameters);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 380,
        "wires": [
            [
                "859a648df46f712e",
                "3ca18a021215fa48"
            ]
        ]
    },
    {
        "id": "ac3af65a14475aca",
        "type": "switch",
        "z": "8de0de88b224a7ef",
        "name": "Type",
        "property": "payload.Type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 610,
        "y": 380,
        "wires": [
            [
                "1d09b7e6df6488d2"
            ],
            [
                "f761fa570010bbe6"
            ],
            [
                "96306acf7d9a599a"
            ]
        ]
    },
    {
        "id": "3ca18a021215fa48",
        "type": "subflow:ca94f48e1f18b542",
        "z": "8de0de88b224a7ef",
        "name": "",
        "x": 470,
        "y": 380,
        "wires": [
            [
                "ac3af65a14475aca"
            ]
        ]
    },
    {
        "id": "246dfe2c5e4db60e",
        "type": "switch",
        "z": "8de0de88b224a7ef",
        "name": "Process != null",
        "property": "Process",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1000,
        "y": 300,
        "wires": [
            [
                "aeb29ef669ee250d"
            ],
            [
                "d419bd9a8a437b50"
            ]
        ]
    },
    {
        "id": "f761fa570010bbe6",
        "type": "function",
        "z": "8de0de88b224a7ef",
        "name": "ConvertToArray",
        "func": "const jsonString = msg.payload.Parameters;\n\nlet jsonObject;\ntry {\n    jsonObject = JSON.parse(jsonString);\n} catch (e) {\n    msg.payload = \"Ошибка парсинга JSON: \" + e.message;\n    return msg;\n}\n\nmsg.resultArray = [];\n\nfor (let key in jsonObject) {\n    if (jsonObject.hasOwnProperty(key)) {\n        msg.resultArray.push({ key: key, value: jsonObject[key] });\n    }\n}\n\nmsg.CopyPayload = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 380,
        "wires": [
            [
                "76f8c57df8842fd4"
            ]
        ]
    },
    {
        "id": "96306acf7d9a599a",
        "type": "function",
        "z": "8de0de88b224a7ef",
        "name": "ConvertArraytoMap",
        "func": "const jsonString = msg.payload.Parameters;\n\nlet jsonObject;\ntry {\n    jsonObject = JSON.parse(jsonString);\n} catch (e) {\n    msg.payload = \"Ошибка парсинга JSON: \" + e.message;\n    return msg;\n}\n\nmsg.resultArray = [];\n\n\nfor (let key in jsonObject) {\n    if (jsonObject.hasOwnProperty(key)) {\n        msg.resultArray.push({ key: key, value: jsonObject[key] });\n    }\n}\n\nmsg.resultArray = msg.resultArray.map(item=> `('${item.key}', '${item.value}')`).join(\", \");\n\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 520,
        "wires": [
            [
                "2770e364e6cb9efa"
            ]
        ]
    },
    {
        "id": "f38a20702deb3d2d",
        "type": "http in",
        "z": "8de0de88b224a7ef",
        "name": "",
        "url": "/api/cooking",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "b1e30393e1e5c524"
            ]
        ]
    },
    {
        "id": "d419bd9a8a437b50",
        "type": "http response",
        "z": "8de0de88b224a7ef",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2290,
        "y": 360,
        "wires": []
    },
    {
        "id": "9134e705fcf8b746",
        "type": "debug",
        "z": "8de0de88b224a7ef",
        "name": "debug 149",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 220,
        "wires": []
    },
    {
        "id": "f392d814e41402f0",
        "type": "debug",
        "z": "8de0de88b224a7ef",
        "name": "debug 150",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 480,
        "wires": []
    },
    {
        "id": "d44ef5ebfa49a4c6",
        "type": "function",
        "z": "8de0de88b224a7ef",
        "d": true,
        "name": "prep Process setStart",
        "func": "var QueryParameterCommand =\"?eventName=ProductionProcess.LeaveNewStep&EventKey=\"+msg.Process[0].ProcessId;\nvar BodyCommand ={ NewStepOutcome : \"InProcess\" } \nmsg.QueryParameter = QueryParameterCommand;\nmsg.payload = BodyCommand;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 300,
        "wires": [
            [
                "0bdc40567ad48187"
            ]
        ]
    },
    {
        "id": "0bdc40567ad48187",
        "type": "http request",
        "z": "8de0de88b224a7ef",
        "d": true,
        "name": "start Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.WorkflowUrl}}}/api/Events{{{QueryParameter}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1970,
        "y": 300,
        "wires": [
            [
                "9134e705fcf8b746",
                "d419bd9a8a437b50"
            ]
        ]
    },
    {
        "id": "66dd08f48b03f0b6",
        "type": "function",
        "z": "8de0de88b224a7ef",
        "d": true,
        "name": "prep Process setEnd",
        "func": "var QueryParameterCommand =\"?eventName=ProductionProcess.LeaveInProcessStep&EventKey=\"+msg.Process[0].ProcessId;\n//var BodyCommand ={ NewStepOutcome : \"Completed\" } \nvar BodyCommand = { \"Source\": 4, \"Target\": 5 }\nmsg.QueryParameter = QueryParameterCommand;\nmsg.payload = BodyCommand;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 420,
        "wires": [
            [
                "e3b5133194603484"
            ]
        ]
    },
    {
        "id": "e3b5133194603484",
        "type": "http request",
        "z": "8de0de88b224a7ef",
        "d": true,
        "name": "end Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.WorkflowUrl}}}/api/Events{{{QueryParameter}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1990,
        "y": 420,
        "wires": [
            [
                "f392d814e41402f0",
                "d419bd9a8a437b50"
            ]
        ]
    },
    {
        "id": "26a49a2c449929f2",
        "type": "subflow:f2924807aef52857",
        "z": "8de0de88b224a7ef",
        "name": "",
        "x": 1480,
        "y": 260,
        "wires": [
            [
                "d44ef5ebfa49a4c6",
                "eb4d20b457a47344"
            ]
        ]
    },
    {
        "id": "b4fe3d962f4ce590",
        "type": "subflow:f2924807aef52857",
        "z": "8de0de88b224a7ef",
        "name": "",
        "x": 1580,
        "y": 420,
        "wires": [
            [
                "66dd08f48b03f0b6",
                "54337b4752ef51ae"
            ]
        ]
    },
    {
        "id": "d644a6f6ecdffff1",
        "type": "http request",
        "z": "8de0de88b224a7ef",
        "name": "start Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.MesCoreUrl}}}/api/UserTasks/do_action/{{{Process.0.UserTaskId}}}/InProcess",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1910,
        "y": 260,
        "wires": [
            [
                "9134e705fcf8b746",
                "d419bd9a8a437b50"
            ]
        ]
    },
    {
        "id": "1eb1b977e205e72d",
        "type": "http request",
        "z": "8de0de88b224a7ef",
        "name": "end Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.MesCoreUrl}}}/api/UserTasks/do_action/{{{Process.0.gUserTaskId}}}/Complete",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1970,
        "y": 460,
        "wires": [
            [
                "d419bd9a8a437b50",
                "f392d814e41402f0"
            ]
        ]
    },
    {
        "id": "eb4d20b457a47344",
        "type": "function",
        "z": "8de0de88b224a7ef",
        "name": "payload  clear",
        "func": "msg.payload=undefined;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 260,
        "wires": [
            [
                "d644a6f6ecdffff1"
            ]
        ]
    },
    {
        "id": "54337b4752ef51ae",
        "type": "function",
        "z": "8de0de88b224a7ef",
        "name": "payload  clear",
        "func": "msg.payload=undefined;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 460,
        "wires": [
            [
                "1eb1b977e205e72d"
            ]
        ]
    },
    {
        "id": "99ecc29c45a2116c",
        "type": "switch",
        "z": "8de0de88b224a7ef",
        "name": "Process = null",
        "property": "data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1440,
        "y": 380,
        "wires": [
            [
                "d419bd9a8a437b50"
            ],
            [
                "b4fe3d962f4ce590"
            ]
        ]
    },
    {
        "id": "9ee9e14980b26162",
        "type": "catch",
        "z": "8de0de88b224a7ef",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 170,
        "y": 660,
        "wires": [
            [
                "df0acac29f8c4d60"
            ]
        ]
    },
    {
        "id": "674d7e3bc0250789",
        "type": "debug",
        "z": "8de0de88b224a7ef",
        "name": "Debug Save Catch Data",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 660,
        "wires": []
    },
    {
        "id": "df0acac29f8c4d60",
        "type": "subflow:f8fc59a8d3d93ef9",
        "z": "8de0de88b224a7ef",
        "name": "",
        "x": 380,
        "y": 660,
        "wires": [
            [
                "674d7e3bc0250789"
            ]
        ]
    },
    {
        "id": "bbe180f0dcf42fb4",
        "type": "inject",
        "z": "8de0de88b224a7ef",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Type\":\"2\",\"RowId\":\"35687\",\"Parameters\":{\"CookingNumber\":\"7\",\"ProgramNumber\":\"11\",\"CookingStartTime\":\"2024-03-27 07:44:58\",\"CookingEndTime\":\"2024-03-27 07:56:54\",\"CookingSetTemperature\":\"86\",\"CookingActualTemperature\":\"86\"}}",
        "payloadType": "json",
        "x": 180,
        "y": 740,
        "wires": [
            [
                "56fd0423a7e32dc9"
            ]
        ]
    },
    {
        "id": "56fd0423a7e32dc9",
        "type": "debug",
        "z": "8de0de88b224a7ef",
        "name": "debug 151",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 740,
        "wires": []
    },
    {
        "id": "258e576f171ad742",
        "type": "catch",
        "z": "8de0de88b224a7ef",
        "name": "",
        "scope": [
            "859a648df46f712e",
            "1d09b7e6df6488d2",
            "33888358e6358c78",
            "aeb29ef669ee250d",
            "2770e364e6cb9efa",
            "4fc54185a51af074",
            "82d7f83bbe4cdc33"
        ],
        "uncaught": false,
        "x": 2140,
        "y": 140,
        "wires": [
            [
                "d419bd9a8a437b50"
            ]
        ]
    },
    {
        "id": "69519701005e7ff2",
        "type": "subflow:f2924807aef52857",
        "z": "8de0de88b224a7ef",
        "name": "",
        "x": 1500,
        "y": 520,
        "wires": [
            [
                "8569122f37335165"
            ]
        ]
    },
    {
        "id": "8569122f37335165",
        "type": "switch",
        "z": "8de0de88b224a7ef",
        "name": "DATA!=Null",
        "property": "data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1730,
        "y": 520,
        "wires": [
            [
                "d419bd9a8a437b50"
            ],
            []
        ]
    },
    {
        "id": "76f8c57df8842fd4",
        "type": "debug",
        "z": "8de0de88b224a7ef",
        "name": "debug 189",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 460,
        "wires": []
    },
    {
        "id": "084d5729de51cf6c",
        "type": "debug",
        "z": "8de0de88b224a7ef",
        "name": "debug 190",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 180,
        "wires": []
    },
    {
        "id": "8725087611f2e40a",
        "type": "inject",
        "z": "8de0de88b224a7ef",
        "name": "Type 1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Type\":\"1\",\"RowId\":\"12016\",\"BoilerNumber\":\"KS 3\",\"Factory\":\"1900\"}",
        "payloadType": "json",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "b1e30393e1e5c524",
                "859a648df46f712e"
            ]
        ]
    },
    {
        "id": "853e978d77ae1f87",
        "type": "inject",
        "z": "8de0de88b224a7ef",
        "name": "Type 3",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Type\":\"3\",\"RowId\":\"12016\",\"Factory\":\"1900\",\"Parameters\":{\"DrainStartTime\":\"2024-03-27 07:44:58\",\"DrainEndTime\":\"2024-03-27 07:56:54\",\"ProgramNumber\":\"20\"}}",
        "payloadType": "json",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "b1e30393e1e5c524",
                "859a648df46f712e"
            ]
        ]
    },
    {
        "id": "8d2cf8ccd99af797",
        "type": "inject",
        "z": "8de0de88b224a7ef",
        "name": "Type 2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Type\":\"2\",\"RowId\":\"12016\",\"Factory\":\"1900\",\"Parameters\":{\"CookingNumber\":\"7\",\"ProgramNumber\":\"11\",\"CookingStartTime\":\"2024-03-27 7:44:58\",\"CookingEndTime\":\"2024-03-27 7:56:54\",\"CookingSetTemperature\":\"86\",\"CookingActualTemperature\":\"85\"}}",
        "payloadType": "json",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "b1e30393e1e5c524"
            ]
        ]
    },
    {
        "id": "b1987ea41fed714a",
        "type": "function",
        "z": "8de0de88b224a7ef",
        "name": "ConvertToArray",
        "func": "const jsonString = msg.payload.Parameters;\n\nlet jsonObject;\ntry {\n    jsonObject = JSON.parse(jsonString);\n} catch (e) {\n    msg.payload = \"Ошибка парсинга JSON: \" + e.message;\n    return msg;\n}\nlet jsonArray = Object.keys(jsonObject).map(key => ({ key: key, type: jsonObject[key].type, value: jsonObject[key].value })); // Преобразуем в массив объект JSON\n\nmsg.resultArray = []; \n\njsonArray.forEach(function(element) {\n    if (element.type == 'datetime'){\n        let date = element.value.split(' ');\n        let time = date[1].split(':');\n        time[0] = (parseInt(time[0]) + 3 + 24) % 24;\n        element.value = date[0] + ' ' + time[0] + ':' + time[1] + ':' + time[2]\n        \n        msg.resultArray.push({key: element.key, value: element.value });\n    }\n    else msg.resultArray.push({ key: element.key, value: element.value });\n});\n    \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "03c99e5e5fadacbb",
        "type": "loop",
        "z": "8de0de88b224a7ef",
        "name": "LoopForArray",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "resultArray",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-last",
        "x": 1240,
        "y": 380,
        "wires": [
            [
                "99ecc29c45a2116c"
            ],
            [
                "33888358e6358c78"
            ]
        ]
    },
    {
        "id": "859a648df46f712e",
        "type": "MSSQL",
        "z": "8de0de88b224a7ef",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "tblCookingNRLog",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "INSERT INTO [dbExchange].[dbo].[tblCookingNRLog]\r\nVALUES({{{payload.Type}}},{{{payload.RowId}}},'{{{payload.Factory}}}' ,'{{{payload.BoilerNumber}}}',GETDATE(),'{{{payload.Parameters}}}')",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 510,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "1d09b7e6df6488d2",
        "type": "MSSQL",
        "z": "8de0de88b224a7ef",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "Get ProccesId start",
        "outField": "Process",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @gAccess uniqueidentifier\r\nSELECT @gAccess=gId FROM /*[HLRURASAP100].*/[BaseClassifiers].[dbo].[tblEquipmentTree]\r\nWHERE nType=1 AND szName='{{{payload.Factory}}}'\r\n\r\nSELECT TOP (1)  p.gId as 'ProcessId', p.gUserTaskId as 'UserTaskId'\r\nFROM /*[HLRURASAP100].*/[BaseClassifiers].[dbo].[tblEquipmentTree] et\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblEquipmentAllocationWork] ew ON ew.gEquipmentId=et.gId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p ON p.gOperationId = ew.gOperationId AND p.gEquipmentId=et.gId\r\n\tINNER JOIN /*[HLRURASAP100].*/[BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ee ON ee.[gEquipmentTreeId]=p.gEquipmentId\r\n\tINNER JOIN /*[HLRURASAP100].*/[BaseClassifiers].[dbo].[tblExternalSystem] es ON es.gId=ee.[gExternalSystemId] AND es.szName=N'ASUTP'\r\nWHERE p.szStep='New' AND ee.[szExternalId]='{{{payload.BoilerNumber}}}' AND p.gAccessId=@gAccess\r\nORDER BY p.nKey\r\n\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 790,
        "y": 300,
        "wires": [
            [
                "246dfe2c5e4db60e",
                "084d5729de51cf6c"
            ]
        ]
    },
    {
        "id": "33888358e6358c78",
        "type": "MSSQL",
        "z": "8de0de88b224a7ef",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "tblCheeseCookingReport",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "INSERT INTO [dbExchange].[dbo].[tblCheeseCookingReport]\r\nVALUES ({{{CopyPayload.RowId}}}, '{{{data.0.gAccess}}}', '{{{data.0.gEquipmentId}}}', '{{{data.0.gProcessId}}}', '{{{payload.key}}}', '{{{payload.value}}}', GETUTCDATE(), null)",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1250,
        "y": 440,
        "wires": [
            [
                "03c99e5e5fadacbb"
            ]
        ]
    },
    {
        "id": "aeb29ef669ee250d",
        "type": "MSSQL",
        "z": "8de0de88b224a7ef",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "tblCheeseCookingReport",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @gEquip NVARCHAR(100);\r\nDECLARE @gAccess NVARCHAR(100);\r\n\r\nSELECT @gEquip = gEquipmentId  , @gAccess = gAccessId  FROM [ProductionManagementRunTimeDb].[dbo].[tblProcess]\r\nWHERE gId = '{{{Process.0.ProcessId}}}';\r\n\r\nINSERT INTO [dbExchange].[dbo].[tblCheeseCookingReport](nRowId, gAccess, gEquipmentId, gProcessId, dtCreatedAt)\r\nVALUES({{{payload.RowId}}}, @gAccess, @gEquip ,'{{{Process.0.ProcessId}}}',GETUTCDATE())",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1230,
        "y": 260,
        "wires": [
            [
                "26a49a2c449929f2"
            ]
        ]
    },
    {
        "id": "2770e364e6cb9efa",
        "type": "MSSQL",
        "z": "8de0de88b224a7ef",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "Get_Parameters",
        "outField": "data",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @gAccessId uniqueidentifier;\r\nSELECT @gAccessId = gAccessId FROM [BaseClassifiers].[dbo].[tblEquipmentTree] \r\nWHERE nType = 1 AND szNumberSAP = '{{{payload.Factory}}}';\r\n\r\nSELECT TOP(1) gEquipmentId, gProcessId, gAccess, dtCreatedAt FROM [dbExchange].[dbo].[tblCheeseCookingReport]\r\nwhere nRowId = {{{payload.RowId}}} and gAccess = @gAccessId \r\n\r\n\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1000,
        "y": 520,
        "wires": [
            [
                "4fc54185a51af074"
            ]
        ]
    },
    {
        "id": "4fc54185a51af074",
        "type": "MSSQL",
        "z": "8de0de88b224a7ef",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "MERGEtoCookingReport",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "CREATE TABLE #tbl1 (\r\n        ParameterName NVARCHAR(255) NOT NULL, \r\n        ParameterValue NVARCHAR(255) NOT NULL\r\n    );\r\n\r\nINSERT INTO #tbl1 (ParameterName, ParameterValue)\r\nVALUES {{{resultArray}}};\r\n    \r\nMERGE [dbExchange].[dbo].[tblCheeseCookingReport] AS tgt\r\nUSING (SELECT ParameterName, ParameterValue FROM #tbl1) AS src(szParam, szValue)\r\n    ON (tgt.szParameterName = szParam and tgt.gProcessId = '{{{data.0.gProcessId }}}')\r\nWHEN MATCHED\r\n    THEN\r\n        UPDATE\r\n        SET szParameterValue = szValue, dtUpdatedAt = GETUTCDATE()\r\nWHEN NOT MATCHED\r\n    THEN\r\n        INSERT (nRowId, gAccess, gEquipmentId, gProcessId, szParameterName, szParameterValue, dtCreatedAt, dtUpdatedAt)\r\n        VALUES ({{{payload.RowId}}}, '{{{data.0.gAccess}}}', '{{{data.0.gEquipmentId}}}', '{{{data.0.gProcessId}}}', szParam, szValue, GETUTCDATE(), GETUTCDATE());",
        "modeOpt": "",
        "modeOptType": "query",
        "queryOpt": "",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "resultArray",
                "type": "int",
                "valueType": "msg",
                "value": "resultArray",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 1230,
        "y": 520,
        "wires": [
            [
                "69519701005e7ff2"
            ]
        ]
    },
    {
        "id": "82d7f83bbe4cdc33",
        "type": "MSSQL",
        "z": "8de0de88b224a7ef",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "Get_Parameters",
        "outField": "data",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @gAccessId uniqueidentifier;\r\n\r\nSELECT @gAccessId = gAccessId FROM [BaseClassifiers].[dbo].[tblEquipmentTree] \r\nWHERE nType = 1 AND szNumberSAP = '{{{payload.Factory}}}';\r\n\r\nSELECT gEquipmentId, gProcessId, gAccess, dtCreatedAt FROM [dbExchange].[dbo].[tblCheeseCookingReport]\r\nwhere nRowId = {{{payload.RowId}}} and gAccess = @gAccessId ;\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 980,
        "y": 380,
        "wires": [
            [
                "76f8c57df8842fd4",
                "43936d9d86b284a7"
            ]
        ]
    },
    {
        "id": "43936d9d86b284a7",
        "type": "MSSQL",
        "z": "8de0de88b224a7ef",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get_gUserTaskId",
        "outField": "Process",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @gProcessId uniqueidentifier;\r\nSET @gProcessId = (SELECT gProcessId FROM [dbExchange].[dbo].[tblCheeseCookingReport]\r\nwhere nRowId = {{{payload.RowId}}} and gAccess = '{{{data.0.gAccess}}}' )\r\n\r\nSELECT gUserTaskId FROM [ProductionManagementRunTimeDb].[dbo].[tblProcess] \r\nWHERE gId = @gProcessId;\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1110,
        "y": 340,
        "wires": [
            [
                "03c99e5e5fadacbb"
            ]
        ]
    },
    {
        "id": "951d37518d890303",
        "type": "http request",
        "z": "02903af110ba6e1e",
        "name": "InspcharValue bulkAutoData",
        "method": "use",
        "ret": "txt",
        "paytoqs": "query",
        "url": "{{{Config.QAUrl}}}/api/InspectionCharacteristicValue",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-Type",
                "valueType": "other",
                "valueValue": "application/json"
            },
            {
                "keyType": "other",
                "keyValue": "x-type",
                "valueType": "other",
                "valueValue": "bulkAutoData"
            }
        ],
        "x": 1320,
        "y": 220,
        "wires": [
            [
                "292e8a717aefd4a1"
            ]
        ]
    },
    {
        "id": "292e8a717aefd4a1",
        "type": "switch",
        "z": "02903af110ba6e1e",
        "name": "out1  - statusCode =200",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1570,
        "y": 220,
        "wires": [
            [],
            [
                "4717e73f12cccc16"
            ]
        ]
    },
    {
        "id": "5099161b0c8c02fa",
        "type": "function",
        "z": "02903af110ba6e1e",
        "name": "method = \"PATCH\"",
        "func": "msg.method = \"PATCH\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 220,
        "wires": [
            [
                "951d37518d890303"
            ]
        ]
    },
    {
        "id": "4717e73f12cccc16",
        "type": "debug",
        "z": "02903af110ba6e1e",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 220,
        "wires": []
    },
    {
        "id": "274111e1ab6265b2",
        "type": "switch",
        "z": "02903af110ba6e1e",
        "name": "1-Not Null,2-Null",
        "property": "SQL",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1040,
        "y": 120,
        "wires": [
            [
                "6e6238dd4606ed4b"
            ],
            []
        ]
    },
    {
        "id": "370e2471d2a7cef2",
        "type": "function",
        "z": "02903af110ba6e1e",
        "name": "prep data",
        "func": "var SQL = [];  \nfor (var i=0; i<msg.SQL.length; i++)\n        {\n          SQL[i] =      \n                {\n                        id: msg.SQL[i].gId\n                        , numericData: { Value: msg.SQL[i].nValue } \n                }\n                          \n        }\nmsg.payload ={Values:SQL};                \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 220,
        "wires": [
            [
                "ee42bec014394b71"
            ]
        ]
    },
    {
        "id": "ee42bec014394b71",
        "type": "json",
        "z": "02903af110ba6e1e",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 910,
        "y": 220,
        "wires": [
            [
                "5099161b0c8c02fa"
            ]
        ]
    },
    {
        "id": "86aa94b11acb8ecf",
        "type": "comment",
        "z": "02903af110ba6e1e",
        "name": "PZO/DTr",
        "info": "",
        "x": 80,
        "y": 20,
        "wires": []
    },
    {
        "id": "faa6965489c78c03",
        "type": "subflow:37b786771d50fd31",
        "z": "02903af110ba6e1e",
        "name": "",
        "x": 1350,
        "y": 120,
        "wires": [
            [
                "370e2471d2a7cef2"
            ],
            []
        ]
    },
    {
        "id": "6e6238dd4606ed4b",
        "type": "subflow:ca94f48e1f18b542",
        "z": "02903af110ba6e1e",
        "name": "",
        "x": 1210,
        "y": 120,
        "wires": [
            [
                "faa6965489c78c03"
            ]
        ]
    },
    {
        "id": "b7624ed4a95afe05",
        "type": "function",
        "z": "02903af110ba6e1e",
        "name": "prepare data",
        "func": "let Input;\nInput = {\"InspectionLot\": {\n                            \"Id\": msg.InspLot[0].gId\n                            }\n    };\nmsg.payload=Input\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 60,
        "wires": [
            [
                "2eaea64eef42ab2a"
            ]
        ]
    },
    {
        "id": "3b4ef45e29f93e3b",
        "type": "function",
        "z": "02903af110ba6e1e",
        "name": "prep data",
        "func": "var SQL = []; \nnode.debug(msg.SQL.length) ;\nfor (var i=0; i<msg.SQL.length; i++)\n       \n        {\n        let a = msg.SQL[i].nType;\n        if (a == 1) SQL[i] =     \n                {\n                        id: msg.SQL[i].gId\n                        , numericData: { Value: msg.SQL[i].szParameterValue }                                                     \n                }\n        if (a == 3) SQL[i] =\n        {\n                id: msg.SQL[i].gId\n                , timeData: { Value: msg.SQL[i].szParameterValue }\n        }\n        if (a == 4) SQL[i] =\n        {\n                id: msg.SQL[i].gId\n                , dateTimeData: { Value: msg.SQL[i].szParameterValue }\n        }                \n        }\nmsg.payload ={Values:SQL};                \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 480,
        "wires": [
            [
                "d10ba41167cd98d4",
                "f1a4960c368ae913"
            ]
        ]
    },
    {
        "id": "0898185b3d6f7111",
        "type": "http request",
        "z": "02903af110ba6e1e",
        "name": "InspcharValue bulkAutoData",
        "method": "use",
        "ret": "txt",
        "paytoqs": "query",
        "url": "{{{Config.QAUrl}}}/api/InspectionCharacteristicValue",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-Type",
                "valueType": "other",
                "valueValue": "application/json"
            },
            {
                "keyType": "other",
                "keyValue": "x-type",
                "valueType": "other",
                "valueValue": "bulkAutoData"
            }
        ],
        "x": 980,
        "y": 480,
        "wires": [
            [
                "1ebdcaab66157e20"
            ]
        ]
    },
    {
        "id": "d10ba41167cd98d4",
        "type": "function",
        "z": "02903af110ba6e1e",
        "name": "method = \"PATCH\"",
        "func": "msg.method = \"PATCH\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 480,
        "wires": [
            [
                "0898185b3d6f7111"
            ]
        ]
    },
    {
        "id": "1ebdcaab66157e20",
        "type": "switch",
        "z": "02903af110ba6e1e",
        "name": "out1  - statusCode =200",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1230,
        "y": 480,
        "wires": [
            [
                "cb0371a0ca4b1689"
            ],
            [
                "cb0371a0ca4b1689",
                "ca49169767c160cc"
            ]
        ]
    },
    {
        "id": "6822a4f1ef627b90",
        "type": "subflow:ca94f48e1f18b542",
        "z": "02903af110ba6e1e",
        "name": "",
        "x": 290,
        "y": 480,
        "wires": [
            [
                "470dc981e9f5057c"
            ]
        ]
    },
    {
        "id": "470dc981e9f5057c",
        "type": "subflow:37b786771d50fd31",
        "z": "02903af110ba6e1e",
        "name": "",
        "x": 430,
        "y": 480,
        "wires": [
            [
                "3b4ef45e29f93e3b"
            ],
            []
        ]
    },
    {
        "id": "4170d6ea14d4ee5e",
        "type": "http request",
        "z": "02903af110ba6e1e",
        "name": "end ChList",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.MesCoreUrl}}}/api/UserTasks/do_action/{{{UserTask.0.gUserTaskId}}}/Complete",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1110,
        "y": 580,
        "wires": [
            [
                "0a8efb1d730ecd5f"
            ]
        ]
    },
    {
        "id": "0a8efb1d730ecd5f",
        "type": "debug",
        "z": "02903af110ba6e1e",
        "name": "debug 74",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 580,
        "wires": []
    },
    {
        "id": "f6db546104b55c0b",
        "type": "debug",
        "z": "02903af110ba6e1e",
        "name": "debug 139",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 40,
        "wires": []
    },
    {
        "id": "0b86cffdb64fa47d",
        "type": "switch",
        "z": "02903af110ba6e1e",
        "name": "Workflow?",
        "property": "UTI[0].workflow",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ProductionOperationStandardization",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "HochlandIngredientsReceptionDeliveryItemWorkflow",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "HochlandIngredientsReceptionDeliveryItemMicrobiologicalWorkflow",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 650,
        "y": 120,
        "wires": [
            [
                "f6db546104b55c0b",
                "2eaea64eef42ab2a"
            ],
            [
                "02dd6a1ff1ac46ae"
            ],
            [
                "02dd6a1ff1ac46ae"
            ],
            []
        ]
    },
    {
        "id": "61adfee3ea012138",
        "type": "switch",
        "z": "02903af110ba6e1e",
        "name": "WF is not null",
        "property": "WF[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 500,
        "y": 400,
        "wires": [
            [
                "7767fd626216329c"
            ]
        ]
    },
    {
        "id": "7504a0609f6f3579",
        "type": "link in",
        "z": "02903af110ba6e1e",
        "name": "AutoValue",
        "links": [
            "4cc78eb77f867d66"
        ],
        "x": 205,
        "y": 120,
        "wires": [
            [
                "0b86cffdb64fa47d"
            ]
        ]
    },
    {
        "id": "3e41135099d5a9b0",
        "type": "link in",
        "z": "02903af110ba6e1e",
        "name": "AutoValues",
        "links": [
            "959bed357b9ae5cb"
        ],
        "x": 185,
        "y": 280,
        "wires": [
            [
                "6833e4c251531606",
                "cd9407667ac45eec"
            ]
        ]
    },
    {
        "id": "7fb9a774d3735bfe",
        "type": "switch",
        "z": "02903af110ba6e1e",
        "name": "Mapping is not null",
        "property": "Mapping",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1070,
        "y": 360,
        "wires": [
            [
                "db30e7ae38a3a122"
            ],
            []
        ]
    },
    {
        "id": "7767fd626216329c",
        "type": "change",
        "z": "02903af110ba6e1e",
        "name": "prepare data",
        "rules": [
            {
                "t": "move",
                "p": "WF[0].InspectionMeasurementId",
                "pt": "msg",
                "to": "Input.Checklist.InspectionMeasurementId",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "WF[0].EquipmentId",
                "pt": "msg",
                "to": "EquipmentId",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 400,
        "wires": [
            [
                "871c6b5239fc825e"
            ]
        ]
    },
    {
        "id": "43416fa02c03c913",
        "type": "debug",
        "z": "02903af110ba6e1e",
        "name": "debug 187",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 320,
        "wires": []
    },
    {
        "id": "b9e2840faf3cb72d",
        "type": "debug",
        "z": "02903af110ba6e1e",
        "name": "debug 191",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 320,
        "wires": []
    },
    {
        "id": "f1a4960c368ae913",
        "type": "debug",
        "z": "02903af110ba6e1e",
        "name": "debug 193",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 440,
        "wires": []
    },
    {
        "id": "18b01633d2a5b952",
        "type": "function",
        "z": "02903af110ba6e1e",
        "name": "SQL->Input",
        "func": "msg.Input={\"Checklist\":{\"InspectionMeasurementId\":msg.SQL[0].gInspectionMeasurementId}}\nmsg.EquipmentId = msg.SQL[0].gEquipmentId\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 280,
        "wires": [
            [
                "871c6b5239fc825e"
            ]
        ]
    },
    {
        "id": "9a9da84713a61cdb",
        "type": "switch",
        "z": "02903af110ba6e1e",
        "name": "SQL is not null",
        "property": "SQL[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 480,
        "y": 280,
        "wires": [
            [
                "18b01633d2a5b952"
            ],
            []
        ]
    },
    {
        "id": "ea3bb937fd5fdcd3",
        "type": "link in",
        "z": "02903af110ba6e1e",
        "name": "AutoValue_Ch",
        "links": [
            "82f949d4473acd0e"
        ],
        "x": 185,
        "y": 340,
        "wires": [
            [
                "43416fa02c03c913",
                "d351efddec045d46"
            ]
        ]
    },
    {
        "id": "cd9407667ac45eec",
        "type": "debug",
        "z": "02903af110ba6e1e",
        "name": "debug 247",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 240,
        "wires": []
    },
    {
        "id": "cb0371a0ca4b1689",
        "type": "debug",
        "z": "02903af110ba6e1e",
        "name": "debug 249",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 480,
        "wires": []
    },
    {
        "id": "d351efddec045d46",
        "type": "switch",
        "z": "02903af110ba6e1e",
        "name": "parentId!=NULL",
        "property": "UTI[0].parentId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 320,
        "y": 340,
        "wires": [
            [
                "0cd2bc2f2da6527a"
            ],
            []
        ]
    },
    {
        "id": "1a3d45428dfc4a23",
        "type": "switch",
        "z": "02903af110ba6e1e",
        "name": "IsNeedToEndCL",
        "property": "endCL.0.endCL",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 720,
        "y": 580,
        "wires": [
            [
                "9f1c5b49b5a11e41"
            ],
            []
        ]
    },
    {
        "id": "a77cd7677d6bf3f0",
        "type": "comment",
        "z": "02903af110ba6e1e",
        "name": "ЧЛ для варок",
        "info": "",
        "x": 270,
        "y": 180,
        "wires": []
    },
    {
        "id": "36c5e0b26acaef7a",
        "type": "comment",
        "z": "02903af110ba6e1e",
        "name": "Завершение ЧЛ для варок",
        "info": "",
        "x": 360,
        "y": 520,
        "wires": []
    },
    {
        "id": "a0b2b9e5d380854e",
        "type": "debug",
        "z": "02903af110ba6e1e",
        "name": "debug 253",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "EquipmentId",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 360,
        "wires": []
    },
    {
        "id": "c5390b6a850b1c3b",
        "type": "debug",
        "z": "02903af110ba6e1e",
        "name": "debug 254",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 440,
        "wires": []
    },
    {
        "id": "2b516d00e327a582",
        "type": "amqp-in",
        "z": "02903af110ba6e1e",
        "name": "NR_ChangeIntake",
        "broker": "2f76d8b874d08554",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "NR_ChangeIntake",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "5e3115f00c93a950"
            ]
        ]
    },
    {
        "id": "2eaea64eef42ab2a",
        "type": "MSSQL",
        "z": "02903af110ba6e1e",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Get Quantity",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT icv.gId,b.[nQuantity] as nValue \r\nFROM [HLRURASAP99].[BatchManagementDb].[dbo].[tblInspectionLot] il\r\n\tINNER JOIN [HLRURASAP99].[QARunTimeData].[dbo].[tblInspectionMeasurement] im ON im.gId=il.gInspectionMeasurementId\r\n\tINNER JOIN [HLRURASAP99].[BatchManagementDb].[dbo].[tblBatch] b ON b.gId=il.gBatchId\r\n\tINNER JOIN [HLRURASAP99].[QARunTimeData].[dbo].[tblInspectionCharacteristicValue] icv ON icv.gInspectionMeasurementId=im.gId\r\n\tINNER JOIN [QAMasterData].[dbo].[tblInspectionCharacteristic] ic ON ic.gId=icv.gInspectionCharacteristicId\r\nWHERE ic.szCode=N'WEIGTH QA' AND im.bIsCompleted=0 AND im.bIsCanceled=0 AND il.gId='{{{UTI.0.ownerId}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "gInspLotId",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "0",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 830,
        "y": 60,
        "wires": [
            [
                "274111e1ab6265b2"
            ]
        ]
    },
    {
        "id": "02dd6a1ff1ac46ae",
        "type": "MSSQL",
        "z": "02903af110ba6e1e",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Get Inspchar+value",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT icv.gId,pv.nValue \r\nFROM [HLRURASAP99].[BatchManagementDb].[dbo].[tblInspectionLot] il\r\n\tINNER JOIN [HLRURASAP99].[QARunTimeData].[dbo].[tblInspectionMeasurement] im ON im.gId=il.gInspectionMeasurementId\r\n\tINNER JOIN [QAMasterData].[dbo].[tblInspectionMeasurementTemplateItem] imt ON imt.[gInspectionMeasurementTemplateId]=im.gInspectionMeasurementTemplateId\r\n\tINNER JOIN [HLRURASAP99].[BatchManagementDb].[dbo].[tblBatch] b ON b.gId=il.gBatchId\r\n\tINNER JOIN [HLRURASAP99].[ReceptionRuntime].[dbo].[tblDelivery] d ON d.gId=b.[gDeliveryId]\r\n\tINNER JOIN [HLRURASAP99].[WorkflowData].[dbo].[tblQualityPeriodicalValues] pv ON pv.[gCounterpartyId]=d.gCounterpartyId AND pv.gMaterialId=b.gMaterialId \r\n\t\tAND b.dtCreatedAt BETWEEN pv.[dtStartedAt] AND pv.dtStoppedAt AND pv.gInspectionCharacteristicId = imt.gInspectionCharacteristicId\r\n\tINNER JOIN [HLRURASAP99].[QARunTimeData].[dbo].[tblInspectionCharacteristicValue] icv ON icv.gInspectionMeasurementId=im.gId AND icv.gInspectionCharacteristicId=pv.gInspectionCharacteristicId\r\nWHERE il.gId='{{{UTI.0.ownerId}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "gInspLotId",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "0",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 850,
        "y": 160,
        "wires": [
            [
                "274111e1ab6265b2"
            ]
        ]
    },
    {
        "id": "5e3115f00c93a950",
        "type": "MSSQL",
        "z": "02903af110ba6e1e",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get InspLot WF17",
        "outField": "InspLot",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT TOP 1 il.[gId]    \r\n  FROM [BatchManagementDb].[dbo].[tblInspectionLot] il\r\n  INNER JOIN [QARunTimeData].[dbo].[tblInspectionMeasurement] im ON im.gId=il.gInspectionMeasurementId AND im.bIsCompleted=0 AND im.bIsCanceled=0\r\n  INNER JOIN [WorkflowData].[dbo].[tblInspectionMeasurementTemplateWorkflow] w ON w.gInspectionMeasurementTemplateId=im.gInspectionMeasurementTemplateId AND w.nWorkflow=17\r\n  WHERE gBatchId = @il\r\n  ORDER BY il.nKey desc",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "il",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "payload[0].BatchId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 310,
        "y": 60,
        "wires": [
            [
                "b7624ed4a95afe05"
            ]
        ]
    },
    {
        "id": "0cd2bc2f2da6527a",
        "type": "MSSQL",
        "z": "02903af110ba6e1e",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get checklist",
        "outField": "WF",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE  @gProcessId uniqueidentifier\r\n\r\nSELECT @gProcessId=gOwnerId FROM [MesCoreRuntime].[dbo].[tblUserTasks] WHERE gId = '{{{UTI.0.parentId}}}'\r\nSELECT @gProcessId as [gProcessId], pr.gEquipmentId as [EquipmentId], im.gId as [InspectionMeasurementId]\r\n  FROM [ChecklistsRunTimeData].[dbo].[tblChecklist] ch \r\n  INNER JOIN [QARunTimeData].[dbo].[tblInspectionMeasurement] im ON im.gId=ch.gInspectionMeasurementId and im.gInspectionMeasurementTemplateId='363b3fb4-0149-47fe-920d-d8025eb67ef8'\r\n  INNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] pr ON pr.gId = @gProcessId\r\n  WHERE ch.gId='{{{UTI.0.ownerId}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "gInspLotId",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "0",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 310,
        "y": 400,
        "wires": [
            [
                "61adfee3ea012138",
                "c5390b6a850b1c3b"
            ]
        ]
    },
    {
        "id": "871c6b5239fc825e",
        "type": "MSSQL",
        "z": "02903af110ba6e1e",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get nRowId",
        "outField": "Mapping",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT TOP (1) [nRowId]\r\n  FROM [dbExchange].[dbo].[tblCheeseCookingReport]\r\n  WHERE gProcessId='{{{WF.0.gProcessId}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 870,
        "y": 360,
        "wires": [
            [
                "7fb9a774d3735bfe"
            ]
        ]
    },
    {
        "id": "db30e7ae38a3a122",
        "type": "MSSQL",
        "z": "02903af110ba6e1e",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "sp_GetIncpValueCooking",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT icv.gId,icv.szCode,icv.nType,d.szParameterValue FROM [QARunTimeData].[dbo].[tblInspectionCharacteristicValue] icv\r\n\tINNER JOIN [dbExchange].[dbo].[tblCheeseCookingReport] d on d.szParameterName=icv.szCode\r\nWHERE gInspectionMeasurementId='{{{Input.Checklist.InspectionMeasurementId}}}' and d.nRowId = {{{Mapping.0.nRowId}}}",
        "modeOpt": "",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1310,
        "y": 360,
        "wires": [
            [
                "b9e2840faf3cb72d",
                "6822a4f1ef627b90",
                "a0b2b9e5d380854e"
            ]
        ]
    },
    {
        "id": "6833e4c251531606",
        "type": "MSSQL",
        "z": "02903af110ba6e1e",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "Get IM",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @gEquipmentId uniqueidentifier\r\n\r\nSELECT @gEquipmentId = gEquipmentId FROM [ProductionManagementRunTimeDb].[dbo].[tblProcess] WHERE gId = '{{{WF.0.gProcessId}}}'\r\nSELECT[gInspectionMeasurementId], @gEquipmentId as [gEquipmentId]   \r\n  FROM [ChecklistsRunTimeData].[dbo].[tblChecklist] cl\r\n    INNER JOIN [MesCoreRuntime].[dbo].[tblUserTasks] ut ON ut.gId=cl.gUserTaskId\r\n\tINNER JOIN [MesCoreRuntime].[dbo].[tblUserTasks] ut1 ON ut1.gId=ut.gParentId AND ut1.gOwnerId='{{{WF.0.gProcessId}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 310,
        "y": 280,
        "wires": [
            [
                "9a9da84713a61cdb"
            ]
        ]
    },
    {
        "id": "ca49169767c160cc",
        "type": "MSSQL",
        "z": "02903af110ba6e1e",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "finalParmOfEuip",
        "outField": "endParam",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT szValue as endParam\r\nFROM [Universal].[dbo].[tblValue] v\r\nINNER JOIN [Universal].[dbo].[tblValueCombination] vc ON vc.value_id=v.gId\r\nINNER JOIN [Universal].[dbo].[tblTargetCombination] tc ON tc.gCombinationId=vc.combination_id\r\nINNER JOIN [Universal].[dbo].[tblParameter] p ON p.gId=v.gParameterId AND p.szName='EndParam'\r\nINNER JOIN [Universal].[dbo].[tblParameterGroup] pg ON pg.gId=tc.gGroupId AND pg.szName='KS3' \r\nWHERE tc.gTargetId='{{{EquipmentId}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 320,
        "y": 580,
        "wires": [
            [
                "7df4564ec56eb457"
            ]
        ]
    },
    {
        "id": "7df4564ec56eb457",
        "type": "MSSQL",
        "z": "02903af110ba6e1e",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "IsNeedToEndCL",
        "outField": "endCL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT 1 as endCL FROM [dbExchange].[dbo].[tblCheeseCookingReport]\r\nWHERE nRowId = {{{Mapping.0.nRowId}}} and szParameterName = '{{{endParam.0.endParam}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 520,
        "y": 580,
        "wires": [
            [
                "1a3d45428dfc4a23"
            ]
        ]
    },
    {
        "id": "9f1c5b49b5a11e41",
        "type": "MSSQL",
        "z": "02903af110ba6e1e",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "GetUserTaskId",
        "outField": "UserTask",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT gUserTaskId FROM [ChecklistsRunTimeData].[dbo].[tblChecklist]\r\nWHERE gInspectionMeasurementId = '{{{Input.Checklist.InspectionMeasurementId}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 920,
        "y": 580,
        "wires": [
            [
                "4170d6ea14d4ee5e"
            ]
        ]
    },
    {
        "id": "05a451bcd7b037a7",
        "type": "comment",
        "z": "d26eaeaa60be6fc5",
        "name": "MT + AA",
        "info": "Из RMQ приходит id inspectionlot\nПо этой КЗ определяется  materialId processId operationId\nПроверяется есть ли процесс\nОтносительно ввсех вводных данных выбираем конкретную связку План_анализа - материал и берем значения кол-во и вес\nПроверяется значение веса\nУсловие по цеху/заводу\nПроверка цеха/завода\nФормирует данные для отправки",
        "x": 80,
        "y": 40,
        "wires": []
    },
    {
        "id": "9bb5ece9f5f2bd6b",
        "type": "inject",
        "z": "d26eaeaa60be6fc5",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"InspectionLotId\": \"A23DDA3C-B341-4604-B0F2-7AA8B4CAD22C\", \"ExternalLink\": \"1456565\"}",
        "payloadType": "json",
        "x": 100,
        "y": 140,
        "wires": [
            [
                "2508fcc1a4f6c693"
            ]
        ]
    },
    {
        "id": "447ca3bc837df1da",
        "type": "subflow:ca94f48e1f18b542",
        "z": "d26eaeaa60be6fc5",
        "name": "",
        "x": 450,
        "y": 340,
        "wires": [
            [
                "61e4e9ded9be98b2"
            ]
        ]
    },
    {
        "id": "6494f5a82a2de5ac",
        "type": "http request",
        "z": "d26eaeaa60be6fc5",
        "name": "Intake",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/Intake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1030,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "07d6ac520a0d0726",
        "type": "function",
        "z": "d26eaeaa60be6fc5",
        "name": "PrepareData",
        "func": "let Batch = {\n    ProcessId: msg.MaterialProcess[0].processId,\n    OperationId: msg.MaterialProcess[0].operationId,\n    MaterialId: msg.MaterialProcess[0].materialId,\n    StorageLocationId: msg.StorageLocation[0].storageLocationId,\n    Quantity: msg.Weight[0].Weight, \n    //Quantity: 13, \n    DoNotCheckQuality: false,\n}\n\nmsg.payload = Batch;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 340,
        "wires": [
            [
                "6494f5a82a2de5ac"
            ]
        ]
    },
    {
        "id": "ef2a14c57c9f4c7c",
        "type": "switch",
        "z": "d26eaeaa60be6fc5",
        "name": "StorageLocationNotNull",
        "property": "StorageLocation[0].storageLocationId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 340,
        "wires": [
            [
                "447ca3bc837df1da"
            ],
            []
        ]
    },
    {
        "id": "ce4c75d89c8ac6fe",
        "type": "switch",
        "z": "d26eaeaa60be6fc5",
        "name": "ProcessCheck",
        "property": "MaterialProcess[0].processId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 620,
        "y": 80,
        "wires": [
            [
                "75499199b806ff38"
            ],
            []
        ]
    },
    {
        "id": "61e4e9ded9be98b2",
        "type": "subflow:f2924807aef52857",
        "z": "d26eaeaa60be6fc5",
        "name": "",
        "x": 640,
        "y": 340,
        "wires": [
            [
                "07d6ac520a0d0726"
            ]
        ]
    },
    {
        "id": "82aa57e825b9bb95",
        "type": "switch",
        "z": "d26eaeaa60be6fc5",
        "name": "WeightCheck",
        "property": "Weight[0].Weight",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 1010,
        "y": 80,
        "wires": [
            [],
            [
                "fafcf0592f5c590c"
            ],
            [
                "fafcf0592f5c590c"
            ]
        ]
    },
    {
        "id": "a6d4d5f3033fd97d",
        "type": "inject",
        "z": "d26eaeaa60be6fc5",
        "name": "Test",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"InspectionLotId\":\"9A08B20C-95EA-40E8-BA4A-51D4FC098EDA\"}",
        "payloadType": "json",
        "x": 90,
        "y": 200,
        "wires": [
            [
                "2508fcc1a4f6c693"
            ]
        ]
    },
    {
        "id": "8c6067b771f32021",
        "type": "amqp-in",
        "z": "d26eaeaa60be6fc5",
        "name": "WorkflowEventSampleQA",
        "broker": "2f76d8b874d08554",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "NR_WorkflowEventSampleQA",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "2508fcc1a4f6c693"
            ]
        ]
    },
    {
        "id": "fafcf0592f5c590c",
        "type": "MSSQL",
        "z": "d26eaeaa60be6fc5",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "SelectStorageLocation",
        "outField": "StorageLocation",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT gId AS 'storageLocationId'\r\nFROM [BatchManagementDb].[dbo].[tblStorageLocation]\r\nWHERE szExternalSystemSapLink = N'6060' AND gAccessId='898634A9-46B5-40C7-8267-C4641FC4C3AD'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1240,
        "y": 140,
        "wires": [
            [
                "ef2a14c57c9f4c7c"
            ]
        ]
    },
    {
        "id": "2508fcc1a4f6c693",
        "type": "MSSQL",
        "z": "d26eaeaa60be6fc5",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "SelectMaterialAndProcess",
        "outField": "MaterialProcess",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT B.gMaterialId AS materialId\r\n      ,B.gProcessId AS processId\r\n      ,B.gOperationId AS operationId\r\n  FROM [BatchManagementDb].[dbo].[tblInspectionLot] IL\r\n  JOIN [BatchManagementDb].[dbo].[tblBatch] B\r\n  ON IL.gBatchId = B.gId\r\n  WHERE IL.gId = @id",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "id",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "payload.InspectionLotId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 380,
        "y": 140,
        "wires": [
            [
                "ce4c75d89c8ac6fe"
            ]
        ]
    },
    {
        "id": "75499199b806ff38",
        "type": "MSSQL",
        "z": "d26eaeaa60be6fc5",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "SelectQMWeight",
        "outField": "Weight",
        "returnType": 0,
        "throwErrors": 1,
        "query": "declare @Weight decimal(18,6)\r\ndeclare @Count decimal(18,6)\r\nSelect @Weight = Val.nValue\r\n FROM [BatchManagementDb].[dbo].[tblInspectionLot] IL\r\n\tJOIN  [QARunTimeData].[dbo].[tblInspectionMeasurement] IM\r\n\tON IL.gInspectionMeasurementId = IM.gId\r\n\t\tJOIN [QARunTimeData].[dbo].[tblInspectionCharacteristicValue] ICV\r\n\t\tON IM.gId = ICV.gInspectionMeasurementId\r\n\t\t    join [Universal].[dbo].[tblTargetCombination] TC\r\n\t\t\t    on TC.gTargetid = IM.gMaterialId\r\n\t\t\t\t    join [Universal].[dbo].[tblParameter] Par\r\n\t\t\t\t\t    on TC.gGroupId = Par.gGroupId\r\n\t\t\t\t\t\t    join [Universal].[dbo].[tblValue] Val\r\n\t\t\t\t\t\t\t    on Par.gId = Val.gParameterId\r\n                                     join [Universal].[dbo].[tblParameterGroup] PG\r\n\t\t\t\t\t\t               on Par.gGroupId = PG.gId\r\n\t\t\t\t\t\t\t\t\t       join [Universal].[dbo].[tblValueCombination] VC\r\n\t\t\t\t\t\t\t\t\t\t       on Val.gId = VC.value_id\r\n                                            where Par.szName = N'Weight GP' and PG.szName = N'Test 1' and IL.gId = @id and IM.gMaterialId = @materialId and TC.gCombinationId = VC.combination_id\r\n\t\t\t\t\t\r\n\r\nSelect @Count = Val.nValue\r\n FROM [BatchManagementDb].[dbo].[tblInspectionLot] IL\r\n\tJOIN  [QARunTimeData].[dbo].[tblInspectionMeasurement] IM\r\n\tON IL.gInspectionMeasurementId = IM.gId\r\n\t\tJOIN [QARunTimeData].[dbo].[tblInspectionCharacteristicValue] ICV\r\n\t\tON IM.gId = ICV.gInspectionMeasurementId\r\n\t\t   join [QAMasterData].[dbo].[tblInspectionMeasurementTemplate] Mtemp\r\n\t\t     on IM.gInspectionMeasurementTemplateId = Mtemp.gId\r\n\t\t    join [Universal].[dbo].[tblTargetCombination] TC\r\n\t\t\t    on TC.gTargetid = Mtemp.gId\r\n\t\t\t\t    join [Universal].[dbo].[tblParameter] Par\r\n\t\t\t\t\t    on TC.gGroupId = Par.gGroupId\r\n\t\t\t\t\t\t    join [Universal].[dbo].[tblValue] Val\r\n\t\t\t\t\t\t\t    on Par.gId = Val.gParameterId\r\n\t\t\t\t\t\t            join [Universal].[dbo].[tblParameterGroup] PG\r\n\t\t\t\t\t\t                on Par.gGroupId = PG.gId\r\n\t\t\t\t\t\t\t\t\t\t    join [Universal].[dbo].[tblValueCombination] VC\r\n\t\t\t\t\t\t\t\t\t\t\t    on Val.gId = VC.value_id\r\n\t\t\t\t\t\t where PG.szName = N'Test 2' and IL.gId = @id AND Par.szName = 'Count' and IM.gMaterialId = @materialId and TC.gCombinationId = VC.combination_id\r\nSelect @Weight,\r\n       @Count,\r\n\r\n@Weight * @Count as Weight",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "id",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "payload.InspectionLotId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "materialId",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "MaterialProcess[0].materialId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 830,
        "y": 140,
        "wires": [
            [
                "82aa57e825b9bb95"
            ]
        ]
    },
    {
        "id": "b71d66957e82158b",
        "type": "comment",
        "z": "170b6645847ae20d",
        "name": "Очистка каталогов от старых файлов",
        "info": "",
        "x": 210,
        "y": 600,
        "wires": []
    },
    {
        "id": "262bb5752e217d6e",
        "type": "catch",
        "z": "170b6645847ae20d",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 120,
        "y": 1140,
        "wires": [
            [
                "a2620507d05911ba"
            ]
        ]
    },
    {
        "id": "f2b32b4b8bb24112",
        "type": "debug",
        "z": "170b6645847ae20d",
        "name": "Debug Save Catch Data",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1140,
        "wires": []
    },
    {
        "id": "a2620507d05911ba",
        "type": "subflow:f8fc59a8d3d93ef9",
        "z": "170b6645847ae20d",
        "name": "",
        "x": 330,
        "y": 1140,
        "wires": [
            [
                "f2b32b4b8bb24112"
            ]
        ]
    },
    {
        "id": "b003f21edfa6d0d6",
        "type": "comment",
        "z": "170b6645847ae20d",
        "name": "Обработчик исключений потока и отправка ошибок в файлы логирования",
        "info": "",
        "x": 330,
        "y": 1060,
        "wires": []
    },
    {
        "id": "1bf1673da214a3e0",
        "type": "comment",
        "z": "170b6645847ae20d",
        "name": "Отправка E-Mail",
        "info": "",
        "x": 140,
        "y": 780,
        "wires": []
    },
    {
        "id": "3ae045757a211646",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Prepare E-Mail Headers",
        "func": "//Отправитель письма\nif (!msg.from) msg.from = \"MESNotificationService@hochland.com\";\n//Получатель письма\nif (!msg.to) msg.to = \"pavel.zotov@solisoft.group, marina.tupikina@solisoft.group, vera.zhuikova@solisoft.group, dmitry.perepelov@solisoft.group\";\n//Сохранение текста письма\nmsg.payload = msg.EmailText;\n//Удаление заголовков для исключения ошибок\nmsg.headers = undefined;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 820,
        "wires": [
            [
                "7ed877338b170e53",
                "dddcd0705b5e7366"
            ]
        ]
    },
    {
        "id": "4633a939acc9d197",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Telegram 17 Deliveries Supplies",
        "func": "/*Все телеграммы сохраняются в объект глобального контекста \"Telegram\" в виде вложенных объектов с именем, соответствующим номеру телеграммы (global.get(\"Telegram\")[\"17\"])\n{\n    Number: \"17\", //Номер телеграммы\n    Name: \"Deliveries Supplies\", //Название телеграммы\n    Title: \"Приём материалов от внешнего поставщика\", //Название телеграммы на русском для электронного письма\n    FilePrefix: \"Delivery\", //Префикс имён файлов\n    UseGetToken: true, //true - Для отправки данных в MES требуется получение токена, false - не требуется\n    UseGetServiceUser: true, //true - Для отправки данных в MES требуется получение сервисного пользователя, false - не требуется\n    Folder: //Объект с каталогами, используемыми в телеграмме, название которых жёстко фиксировано\n    {\n        FilesFolder: //Каталог временного хранения\n        {\n            Name: \"Files Folder\", //Название каталога\n            Title: \"Каталог временного хранения\", //Название каталога на русском для электронного письма\n            Path: FilesFolder, //Полный путь к каталогу\n            FileType: \"json\", //Тип файлов\n            LifeTime: 3, //Время хранения файлов в каталоге\n            LifeTimeMonthFlag: true //true - время хранения в месяцах, false - в днях\n        },\n        ArchiveOKFolder: { -//- }, //Каталог удачно отправленных в MES файлов\n        ArchiveBadFolder: { -//- }, //Каталог ошибочных файлов\n        SAPLogsFolder: { -//- }, //Архив запросов от SAP\n        MESLogsFolder: { -//- } //Архив запросов в MES\n    },\n    MESAPI: //Объект с запросами в MES, используемыми в телеграмме с отправкой через API\n    {\n        CreateDelivery: //Объект запроса в MES, имя которого соответствует тому, которое будет использоваться в файлах запросов от SAP\n        {\n            Name: \"Create Delivery\", //Название запроса\n            Title: \"Создание поставок в MES\", //Название запроса на русском для электронного письма\n            Method: \"POST\", //Метод запроса GET, PUT, POST\n            URL: \"http://localhost:1880/api/delivery\", //Адрес Api\n            TimeoutSec: 120 //Таймаут отправки в секундах больше или равный 60\n        }\n    },\n    MESDBTable: //Объект с таблицами, используемыми в телеграмме с прямой записью в таблицу\n    {\n        CreateDelivery:  //Объект с параметрами таблицы, имя которого соответствует тому, которое будет использоваться при обращении к глобальному контексту\n        {}               //Хранит ссылку на объект глобального контекста настроек таблиц global.get(\"DBTable\")\n    }\n}\n*/\nvar FilesFolder = \"C:\\\\MESSync\\\\Reception\\\\\"; //Каталог хранения кучи файлов\nvar ArchiveOKFolder = FilesFolder + \"ArchiveOK\\\\\"; //Каталог хранения успешно отправленных файлов\nvar ArchiveBadFolder = FilesFolder + \"ArchiveBad\\\\\"; //Каталог хранения файлов с ошибкой в структуре\nvar SAPLogsFolder = FilesFolder + \"SAPLogs\\\\\"; //Каталог хранения файлов логов запросов и ответов SAP\nvar MESLogsFolder = FilesFolder + \"MESLogs\\\\\"; //Каталог хранения файлов логов отправки данных в MES\n\nvar MESURL = \"http://10.70.6.61:52461/api/delivery\";\n\nmsg.Telegram =\n{\n    Number: \"17\",\n    Name: \"Deliveries Supplies\",\n    Title: \"Приём материалов от внешнего поставщика\",\n    FilePrefix: \"Delivery\",\n    UseGetToken: true,\n    UseGetServiceUser: true,\n    Folder:\n    {\n        FilesFolder: { Name: \"Files Folder\", Title: \"Каталог временного хранения\", Path: FilesFolder, FileType: \"json\", LifeTime: 3, LifeTimeMonthFlag: true },\n        ArchiveOKFolder: { Name: \"Archive OK\", Title: \"Каталог удачно отправленных в MES файлов\", Path: ArchiveOKFolder, FileType: \"json\", LifeTime: 3, LifeTimeMonthFlag: true },\n        ArchiveBadFolder: { Name: \"Archive Bad\", Title: \"Каталог ошибочных файлов\", Path: ArchiveBadFolder, FileType: \"json\", LifeTime: 3, LifeTimeMonthFlag: true },\n        SAPLogsFolder: { Name: \"SAP Logs\", Title: \"Архив запросов от SAP\", Path: SAPLogsFolder, FileType: \"log\", LifeTime: 3, LifeTimeMonthFlag: true },\n        MESLogsFolder: { Name: \"MES Logs\", Title: \"Архив запросов в MES\", Path: MESLogsFolder, FileType: \"log\", LifeTime: 3, LifeTimeMonthFlag: true }\n    },\n    MESAPI:\n    {\n        CreateDelivery: { Name: \"Create Delivery\", Title: \"Создание поставок в MES\", Method: \"POST\", URL: MESURL, TimeoutSec: 120 }\n    },\n    MESDBTable: {}\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 480,
        "wires": [
            [
                "b37755adfd385ba5"
            ]
        ]
    },
    {
        "id": "b42189316d6e237a",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Save Telegram Settings to Global Context",
        "func": "node.status({ fill: \"yellow\", shape: \"dot\", text: \"Processing\" });\nvar fs = global.get(\"fsextra\");\nvar ErrorCount = 0; //Количество полученных ошибок\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\n\nmsg.Errors =\n{\n    TelegramNumber: msg.Telegram.Number,\n    TelegramName: msg.Telegram.Name,\n    Errors: []\n}\n\nvar Telegrams = global.get(\"Telegram\");\nif (!Telegrams)\n{\n    Telegrams =\n    {\n        DataValidGenerateByName: function (VariableName)\n        {\n            var Result = undefined;\n            var Data = RED.util.cloneMessage(this[VariableName]);\n            if (Data)\n            {\n                delete Data.DataValidCode;\n                Result = this.DataValidGenerateByObject(Data);\n            }\n            return Result;\n        },\n        DataValidGenerateByObject: function (Data)\n        {\n            var Result = undefined;\n            var PrimeNumber = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29];\n            var DataStringify = JSON.stringify(Data);\n            if (DataStringify && (DataStringify?.length > 0))\n            {\n                Result = 0;\n                for (let i = 0, j = -1; i < DataStringify.length; i = i + PrimeNumber[j])\n                {\n                    Result = Result + DataStringify.charCodeAt(i);\n                    Result = Result ^ (Result >> 8);\n                    j = j + 1;\n                    if (j >= PrimeNumber.length) j = 0;\n                }\n                Result = Result & (0xFFFF);\n            };\n            return Result;\n        },\n        DataValidCheck: function (VariableName)\n        {\n            var ValidCode = this.DataValidGenerateByName(VariableName);\n            var DataValidCode = this[VariableName]?.DataValidCode;\n            return ValidCode && (ValidCode == DataValidCode);\n        }\n    };\n    global.set(\"Telegram\", Telegrams);\n};\n\nif (msg.Telegram)\n{\n    if (msg.Telegram.Number && (msg.Telegram.Number != \"\") && msg.Telegram.Name && (msg.Telegram.Name != \"\")\n        && msg.Telegram.Title && (msg.Telegram.Title != \"\") && msg.Telegram.FilePrefix && (msg.Telegram.FilePrefix != \"\")\n        && msg.Telegram.Folder && msg.Telegram.MESAPI && msg.Telegram.MESDBTable\n    )\n    {\n        for (var FolderName in msg.Telegram.Folder)\n        {\n            var Folder = msg.Telegram.Folder[FolderName];\n            if (!(Folder?.Name && (Folder?.Name != \"\") && Folder?.Title && (Folder?.Title != \"\")\n                && Folder?.Path && (Folder?.Path != \"\") && Folder?.FileType && (Folder?.FileType != \"\")\n                && Folder?.LifeTime && (Folder?.LifeTime > 0) && (typeof Folder?.LifeTimeMonthFlag == \"boolean\"))\n            )\n            {\n                ErrorData.error.source.type = \"Telegram Settings Error\";\n                ErrorData.error.message = msg.Telegram.Name + \" Folder '\" + FolderName + \"' Parameters Error\";\n                msg.Errors.Errors.push(ErrorData.error.message);\n                ErrorCount = ErrorCount + 1;\n                node.send([null, ErrorData]);\n            }\n        }\n        for (var MESAPIName in msg.Telegram.MESAPI)\n        {\n            var MESAPI = msg.Telegram.MESAPI[MESAPIName];\n            if (!(MESAPI?.Name && (MESAPI?.Name != \"\") && MESAPI?.Title && (MESAPI?.Title != \"\")\n                && MESAPI?.Method && (MESAPI?.Method != \"\") && MESAPI?.URL && (MESAPI?.URL != \"\")\n                && MESAPI?.TimeoutSec && (MESAPI?.TimeoutSec > 59))\n            )\n            {\n                ErrorData.error.source.type = \"Telegram Settings Error\";\n                ErrorData.error.message = msg.Telegram.Name + \" MES API '\" + MESAPIName + \"' Parameters Error\";\n                msg.Errors.Errors.push(ErrorData.error.message);\n                ErrorCount = ErrorCount + 1;\n                node.send([null, ErrorData]);\n            }\n        }\n        for (var MESDBTableName in msg.Telegram.MESDBTable)\n        {\n            var MESDBTable = msg.Telegram.MESDBTable[MESDBTableName];\n            if (!(MESDBTable?.Name && (MESDBTable?.Name != \"\") && MESDBTable?.Title && (MESDBTable?.Title != \"\")\n                && MESDBTable?.DBTable && (MESDBTable?.DBTable != \"\"))\n            )\n            {\n                ErrorData.error.source.type = \"Telegram Settings Error\";\n                ErrorData.error.message = msg.Telegram.Name + \" MES DB Table '\" + MESDBTableName + \"' Parameters Error\";\n                msg.Errors.Errors.push(ErrorData.error.message);\n                ErrorCount = ErrorCount + 1;\n                node.send([null, ErrorData]);\n            }\n        }\n        if (ErrorCount == 0)\n        {\n            for (var FolderName in msg.Telegram.Folder)\n            {\n                var Folder = msg.Telegram.Folder[FolderName];\n                try\n                {\n                    fs.mkdirsSync(Folder.Path);\n                }\n                catch (ex)\n                {\n                    ErrorData.error.source.type = msg.Telegram.Name + \" Folder Error\";\n                    ErrorData.error.message = \"Directory '\" + Folder.Path + \"' could not be created (\" + ex + \")\";\n                    msg.Errors.Errors.push(ErrorData.error.message);\n                    ErrorCount = ErrorCount + 1;\n                    node.send([null, ErrorData]);\n                }\n                if (!fs.pathExistsSync(Folder.Path))\n                {\n                    ErrorData.error.source.type = msg.Telegram.Name + \" Folder Error\";\n                    ErrorData.error.message = \"Directory '\" + Folder.Path + \"' does not exist\";\n                    msg.Errors.Errors.push(ErrorData.error.message);\n                    ErrorCount = ErrorCount + 1;\n                    node.send([null, ErrorData]);\n                }\n            }\n            if (ErrorCount == 0)\n            {\n                msg.Telegram.CreationDateTime = new Date();\n                msg.Telegram.DataValidCode = Telegrams.DataValidGenerateByObject(msg.Telegram);\n                Telegrams[msg.Telegram.Number] = msg.Telegram;\n            }\n        }\n    }\n    else\n    {\n        ErrorData.error.source.type = \"Telegram Settings Error\";\n        ErrorData.error.message = \"Telegram \" + msg.Telegram.Number + \" Settings Parameters Error\";\n        msg.Errors.Errors.push(ErrorData.error.message);\n        ErrorCount = ErrorCount + 1;\n        node.send([null, ErrorData]);\n    }\n}\nelse\n{\n    ErrorData.error.source.type = \"Telegram Settings Error\";\n    ErrorData.error.message = \"No Telegram Settings\";\n    msg.Errors.Errors.push(ErrorData.error.message);\n    ErrorCount = ErrorCount + 1;\n    node.send([null, ErrorData]);\n}\n//Состояние обработки\nvar ProcessingState = \"Processing Completed. Error Count: \" + ErrorCount + \".\";\nvar ProcessingColour = ((ErrorCount > 0) ? \"red\" : \"green\");\nnode.status({ fill: ProcessingColour, shape: \"dot\", text: ProcessingState });\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 320,
        "wires": [
            [
                "8d013ebb445049e7",
                "4942585ba5d3905f"
            ],
            [
                "b72b3f400473cddb"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "4942585ba5d3905f",
        "type": "debug",
        "z": "170b6645847ae20d",
        "name": "Debug Save Telegrams Setting",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 280,
        "wires": []
    },
    {
        "id": "49fc3ffd88a755c9",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Telegram 19 Production Schedule",
        "func": "/*Все телеграммы сохраняются в объект глобального контекста \"Telegram\" в виде вложенных объектов с именем, соответствующим номеру телеграммы (global.get(\"Telegram\")[\"17\"])\n{\n    Number: \"17\", //Номер телеграммы\n    Name: \"Deliveries Supplies\", //Название телеграммы\n    Title: \"Приём материалов от внешнего поставщика\", //Название телеграммы на русском для электронного письма\n    FilePrefix: \"Delivery\", //Префикс имён файлов\n    UseGetToken: true, //true - Для отправки данных в MES требуется получение токена, false - не требуется\n    UseGetServiceUser: true, //true - Для отправки данных в MES требуется получение сервисного пользователя, false - не требуется\n    Folder: //Объект с каталогами, используемыми в телеграмме, название которых жёстко фиксировано\n    {\n        FilesFolder: //Каталог временного хранения\n        {\n            Name: \"Files Folder\", //Название каталога\n            Title: \"Каталог временного хранения\", //Название каталога на русском для электронного письма\n            Path: FilesFolder, //Полный путь к каталогу\n            FileType: \"json\", //Тип файлов\n            LifeTime: 3, //Время хранения файлов в каталоге\n            LifeTimeMonthFlag: true //true - время хранения в месяцах, false - в днях\n        },\n        ArchiveOKFolder: { -//- }, //Каталог удачно отправленных в MES файлов\n        ArchiveBadFolder: { -//- }, //Каталог ошибочных файлов\n        SAPLogsFolder: { -//- }, //Архив запросов от SAP\n        MESLogsFolder: { -//- } //Архив запросов в MES\n    },\n    MESAPI: //Объект с запросами в MES, используемыми в телеграмме с отправкой через API\n    {\n        CreateDelivery: //Объект запроса в MES, имя которого соответствует тому, которое будет использоваться в файлах запросов от SAP\n        {\n            Name: \"Create Delivery\", //Название запроса\n            Title: \"Создание поставок в MES\", //Название запроса на русском для электронного письма\n            HTTPS: false, //false - HTTP, true - HTTPS\n            Server: \"10.70.6.61\", //Адрес сервера\n            Port: 1881, //Порт\n            Method: \"POST\", //Метод запроса GET, PUT, POST\n            URL: \"http://localhost:1880/api/delivery\", //Адрес Api\n            TimeoutSec: 120 //Таймаут отправки в секундах больше или равный 60\n        }\n    },\n    MESDBTable: //Объект с таблицами, используемыми в телеграмме с прямой записью в таблицу\n    {\n        CreateDelivery:  //Объект с параметрами таблицы, имя которого соответствует тому, которое будет использоваться при обращении к глобальному контексту\n        {}               //Хранит ссылку на объект глобального контекста настроек таблиц global.get(\"DBTable\")\n    }\n}\n*/\nvar FilesFolder = \"C:\\\\MESSync\\\\Production\\\\Schedule\\\\\"; //Каталог хранения кучи файлов\nvar ArchiveOKFolder = FilesFolder + \"ArchiveOK\\\\\"; //Каталог хранения успешно отправленных файлов\nvar ArchiveBadFolder = FilesFolder + \"ArchiveBad\\\\\"; //Каталог хранения файлов с ошибкой в структуре\nvar SAPLogsFolder = FilesFolder + \"SAPLogs\\\\\"; //Каталог хранения файлов логов запросов и ответов SAP\nvar MESLogsFolder = FilesFolder + \"MESLogs\\\\\"; //Каталог хранения файлов логов отправки данных в MES\n\nvar MESURL = \"http://10.70.6.61:52449/api/productionschedule\";\n\nmsg.Telegram =\n{\n    Number: \"19\",\n    Name: \"Production Schedule\",\n    Title: \"План выпуска готовой продукции\",\n    FilePrefix: \"Schedule\",\n    UseGetToken: true,\n    UseGetServiceUser: true,\n    Folder:\n    {\n        FilesFolder: { Name: \"Files Folder\", Title: \"Каталог временного хранения\", Path: FilesFolder, FileType: \"json\", LifeTime: 3, LifeTimeMonthFlag: true },\n        ArchiveOKFolder: { Name: \"Archive OK\", Title: \"Каталог удачно отправленных в MES файлов\", Path: ArchiveOKFolder, FileType: \"json\", LifeTime: 3, LifeTimeMonthFlag: true },\n        ArchiveBadFolder: { Name: \"Archive Bad\", Title: \"Каталог ошибочных файлов\", Path: ArchiveBadFolder, FileType: \"json\", LifeTime: 3, LifeTimeMonthFlag: true },\n        SAPLogsFolder: { Name: \"SAP Logs\", Title: \"Архив запросов от SAP\", Path: SAPLogsFolder, FileType: \"log\", LifeTime: 3, LifeTimeMonthFlag: true },\n        MESLogsFolder: { Name: \"MES Logs\", Title: \"Архив запросов в MES\", Path: MESLogsFolder, FileType: \"log\", LifeTime: 3, LifeTimeMonthFlag: true }\n    },\n    MESAPI:\n    {\n        CreateSchedule: { Name: \"Create Production Schedule\", Title: \"Создание плана выпуска готовой продукции в MES\", Method: \"POST\", URL: MESURL, TimeoutSec: 120 },\n        UpdateSchedule: { Name: \"Update Production Schedule\", Title: \"Обновление плана выпуска готовой продукции в MES\", Method: \"PUT\", URL: MESURL, TimeoutSec: 120 }\n    },\n    MESDBTable: {}\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 520,
        "wires": [
            [
                "c15d0f6ebbef0dfa"
            ]
        ]
    },
    {
        "id": "1d05ef0e871aba97",
        "type": "comment",
        "z": "170b6645847ae20d",
        "name": "Сохранение настроек при запуске Node-Red",
        "info": "",
        "x": 230,
        "y": 40,
        "wires": []
    },
    {
        "id": "8d013ebb445049e7",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Data Valid Check",
        "func": "msg.ValidData =\n{\n    TelegramNumber: msg.Telegram?.Number,\n    DataValidCodeVariable: undefined,\n    DataValidCodeMsg: undefined,\n    DataValidCheck: false\n};\n\nif (msg.Telegram?.Number)\n{\n    var Telegrams = global.get(\"Telegram\")\n    if (Telegrams && Telegrams?.DataValidGenerateByName && Telegrams?.DataValidGenerateByObject && Telegrams?.DataValidCheck)\n    {\n        var TelegramData = global.get(\"Telegram\")[msg.Telegram.Number];\n        if (TelegramData)\n        {\n            var TelegramDataTemp = RED.util.cloneMessage(msg.Telegram);\n            delete TelegramDataTemp.DataValidCode;\n            msg.ValidData.DataValidCodeVariable = TelegramData.DataValidCode;\n            msg.ValidData.DataValidCodeMsg = Telegrams.DataValidGenerateByObject(TelegramDataTemp);\n            msg.ValidData.DataValidCheck = Telegrams.DataValidCheck(msg.Telegram.Number);\n            if (msg.ValidData.DataValidCodeVariable != msg.ValidData.DataValidCodeMsg)\n            {\n                msg.Errors.Errors.push(msg.Telegram.Number + \" (\" + msg.Telegram.Name + \"): DataValidCodeVariable and DataValidCodeMsg not Equal (\" + msg.ValidData.DataValidCodeVariable + \" != \" + msg.ValidData.DataValidCodeMsg + \")\");\n                node.warn(msg.Telegram.Number + \" (\" + msg.Telegram.Name + \"): DataValidCodeVariable and DataValidCodeMsg not Equal\");\n                delete global.get(\"Telegram\")[msg.Telegram.Number];\n            }\n        }\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 320,
        "wires": [
            [
                "4942585ba5d3905f",
                "17513834aec3e329"
            ]
        ]
    },
    {
        "id": "104c105e078cb9e5",
        "type": "inject",
        "z": "170b6645847ae20d",
        "name": "Start Up 5 sec",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "8e66da6565485f8d",
                "e6cbdc321fa80598",
                "df5d20f1786dc2a1"
            ]
        ]
    },
    {
        "id": "2dafabdefa0dfe81",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Check and Prepare EMail",
        "func": "var ErrorsList = msg.Errors?.filter(el => el.Errors?.length > 0);\n\nif (ErrorsList.length > 0)\n{\n  msg.StartDateTime = new Date(); //Дата и время начала создания письма\n  //Тема письма\n  msg.topic = \"Ошибки при сохранении настроек телеграмм (\" + msg.StartDateTime.toLocaleString() + \")\";\n  //Отправитель письма\n  //msg.from = \"MESNotificationService@hochland.com\";\n  //Получатель письма\n  //msg.to = \"pavel.zotov@solisoft.group\";\n  //Содержимое письма\n  var EmailText = \"<!DOCTYPE html><html>\";\n  //Стили оформления\n  EmailText = EmailText + \"<head></head>\";\n  //Тело письма\n  EmailText = EmailText + \"<body>Здравствуйте.<br>\";\n  EmailText = EmailText + \"На данный момент (\" + msg.StartDateTime.toLocaleString() + \") возникли проблемы при сохранении настроек телеграмм.<br><br>\";\n  for (let i = 0; i < ErrorsList.length; i++)\n  {\n    EmailText = EmailText + \"<u>Телеграмма <b>\" + ErrorsList[i].TelegramNumber + \". \" + ErrorsList[i].TelegramName + \"</b></u><br>\";\n    for (let j = 0; j < ErrorsList[i].Errors.length; j++)\n    {\n      EmailText = EmailText + (j + 1).toString() + \". \" + ErrorsList[i].Errors[j]?.replaceAll(\"\\n\", \"<br>\") + \"<br>\";\n    }\n    EmailText = EmailText + \"<br>\";\n  }\n  EmailText = EmailText + \"</body></html>\";\n  msg.EmailText = EmailText;\n  msg.headers = undefined;\n  return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 320,
        "wires": [
            [
                "4942585ba5d3905f",
                "bcd38e380cad2d51"
            ]
        ]
    },
    {
        "id": "17513834aec3e329",
        "type": "join",
        "z": "170b6645847ae20d",
        "name": "Telegrams Count = 6",
        "mode": "custom",
        "build": "array",
        "property": "Errors",
        "propertyType": "msg",
        "key": "_msgid",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1400,
        "y": 320,
        "wires": [
            [
                "4942585ba5d3905f",
                "2dafabdefa0dfe81"
            ]
        ]
    },
    {
        "id": "6042ad948bd760be",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Folders Settings",
        "func": "node.status({ fill: \"yellow\", shape: \"dot\", text: \"Processing\" });\n//Общий список очищаемых каталогов \nmsg.FolderList = [];\n/* Каждый элемент списка должен иметь следующую структуру\n{\n    Name: \"Telegram\", //Тип исходного объекта\n    Title: \"Телеграмма\", //Тип исходного объекта на русском для электронного письма\n    Object: //Список объектов указанного типа\n    [\n        {\n            Name: \"17. Deliveries Supplies\", //Имя объекта\n            Title: \"17. Приём материалов от внешнего поставщика\", //Имя объекта на русском для электронного письма\n            Folder: //Список каталогов указанного объекта\n            [\n                {\n                    Name: \"Archive OK\", //Название каталога\n                    Title: \"Каталог удачно отправленных в MES файлов\", //Название каталога на русском для электронного письма\n                    Path: \"C:\\\\MESSync\\\\Reception\\\\ArchiveOK\\\\\", //Полный путь к каталогу\n                    FileType: [\"json\"], //Список типов удаляемых файлов\n                    LifeTime: 3, //Время хранения файлов в каталоге\n                    LifeTimeMonthFlag: true //true - время хранения в месяцах, false - в днях\n                }\n            ]\n        }\n    ]\n}\n*/\n//Список ошибок для отправки\nmsg.Errors =\n{\n    Prepare: undefined,\n    Deleted: undefined\n};\nvar Errors = []; //Локальный список ошибок\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\n//Каталоги телеграмм\nvar Telegrams = global.get(\"Telegram\");\nif (Telegrams)\n{\n    var ObjectTypeData =\n    {\n        Name: \"Telegram\", //Тип исходного объекта\n        Title: \"Телеграмма\", //Тип исходного объекта на русском для электронного письма\n        Object: [] //Список объектов указанного типа\n    };\n    for (var TelegramNumber in Telegrams)\n    {\n        if (typeof Telegrams[TelegramNumber] == \"object\")\n        {\n            var ValidData = Telegrams.DataValidCheck(TelegramNumber);\n            if (ValidData)\n            {\n                var Telegram = Telegrams[TelegramNumber];\n                var ObjectData =\n                {\n                    Name: Telegram.Number + \". \" + Telegram.Name, //Имя объекта\n                    Title: Telegram.Number + \". \" + Telegram.Title, //Имя объекта на русском для электронного письма\n                    Folder: [] //Список каталогов указанного объекта\n                };\n                for (var FolderName in Telegram.Folder)\n                {\n                    var Folder = Telegram.Folder[FolderName];\n                    var FolderData =\n                    {\n                        Name: Folder.Name, //Название каталога\n                        Title: Folder.Title, //Название каталога на русском для электронного письма\n                        Path: Folder.Path, //Полный путь к каталогу\n                        FileType: [Folder.FileType], //Список типов удаляемых файлов\n                        LifeTime: Folder.LifeTime, //Время хранения файлов в каталоге\n                        LifeTimeMonthFlag: Folder.LifeTimeMonthFlag //true - время хранения в месяцах, false - в днях\n                    }\n                    ObjectData.Folder.push(FolderData);\n                }\n                if (ObjectData.Folder.length > 0) ObjectTypeData.Object.push(ObjectData);\n            }\n            else\n            {\n                ErrorData.error.source.type = \"Telegram Settings Error\";\n                ErrorData.error.message = \"Telegram \" + TelegramNumber + \" has Invalid Data\";\n                Errors.push(ErrorData.error.message);\n                node.send([null, ErrorData]);\n            }\n        }\n    }\n    if (ObjectTypeData.Object.length > 0) msg.FolderList.push(ObjectTypeData);\n}\nelse\n{\n    ErrorData.error.source.type = \"Telegram Settings Error\";\n    ErrorData.error.message = \"No Global Telegram Settings\";\n    Errors.push(ErrorData.error.message);\n    node.send([null, ErrorData]);\n}\n\nif (Errors.length > 0) msg.Errors.Prepare = Errors;\n\nvar ProcessingState = \"Processing Completed. Error Count: \" + Errors.length + \".\";\nvar ProcessingColour = ((Errors.length > 0) ? \"red\" : \"green\");\nnode.status({ fill: ProcessingColour, shape: \"dot\", text: ProcessingState });\n\nreturn msg;\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 640,
        "wires": [
            [
                "b127165ae6e962f8",
                "cc30e1ecf2f775e8"
            ],
            [
                "bb3211f872a26c72"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "cc30e1ecf2f775e8",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Delete Modules Files",
        "func": "if (msg.ResetIsBusy)\n{\n    context.set(\"IsBusy\", false);\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Processing Reset\" });\n}\nelse\n{\n    //Проверка занятости данного блока в случае большого количества файлов, которые могут не успеть обработать за интервал вызова функции\n    var IsBusy = context.get(\"IsBusy\");\n    if (!IsBusy)\n    {\n        context.set(\"IsBusy\", true);\n        node.status({ fill: \"yellow\", shape: \"dot\", text: \"Processing\" });\n        var StartProcessingTime = new Date(); //Время начала обработки файлов принтеров\n        var fs = global.get(\"fsextra\");\n        var FileCount = 0; //Количество обработанных файлов\n        var ErrorCount = 0; //Количество полученных ошибок\n        //Список ошибок для отправки\n        if (!msg.Errors)\n        {\n            msg.Errors =\n            {\n                Prepare: undefined,\n                Deleted: undefined\n            };\n        }\n        var Errors = []; //Локальный список ошибок\n        //Шаблон сообщения об ошибке\n        var ErrorData =\n        {\n            error:\n            {\n                source:\n                {\n                    id: env.get(\"NR_NODE_ID\"),\n                    type: undefined,\n                    name: env.get(\"NR_NODE_NAME\"),\n                    count: 1\n                },\n                message: undefined\n            }\n        };\n        for (let i = 0; i < msg.FolderList?.length; i++)\n        {\n            var ObjectType = msg.FolderList[i];\n            var ObjectTypeError =\n            {\n                Name: ObjectType.Name,\n                Title: ObjectType.Title,\n                Object: []\n            };\n            for (let j = 0; j < ObjectType.Object?.length; j++)\n            {\n                var ObjectTemp = ObjectType.Object[j];\n                var ObjectError =\n                {\n                    Name: ObjectTemp.Name,\n                    Title: ObjectTemp.Title,\n                    Error: []\n                };\n                for (let k = 0; k < ObjectTemp.Folder?.length; k++)\n                {\n                    var Folder = ObjectTemp.Folder[k];\n                    //Получение и проверка пути каталога\n                    var FolderPath = Folder.Path;\n                    if (FolderPath && (FolderPath != \"\") && Folder.LifeTime && (Folder.LifeTime > 0) && (typeof Folder.LifeTimeMonthFlag == \"boolean\"))\n                    {\n                        //Проверка существования каталога\n                        if (fs.pathExistsSync(FolderPath))\n                        {\n                            var FilesNames = []; //Массив имён файлов\n                            //Получения списка имён файлов\n                            try\n                            {\n                                FilesNames = fs.readdirSync(FolderPath);\n                                FilesNames = FilesNames.filter(el =>\n                                    {\n                                        var FindType = false;\n                                        for (let l = 0; l < Folder.FileType?.length; l++) FindType = FindType || el.toLowerCase().endsWith(Folder.FileType[l]?.toLowerCase());\n                                        return FindType;\n                                    }\n                                );\n                            }\n                            catch (ex)\n                            {\n                                ErrorData.error.source.type = ObjectType.Name + \" \" + ObjectTemp.Name + \" Folder Error\";\n                                ErrorData.error.message = \"Directory '\" + FolderPath + \"' could not be read and filter (\" + ex + \")\";\n                                ObjectError.Error.push(ErrorData.error.message);\n                                node.send([null, ErrorData]);\n                            }\n                            var OldDateTime = new Date(StartProcessingTime); //Дата, раньше которой удаляются файлы\n                            if (Folder.LifeTimeMonthFlag) OldDateTime = OldDateTime.setMonth(StartProcessingTime.getMonth() - Folder.LifeTime);\n                            else OldDateTime = OldDateTime.setDate(StartProcessingTime.getDate() - Folder.LifeTime);\n                            OldDateTime = Number(OldDateTime);\n                            //Получение дополнительной информации о файлах и удаление старых файлов\n                            for (let l = 0; l < FilesNames.length; l++)\n                            {\n                                //Получение дополнительной информации о файле\n                                try\n                                {\n                                    var FileData = fs.statSync(FolderPath + FilesNames[l]);\n                                    if (FileData.mtime < OldDateTime)\n                                    {\n                                        //Удаление старых файлов\n                                        try\n                                        {\n                                            fs.removeSync(FolderPath + FilesNames[l]);\n                                            FileCount = FileCount + 1;\n                                        }\n                                        catch (ex)\n                                        {\n                                            ErrorData.error.source.type = ObjectType.Name + \" \" + ObjectTemp.Name + \" File Error\";\n                                            ErrorData.error.message = \"Unable to remove file '\" + FolderPath + FilesNames[l] + \"' (\" + ex + \")\";\n                                            ObjectError.Error.push(ErrorData.error.message);\n                                            node.send([null, ErrorData]);\n                                        }\n                                    }\n                                }\n                                catch (ex)\n                                {\n                                    ErrorData.error.source.type = ObjectType.Name + \" \" + ObjectTemp.Name + \" File Error\";\n                                    ErrorData.error.message = \"Unable to get file information '\" + FolderPath + FilesNames[l] + \"' (\" + ex + \")\";\n                                    ObjectError.Error.push(ErrorData.error.message);\n                                    node.send([null, ErrorData]);\n                                }\n                            }\n                        }\n                        else\n                        {\n                            ErrorData.error.source.type = ObjectType.Name + \" \" + ObjectTemp.Name + \" Folder Error\";\n                            ErrorData.error.message = \"Directory '\" + FolderPath + \"' does not exist\";\n                            ObjectError.Error.push(ErrorData.error.message);\n                            node.send([null, ErrorData]);\n                        }\n                    }\n                    else\n                    {\n                        ErrorData.error.source.type = ObjectType.Name + \" \" + ObjectTemp.Name + \" Settings Error\";\n                        ErrorData.error.message = \"'\" + Folder.Name + \"' Folder is not configured\";\n                        ObjectError.Error.push(ErrorData.error.message);\n                        node.send([null, ErrorData]);\n                    }\n                }\n                if (ObjectError.Error.length > 0) ObjectTypeError.Object.push(ObjectError);\n            }\n            if (ObjectTypeError.Object.length > 0) Errors.push(ObjectTypeError);\n        }\n        ErrorCount = Errors.reduce((Accumulator1, el1) => Accumulator1 + el1.Object?.reduce((Accumulator2, el2) => Accumulator2 + el2.Error?.length, 0), 0);\n        if (Errors.length > 0) msg.Errors.Deleted = Errors;\n        var ProcessingTime = Number(new Date()) - Number(StartProcessingTime); //Время выполнения обработки файлов\n        //Состояние обработки\n        var ProcessingState = \"Processing Time: \" + ProcessingTime + \" ms. File Count: \" + FileCount + \". Error Count: \" + ErrorCount + \".\";\n        var ProcessingColour = ((ErrorCount > 0) ? \"red\" : \"green\");\n        node.status({ fill: ProcessingColour, shape: \"dot\", text: ProcessingState });\n        //Освобождение блока для следующей обработки\n        context.set(\"IsBusy\", false);\n        return [msg, null];\n    }\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 640,
        "wires": [
            [
                "b127165ae6e962f8",
                "843217520f18e5a2"
            ],
            [
                "bb3211f872a26c72"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "b127165ae6e962f8",
        "type": "debug",
        "z": "170b6645847ae20d",
        "name": "Debug Delete Modules Files",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 600,
        "wires": []
    },
    {
        "id": "843217520f18e5a2",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Check and Prepare EMail",
        "func": "if (msg.Errors?.Prepare || msg.Errors?.Deleted)\n{\n  msg.StartDateTime = new Date(); //Дата и время начала создания письма\n  //Тема письма\n  msg.topic = \"Ошибки при очистке каталогов (\" + msg.StartDateTime.toLocaleString() + \")\";\n  //Отправитель письма\n  //msg.from = \"MESNotificationService@hochland.com\";\n  //Получатель письма\n  //msg.to = \"pavel.zotov@solisoft.group\";\n  //Содержимое письма\n  var EmailText = \"<!DOCTYPE html><html>\";\n  //Стили оформления\n  EmailText = EmailText + \"<head></head>\";\n  //Тело письма\n  EmailText = EmailText + \"<body>Здравствуйте.<br>\";\n  EmailText = EmailText + \"На данный момент (\" + msg.StartDateTime.toLocaleString() + \") возникли проблемы при очистке каталогов:<br><br>\";\n  //Ошибки при подготовке к очистке каталогов\n  if (msg.Errors.Prepare)\n  {\n    EmailText = EmailText + \"<u><b>Ошибки при подготовке к очистке каталогов</b></u><br>\";\n    for (let i = 0; i < msg.Errors.Prepare.length; i++) EmailText = EmailText + (i + 1).toString() + \". \" + msg.Errors.Prepare[i].replaceAll(\"\\n\", \"<br>\") + \"<br>\";\n    EmailText = EmailText + \"<br>\";\n  }\n  //Ошибки в процессе очистки каталогов\n  if (msg.Errors.Deleted)\n  {\n    EmailText = EmailText + \"<u><b>Ошибки в процессе очистки каталогов</b></u><br>\";\n    for (let i = 0; i < msg.Errors.Deleted.length; i++)\n    {\n      EmailText = EmailText + \"<u>\" + (i + 1).toString() + \". Объекты типа <b>\\\"\" + msg.Errors.Deleted[i].Name + \"\\\"</b> (\" + msg.Errors.Deleted[i].Title + \")</u><br>\";\n      for (let j = 0; j < msg.Errors.Deleted[i].Object?.length; j++)\n      {\n        EmailText = EmailText + \"<u>\" + (i + 1).toString() + \".\" + (j + 1).toString() + \". Объект <b>\\\"\" + msg.Errors.Deleted[i].Object[j].Name + \"\\\"</b> (\" + msg.Errors.Deleted[i].Object[j].Title + \")</u><br>\";\n        for (let k = 0; k < msg.Errors.Deleted[i].Object[j].Error?.length; k++) EmailText = EmailText + (i + 1).toString() + \".\" + (j + 1).toString() + \".\" + (k + 1).toString() + \". \" + msg.Errors.Deleted[i].Object[j].Error[k].replaceAll(\"\\n\", \"<br>\") + \"<br>\";\n      }\n    }\n    EmailText = EmailText + \"<br>\";\n  }\n  EmailText = EmailText + \"<br>\";\n  EmailText = EmailText + \"</body></html>\";\n  msg.EmailText = EmailText;\n  msg.headers = undefined;\n  return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 640,
        "wires": [
            [
                "b127165ae6e962f8",
                "1a3301eadb63a6c2"
            ]
        ]
    },
    {
        "id": "6922ba415ce9b33d",
        "type": "inject",
        "z": "170b6645847ae20d",
        "name": "Reset IsBusy",
        "props": [
            {
                "p": "ResetIsBusy",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 390,
        "y": 700,
        "wires": [
            [
                "cc30e1ecf2f775e8"
            ]
        ]
    },
    {
        "id": "7fa21a67f3a9f5b7",
        "type": "inject",
        "z": "170b6645847ae20d",
        "name": "00:01 Every Day",
        "props": [],
        "repeat": "",
        "crontab": "01 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 640,
        "wires": [
            [
                "6042ad948bd760be"
            ]
        ]
    },
    {
        "id": "b72b3f400473cddb",
        "type": "link out",
        "z": "170b6645847ae20d",
        "name": "Catch Error Save Telegrams Setting",
        "mode": "link",
        "links": [
            "f2cc06bdb36bffb7"
        ],
        "x": 1075,
        "y": 360,
        "wires": []
    },
    {
        "id": "f2cc06bdb36bffb7",
        "type": "link in",
        "z": "170b6645847ae20d",
        "name": "Settings and Utilities Catch Error Data",
        "links": [
            "b72b3f400473cddb",
            "bb3211f872a26c72",
            "3c0e081f645a131c",
            "f170ede9f8723282",
            "ed203881e296ccb3"
        ],
        "x": 165,
        "y": 1100,
        "wires": [
            [
                "a2620507d05911ba"
            ]
        ]
    },
    {
        "id": "bb3211f872a26c72",
        "type": "link out",
        "z": "170b6645847ae20d",
        "name": "Catch Error Delete Files",
        "mode": "link",
        "links": [
            "f2cc06bdb36bffb7"
        ],
        "x": 795,
        "y": 700,
        "wires": []
    },
    {
        "id": "29b91a1089f5807c",
        "type": "link in",
        "z": "170b6645847ae20d",
        "name": "Send E-Mail",
        "links": [
            "bcd38e380cad2d51",
            "1a3301eadb63a6c2",
            "8b61e9d53c1e4712",
            "c8dbac30f83aadd0",
            "40e8b83ecac9fd9b",
            "b79f3157138e481f"
        ],
        "x": 85,
        "y": 820,
        "wires": [
            [
                "3ae045757a211646"
            ]
        ]
    },
    {
        "id": "bcd38e380cad2d51",
        "type": "link out",
        "z": "170b6645847ae20d",
        "name": "Telegrams Settings Send E-Mail",
        "mode": "link",
        "links": [
            "29b91a1089f5807c"
        ],
        "x": 1855,
        "y": 320,
        "wires": []
    },
    {
        "id": "1a3301eadb63a6c2",
        "type": "link out",
        "z": "170b6645847ae20d",
        "name": "Delete Files Send E-Mail",
        "mode": "link",
        "links": [
            "29b91a1089f5807c"
        ],
        "x": 1075,
        "y": 640,
        "wires": []
    },
    {
        "id": "447101c1410d00e6",
        "type": "comment",
        "z": "170b6645847ae20d",
        "name": "Система безопасности",
        "info": "",
        "x": 380,
        "y": 80,
        "wires": []
    },
    {
        "id": "d5715d37db89c9f8",
        "type": "comment",
        "z": "170b6645847ae20d",
        "name": "Телеграммы",
        "info": "",
        "x": 350,
        "y": 280,
        "wires": []
    },
    {
        "id": "8e66da6565485f8d",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Get Token",
        "func": "//Все элементы сохраняются в объект глобального контекста \"GlobalSecurity\" в виде вложенных объектов с именем, соответствующим типу элемента\nmsg.GlobalSecurity =\n{\n    Type: \"GetToken\", //Тип элемента безопасности\n    Name: \"Get Token\", //Название элемента безопасности\n    Title: \"Получение токена\", //Название элемента безопасности на русском для электронного письма\n    MESAPI: //Объект с параметрами запроса в MES\n    {\n        Method: \"POST\", //Метод запроса GET, PUT, POST\n        URL: \"http://10.70.6.61:52431/connect/token\", //Адрес Api\n        TimeoutSec: 120, //Таймаут отправки в секундах больше или равный 60\n    },\n    APIData: //Объект с данными для отправки в запрос\n    {\n        grant_type: \"password\", //Тип авторизации\n        client_id: \"ProleiT.Desktop\", //ID клиента\n        client_secret: \"secret\", //Кодовое слово\n        username: \"SYSTEM_NR\", //Имя пользователя\n        password: \"ProAdmin777\" //Пароль\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": [
            [
                "a34f48b4de47561a"
            ]
        ]
    },
    {
        "id": "a34f48b4de47561a",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Save Global Security Settings to Global Context",
        "func": "node.status({ fill: \"yellow\", shape: \"dot\", text: \"Processing\" });\nvar fs = global.get(\"fsextra\");\nvar ErrorCount = 0; //Количество полученных ошибок\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\n\nmsg.Errors =\n{\n    GlobalSecurityType: msg.GlobalSecurity.Type,\n    GlobalSecurityName: msg.GlobalSecurity.Name,\n    Errors: []\n}\n\nvar GlobalSecurities = global.get(\"GlobalSecurity\");\nif (!GlobalSecurities)\n{\n    GlobalSecurities = {};\n    global.set(\"GlobalSecurity\", GlobalSecurities);\n};\n\nif (msg.GlobalSecurity)\n{\n    if (msg.GlobalSecurity.Type && (msg.GlobalSecurity.Type != \"\") && msg.GlobalSecurity.Name && (msg.GlobalSecurity.Name != \"\")\n        && msg.GlobalSecurity.Title && (msg.GlobalSecurity.Title != \"\") && msg.GlobalSecurity.MESAPI && msg.GlobalSecurity.APIData\n    )\n    {\n        var MESAPI = msg.GlobalSecurity.MESAPI;\n        if (!(MESAPI.Method && (MESAPI.Method != \"\") && MESAPI.URL && (MESAPI.URL != \"\")\n            && MESAPI.TimeoutSec && (MESAPI.TimeoutSec > 59))\n        )\n        {\n            ErrorData.error.source.type = \"Global Security Settings Error\";\n            ErrorData.error.message = msg.GlobalSecurity.Name + \" MES API Parameters Error\";\n            msg.Errors.Errors.push(ErrorData.error.message);\n            ErrorCount = ErrorCount + 1;\n            node.send([null, ErrorData]);\n        }\n        if (ErrorCount == 0)\n        {\n            msg.GlobalSecurity.CreationDateTime = new Date();\n            GlobalSecurities[msg.GlobalSecurity.Type] = msg.GlobalSecurity;\n        }\n    }\n    else\n    {\n        ErrorData.error.source.type = \"Global Security Settings Error\";\n        ErrorData.error.message = \"Global Security \" + msg.GlobalSecurity.Type + \" Settings Parameters Error\";\n        msg.Errors.Errors.push(ErrorData.error.message);\n        ErrorCount = ErrorCount + 1;\n        node.send([null, ErrorData]);\n    }\n}\nelse\n{\n    ErrorData.error.source.type = \"Global Security Settings Error\";\n    ErrorData.error.message = \"No Global Security Settings\";\n    msg.Errors.Errors.push(ErrorData.error.message);\n    ErrorCount = ErrorCount + 1;\n    node.send([null, ErrorData]);\n}\n//Состояние обработки\nvar ProcessingState = \"Processing Completed. Error Count: \" + ErrorCount + \".\";\nvar ProcessingColour = ((ErrorCount > 0) ? \"red\" : \"green\");\nnode.status({ fill: ProcessingColour, shape: \"dot\", text: ProcessingState });\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 120,
        "wires": [
            [
                "692b9c5298b427b6",
                "b26140e3e4f664a4"
            ],
            [
                "3c0e081f645a131c"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "e6cbdc321fa80598",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Get Service User",
        "func": "//Все элементы сохраняются в объект глобального контекста \"GlobalSecurity\" в виде вложенных объектов с именем, соответствующим типу элемента\nmsg.GlobalSecurity =\n{\n    Type: \"GetServiceUser\", //Тип элемента безопасности\n    Name: \"Get Service User\", //Название элемента безопасности\n    Title: \"Получение сервисного пользователя\", //Название элемента безопасности на русском для электронного письма\n    MESAPI: //Объект с параметрами запроса в MES\n    {\n        Method: \"GET\", //Метод запроса GET, PUT, POST\n        URL: \"http://10.70.6.61:52431/api/User/ServiceUser\", //Адрес Api\n        TimeoutSec: 120 //Таймаут отправки в секундах больше или равный 60\n    },\n    APIData: //Объект с данными для отправки в запрос\n    {\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 160,
        "wires": [
            [
                "a34f48b4de47561a"
            ]
        ]
    },
    {
        "id": "692b9c5298b427b6",
        "type": "debug",
        "z": "170b6645847ae20d",
        "name": "Debug Save Global Security Setting",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 80,
        "wires": []
    },
    {
        "id": "3c0e081f645a131c",
        "type": "link out",
        "z": "170b6645847ae20d",
        "name": "Catch Error Save Global Securities Setting",
        "mode": "link",
        "links": [
            "f2cc06bdb36bffb7"
        ],
        "x": 955,
        "y": 160,
        "wires": []
    },
    {
        "id": "b26140e3e4f664a4",
        "type": "join",
        "z": "170b6645847ae20d",
        "name": "Global Securities Count = 2",
        "mode": "custom",
        "build": "array",
        "property": "Errors",
        "propertyType": "msg",
        "key": "_msgid",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1060,
        "y": 120,
        "wires": [
            [
                "b9700b32fc5206e0",
                "692b9c5298b427b6"
            ]
        ]
    },
    {
        "id": "b9700b32fc5206e0",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Check and Prepare EMail",
        "func": "var ErrorsList = msg.Errors?.filter(el => el.Errors?.length > 0);\n\nif (ErrorsList.length > 0)\n{\n  msg.StartDateTime = new Date(); //Дата и время начала создания письма\n  //Тема письма\n  msg.topic = \"Ошибки при сохранении настроек системы безопасности (\" + msg.StartDateTime.toLocaleString() + \")\";\n  //Отправитель письма\n  //msg.from = \"MESNotificationService@hochland.com\";\n  //Получатель письма\n  //msg.to = \"pavel.zotov@solisoft.group\";\n  //Содержимое письма\n  var EmailText = \"<!DOCTYPE html><html>\";\n  //Стили оформления\n  EmailText = EmailText + \"<head></head>\";\n  //Тело письма\n  EmailText = EmailText + \"<body>Здравствуйте.<br>\";\n  EmailText = EmailText + \"На данный момент (\" + msg.StartDateTime.toLocaleString() + \") возникли проблемы при сохранении настроек системы безопасности.<br><br>\";\n  for (let i = 0; i < ErrorsList.length; i++)\n  {\n    EmailText = EmailText + \"<u>Телеграмма <b>\" + ErrorsList[i].GlobalSecurityName + \"</b></u><br>\";\n    for (let j = 0; j < ErrorsList[i].Errors.length; j++)\n    {\n      EmailText = EmailText + (j + 1).toString() + \". \" + ErrorsList[i].Errors[j]?.replaceAll(\"\\n\", \"<br>\") + \"<br>\";\n    }\n    EmailText = EmailText + \"<br>\";\n  }\n  EmailText = EmailText + \"</body></html>\";\n  msg.EmailText = EmailText;\n  msg.headers = undefined;\n  return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 120,
        "wires": [
            [
                "8b61e9d53c1e4712",
                "692b9c5298b427b6"
            ]
        ]
    },
    {
        "id": "8b61e9d53c1e4712",
        "type": "link out",
        "z": "170b6645847ae20d",
        "name": "Global Securities Settings Send E-Mail",
        "mode": "link",
        "links": [
            "29b91a1089f5807c"
        ],
        "x": 1535,
        "y": 120,
        "wires": []
    },
    {
        "id": "310e31379042101f",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Telegram 10 Line Efficiency",
        "func": "/*Все телеграммы сохраняются в объект глобального контекста \"Telegram\" в виде вложенных объектов с именем, соответствующим номеру телеграммы (global.get(\"Telegram\")[\"17\"])\n{\n    Number: \"17\", //Номер телеграммы\n    Name: \"Deliveries Supplies\", //Название телеграммы\n    Title: \"Приём материалов от внешнего поставщика\", //Название телеграммы на русском для электронного письма\n    FilePrefix: \"Delivery\", //Префикс имён файлов\n    UseGetToken: true, //true - Для отправки данных в MES требуется получение токена, false - не требуется\n    UseGetServiceUser: true, //true - Для отправки данных в MES требуется получение сервисного пользователя, false - не требуется\n    Folder: //Объект с каталогами, используемыми в телеграмме, название которых жёстко фиксировано\n    {\n        FilesFolder: //Каталог временного хранения\n        {\n            Name: \"Files Folder\", //Название каталога\n            Title: \"Каталог временного хранения\", //Название каталога на русском для электронного письма\n            Path: FilesFolder, //Полный путь к каталогу\n            FileType: \"json\", //Тип файлов\n            LifeTime: 3, //Время хранения файлов в каталоге\n            LifeTimeMonthFlag: true //true - время хранения в месяцах, false - в днях\n        },\n        ArchiveOKFolder: { -//- }, //Каталог удачно отправленных в MES файлов\n        ArchiveBadFolder: { -//- }, //Каталог ошибочных файлов\n        SAPLogsFolder: { -//- }, //Архив запросов от SAP\n        MESLogsFolder: { -//- } //Архив запросов в MES\n    },\n    MESAPI: //Объект с запросами в MES, используемыми в телеграмме с отправкой через API\n    {\n        CreateDelivery: //Объект запроса в MES, имя которого соответствует тому, которое будет использоваться в файлах запросов от SAP\n        {\n            Name: \"Create Delivery\", //Название запроса\n            Title: \"Создание поставок в MES\", //Название запроса на русском для электронного письма\n            Method: \"POST\", //Метод запроса GET, PUT, POST\n            URL: \"http://localhost:1880/api/delivery\", //Адрес Api\n            TimeoutSec: 120 //Таймаут отправки в секундах больше или равный 60\n        }\n    },\n    MESDBTable: //Объект с таблицами, используемыми в телеграмме с прямой записью в таблицу\n    {\n        CreateDelivery:  //Объект с параметрами таблицы, имя которого соответствует тому, которое будет использоваться при обращении к глобальному контексту\n        {}               //Хранит ссылку на объект глобального контекста настроек таблиц global.get(\"DBTable\")\n    }\n}\n*/\nvar FilesFolder = \"C:\\\\MESSync\\\\Dictionary\\\\Efficiency\\\\\"; //Каталог хранения кучи файлов\nvar ArchiveOKFolder = FilesFolder + \"ArchiveOK\\\\\"; //Каталог хранения успешно отправленных файлов\nvar ArchiveBadFolder = FilesFolder + \"ArchiveBad\\\\\"; //Каталог хранения файлов с ошибкой в структуре\nvar SAPLogsFolder = FilesFolder + \"SAPLogs\\\\\"; //Каталог хранения файлов логов запросов и ответов SAP\nvar MESLogsFolder = FilesFolder + \"MESLogs\\\\\"; //Каталог хранения файлов логов отправки данных в MES\n\nvar MESDBTable = global.get(\"DBTable\")?.[\"EquipmentPerformance\"];\n\nmsg.Telegram =\n{\n    Number: \"10\",\n    Name: \"Line Efficiency\",\n    Title: \"Производительность фасовочной линии в привязке к выпускаемому продукту\",\n    FilePrefix: \"Efficiency\",\n    UseGetToken: false,\n    UseGetServiceUser: false,\n    Folder:\n    {\n        FilesFolder: { Name: \"Files Folder\", Title: \"Каталог временного хранения\", Path: FilesFolder, FileType: \"json\", LifeTime: 3, LifeTimeMonthFlag: true },\n        ArchiveOKFolder: { Name: \"Archive OK\", Title: \"Каталог удачно отправленных в MES файлов\", Path: ArchiveOKFolder, FileType: \"json\", LifeTime: 3, LifeTimeMonthFlag: true },\n        ArchiveBadFolder: { Name: \"Archive Bad\", Title: \"Каталог ошибочных файлов\", Path: ArchiveBadFolder, FileType: \"json\", LifeTime: 3, LifeTimeMonthFlag: true },\n        SAPLogsFolder: { Name: \"SAP Logs\", Title: \"Архив запросов от SAP\", Path: SAPLogsFolder, FileType: \"log\", LifeTime: 3, LifeTimeMonthFlag: true },\n        MESLogsFolder: { Name: \"MES Logs\", Title: \"Архив запросов в MES\", Path: MESLogsFolder, FileType: \"log\", LifeTime: 3, LifeTimeMonthFlag: true }\n    },\n    MESAPI: {},\n    MESDBTable:\n    {\n        EquipmentPerformance: MESDBTable\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 320,
        "wires": [
            [
                "b42189316d6e237a"
            ]
        ]
    },
    {
        "id": "ac6dd43e895163d6",
        "type": "comment",
        "z": "170b6645847ae20d",
        "name": "Таблицы",
        "info": "",
        "x": 340,
        "y": 200,
        "wires": []
    },
    {
        "id": "df5d20f1786dc2a1",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "DBTables",
        "func": "/*Все параметры таблиц сохраняются в объект глобального контекста \"DBTable\" в виде вложенных объектов с именем, соответствующим её названию (global.get(\"DBTable\")[\"EquipmentPerformance\"])\n{\n    EquipmentPerformance: //Объект с параметрами таблицы, имя которого соответствует тому, которое будет использоваться при обращении к глобальному контексту\n    {\n        Name: \"Equipment Performance\", //Название таблицы\n        Title: \"Производительность оборудования\", //Название таблицы на русском для электронного письма\n        DBTable: \"[BaseClassifiers].[dbo].[tblEquipmentPerformance]\" //Путь к таблице\n    }\n}\n*/\nmsg.DBTables =\n{\n    EquipmentPerformance: { Name: \"Equipment Performance\", Title: \"Производительность оборудования\", DBTable: \"[BaseClassifiers].[dbo].[tblEquipmentPerformance]\" },\n    EquipmentTree: { Name: \"Equipment Tree\", Title: \"Дерево оборудования\", DBTable: \"[BaseClassifiers].[dbo].[tblEquipmentTree]\" },\n    Counterparty: { Name: \"Counterparty\", Title: \"Контрагенты\", DBTable: \"[BaseClassifiers].[dbo].[tblCounterparty]\" },\n    Material: { Name: \"Material\", Title: \"Материалы\", DBTable: \"[BaseClassifiers].[dbo].[tblMaterial]\" },\n    StorageLocation: { Name: \"Storage Location\", Title: \"Хранилища\", DBTable: \"[HLRURASAP99].[BatchManagementDb].[dbo].[tblStorageLocation]\" },\n    ProductionSchedule: { Name: \"Production Schedule\", Title: \"План производства\", DBTable: \"[HLRURASAP99].[ProductionManagementRunTimeDb].[dbo].[tblProductionSchedule]\" },\n    AspNetUsers: { Name: \"AspNet Users\", Title: \"Пользователи\", DBTable: \"[UserManagement].[dbo].[AspNetUsers]\" },\n    ExternalVertex: { Name: \"External Vertex\", Title: \"Внешние вершины дерева\", DBTable: \"[BaseClassifiers].[dbo].[tblExternalVertex]\" },\n    ProcessByNumberSAP: { Name: \"Process by NumberSAP\", Title: \"Процессы по названию SAP\", DBTable: \"[HLRURASAP99].[ProductionManagementRunTimeDb].[dbo].[tblProcessByNumberSAP]\" },\n    Process: { Name: \"Process\", Title: \"Процессы\", DBTable: \"[HLRURASAP99].[ProductionManagementRunTimeDb].[dbo].[tblProcess]\" },\n    Operation: { Name: \"Operation\", Title: \"Операции\", DBTable: \"[HLRURASAP99].[ProductionManagementRunTimeDb].[dbo].[tblOperation]\" },\n    ProductionOrder: { Name: \"Production Order\", Title: \"Производственные заказы\", DBTable: \"[HLRURASAP99].[ProductionManagementRunTimeDb].[dbo].[tblProductionOrder]\" },\n    ShiftRuntime: { Name: \"Shift Runtime\", Title: \"Активные смены\", DBTable: \"[BaseClassifiers].[dbo].[tblShiftRuntime]\" },\n    OperationProduceStorageLocation: { Name: \"Operation Produce Storage Location\", Title: \"Хранилища по операциям\", DBTable: \"[HLRURASAP99].[ProductionManagementRunTimeDb].[dbo].[tblOperationProduceStorageLocation]\" },\n    Batch: { Name: \"Batch\", Title: \"Партии\", DBTable: \"[HLRURASAP99].[BatchManagementDb].[dbo].[tblBatch]\" },\n    ProcessSpecification: { Name: \"ProcessSpecification\", Title: \"Рецепты процессов\", DBTable: \"[HLRURASAP99].[ProductionManagementRunTimeDb].[dbo].[tblProcessSpecification]\" },\n    OperationConsumeStorageLocation: { Name: \"OperationConsumeStorageLocation\", Title: \"Хранилища потребляемого материала\", DBTable: \"[HLRURASAP99].[ProductionManagementRunTimeDb].[dbo].[tblOperationConsumeStorageLocation]\" }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 240,
        "wires": [
            [
                "c927c899c3330fde"
            ]
        ]
    },
    {
        "id": "c927c899c3330fde",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Save DBTables Settings to Global Context",
        "func": "node.status({ fill: \"yellow\", shape: \"dot\", text: \"Processing\" });\nvar fs = global.get(\"fsextra\");\nvar ErrorCount = 0; //Количество полученных ошибок\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\n\nmsg.Errors = [];\n\n\nvar DBTables = global.get(\"DBTable\");\nif (!DBTables)\n{\n    DBTables =\n    {\n        DataValidGenerateByName: function (VariableName)\n        {\n            var Result = undefined;\n            var Data = RED.util.cloneMessage(this[VariableName]);\n            if (Data)\n            {\n                delete Data.DataValidCode;\n                Result = this.DataValidGenerateByObject(Data);\n            }\n            return Result;\n        },\n        DataValidGenerateByObject: function (Data)\n        {\n            var Result = undefined;\n            var PrimeNumber = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29];\n            var DataStringify = JSON.stringify(Data);\n            if (DataStringify && (DataStringify?.length > 0))\n            {\n                Result = 0;\n                for (let i = 0, j = -1; i < DataStringify.length; i = i + PrimeNumber[j])\n                {\n                    Result = Result + DataStringify.charCodeAt(i);\n                    Result = Result ^ (Result >> 8);\n                    j = j + 1;\n                    if (j >= PrimeNumber.length) j = 0;\n                }\n                Result = Result & (0xFFFF);\n            };\n            return Result;\n        },\n        DataValidCheck: function (VariableName)\n        {\n            var ValidCode = this.DataValidGenerateByName(VariableName);\n            var DataValidCode = this[VariableName]?.DataValidCode;\n            return ValidCode && (ValidCode == DataValidCode);\n        }\n    };\n    global.set(\"DBTable\", DBTables);\n};\n\nif (msg.DBTables)\n{\n    for (var DBTableName in msg.DBTables)\n    {\n        var DBTable = msg.DBTables[DBTableName];\n        if (DBTable.Name && (DBTable.Name != \"\") && DBTable.Title && (DBTable.Title != \"\")\n            && DBTable.DBTable && (DBTable.DBTable != \"\")\n        )\n        {\n            var DBTableNamePattern = /^\\[\\w+\\]\\.\\[\\w+\\]\\.\\[\\w+\\](\\.\\[\\w+\\])?$/gi;\n            if (DBTableNamePattern.test(DBTable.DBTable))\n            {\n                msg.DBTables[DBTableName].CreationDateTime = new Date();\n                msg.DBTables[DBTableName].DataValidCode = DBTables.DataValidGenerateByObject(msg.DBTables[DBTableName]);\n                DBTables[DBTableName] = msg.DBTables[DBTableName];\n            }\n            else\n            {\n                ErrorData.error.source.type = \"DBTable Settings Error\";\n                ErrorData.error.message = \"DBTable '\" + DBTableName + \"' has wrong DBTable Parameter\";\n                msg.Errors.push(ErrorData.error.message);\n                ErrorCount = ErrorCount + 1;\n                node.send([null, ErrorData]);\n            }\n        }\n        else\n        {\n            ErrorData.error.source.type = \"DBTable Settings Error\";\n            ErrorData.error.message = \"DBTable '\" + DBTableName + \"' Parameters Error\";\n            msg.Errors.push(ErrorData.error.message);\n            ErrorCount = ErrorCount + 1;\n            node.send([null, ErrorData]);\n        }\n    }\n}\nelse\n{\n    ErrorData.error.source.type = \"DBTables Settings Error\";\n    ErrorData.error.message = \"No DBTables Settings\";\n    msg.Errors.push(ErrorData.error.message);\n    ErrorCount = ErrorCount + 1;\n    node.send([null, ErrorData]);\n}\n//Состояние обработки\nvar ProcessingState = \"Processing Completed. Error Count: \" + ErrorCount + \".\";\nvar ProcessingColour = ((ErrorCount > 0) ? \"red\" : \"green\");\nnode.status({ fill: ProcessingColour, shape: \"dot\", text: ProcessingState });\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 240,
        "wires": [
            [
                "e7854b6a6a8b29df",
                "fd6802d17f4bdace"
            ],
            [
                "f170ede9f8723282"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "f170ede9f8723282",
        "type": "link out",
        "z": "170b6645847ae20d",
        "name": "Catch Error Save DBTables Setting",
        "mode": "link",
        "links": [
            "f2cc06bdb36bffb7"
        ],
        "x": 835,
        "y": 280,
        "wires": []
    },
    {
        "id": "e7854b6a6a8b29df",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Data Valid Check",
        "func": "msg.ValidData = [];\n\nif (msg.DBTables)\n{\n    var DBTables = global.get(\"DBTable\");\n    if (DBTables && DBTables?.DataValidGenerateByName && DBTables?.DataValidGenerateByObject && DBTables?.DataValidCheck)\n    {\n        for (var DBTableName in msg.DBTables)\n        {\n            var DBTableData = DBTables[DBTableName];\n            if (DBTableData)\n            {\n                var DBTableDataTemp = RED.util.cloneMessage(msg.DBTables[DBTableName]);\n                delete DBTableDataTemp.DataValidCode;\n                var ValidData =\n                {\n                    DBTable: DBTableName,\n                    DataValidCodeVariable: DBTableData.DataValidCode,\n                    DataValidCodeMsg: DBTables.DataValidGenerateByObject(DBTableDataTemp),\n                    DataValidCheck: DBTables.DataValidCheck(DBTableName)\n                };\n                if (ValidData.DataValidCodeVariable != ValidData.DataValidCodeMsg)\n                {\n                    msg.Errors.push(DBTableName + \": DataValidCodeVariable and DataValidCodeMsg not Equal (\" + ValidData.DataValidCodeVariable + \" != \" + ValidData.DataValidCodeMsg + \")\");\n                    node.warn(DBTableName + \": DataValidCodeVariable and DataValidCodeMsg not Equal\");\n                    delete global.get(\"DBTable\")[DBTableName];\n                }\n                msg.ValidData.push(ValidData);\n            }\n        }\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 240,
        "wires": [
            [
                "11a381b7eed1937d",
                "fd6802d17f4bdace",
                "cf0f3718197129d6"
            ]
        ]
    },
    {
        "id": "11a381b7eed1937d",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Check and Prepare EMail",
        "func": "var ErrorsList = msg.Errors;\n\nif (ErrorsList?.length > 0)\n{\n  msg.StartDateTime = new Date(); //Дата и время начала создания письма\n  //Тема письма\n  msg.topic = \"Ошибки при сохранении настроек таблиц баз данных (\" + msg.StartDateTime.toLocaleString() + \")\";\n  //Отправитель письма\n  //msg.from = \"MESNotificationService@hochland.com\";\n  //Получатель письма\n  //msg.to = \"pavel.zotov@solisoft.group\";\n  //Содержимое письма\n  var EmailText = \"<!DOCTYPE html><html>\";\n  //Стили оформления\n  EmailText = EmailText + \"<head></head>\";\n  //Тело письма\n  EmailText = EmailText + \"<body>Здравствуйте.<br>\";\n  EmailText = EmailText + \"На данный момент (\" + msg.StartDateTime.toLocaleString() + \") возникли проблемы при сохранении настроек таблиц баз данных.<br><br>\";\n  for (let i = 0; i < ErrorsList.length; i++)\n  {\n    EmailText = EmailText + (i + 1).toString() + \". \" + ErrorsList[i]?.replaceAll(\"\\n\", \"<br>\") + \"<br>\";\n  }\n  EmailText = EmailText + \"</body></html>\";\n  msg.EmailText = EmailText;\n  msg.headers = undefined;\n  return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 240,
        "wires": [
            [
                "fd6802d17f4bdace",
                "c8dbac30f83aadd0"
            ]
        ]
    },
    {
        "id": "fd6802d17f4bdace",
        "type": "debug",
        "z": "170b6645847ae20d",
        "name": "Debug Save Telegrams Setting",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 200,
        "wires": []
    },
    {
        "id": "cf0f3718197129d6",
        "type": "link out",
        "z": "170b6645847ae20d",
        "name": "Save DBTables Settings Complete",
        "mode": "link",
        "links": [
            "7b59678855d30ea5"
        ],
        "x": 1075,
        "y": 280,
        "wires": []
    },
    {
        "id": "7b59678855d30ea5",
        "type": "link in",
        "z": "170b6645847ae20d",
        "name": "Save DBTables Settings Complete",
        "links": [
            "cf0f3718197129d6"
        ],
        "x": 205,
        "y": 320,
        "wires": [
            [
                "310e31379042101f",
                "4633a939acc9d197",
                "49fc3ffd88a755c9",
                "9eed793c7c4825ac",
                "08e3cf7b9ea29923",
                "19fe6684eb807e19"
            ]
        ]
    },
    {
        "id": "88a3c14c2d46dc36",
        "type": "comment",
        "z": "170b6645847ae20d",
        "name": "После настройки таблиц",
        "info": "",
        "x": 150,
        "y": 280,
        "wires": []
    },
    {
        "id": "c8dbac30f83aadd0",
        "type": "link out",
        "z": "170b6645847ae20d",
        "name": "DBTables Settings Send E-Mail",
        "mode": "link",
        "links": [
            "29b91a1089f5807c"
        ],
        "x": 1355,
        "y": 240,
        "wires": []
    },
    {
        "id": "53fedfe7d447347b",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Processing Logs Files",
        "func": "if (msg.ResetIsBusy)\n{\n    context.set(\"IsBusy\", false);\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Processing Reset\" });\n}\nelse\n{\n    //Проверка занятости данного блока в случае большого количества файлов, которые могут не успеть обработать за интервал вызова функции\n    var IsBusy = context.get(\"IsBusy\");\n    var LogsData =\n    {\n        Folder: \"C:\\\\NRLogs\\\\\", //Каталог хранения файлов логирования\n        Logs: [], //Массив данных файлов логирования\n        IsBusy: IsBusy,\n        Errors: []\n    };\n    if (!IsBusy)\n    {\n        context.set(\"IsBusy\", true);\n        node.status({ fill: \"yellow\", shape: \"dot\", text: \"Processing\" });\n        var StartProcessingTime = new Date(); //Время начала обработки файлов\n        var fs = global.get(\"fsextra\");\n        var LogsArchive = global.get(\"LogsArchive\"); //Список обработанных файлов\n        if (!LogsArchive)\n        {\n            LogsArchive = [];\n            global.set(\"LogsArchive\", LogsArchive);\n        }\n        var LogsArchiveNew = []; //Новый список обработанных файлов\n        var FileCount = 0; //Количество обработанных файлов\n        var ErrorCount = 0; //Количество полученных ошибок\n        //Шаблон сообщения об ошибке\n        var ErrorData = \n        {\n            error :\n            {\n                source:\n                {\n                    id: env.get(\"NR_NODE_ID\"),\n                    type: undefined,\n                    name: env.get(\"NR_NODE_NAME\"),\n                    count: 1\n                },\n                message: undefined\n            }\n        };\n        //Проверка каталога хранения файлов логирования\n        if (fs.pathExistsSync(LogsData.Folder))\n        {\n            var LogsFilesNames = []; //Массив имён файлов логирования\n            var LogsFiles = []; //Массив файлов логирования с дополнительной информацией, отсортированный по имени\n            //Получения списка имён файлов логирования\n            try\n            {\n                LogsFilesNames = fs.readdirSync(LogsData.Folder);\n            }\n            catch (ex)\n            {\n                ErrorData.error.source.type = \"Logs Folder Error\";\n                ErrorData.error.message = \"Directory '\" + LogsData.Folder + \"' could not be read (\" + ex + \")\";\n                LogsData.Errors.push(ErrorData.error);\n                node.send([null, ErrorData]);\n            }\n            LogsFilesNames = LogsFilesNames.filter(el => el.toLowerCase().endsWith(\".log\"));\n            if (LogsFilesNames.length > 0)\n            {\n                //Получение дополнительной информации о файлах логирования и наполнение массива файлов с дополнительной информацией\n                for (let i = 0; i < LogsFilesNames.length; i++)\n                {\n                    var FileDataTemp =\n                    {\n                        Name: LogsFilesNames[i],\n                        ModifiedData: undefined,\n                        Size: undefined,\n                        Changed: false,\n                        LastLines: []\n                    };\n                    try\n                    {\n                        var FileData = fs.statSync(LogsData.Folder + LogsFilesNames[i]);\n                        FileDataTemp.ModifiedData = FileData.mtime;\n                        FileDataTemp.Size = FileData.size;\n                        FileDataTemp.Changed = (!LogsArchive.find(el => (el.Name == FileDataTemp.Name) && (el.ModifiedData.toISOString() == FileDataTemp.ModifiedData.toISOString())));\n                        LogsArchiveNew.push({ Name: FileDataTemp.Name, ModifiedData: FileDataTemp.ModifiedData, Size: FileDataTemp.Size });\n                    }\n                    catch (ex)\n                    {\n                        ErrorData.error.source.type = \"Log File Error\";\n                        ErrorData.error.message = \"Unable to get file information '\" + LogsData.Folder + LogsFilesNames[i] + \"' (\" + ex + \")\";\n                        LogsData.Errors.push(ErrorData.error);\n                        node.send([null, ErrorData]);\n                    }\n                    LogsFiles.push(FileDataTemp);\n                }\n                //Получение последних четырёх строк изменённых файлов логирования\n                for (let i = 0; i < LogsFiles.length; i++)\n                {\n                    if (LogsFiles[i].Changed)\n                    {\n                        try\n                        {\n                            var FileLines = fs.readFileSync(LogsData.Folder + LogsFiles[i].Name, \"utf8\");\n                            FileLines = FileLines.split(\"\\r\\n\");\n                            var LinesCount = FileLines.length;\n                            if (FileLines.length > 1)\n                            {\n                                FileLines.splice(0, 1);\n                                FileLines.splice(FileLines.length - 1, 1);\n                            }\n                            var LineCount = 4;\n                            if (FileLines.length > LineCount) FileLines = FileLines.slice(-1 * LineCount);\n                            else LineCount = FileLines.length;\n                            var FirstRowNumber = LinesCount - LineCount;\n                            for (let j = 0; j < FileLines.length; j++)\n                            {\n                                LogsFiles[i].LastLines.push(FileLines[j].split(\"\\t\").join(\" | \"));\n                                LogsFiles[i].LastLines[j] = (FirstRowNumber + j) + \": | \" + LogsFiles[i].LastLines[j];\n                            }\n                        }\n                        catch (ex)\n                        {\n                            ErrorData.error.source.type = \"Log File Error\";\n                            ErrorData.error.message = \"Unable to read file '\" + LogsData.Folder + LogsFiles[i].Name + \"' (\" + ex + \")\";\n                            LogsData.Errors.push(ErrorData.error);\n                            node.send([null, ErrorData]);\n                            LogsFiles[i].LastLines.push(\"FILE READ ERROR!\");\n                        }\n                    }\n                }\n                LogsData.Logs = LogsFiles;\n                //Сортировка массива файлов логирования с дополнительной информацией по названию\n                LogsData.Logs.sort(function (a, b)\n                {\n                    return a.Name.localeCompare(b.Name);\n                });\n                global.set(\"LogsArchive\", LogsArchiveNew);\n            }\n        }\n        else\n        {\n            ErrorData.error.source.type = \"Logs Folder Error\";\n            ErrorData.error.message = \"Directory '\" + LogsData.Folder + \"' does not exist\";\n            LogsData.Errors.push(ErrorData.error.message);\n            node.send([null, ErrorData]);\n        }\n        FileCount = LogsData.Logs.length;\n        ErrorCount = LogsData.Errors.length;\n        var ProcessingTime = Number(new Date()) - Number(StartProcessingTime); //Время выполнения обработки файлов\n        //Состояние обработки\n        var ProcessingState = \"Processing Time: \" + ProcessingTime + \" ms. File Count: \" + FileCount + \". Error Count: \" + ErrorCount + \".\";\n        var ProcessingColour = ((ErrorCount > 0) ? \"red\" : \"green\");\n        node.status({ fill: ProcessingColour, shape: \"dot\", text: ProcessingState });\n        //Освобождение блока для следующей обработки\n        context.set(\"IsBusy\", false);\n    }\n\n    msg.LogsAnalizer = LogsData;\n\n    return [msg, null];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 940,
        "wires": [
            [
                "f56517213bc628bc",
                "9af13801a96164b4"
            ],
            [
                "ed203881e296ccb3"
            ]
        ],
        "outputLabels": [
            "",
            "Error Data"
        ]
    },
    {
        "id": "9af13801a96164b4",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Check and Prepare EMail",
        "func": "//Поиск изменённых файлов логирования\nvar IsChanged = (msg.LogsAnalizer?.Logs?.find(el => el.Changed) || msg.LogsAnalizer?.IsBusy);\n//Если изменения были хотя бы в одном файле, то подготаливаем информацию для отправки\nif (IsChanged)\n{\n  msg.StartDateTime = new Date();\n  //Тема письма\n  msg.topic = \"Изменения в файлах логирования сервера (\" + msg.StartDateTime.toLocaleString() + \")\";\n  //Отправитель письма\n  //msg.from = \"MESNotificationService@hochland.com\";\n  //Получатель письма\n  //msg.to = \"evgeniy.meshkovskiy@solisoft.group, pavel.zotov@solisoft.group\";\n  //Содержимое письма\n  var EmailText = \"<!DOCTYPE html><html>\";\n  //Стили оформления\n  EmailText = EmailText + \"<head><style>\";\n  EmailText = EmailText + \"table { font-family: arial, sans-serif; border-collapse: collapse; width: 100%; }\";\n  EmailText = EmailText + \"td, th { border: 1px solid #dddddd; text-align: left; vertical-align: top; padding: 8px; }\";\n  EmailText = EmailText + \"</style></head>\";\n  //Тело письма\n  EmailText = EmailText + \"<body>Здравствуйте. На данный момент (\" + msg.StartDateTime.toLocaleString() + \") были замечены изменения в файлах логирования.<br><br>\";\n  EmailText = EmailText + \"Каталог хранения файлов логирования: <b>\" + msg.LogsAnalizer.Folder + \"</b><br>\";\n  EmailText = EmailText + \"<br>\";\n  //Перечень ошибок в процессе составления отчёта\n  EmailText = EmailText + \"<b><u>Ошибки в процессе составления отчёта</u></b><br>\";\n  if (msg.LogsAnalizer.IsBusy || (msg.LogsAnalizer.Errors.length > 0))\n  {\n    if (msg.LogsAnalizer.IsBusy) EmailText = EmailText + \"<b><font color=\\\"red\\\">ПРОЦЕСС СБОРА ДАННЫХ ЛОГОВ ЗАНЯТ</font></b><br>\";\n    for (let i = 0; i < msg.LogsAnalizer.Errors.length; i++)\n    {\n      EmailText = EmailText + (i + 1).toString() + \". \" + msg.LogsAnalizer.Errors[i].replaceAll(\"\\n\", \"<br>\") + \"<br>\";\n    }\n  }\n  else EmailText = EmailText + \"Ошибок нет<br>\";\n  EmailText = EmailText + \"<br>\";\n  //Список изменённых файлов с содержимым\n  EmailText = EmailText + \"<b><u>Изменённые файлы</u></b><br>\";\n  var ChangedLogs = msg.LogsAnalizer.Logs?.filter(el => el.Changed);\n  if (ChangedLogs && (!msg.LogsAnalizer.IsBusy))\n  {\n    if (ChangedLogs.length > 0)\n    {\n      for (let i = 0; i < ChangedLogs.length; i++)\n      {\n        EmailText = EmailText + \"<u>Файл <b>\" + ChangedLogs[i].Name + \" (\" + ChangedLogs[i].ModifiedData + \")</b>:</u><br>\";\n        for (var Line of ChangedLogs[i].LastLines) EmailText = EmailText + Line + \"<br>\";\n        EmailText = EmailText + \"<br>\";\n      }\n    }\n    else EmailText = EmailText + \"Изменений нет<br>\";\n  }\n  else EmailText = EmailText + \"<b><font color=\\\"red\\\">ОШИБКА ПОЛУЧЕНИЯ СПИСКА</font></b><br>\";\n  EmailText = EmailText + \"<br>\";\n  //Перечень всех файлов в каталоге\n  EmailText = EmailText + \"<b><u>Полный список файлов</u></b><br>\";\n  if (msg.LogsAnalizer.Logs && (!msg.LogsAnalizer.IsBusy))\n  {\n    if (msg.LogsAnalizer.Logs.length > 0)\n    {\n      for (let i = 0; i < msg.LogsAnalizer.Logs.length; i++)\n      {\n        var Size = msg.LogsAnalizer.Logs[i].Size;\n        var Units = \"bytes\";\n        if (Size > 1000)\n        {\n          Size = Size / 1000;\n          if (Size > 1000)\n          {\n            Size = Size / 1000;\n            if (Size > 1000)\n            {\n              Size = Size / 1000;\n              Units = \"G\" + Units;\n            }\n            else Units = \"M\" + Units;\n          }\n          else Units = \"k\" + Units;\n        }\n        Size = (Math.floor(Size * 100) / 100) + \" \" + Units;\n        EmailText = EmailText + msg.LogsAnalizer.Logs[i].Name + \" (\" + msg.LogsAnalizer.Logs[i].ModifiedData + \", \" + Size + \")<br>\";\n      }\n    }\n    else EmailText = EmailText + \"Каталог пуст<br>\";\n  }\n  else EmailText = EmailText + \"<b><font color=\\\"red\\\">ОШИБКА ПОЛУЧЕНИЯ СПИСКА</font></b><br>\";\n  EmailText = EmailText + \"<br>\";\n  EmailText = EmailText + \"</body></html>\";\n  msg.EmailText = EmailText;\n\n  msg.headers = undefined;\n  return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 940,
        "wires": [
            [
                "f56517213bc628bc",
                "40e8b83ecac9fd9b"
            ]
        ]
    },
    {
        "id": "7e3d0f2b9280c478",
        "type": "inject",
        "z": "170b6645847ae20d",
        "name": "4 hours",
        "props": [],
        "repeat": "14400",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 940,
        "wires": [
            [
                "53fedfe7d447347b"
            ]
        ]
    },
    {
        "id": "1e099500e1ebbbd1",
        "type": "inject",
        "z": "170b6645847ae20d",
        "name": "Reset IsBusy",
        "props": [
            {
                "p": "ResetIsBusy",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 980,
        "wires": [
            [
                "53fedfe7d447347b"
            ]
        ]
    },
    {
        "id": "f56517213bc628bc",
        "type": "debug",
        "z": "170b6645847ae20d",
        "name": "Debug Processing Logs Files",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 900,
        "wires": []
    },
    {
        "id": "ba404971a125a117",
        "type": "comment",
        "z": "170b6645847ae20d",
        "name": "Анализатор файлов логирования и генератор письма",
        "info": "",
        "x": 260,
        "y": 900,
        "wires": []
    },
    {
        "id": "ed203881e296ccb3",
        "type": "link out",
        "z": "170b6645847ae20d",
        "name": "Catch Error Logs Analizer",
        "mode": "link",
        "links": [
            "f2cc06bdb36bffb7"
        ],
        "x": 535,
        "y": 980,
        "wires": []
    },
    {
        "id": "40e8b83ecac9fd9b",
        "type": "link out",
        "z": "170b6645847ae20d",
        "name": "Logs Analizer Send E-Mail",
        "mode": "link",
        "links": [
            "29b91a1089f5807c"
        ],
        "x": 815,
        "y": 940,
        "wires": []
    },
    {
        "id": "9eed793c7c4825ac",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Telegram 15 Material Transfer to Production",
        "func": "/*Все телеграммы сохраняются в объект глобального контекста \"Telegram\" в виде вложенных объектов с именем, соответствующим номеру телеграммы (global.get(\"Telegram\")[\"17\"])\n{\n    Number: \"17\", //Номер телеграммы\n    Name: \"Deliveries Supplies\", //Название телеграммы\n    Title: \"Приём материалов от внешнего поставщика\", //Название телеграммы на русском для электронного письма\n    FilePrefix: \"Delivery\", //Префикс имён файлов\n    UseGetToken: true, //true - Для отправки данных в MES требуется получение токена, false - не требуется\n    UseGetServiceUser: true, //true - Для отправки данных в MES требуется получение сервисного пользователя, false - не требуется\n    Folder: //Объект с каталогами, используемыми в телеграмме, название которых жёстко фиксировано\n    {\n        FilesFolder: //Каталог временного хранения\n        {\n            Name: \"Files Folder\", //Название каталога\n            Title: \"Каталог временного хранения\", //Название каталога на русском для электронного письма\n            Path: FilesFolder, //Полный путь к каталогу\n            FileType: \"json\", //Тип файлов\n            LifeTime: 3, //Время хранения файлов в каталоге\n            LifeTimeMonthFlag: true //true - время хранения в месяцах, false - в днях\n        },\n        ArchiveOKFolder: { -//- }, //Каталог удачно отправленных в MES файлов\n        ArchiveBadFolder: { -//- }, //Каталог ошибочных файлов\n        SAPLogsFolder: { -//- }, //Архив запросов от SAP\n        MESLogsFolder: { -//- } //Архив запросов в MES\n    },\n    MESAPI: //Объект с запросами в MES, используемыми в телеграмме с отправкой через API\n    {\n        CreateDelivery: //Объект запроса в MES, имя которого соответствует тому, которое будет использоваться в файлах запросов от SAP\n        {\n            Name: \"Create Delivery\", //Название запроса\n            Title: \"Создание поставок в MES\", //Название запроса на русском для электронного письма\n            HTTPS: false, //false - HTTP, true - HTTPS\n            Server: \"10.70.6.61\", //Адрес сервера\n            Port: 1881, //Порт\n            Method: \"POST\", //Метод запроса GET, PUT, POST\n            URL: \"http://localhost:1880/api/delivery\", //Адрес Api\n            TimeoutSec: 120 //Таймаут отправки в секундах больше или равный 60\n        }\n    },\n    MESDBTable: //Объект с таблицами, используемыми в телеграмме с прямой записью в таблицу\n    {\n        CreateDelivery:  //Объект с параметрами таблицы, имя которого соответствует тому, которое будет использоваться при обращении к глобальному контексту\n        {}               //Хранит ссылку на объект глобального контекста настроек таблиц global.get(\"DBTable\")\n    }\n}\n*/\nvar FilesFolder = \"C:\\\\MESSync\\\\Materials\\\\TransferToProduction\\\\\"; //Каталог хранения кучи файлов\nvar ArchiveOKFolder = FilesFolder + \"ArchiveOK\\\\\"; //Каталог хранения успешно отправленных файлов\nvar ArchiveBadFolder = FilesFolder + \"ArchiveBad\\\\\"; //Каталог хранения файлов с ошибкой в структуре\nvar SAPLogsFolder = FilesFolder + \"SAPLogs\\\\\"; //Каталог хранения файлов логов запросов и ответов SAP\nvar MESLogsFolder = FilesFolder + \"MESLogs\\\\\"; //Каталог хранения файлов логов отправки данных в MES\n\nvar MESURL = \"http://10.70.6.61:52448/api/operation/\";\nvar MESDBTable = global.get(\"DBTable\")?.[\"Batch\"];\n\nmsg.Telegram =\n{\n    Number: \"15\",\n    Name: \"Material Transfer to Production\",\n    Title: \"Перемещение сырья и материалов в производство\",\n    FilePrefix: \"ToProd\",\n    UseGetToken: true,\n    UseGetServiceUser: true,\n    Folder:\n    {\n        FilesFolder: { Name: \"Files Folder\", Title: \"Каталог временного хранения\", Path: FilesFolder, FileType: \"json\", LifeTime: 3, LifeTimeMonthFlag: true },\n        ArchiveOKFolder: { Name: \"Archive OK\", Title: \"Каталог удачно отправленных в MES файлов\", Path: ArchiveOKFolder, FileType: \"json\", LifeTime: 3, LifeTimeMonthFlag: true },\n        ArchiveBadFolder: { Name: \"Archive Bad\", Title: \"Каталог ошибочных файлов\", Path: ArchiveBadFolder, FileType: \"json\", LifeTime: 3, LifeTimeMonthFlag: true },\n        SAPLogsFolder: { Name: \"SAP Logs\", Title: \"Архив запросов от SAP\", Path: SAPLogsFolder, FileType: \"log\", LifeTime: 3, LifeTimeMonthFlag: true },\n        MESLogsFolder: { Name: \"MES Logs\", Title: \"Архив запросов в MES\", Path: MESLogsFolder, FileType: \"log\", LifeTime: 3, LifeTimeMonthFlag: true }\n    },\n    MESAPI:\n    {\n        CompleteBatch: { Name: \"CompleteBatch\", Title: \"Завершение партии\", Method: \"PUT\", URL: MESURL + \"completebatch\", TimeoutSec: 120 },\n        ManualBulkIntake: { Name: \"ManualBulkIntake\", Title: \"Ручной приём партии\", Method: \"PUT\", URL: MESURL + \"manualbulkintake\", TimeoutSec: 120 },\n    },\n    MESDBTable:\n    {\n        Batch: MESDBTable\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 440,
        "wires": [
            [
                "b42189316d6e237a"
            ]
        ]
    },
    {
        "id": "08e3cf7b9ea29923",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Telegram 13 Finished Product Delivery",
        "func": "/*Все телеграммы сохраняются в объект глобального контекста \"Telegram\" в виде вложенных объектов с именем, соответствующим номеру телеграммы (global.get(\"Telegram\")[\"17\"])\n{\n    Number: \"17\", //Номер телеграммы\n    Name: \"Deliveries Supplies\", //Название телеграммы\n    Title: \"Приём материалов от внешнего поставщика\", //Название телеграммы на русском для электронного письма\n    FilePrefix: \"Delivery\", //Префикс имён файлов\n    UseGetToken: true, //true - Для отправки данных в MES требуется получение токена, false - не требуется\n    UseGetServiceUser: true, //true - Для отправки данных в MES требуется получение сервисного пользователя, false - не требуется\n    Folder: //Объект с каталогами, используемыми в телеграмме, название которых жёстко фиксировано\n    {\n        FilesFolder: //Каталог временного хранения\n        {\n            Name: \"Files Folder\", //Название каталога\n            Title: \"Каталог временного хранения\", //Название каталога на русском для электронного письма\n            Path: FilesFolder, //Полный путь к каталогу\n            FileType: \"json\", //Тип файлов\n            LifeTime: 3, //Время хранения файлов в каталоге\n            LifeTimeMonthFlag: true //true - время хранения в месяцах, false - в днях\n        },\n        ArchiveOKFolder: { -//- }, //Каталог удачно отправленных в MES файлов\n        ArchiveBadFolder: { -//- }, //Каталог ошибочных файлов\n        SAPLogsFolder: { -//- }, //Архив запросов от SAP\n        MESLogsFolder: { -//- } //Архив запросов в MES\n    },\n    MESAPI: //Объект с запросами в MES, используемыми в телеграмме с отправкой через API\n    {\n        CreateDelivery: //Объект запроса в MES, имя которого соответствует тому, которое будет использоваться в файлах запросов от SAP\n        {\n            Name: \"Create Delivery\", //Название запроса\n            Title: \"Создание поставок в MES\", //Название запроса на русском для электронного письма\n            Method: \"POST\", //Метод запроса GET, PUT, POST\n            URL: \"http://localhost:1880/api/delivery\", //Адрес Api\n            TimeoutSec: 120 //Таймаут отправки в секундах больше или равный 60\n        }\n    },\n    MESDBTable: //Объект с таблицами, используемыми в телеграмме с прямой записью в таблицу\n    {\n        CreateDelivery:  //Объект с параметрами таблицы, имя которого соответствует тому, которое будет использоваться при обращении к глобальному контексту\n        {}               //Хранит ссылку на объект глобального контекста настроек таблиц global.get(\"DBTable\")\n    }\n}\n*/\nvar FilesFolder = \"C:\\\\MESSync\\\\Production\\\\FinishedProduct\\\\\"; //Каталог хранения кучи файлов\nvar ArchiveOKFolder = FilesFolder + \"ArchiveOK\\\\\"; //Каталог хранения успешно отправленных файлов\nvar ArchiveBadFolder = FilesFolder + \"ArchiveBad\\\\\"; //Каталог хранения файлов с ошибкой в структуре\nvar SAPLogsFolder = FilesFolder + \"SAPLogs\\\\\"; //Каталог хранения файлов логов запросов и ответов SAP\nvar MESLogsFolder = FilesFolder + \"MESLogs\\\\\"; //Каталог хранения файлов логов отправки данных в MES\nvar SAPRepiteFolder = FilesFolder + \"SAPRepite\\\\\"; //Каталог для повтора запросов SAP\n\nvar MESURL = \"http://10.70.6.61:52448/api/operation/\";\n\nvar ProcessSpecificationDBTable = global.get(\"DBTable\")?.[\"ProcessSpecification\"];\nvar ProcessDBTable = global.get(\"DBTable\")?.[\"Process\"];\nvar OperationDBTable = global.get(\"DBTable\")?.[\"Operation\"];\nvar OperationConsumeStorageLocationDBTable = global.get(\"DBTable\")?.[\"OperationConsumeStorageLocation\"];\nvar StorageLocationDBTable = global.get(\"DBTable\")?.[\"StorageLocation\"];\nvar BatchDBTable = global.get(\"DBTable\")?.[\"Batch\"];\nvar MaterialDBTable = global.get(\"DBTable\")?.[\"Material\"];\n\nmsg.Telegram =\n{\n    Number: \"13\",\n    Name: \"Finished Product Delivery\",\n    Title: \"Приём готового продукта и полуфабриката из производства\",\n    FilePrefix: \"FinishedProduct\",\n    UseGetToken: true,\n    UseGetServiceUser: true,\n    Folder:\n    {\n        FilesFolder: { Name: \"Files Folder\", Title: \"Каталог временного хранения\", Path: FilesFolder, FileType: \"json\", LifeTime: 3, LifeTimeMonthFlag: true },\n        ArchiveOKFolder: { Name: \"Archive OK\", Title: \"Каталог удачно отправленных в MES файлов\", Path: ArchiveOKFolder, FileType: \"json\", LifeTime: 3, LifeTimeMonthFlag: true },\n        ArchiveBadFolder: { Name: \"Archive Bad\", Title: \"Каталог ошибочных файлов\", Path: ArchiveBadFolder, FileType: \"json\", LifeTime: 3, LifeTimeMonthFlag: true },\n        SAPLogsFolder: { Name: \"SAP Logs\", Title: \"Архив запросов от SAP\", Path: SAPLogsFolder, FileType: \"log\", LifeTime: 3, LifeTimeMonthFlag: true },\n        MESLogsFolder: { Name: \"MES Logs\", Title: \"Архив запросов в MES\", Path: MESLogsFolder, FileType: \"log\", LifeTime: 3, LifeTimeMonthFlag: true },\n        SAPRepiteFolder: { Name: \"SAP Repite\", Title: \"Архив для повторной отправки запросов в SAP\", Path: SAPRepiteFolder, FileType: \"log\", LifeTime: 3, LifeTimeMonthFlag: true }\n    },\n    MESAPI:\n    {\n        Outtake: { Name: \"Outtake\", Title: \"Расход потребляемых материалов\", Method: \"PUT\", URL: MESURL + \"outtakebymaterial\", TimeoutSec: 120 },\n        Intake: { Name: \"Intake\", Title: \"Приход в партию\", Method: \"PUT\", URL: MESURL + \"intake\", TimeoutSec: 120 },\n        Create: { Name: \"Create\", Title: \"Создание партии\", Method: \"PUT\", URL: MESURL + \"create\", TimeoutSec: 120 },\n        SetBatchParameters: { Name: \"Set Batch Parameters\", Title: \"Изменение параметров партии\", Method: \"PUT\", URL: MESURL + \"setbatchparameters\", TimeoutSec: 120 }\n    },\n    MESDBTable:\n    {\n        ProcessSpecification: ProcessSpecificationDBTable,\n        Process: ProcessDBTable,\n        Operation: OperationDBTable,\n        OperationConsumeStorageLocation: OperationConsumeStorageLocationDBTable,\n        StorageLocation: StorageLocationDBTable,\n        Batch: BatchDBTable,\n        Material: MaterialDBTable\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 360,
        "wires": [
            [
                "04f274fb97a87c3f"
            ]
        ]
    },
    {
        "id": "19fe6684eb807e19",
        "type": "function",
        "z": "170b6645847ae20d",
        "name": "Telegram 14 Finished Product Reversal",
        "func": "/*Все телеграммы сохраняются в объект глобального контекста \"Telegram\" в виде вложенных объектов с именем, соответствующим номеру телеграммы (global.get(\"Telegram\")[\"17\"])\n{\n    Number: \"17\", //Номер телеграммы\n    Name: \"Deliveries Supplies\", //Название телеграммы\n    Title: \"Приём материалов от внешнего поставщика\", //Название телеграммы на русском для электронного письма\n    FilePrefix: \"Delivery\", //Префикс имён файлов\n    UseGetToken: true, //true - Для отправки данных в MES требуется получение токена, false - не требуется\n    UseGetServiceUser: true, //true - Для отправки данных в MES требуется получение сервисного пользователя, false - не требуется\n    Folder: //Объект с каталогами, используемыми в телеграмме, название которых жёстко фиксировано\n    {\n        FilesFolder: //Каталог временного хранения\n        {\n            Name: \"Files Folder\", //Название каталога\n            Title: \"Каталог временного хранения\", //Название каталога на русском для электронного письма\n            Path: FilesFolder, //Полный путь к каталогу\n            FileType: \"json\", //Тип файлов\n            LifeTime: 3, //Время хранения файлов в каталоге\n            LifeTimeMonthFlag: true //true - время хранения в месяцах, false - в днях\n        },\n        ArchiveOKFolder: { -//- }, //Каталог удачно отправленных в MES файлов\n        ArchiveBadFolder: { -//- }, //Каталог ошибочных файлов\n        SAPLogsFolder: { -//- }, //Архив запросов от SAP\n        MESLogsFolder: { -//- } //Архив запросов в MES\n    },\n    MESAPI: //Объект с запросами в MES, используемыми в телеграмме с отправкой через API\n    {\n        CreateDelivery: //Объект запроса в MES, имя которого соответствует тому, которое будет использоваться в файлах запросов от SAP\n        {\n            Name: \"Create Delivery\", //Название запроса\n            Title: \"Создание поставок в MES\", //Название запроса на русском для электронного письма\n            Method: \"POST\", //Метод запроса GET, PUT, POST\n            URL: \"http://localhost:1880/api/delivery\", //Адрес Api\n            TimeoutSec: 120 //Таймаут отправки в секундах больше или равный 60\n        }\n    },\n    MESDBTable: //Объект с таблицами, используемыми в телеграмме с прямой записью в таблицу\n    {\n        CreateDelivery:  //Объект с параметрами таблицы, имя которого соответствует тому, которое будет использоваться при обращении к глобальному контексту\n        {}               //Хранит ссылку на объект глобального контекста настроек таблиц global.get(\"DBTable\")\n    }\n}\n*/\nvar FilesFolder = \"C:\\\\MESSync\\\\Production\\\\ReversalProduct\\\\\"; //Каталог хранения кучи файлов\nvar ArchiveOKFolder = FilesFolder + \"ArchiveOK\\\\\"; //Каталог хранения успешно отправленных файлов\nvar ArchiveBadFolder = FilesFolder + \"ArchiveBad\\\\\"; //Каталог хранения файлов с ошибкой в структуре\nvar SAPLogsFolder = FilesFolder + \"SAPLogs\\\\\"; //Каталог хранения файлов логов запросов и ответов SAP\nvar MESLogsFolder = FilesFolder + \"MESLogs\\\\\"; //Каталог хранения файлов логов отправки данных в MES\n\nvar MESURL = \"http://10.70.6.61:52448/api/operation/\";\n\nvar ProcessSpecificationDBTable = global.get(\"DBTable\")?.[\"ProcessSpecification\"];\nvar ProcessDBTable = global.get(\"DBTable\")?.[\"Process\"];\nvar OperationDBTable = global.get(\"DBTable\")?.[\"Operation\"];\nvar OperationConsumeStorageLocationDBTable = global.get(\"DBTable\")?.[\"OperationConsumeStorageLocation\"];\nvar StorageLocationDBTable = global.get(\"DBTable\")?.[\"StorageLocation\"];\nvar BatchDBTable = global.get(\"DBTable\")?.[\"Batch\"];\nvar MaterialDBTable = global.get(\"DBTable\")?.[\"Material\"];\n\nmsg.Telegram =\n{\n    Number: \"14\",\n    Name: \"Finished Product Reversal\",\n    Title: \"Сторнирование приемки готового продукта и полуфабриката из производства\",\n    FilePrefix: \"ReversalProduct\",\n    UseGetToken: true,\n    UseGetServiceUser: true,\n    Folder:\n    {\n        FilesFolder: { Name: \"Files Folder\", Title: \"Каталог временного хранения\", Path: FilesFolder, FileType: \"json\", LifeTime: 3, LifeTimeMonthFlag: true },\n        ArchiveOKFolder: { Name: \"Archive OK\", Title: \"Каталог удачно отправленных в MES файлов\", Path: ArchiveOKFolder, FileType: \"json\", LifeTime: 3, LifeTimeMonthFlag: true },\n        ArchiveBadFolder: { Name: \"Archive Bad\", Title: \"Каталог ошибочных файлов\", Path: ArchiveBadFolder, FileType: \"json\", LifeTime: 3, LifeTimeMonthFlag: true },\n        SAPLogsFolder: { Name: \"SAP Logs\", Title: \"Архив запросов от SAP\", Path: SAPLogsFolder, FileType: \"log\", LifeTime: 3, LifeTimeMonthFlag: true },\n        MESLogsFolder: { Name: \"MES Logs\", Title: \"Архив запросов в MES\", Path: MESLogsFolder, FileType: \"log\", LifeTime: 3, LifeTimeMonthFlag: true }\n    },\n    MESAPI:\n    {\n        ReverseBatch: { Name: \"ReverseBatch\", Title: \"Сторнирование приемки готового продукта и полуфабриката из производства\", Method: \"PUT\", URL: MESURL + \"ReverseBatch\", TimeoutSec: 120 }\n    },\n    MESDBTable: {}\n    //{\n    //    ProcessSpecification: ProcessSpecificationDBTable,\n    //    Process: ProcessDBTable,\n    //    Operation: OperationDBTable,\n    //    OperationConsumeStorageLocation: OperationConsumeStorageLocationDBTable,\n    //    StorageLocation: StorageLocationDBTable,\n    //    Batch: BatchDBTable,\n    //    Material: MaterialDBTable\n   // }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 400,
        "wires": [
            [
                "b42189316d6e237a"
            ]
        ]
    },
    {
        "id": "dddcd0705b5e7366",
        "type": "debug",
        "z": "170b6645847ae20d",
        "name": "debug 199",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 760,
        "wires": []
    },
    {
        "id": "f0245df142b5be2a",
        "type": "MSSQL",
        "z": "170b6645847ae20d",
        "mssqlCN": "7e5114f542cff14f",
        "name": "Database Connection Settings",
        "outField": "",
        "returnType": 0,
        "throwErrors": "0",
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 570,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "7ed877338b170e53",
        "type": "e-mail",
        "z": "170b6645847ae20d",
        "server": "hl-smtp.hochland.com",
        "port": "25",
        "authtype": "NONE",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": false,
        "tls": false,
        "name": "",
        "dname": "Send E-Mail",
        "x": 510,
        "y": 820,
        "wires": []
    },
    {
        "id": "57de02d45762c620",
        "type": "http in",
        "z": "bdcac5c6aa044a98",
        "name": "SAP Telegram 17 Create Request",
        "url": "/api/materials/receiptfromsupplier/create",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 1260,
        "wires": [
            [
                "b177de7ef353842c"
            ]
        ]
    },
    {
        "id": "e52d9e84c0bca8c9",
        "type": "http response",
        "z": "bdcac5c6aa044a98",
        "name": "SAP Telegram 17 Save Response",
        "statusCode": "",
        "headers": {},
        "x": 980,
        "y": 1260,
        "wires": []
    },
    {
        "id": "b177de7ef353842c",
        "type": "change",
        "z": "bdcac5c6aa044a98",
        "name": "Copy Payload",
        "rules": [
            {
                "t": "set",
                "p": "SAPRequest.Data",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 1260,
        "wires": [
            [
                "779286dc6a85347d",
                "ae41aa792258f840"
            ]
        ]
    },
    {
        "id": "779286dc6a85347d",
        "type": "debug",
        "z": "bdcac5c6aa044a98",
        "name": "Debug SAP Telegram 17 Save",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1220,
        "wires": []
    },
    {
        "id": "90e895680b27fe9a",
        "type": "comment",
        "z": "bdcac5c6aa044a98",
        "name": "Телеграмма 19 План выпуска готовой продукции",
        "info": "",
        "x": 250,
        "y": 1480,
        "wires": []
    },
    {
        "id": "24ac589b907a217b",
        "type": "comment",
        "z": "bdcac5c6aa044a98",
        "name": "Телеграмма 17 Приём материалов от внешнего поставщика",
        "info": "",
        "x": 290,
        "y": 1220,
        "wires": []
    },
    {
        "id": "ae41aa792258f840",
        "type": "subflow:addf8ba3468e2efd",
        "z": "bdcac5c6aa044a98",
        "name": "",
        "x": 690,
        "y": 1260,
        "wires": [
            [
                "779286dc6a85347d",
                "e52d9e84c0bca8c9",
                "8460e2dd4b0a7d03",
                "036ad92c10cd342c"
            ],
            [
                "8b231de7e2c7722e"
            ]
        ]
    },
    {
        "id": "5a17f0ee981bc157",
        "type": "http in",
        "z": "bdcac5c6aa044a98",
        "name": "SAP Telegram 19 Create Request",
        "url": "/api/task/planning/create",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 1640,
        "wires": [
            [
                "4f141f08fe44ccbd"
            ]
        ]
    },
    {
        "id": "70f2ad99a7b3d812",
        "type": "http in",
        "z": "bdcac5c6aa044a98",
        "name": "SAP Telegram 19 Update Request",
        "url": "/api/task/planning/update",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 1740,
        "wires": [
            [
                "4f141f08fe44ccbd"
            ]
        ]
    },
    {
        "id": "4f141f08fe44ccbd",
        "type": "change",
        "z": "bdcac5c6aa044a98",
        "name": "Copy Payload",
        "rules": [
            {
                "t": "set",
                "p": "SAPRequest.Data",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 1640,
        "wires": [
            [
                "cd1403eb8eec2396",
                "d91d63fbd31e7b8a"
            ]
        ]
    },
    {
        "id": "4e9fddf6e8d5815c",
        "type": "http response",
        "z": "bdcac5c6aa044a98",
        "name": "SAP Telegram 19 Save Response",
        "statusCode": "",
        "headers": {},
        "x": 1000,
        "y": 1640,
        "wires": []
    },
    {
        "id": "cd1403eb8eec2396",
        "type": "debug",
        "z": "bdcac5c6aa044a98",
        "name": "Debug SAP Telegram 19 Save",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1600,
        "wires": []
    },
    {
        "id": "d91d63fbd31e7b8a",
        "type": "subflow:7f6a1556900e92ac",
        "z": "bdcac5c6aa044a98",
        "name": "",
        "x": 710,
        "y": 1640,
        "wires": [
            [
                "4e9fddf6e8d5815c",
                "cd1403eb8eec2396",
                "afaa50b13ecf2b57",
                "01be0fcc0488f6a3"
            ],
            [
                "33591ccd2023cf44"
            ]
        ]
    },
    {
        "id": "dcc78f4bb8b097eb",
        "type": "http in",
        "z": "bdcac5c6aa044a98",
        "name": "SAP Telegram 19 List Request",
        "url": "/api/task/planning/list",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1520,
        "wires": [
            [
                "d4382d4a8c698a59"
            ]
        ]
    },
    {
        "id": "d4382d4a8c698a59",
        "type": "change",
        "z": "bdcac5c6aa044a98",
        "name": "Copy Payload",
        "rules": [
            {
                "t": "set",
                "p": "SAPRequest.Data",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 1520,
        "wires": [
            [
                "eadb7ab3839ab932",
                "622a8c68fb1a484b"
            ]
        ]
    },
    {
        "id": "eadb7ab3839ab932",
        "type": "subflow:87d42e36227889f6",
        "z": "bdcac5c6aa044a98",
        "name": "",
        "x": 670,
        "y": 1520,
        "wires": [
            [
                "18fe02af6ac78418",
                "622a8c68fb1a484b"
            ],
            [
                "b70bcf29e291857e"
            ]
        ]
    },
    {
        "id": "18fe02af6ac78418",
        "type": "http response",
        "z": "bdcac5c6aa044a98",
        "name": "SAP Telegram 19 List Response",
        "statusCode": "",
        "headers": {},
        "x": 950,
        "y": 1520,
        "wires": []
    },
    {
        "id": "76493f4440a0a75d",
        "type": "catch",
        "z": "bdcac5c6aa044a98",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 120,
        "y": 2200,
        "wires": [
            [
                "53394668892916c8"
            ]
        ]
    },
    {
        "id": "39275a918fa8630a",
        "type": "debug",
        "z": "bdcac5c6aa044a98",
        "name": "Debug Save Catch Data",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 2200,
        "wires": []
    },
    {
        "id": "53394668892916c8",
        "type": "subflow:f8fc59a8d3d93ef9",
        "z": "bdcac5c6aa044a98",
        "name": "",
        "x": 330,
        "y": 2200,
        "wires": [
            [
                "39275a918fa8630a"
            ]
        ]
    },
    {
        "id": "2c6a69a545c31022",
        "type": "comment",
        "z": "bdcac5c6aa044a98",
        "name": "Обработчик исключений потока и отправка ошибок в файлы логирования",
        "info": "",
        "x": 330,
        "y": 2120,
        "wires": []
    },
    {
        "id": "1364ff32e17fac76",
        "type": "function",
        "z": "bdcac5c6aa044a98",
        "name": "Save Request Response Data",
        "func": "node.status({ fill: \"yellow\", shape: \"dot\", text: \"Processing\" });\nvar fs = global.get(\"fsextra\");\nvar SAPLogsFolder = msg.Telegram?.Folder?.SAPLogsFolder?.Path; //Каталог хранения файлов логов с запросами и ответами\nvar FilePrefix = msg.Telegram?.FilePrefix + \"_SAP\"; //Суффикс файлов запроса и ответа (без нижнего подчёркивания)\nvar FileType = msg.Telegram?.Folder?.SAPLogsFolder?.FileType; //Тип файла\nvar SaveDataStringify = undefined; //Объект запроса и ответа, преобразованный в строку\nvar FileName = undefined; //Имя файла лога\nvar FileNameFull = undefined; //Полное имя файла лога\nvar ErrorCount = 0; //Количество полученных ошибок\nvar StartDateTime = new Date(); //Дата и время начала создания файлов (должны приходить из предыдущего блока)\nif (msg.StartDateTime) StartDateTime = msg.StartDateTime;\nvar StartDateTimeString = \"\";\nvar StartDateTimeString_log = StartDateTime.getFullYear()\n    + ('0' + (StartDateTime.getMonth() + 1)).slice(-2)\n    + ('0' + StartDateTime.getDate()).slice(-2) + \"_\"\n    + ('0' + StartDateTime.getHours()).slice(-2)\n    + ('0' + StartDateTime.getMinutes()).slice(-2)\n    + ('0' + StartDateTime.getSeconds()).slice(-2);\nmsg.StartDateTime = StartDateTime;\nif (msg.StartDateTimeString) StartDateTimeString = msg.StartDateTimeString;\nelse\n{\n    StartDateTimeString = StartDateTime.getFullYear()\n        + ('0' + (StartDateTime.getMonth() + 1)).slice(-2)\n        + ('0' + StartDateTime.getDate()).slice(-2);\n}\nmsg.EmailData = undefined; //Структура для отправки письма с ошибками\n\n//Шаблон сообщения об ошибке\nmsg.error =\n{\n    source:\n    {\n        id: env.get(\"NR_NODE_ID\"),\n        type: undefined,\n        name: env.get(\"NR_NODE_NAME\"),\n        count: 1\n    },\n    message: undefined\n};\n\n//Проверка каталога хранения файлов логов с запросами и ответами\nif (SAPLogsFolder && (SAPLogsFolder != \"\") && FileType && (FileType != \"\"))\n{\n    if (fs.pathExistsSync(SAPLogsFolder))\n    {\n        var SaveData =\n        {\n            Date: StartDateTimeString_log,\n            Request: msg.SAPRequest?.Data,\n            ResponseStatusCode: msg.statusCode,\n            Response: msg.Response\n        };\n        SaveDataStringify = JSON.stringify(SaveData, null, \"\\t\");\n        FileName = FilePrefix + \"_\" + StartDateTimeString + \".\" + FileType;\n        FileNameFull = SAPLogsFolder + FileName;\n        //Запись данных в файл\n        try\n        {\n            fs.appendFile(FileNameFull, SaveDataStringify);\n            node.status({ fill: \"green\", shape: \"dot\", text: \"File '\" + FileName + \"' created\" });\n        }\n        catch (ex)\n        {\n            msg.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Request Response File Error\";\n            msg.error.message = \"File '\" + FileName + \"' could not be created (\" + ex + \")\";\n            ErrorCount = ErrorCount + 1;\n            node.send([null, msg]);\n            node.status({ fill: \"red\", shape: \"dot\", text: msg.error.message });\n        }\n    }\n    else\n    {\n        msg.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Folder Error\";\n        msg.error.message = \"Directory '\" + SAPLogsFolder + \"' does not exist\";\n        ErrorCount = ErrorCount + 1;\n        node.send([null, msg]);\n        node.status({ fill: \"red\", shape: \"dot\", text: msg.error.message });\n    }\n}\nelse\n{\n    msg.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings\";\n    msg.error.message = \"Telegram \" + msg.TelegramNumber + \" Settings are not specified\";\n    ErrorCount = ErrorCount + 1;\n    node.send([null, msg]);\n    node.status({ fill: \"red\", shape: \"dot\", text: msg.error.message });\n}\n\nif ((ErrorCount > 0) || (!msg.Response?.IsSuccess))\n{\n    msg.EmailData =\n    {\n        LogFileName: FileNameFull,\n        LogFileMessages: msg.Response?.Messages,\n        LogFileErrorMessage: msg.error.message\n    };\n}\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1900,
        "wires": [
            [
                "4e617bc29b6bf2ba",
                "5639a97c15024c76"
            ],
            [
                "fd8c871e4a9da2c7"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "4e617bc29b6bf2ba",
        "type": "function",
        "z": "bdcac5c6aa044a98",
        "name": "Check and Prepare EMail",
        "func": "if (msg.EmailData)\n{\n  msg.StartDateTime = new Date(); //Дата и время начала создания письма\n  //Тема письма\n  msg.topic = \"Ошибки при получении телеграммы из SAP (\" + msg.StartDateTime.toLocaleString() + \")\";\n  //Отправитель письма\n  //msg.from = \"MESNotificationService@hochland.com\";\n  //Получатель письма\n  //msg.to = \"pavel.zotov@solisoft.group\";\n  //Содержимое письма\n  var EmailText = \"<!DOCTYPE html><html>\";\n  var HaveText = false;\n  //Стили оформления\n  EmailText = EmailText + \"<head></head>\";\n  //Тело письма\n  EmailText = EmailText + \"<body>Здравствуйте.<br>\";\n  EmailText = EmailText + \"На данный момент (\" + msg.StartDateTime.toLocaleString() + \") возникли проблемы при получении телеграммы из SAP.<br><br>\";\n  //Название телеграммы\n  if (msg.Telegram) EmailText = EmailText + \"Телеграмма: <b>\" + msg.Telegram?.Number + \". \" + msg.Telegram?.Name + \"</b> (\" + msg.Telegram?.Number + \". \" + msg.Telegram?.Title + \")<br>\";\n  else EmailText = EmailText + \"<b><font color=\\\"red\\\">НЕИЗВЕСТНАЯ ТЕЛЕГРАММА</font></b><br>\";\n  //Ошибка при создании файла лога запроса SAP\n  if (msg.EmailData.LogFileErrorMessage)\n  {\n    EmailText = EmailText + \"Ошибки, связанные с формированием файла логирования (<b><font color=\\\"red\\\">файл не был создан</font></b>):<br>\";\n    EmailText = EmailText + msg.EmailData.LogFileErrorMessage.replaceAll(\"\\n\", \"<br>\") + \"<br><br>\";\n    HaveText = true;\n  }\n  //Ошибки при обработке запроса от SAP\n  if (msg.EmailData.LogFileMessages && (msg.EmailData.LogFileMessages?.length > 0) && (((msg.statusCode != 400) && ((msg.Telegram?.Number == 10) || (msg.Telegram?.Number == 13))) || ((msg.Telegram?.Number != 10) && (msg.Telegram?.Number != 13))))\n  {\n    EmailText = EmailText + \"Ошибки, связанные с обработкой запроса от SAP:<br>\";\n    if ((!msg.EmailData.LogFileErrorMessage) && msg.EmailData.LogFileName) EmailText = EmailText + \"Лог сохранён в файл: <b>\" + msg.EmailData.LogFileName + \"</b><br>\";\n    else EmailText = EmailText + \"<b><font color=\\\"red\\\">Лог не сохранён в файл</font></b><br>\";\n    EmailText = EmailText + \"Код состояния ответа: <b>\" + msg.statusCode?.toString() + \"</b><br>\";\n    EmailText = EmailText + \"Список сообщений в ответе SAP:<br>\";\n    for (let i = 0; i < msg.EmailData.LogFileMessages.length; i++)\n    {\n      EmailText = EmailText + (i + 1).toString() + \". \" + msg.EmailData.LogFileMessages[i].replaceAll(\"\\n\", \"<br>\") + \"<br>\";\n    }\n    EmailText = EmailText + \"<br>\";\n    HaveText = true;\n  }\n  EmailText = EmailText + \"</body></html>\";\n  msg.EmailText = EmailText;\n  msg.headers = undefined;\n  \n  if (HaveText) return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1900,
        "wires": [
            [
                "f8381dfbfd458813"
            ]
        ]
    },
    {
        "id": "5639a97c15024c76",
        "type": "debug",
        "z": "bdcac5c6aa044a98",
        "name": "Debug SAP Telegram Save Log",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1860,
        "wires": []
    },
    {
        "id": "81b4c9346a93534a",
        "type": "comment",
        "z": "bdcac5c6aa044a98",
        "name": "Сохранение запроса от SAP в лог",
        "info": "",
        "x": 200,
        "y": 1860,
        "wires": []
    },
    {
        "id": "afaa50b13ecf2b57",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Save SAP Telegram 19 Log",
        "mode": "link",
        "links": [
            "c3b39756e88de97e"
        ],
        "x": 935,
        "y": 1700,
        "wires": []
    },
    {
        "id": "c3b39756e88de97e",
        "type": "link in",
        "z": "bdcac5c6aa044a98",
        "name": "Save SAP Telegram Log",
        "links": [
            "8460e2dd4b0a7d03",
            "afaa50b13ecf2b57",
            "bdba0e7d71558e16",
            "89d31be1e36b8ad5",
            "9e5a77d3fef683dd",
            "3028c7e97f494d65"
        ],
        "x": 85,
        "y": 1900,
        "wires": [
            [
                "1364ff32e17fac76"
            ]
        ]
    },
    {
        "id": "8460e2dd4b0a7d03",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Save SAP Telegram 17 Log",
        "mode": "link",
        "links": [
            "c3b39756e88de97e"
        ],
        "x": 915,
        "y": 1320,
        "wires": []
    },
    {
        "id": "716b435a7b50c14e",
        "type": "link in",
        "z": "bdcac5c6aa044a98",
        "name": "Telegrams Catch Error Data",
        "links": [
            "33591ccd2023cf44",
            "8b231de7e2c7722e",
            "b70bcf29e291857e",
            "fd8c871e4a9da2c7",
            "b4145b2bc77f4c0f",
            "fc8f0c5a073bc320",
            "215de329e09d827e",
            "d5e1270efa8edaeb",
            "27ae93de8c92c3d9"
        ],
        "x": 165,
        "y": 2160,
        "wires": [
            [
                "53394668892916c8"
            ]
        ]
    },
    {
        "id": "8b231de7e2c7722e",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Catch Error Telegram 17",
        "mode": "link",
        "links": [
            "716b435a7b50c14e"
        ],
        "x": 915,
        "y": 1420,
        "wires": []
    },
    {
        "id": "33591ccd2023cf44",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Catch Error Telegram 19",
        "mode": "link",
        "links": [
            "716b435a7b50c14e"
        ],
        "x": 935,
        "y": 1800,
        "wires": []
    },
    {
        "id": "b70bcf29e291857e",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Catch Error Telegram 19 Get",
        "mode": "link",
        "links": [
            "716b435a7b50c14e"
        ],
        "x": 835,
        "y": 1560,
        "wires": []
    },
    {
        "id": "fd8c871e4a9da2c7",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Catch Error Telegram Log",
        "mode": "link",
        "links": [
            "716b435a7b50c14e"
        ],
        "x": 495,
        "y": 1940,
        "wires": []
    },
    {
        "id": "6652c5b0edf82be8",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "Reset IsBusy",
        "props": [
            {
                "p": "ResetIsBusy",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 710,
        "y": 1320,
        "wires": [
            [
                "036ad92c10cd342c"
            ]
        ]
    },
    {
        "id": "44c4a5b86f405269",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 17 - 5 min",
        "props": [
            {
                "p": "TelegramNumber",
                "v": "17",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 420,
        "y": 1360,
        "wires": [
            [
                "58e66b04d5b42b2d"
            ]
        ]
    },
    {
        "id": "58e66b04d5b42b2d",
        "type": "function",
        "z": "bdcac5c6aa044a98",
        "name": "Get Telegram Settings",
        "func": "node.status({ fill: \"yellow\", shape: \"dot\", text: \"Processing\" });\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\n\nmsg.Telegram = undefined;\nvar Telegrams = global.get(\"Telegram\");\nvar DataValid = false;\nif (Telegrams\n    && (typeof Telegrams?.DataValidGenerateByName == \"function\")\n    && (typeof Telegrams?.DataValidGenerateByObject == \"function\")\n    && (typeof Telegrams?.DataValidCheck == \"function\")\n)\n{\n    msg.Telegram = Telegrams[msg.TelegramNumber];\n    if (msg.Telegram)\n    {\n        DataValid = Telegrams.DataValidCheck(msg.TelegramNumber);\n        if (!DataValid)\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings\";\n            ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" has Invalid Data\";\n        }\n    }\n    else\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings\";\n        ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" Settings is not Сonfigured\";\n    }\n}\nelse\n{\n    ErrorData.error.source.type = \"Telegram Settings\";\n    ErrorData.error.message = \"Global Telegram Settings is not Сonfigured\";\n}\n\nvar ProcessingState = \"Processing Completed\";\nif (ErrorData.error.message) ProcessingState = \"Error: \" + ErrorData.error.message;\nvar ProcessingColour = ((DataValid) ? \"green\" : \"red\");\nnode.status({ fill: ProcessingColour, shape: \"dot\", text: ProcessingState });\n\nif (msg.Telegram) return [msg, null];\nelse return [null, ErrorData];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1360,
        "wires": [
            [
                "036ad92c10cd342c"
            ],
            [
                "8b231de7e2c7722e"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "8b5927865c30d970",
        "type": "debug",
        "z": "bdcac5c6aa044a98",
        "name": "Debug Telegram 17 Send to MES",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 1320,
        "wires": []
    },
    {
        "id": "622a8c68fb1a484b",
        "type": "debug",
        "z": "bdcac5c6aa044a98",
        "name": "Debug SAP Telegram 19 Get",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 1480,
        "wires": []
    },
    {
        "id": "cc777b8ccb94293d",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "Reset IsBusy",
        "props": [
            {
                "p": "ResetIsBusy",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 730,
        "y": 1700,
        "wires": [
            [
                "01be0fcc0488f6a3"
            ]
        ]
    },
    {
        "id": "ee54bd731da92104",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 19 - 5 min",
        "props": [
            {
                "p": "TelegramNumber",
                "v": "19",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 440,
        "y": 1780,
        "wires": [
            [
                "40778695cf5d4865"
            ]
        ]
    },
    {
        "id": "40778695cf5d4865",
        "type": "function",
        "z": "bdcac5c6aa044a98",
        "name": "Get Telegram Settings",
        "func": "node.status({ fill: \"yellow\", shape: \"dot\", text: \"Processing\" });\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\n\nmsg.Telegram = undefined;\nvar Telegrams = global.get(\"Telegram\");\nvar DataValid = false;\nif (Telegrams\n    && (typeof Telegrams?.DataValidGenerateByName == \"function\")\n    && (typeof Telegrams?.DataValidGenerateByObject == \"function\")\n    && (typeof Telegrams?.DataValidCheck == \"function\")\n)\n{\n    msg.Telegram = Telegrams[msg.TelegramNumber];\n    if (msg.Telegram)\n    {\n        DataValid = Telegrams.DataValidCheck(msg.TelegramNumber);\n        if (!DataValid)\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings\";\n            ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" has Invalid Data\";\n        }\n    }\n    else\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings\";\n        ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" Settings is not Сonfigured\";\n    }\n}\nelse\n{\n    ErrorData.error.source.type = \"Telegram Settings\";\n    ErrorData.error.message = \"Global Telegram Settings is not Сonfigured\";\n}\n\nvar ProcessingState = \"Processing Completed\";\nif (ErrorData.error.message) ProcessingState = \"Error: \" + ErrorData.error.message;\nvar ProcessingColour = ((DataValid) ? \"green\" : \"red\");\nnode.status({ fill: ProcessingColour, shape: \"dot\", text: ProcessingState });\n\nif (msg.Telegram) return [msg, null];\nelse return [null, ErrorData];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1780,
        "wires": [
            [
                "01be0fcc0488f6a3"
            ],
            [
                "33591ccd2023cf44"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "e472fbf7bbf7c0f8",
        "type": "debug",
        "z": "bdcac5c6aa044a98",
        "name": "Debug Telegram 19 Send to MES",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 1700,
        "wires": []
    },
    {
        "id": "f0ac2e091598cb49",
        "type": "function",
        "z": "bdcac5c6aa044a98",
        "name": "Check and Prepare EMail",
        "func": "if (msg.ErrorCount > 0)\n{\n  msg.StartDateTime = new Date(); //Дата и время начала создания письма\n  //Тема письма\n  msg.topic = \"Ошибки при отправке телеграммы в MES (\" + msg.StartDateTime.toLocaleString() + \")\";\n  //Отправитель письма\n  //msg.from = \"MESNotificationService@hochland.com\";\n  //Получатель письма\n  //msg.to = \"pavel.zotov@solisoft.group\";\n  //Содержимое письма\n  var EmailText = \"<!DOCTYPE html><html>\";\n  //Стили оформления\n  EmailText = EmailText + \"<head></head>\";\n  //Тело письма\n  EmailText = EmailText + \"<body>Здравствуйте.<br>\";\n  EmailText = EmailText + \"На данный момент (\" + msg.StartDateTime.toLocaleString() + \") возникли проблемы при отправке телеграммы в MES.<br><br>\";\n  //Название телеграммы\n  if (msg.Telegram) EmailText = EmailText + \"Телеграмма: <b>\" + msg.Telegram?.Number + \". \" + msg.Telegram?.Name + \"</b> (\" + msg.Telegram?.Number + \". \" + msg.Telegram?.Title + \")<br>\";\n  else EmailText = EmailText + \"<b><font color=\\\"red\\\">НЕИЗВЕСТНАЯ ТЕЛЕГРАММА</font></b><br>\";\n  //Ошибки при подготовке файлов\n  if (msg.Errors.PrepareFilesData.length > 0)\n  {\n    EmailText = EmailText + \"<b><u>Подготовка файлов</u></b><br>\";\n    for (let i = 0; i < msg.Errors.PrepareFilesData.length; i++)\n    {\n      EmailText = EmailText + (i + 1).toString() + \". \" + msg.Errors.PrepareFilesData[i].replaceAll(\"\\n\", \"<br>\") + \"<br>\";\n    }\n    EmailText = EmailText + \"<br>\";\n  }\n  //Ошибки при получении токена\n  if (msg.Errors.GetToken.length > 0)\n  {\n    EmailText = EmailText + \"<b><u>Получение токена</u></b><br>\";\n    for (let i = 0; i < msg.Errors.GetToken.length; i++)\n    {\n      EmailText = EmailText + (i + 1).toString() + \". \" + msg.Errors.GetToken[i].replaceAll(\"\\n\", \"<br>\") + \"<br>\";\n    }\n    EmailText = EmailText + \"<br>\";\n  }\n  //Ошибки при получении сервисного пользователя\n  if (msg.Errors.GetServiceUser.length > 0)\n  {\n    EmailText = EmailText + \"<b><u>Получение сервисного пользователя</u></b><br>\";\n    for (let i = 0; i < msg.Errors.GetServiceUser.length; i++)\n    {\n      EmailText = EmailText + (i + 1).toString() + \". \" + msg.Errors.GetServiceUser[i].replaceAll(\"\\n\", \"<br>\") + \"<br>\";\n    }\n    EmailText = EmailText + \"<br>\";\n  }\n  //Ошибки при обработке файлов\n  if (msg.Errors.FileProcessing.length > 0)\n  {\n    EmailText = EmailText + \"<b><u>Обработка файлов</u></b><br>\";\n    EmailText = EmailText + \"Временный каталог: <b>\" + msg.FilesFolder + \"</b><br>\";\n    EmailText = EmailText + \"Каталог ошибочных файлов: <b>\" + msg.ArchiveBadFolder + \"</b><br>\";\n    EmailText = EmailText + \"Каталог успешно отправленных файлов: <b>\" + msg.ArchiveOKFolder + \"</b><br>\";\n    EmailText = EmailText + \"<br>\";\n    for (let i = 0; i < msg.Errors.FileProcessing.length; i++)\n    {\n      EmailText = EmailText + \"Файл: <b>\" + msg.Errors.FileProcessing[i].FileName + \"</b><br>\";\n\n      EmailText = EmailText + \"Конечный каталог: <b>\";\n      if (msg.Errors.FileProcessing[i].OKFile || msg.Errors.FileProcessing[i].BadFile)\n      {\n        if (msg.Errors.FileProcessing[i].Finish) EmailText = EmailText + \"<font color=\\\"red\\\">(ОШИБКА ПЕРЕМЕЩЕНИЯ)</font> \";\n        if (msg.Errors.FileProcessing[i].OKFile) EmailText = EmailText + \"Перемещён в каталог успешно отправленных файлов\";\n        else EmailText = EmailText + \"<font color=\\\"red\\\">Перемещён в каталог ошибочных файлов</font>\";\n      }\n      else EmailText = EmailText + \"Оставлен во временном каталоге\";\n      EmailText = EmailText + \"</b><br>\";\n\n      EmailText = EmailText + \"Подготовка файла: <b>\";\n      if (msg.Errors.FileProcessing[i].Prepare) EmailText = EmailText + \"<font color=\\\"red\\\">\" + msg.Errors.FileProcessing[i].Prepare.replaceAll(\"\\n\", \"<br>\") + \"</font>\";\n      else EmailText = EmailText + \"Нет ошибок\";\n      EmailText = EmailText + \"</b><br>\";\n\n      EmailText = EmailText + \"Отправка файла: <b>\";\n      if (msg.Errors.FileProcessing[i].Send) EmailText = EmailText + \"<font color=\\\"red\\\">\" + msg.Errors.FileProcessing[i].Send.replaceAll(\"\\n\", \"<br>\") + \"</font>\";\n      else EmailText = EmailText + \"Нет ошибок\";\n      EmailText = EmailText + \"</b><br>\";\n\n      EmailText = EmailText + \"Перемещение файла в конечный каталог: <b>\";\n      if (msg.Errors.FileProcessing[i].Finish) EmailText = EmailText + \"<font color=\\\"red\\\">\" + msg.Errors.FileProcessing[i].Finish.replaceAll(\"\\n\", \"<br>\") + \"</font>\";\n      else EmailText = EmailText + \"Нет ошибок\";\n      EmailText = EmailText + \"</b><br>\";\n      EmailText = EmailText + \"<br>\";\n    }\n    EmailText = EmailText + \"<br>\";\n  }\n  EmailText = EmailText + \"</body></html>\";\n  msg.EmailText = EmailText;\n  msg.headers = undefined;\n  \n  return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2040,
        "wires": [
            [
                "b79f3157138e481f",
                "4aa2d1eafa8c0496"
            ]
        ]
    },
    {
        "id": "2fca44d335eed3a3",
        "type": "comment",
        "z": "bdcac5c6aa044a98",
        "name": "Отправка E-Mail со списком ошибок отправки телеграммы в MES",
        "info": "",
        "x": 300,
        "y": 2000,
        "wires": []
    },
    {
        "id": "bc1cafd2925a228c",
        "type": "link in",
        "z": "bdcac5c6aa044a98",
        "name": "Send to MES Error E-Mail",
        "links": [
            "9fdd4545fa4ea1f7",
            "b7fe2b37ebf273df",
            "cf060c2f0ab26b35",
            "f85760a682117b6a",
            "c286bed73a90c298",
            "bab505c3cc594bec"
        ],
        "x": 85,
        "y": 2040,
        "wires": [
            [
                "f0ac2e091598cb49"
            ]
        ]
    },
    {
        "id": "cf060c2f0ab26b35",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 17 Send to MES Error E-Mail",
        "mode": "link",
        "links": [
            "bc1cafd2925a228c"
        ],
        "x": 1275,
        "y": 1360,
        "wires": []
    },
    {
        "id": "b7fe2b37ebf273df",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 19 Send to MES Error E-Mail",
        "mode": "link",
        "links": [
            "bc1cafd2925a228c"
        ],
        "x": 1295,
        "y": 1740,
        "wires": []
    },
    {
        "id": "f8381dfbfd458813",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Send E-Mail",
        "mode": "link",
        "links": [
            "29b91a1089f5807c"
        ],
        "x": 775,
        "y": 1900,
        "wires": []
    },
    {
        "id": "b79f3157138e481f",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Send E-Mail",
        "mode": "link",
        "links": [
            "29b91a1089f5807c"
        ],
        "x": 455,
        "y": 2040,
        "wires": []
    },
    {
        "id": "1634ad1130d944fb",
        "type": "change",
        "z": "bdcac5c6aa044a98",
        "name": "Copy Payload",
        "rules": [
            {
                "t": "set",
                "p": "SAPRequest.Data",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 200,
        "wires": [
            [
                "74ae875e4711b850",
                "0a87177b38ca7385"
            ]
        ]
    },
    {
        "id": "471d5fd7d5fa2ce1",
        "type": "comment",
        "z": "bdcac5c6aa044a98",
        "name": "Телеграмма 10 Производительность фасовочной линии в привязке к выпускаемому продукту",
        "info": "",
        "x": 390,
        "y": 40,
        "wires": []
    },
    {
        "id": "9db5af9687a2382a",
        "type": "http response",
        "z": "bdcac5c6aa044a98",
        "name": "SAP Telegram 10 Save Response",
        "statusCode": "",
        "headers": {},
        "x": 1000,
        "y": 200,
        "wires": []
    },
    {
        "id": "0a87177b38ca7385",
        "type": "debug",
        "z": "bdcac5c6aa044a98",
        "name": "Debug SAP Telegram 10 Save",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 160,
        "wires": []
    },
    {
        "id": "ad2ac4a7c049d4cb",
        "type": "http in",
        "z": "bdcac5c6aa044a98",
        "name": "SAP Telegram 10 Create Request",
        "url": "/api/dictionary/efficiency/create",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 200,
        "wires": [
            [
                "1634ad1130d944fb"
            ]
        ]
    },
    {
        "id": "26afa5d27fee9770",
        "type": "http in",
        "z": "bdcac5c6aa044a98",
        "name": "SAP Telegram 10 Update Request",
        "url": "/api/dictionary/efficiency/update",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 260,
        "wires": [
            [
                "1634ad1130d944fb"
            ]
        ]
    },
    {
        "id": "74ae875e4711b850",
        "type": "subflow:a5012ab9e1074fde",
        "z": "bdcac5c6aa044a98",
        "name": "",
        "x": 710,
        "y": 200,
        "wires": [
            [
                "9db5af9687a2382a",
                "0a87177b38ca7385",
                "bdba0e7d71558e16",
                "97cefa620fffa989"
            ],
            [
                "b4145b2bc77f4c0f"
            ]
        ]
    },
    {
        "id": "bdba0e7d71558e16",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Save SAP Telegram 10 Log",
        "mode": "link",
        "links": [
            "c3b39756e88de97e"
        ],
        "x": 935,
        "y": 260,
        "wires": []
    },
    {
        "id": "6ded92883e8a7fbe",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "Reset IsBusy",
        "props": [
            {
                "p": "ResetIsBusy",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 730,
        "y": 260,
        "wires": [
            [
                "97cefa620fffa989"
            ]
        ]
    },
    {
        "id": "45b12f707decc587",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 10 - 5 min",
        "props": [
            {
                "p": "TelegramNumber",
                "v": "10",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 440,
        "y": 300,
        "wires": [
            [
                "129f06ce5a45ce47"
            ]
        ]
    },
    {
        "id": "129f06ce5a45ce47",
        "type": "function",
        "z": "bdcac5c6aa044a98",
        "name": "Get Telegram Settings",
        "func": "node.status({ fill: \"yellow\", shape: \"dot\", text: \"Processing\" });\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\n\nmsg.Telegram = undefined;\nvar Telegrams = global.get(\"Telegram\");\nvar DataValid = false;\nif (Telegrams\n    && (typeof Telegrams?.DataValidGenerateByName == \"function\")\n    && (typeof Telegrams?.DataValidGenerateByObject == \"function\")\n    && (typeof Telegrams?.DataValidCheck == \"function\")\n)\n{\n    msg.Telegram = Telegrams[msg.TelegramNumber];\n    if (msg.Telegram)\n    {\n        DataValid = Telegrams.DataValidCheck(msg.TelegramNumber);\n        if (!DataValid)\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings\";\n            ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" has Invalid Data\";\n        }\n    }\n    else\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings\";\n        ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" Settings is not Сonfigured\";\n    }\n}\nelse\n{\n    ErrorData.error.source.type = \"Telegram Settings\";\n    ErrorData.error.message = \"Global Telegram Settings is not Сonfigured\";\n}\n\nvar ProcessingState = \"Processing Completed\";\nif (ErrorData.error.message) ProcessingState = \"Error: \" + ErrorData.error.message;\nvar ProcessingColour = ((DataValid) ? \"green\" : \"red\");\nnode.status({ fill: ProcessingColour, shape: \"dot\", text: ProcessingState });\n\nif (msg.Telegram) return [msg, null];\nelse return [null, ErrorData];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 300,
        "wires": [
            [
                "97cefa620fffa989"
            ],
            [
                "b4145b2bc77f4c0f"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "b4145b2bc77f4c0f",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Catch Error Telegram 10",
        "mode": "link",
        "links": [
            "716b435a7b50c14e"
        ],
        "x": 935,
        "y": 360,
        "wires": []
    },
    {
        "id": "f85760a682117b6a",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 10 Send to MES Error E-Mail",
        "mode": "link",
        "links": [
            "bc1cafd2925a228c"
        ],
        "x": 1295,
        "y": 300,
        "wires": []
    },
    {
        "id": "e7789d9f0a69dc7a",
        "type": "debug",
        "z": "bdcac5c6aa044a98",
        "name": "Debug Telegram 10 Send to MES",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 260,
        "wires": []
    },
    {
        "id": "3e062939275f0c7e",
        "type": "http in",
        "z": "bdcac5c6aa044a98",
        "name": "SAP Telegram 10 List Request",
        "url": "/api/dictionary/efficiency/list",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "83b81c33d79f225c"
            ]
        ]
    },
    {
        "id": "83b81c33d79f225c",
        "type": "change",
        "z": "bdcac5c6aa044a98",
        "name": "Copy Payload",
        "rules": [
            {
                "t": "set",
                "p": "SAPRequest.Data",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 80,
        "wires": [
            [
                "307cfd81c9b75f2b",
                "a3788ab04c7049af"
            ]
        ]
    },
    {
        "id": "c52a09f7268323cf",
        "type": "http response",
        "z": "bdcac5c6aa044a98",
        "name": "SAP Telegram 10 List Response",
        "statusCode": "",
        "headers": {},
        "x": 950,
        "y": 80,
        "wires": []
    },
    {
        "id": "a3788ab04c7049af",
        "type": "subflow:dc9e44bd90b8f5e8",
        "z": "bdcac5c6aa044a98",
        "name": "",
        "x": 660,
        "y": 80,
        "wires": [
            [
                "c52a09f7268323cf",
                "307cfd81c9b75f2b"
            ],
            [
                "fc8f0c5a073bc320"
            ]
        ]
    },
    {
        "id": "307cfd81c9b75f2b",
        "type": "debug",
        "z": "bdcac5c6aa044a98",
        "name": "Debug SAP Telegram 10 Get",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 40,
        "wires": []
    },
    {
        "id": "fc8f0c5a073bc320",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Catch Error Telegram 10 Get",
        "mode": "link",
        "links": [
            "716b435a7b50c14e"
        ],
        "x": 835,
        "y": 120,
        "wires": []
    },
    {
        "id": "97cefa620fffa989",
        "type": "subflow:af3d54f9caaa27a3",
        "z": "bdcac5c6aa044a98",
        "name": "",
        "x": 1070,
        "y": 300,
        "wires": [
            [
                "e7789d9f0a69dc7a",
                "f85760a682117b6a"
            ],
            [
                "b4145b2bc77f4c0f"
            ]
        ]
    },
    {
        "id": "036ad92c10cd342c",
        "type": "subflow:af3d54f9caaa27a3",
        "z": "bdcac5c6aa044a98",
        "name": "",
        "x": 1050,
        "y": 1360,
        "wires": [
            [
                "8b5927865c30d970",
                "cf060c2f0ab26b35"
            ],
            [
                "8b231de7e2c7722e"
            ]
        ]
    },
    {
        "id": "01be0fcc0488f6a3",
        "type": "subflow:af3d54f9caaa27a3",
        "z": "bdcac5c6aa044a98",
        "name": "",
        "x": 1070,
        "y": 1740,
        "wires": [
            [
                "e472fbf7bbf7c0f8",
                "b7fe2b37ebf273df"
            ],
            [
                "33591ccd2023cf44"
            ]
        ]
    },
    {
        "id": "ed30f912f7610e5b",
        "type": "comment",
        "z": "bdcac5c6aa044a98",
        "name": "Телеграмма 15 Перемещение сырья и материалов в производство",
        "info": "",
        "x": 310,
        "y": 960,
        "wires": []
    },
    {
        "id": "fc62a712448c9623",
        "type": "http in",
        "z": "bdcac5c6aa044a98",
        "name": "SAP Telegram 15 Create Request",
        "url": "/api/materials/movementtoproduction/create",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 1000,
        "wires": [
            [
                "8e534ba65ab20662"
            ]
        ]
    },
    {
        "id": "0cabf4f577eb5b6c",
        "type": "http response",
        "z": "bdcac5c6aa044a98",
        "name": "SAP Telegram 15 Save Response",
        "statusCode": "",
        "headers": {},
        "x": 980,
        "y": 1000,
        "wires": []
    },
    {
        "id": "8e534ba65ab20662",
        "type": "change",
        "z": "bdcac5c6aa044a98",
        "name": "Copy Payload",
        "rules": [
            {
                "t": "set",
                "p": "SAPRequest.Data",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 1000,
        "wires": [
            [
                "cbdef15825082ff4"
            ]
        ]
    },
    {
        "id": "89d31be1e36b8ad5",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Save SAP Telegram 15 Log",
        "mode": "link",
        "links": [
            "c3b39756e88de97e"
        ],
        "x": 915,
        "y": 1060,
        "wires": []
    },
    {
        "id": "215de329e09d827e",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Catch Error Telegram 15",
        "mode": "link",
        "links": [
            "716b435a7b50c14e"
        ],
        "x": 915,
        "y": 1160,
        "wires": []
    },
    {
        "id": "13dc80be6f365ebb",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "Reset IsBusy",
        "props": [
            {
                "p": "ResetIsBusy",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 710,
        "y": 1060,
        "wires": [
            [
                "37a110993cb50832"
            ]
        ]
    },
    {
        "id": "ae0e740d8b089675",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 15 - 5 min",
        "props": [
            {
                "p": "TelegramNumber",
                "v": "15",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 420,
        "y": 1100,
        "wires": [
            [
                "135dabf9585d35ff"
            ]
        ]
    },
    {
        "id": "135dabf9585d35ff",
        "type": "function",
        "z": "bdcac5c6aa044a98",
        "name": "Get Telegram Settings",
        "func": "node.status({ fill: \"yellow\", shape: \"dot\", text: \"Processing\" });\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\n\nmsg.Telegram = undefined;\nvar Telegrams = global.get(\"Telegram\");\nvar DataValid = false;\nif (Telegrams\n    && (typeof Telegrams?.DataValidGenerateByName == \"function\")\n    && (typeof Telegrams?.DataValidGenerateByObject == \"function\")\n    && (typeof Telegrams?.DataValidCheck == \"function\")\n)\n{\n    msg.Telegram = Telegrams[msg.TelegramNumber];\n    if (msg.Telegram)\n    {\n        DataValid = Telegrams.DataValidCheck(msg.TelegramNumber);\n        if (!DataValid)\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings\";\n            ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" has Invalid Data\";\n        }\n    }\n    else\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings\";\n        ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" Settings is not Сonfigured\";\n    }\n}\nelse\n{\n    ErrorData.error.source.type = \"Telegram Settings\";\n    ErrorData.error.message = \"Global Telegram Settings is not Сonfigured\";\n}\n\nvar ProcessingState = \"Processing Completed\";\nif (ErrorData.error.message) ProcessingState = \"Error: \" + ErrorData.error.message;\nvar ProcessingColour = ((DataValid) ? \"green\" : \"red\");\nnode.status({ fill: ProcessingColour, shape: \"dot\", text: ProcessingState });\n\nif (msg.Telegram) return [msg, null];\nelse return [null, ErrorData];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1100,
        "wires": [
            [
                "37a110993cb50832"
            ],
            [
                "215de329e09d827e"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "b4909f010a2052b3",
        "type": "debug",
        "z": "bdcac5c6aa044a98",
        "name": "Debug Telegram 15 Send to MES",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 1060,
        "wires": []
    },
    {
        "id": "9fdd4545fa4ea1f7",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 15 Send to MES Error E-Mail",
        "mode": "link",
        "links": [
            "bc1cafd2925a228c"
        ],
        "x": 1195,
        "y": 1100,
        "wires": []
    },
    {
        "id": "68b9216796a4c9cc",
        "type": "debug",
        "z": "bdcac5c6aa044a98",
        "name": "Debug SAP Telegram 15 Save",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 960,
        "wires": []
    },
    {
        "id": "cbdef15825082ff4",
        "type": "subflow:4e2c42794684d256",
        "z": "bdcac5c6aa044a98",
        "name": "",
        "x": 690,
        "y": 1000,
        "wires": [
            [
                "0cabf4f577eb5b6c",
                "68b9216796a4c9cc",
                "89d31be1e36b8ad5",
                "37a110993cb50832"
            ],
            [
                "215de329e09d827e"
            ]
        ]
    },
    {
        "id": "37a110993cb50832",
        "type": "subflow:b09434461726d60e",
        "z": "bdcac5c6aa044a98",
        "name": "",
        "x": 1010,
        "y": 1100,
        "wires": [
            [
                "9fdd4545fa4ea1f7",
                "b4909f010a2052b3"
            ],
            [
                "215de329e09d827e"
            ]
        ]
    },
    {
        "id": "414b019a9a922b49",
        "type": "comment",
        "z": "bdcac5c6aa044a98",
        "name": "Телеграмма 13 Приём готового продукта и полуфабриката из производства",
        "info": "",
        "x": 340,
        "y": 360,
        "wires": []
    },
    {
        "id": "448ac174e4a75afa",
        "type": "http in",
        "z": "bdcac5c6aa044a98",
        "name": "SAP Telegram 13 Create Request",
        "url": "/api/materials/production/create",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 460,
        "wires": [
            [
                "ec81a7ca410ff767"
            ]
        ]
    },
    {
        "id": "42a77b098bda4a81",
        "type": "http response",
        "z": "bdcac5c6aa044a98",
        "name": "SAP Telegram 13 Save Response",
        "statusCode": "",
        "headers": {},
        "x": 980,
        "y": 460,
        "wires": []
    },
    {
        "id": "ec81a7ca410ff767",
        "type": "change",
        "z": "bdcac5c6aa044a98",
        "name": "Copy Payload",
        "rules": [
            {
                "t": "set",
                "p": "SAPRequest.Data",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 460,
        "wires": [
            [
                "7353b3361e27234f",
                "a7c882af0d9563b4"
            ]
        ]
    },
    {
        "id": "90d4f1b5f903d6fe",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "Reset IsBusy",
        "props": [
            {
                "p": "ResetIsBusy",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 710,
        "y": 520,
        "wires": [
            [
                "51d5de82376dfcec"
            ]
        ]
    },
    {
        "id": "809766d022df7b77",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 13 - 5 min",
        "props": [
            {
                "p": "TelegramNumber",
                "v": "13",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 420,
        "y": 560,
        "wires": [
            [
                "7a1efc71e0c7d5f6"
            ]
        ]
    },
    {
        "id": "7a1efc71e0c7d5f6",
        "type": "function",
        "z": "bdcac5c6aa044a98",
        "name": "Get Telegram Settings",
        "func": "node.status({ fill: \"yellow\", shape: \"dot\", text: \"Processing\" });\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\n\nmsg.Telegram = undefined;\nvar Telegrams = global.get(\"Telegram\");\nvar DataValid = false;\nif (Telegrams\n    && (typeof Telegrams?.DataValidGenerateByName == \"function\")\n    && (typeof Telegrams?.DataValidGenerateByObject == \"function\")\n    && (typeof Telegrams?.DataValidCheck == \"function\")\n)\n{\n    msg.Telegram = Telegrams[msg.TelegramNumber];\n    if (msg.Telegram)\n    {\n        DataValid = Telegrams.DataValidCheck(msg.TelegramNumber);\n        if (!DataValid)\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings\";\n            ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" has Invalid Data\";\n        }\n    }\n    else\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings\";\n        ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" Settings is not Сonfigured\";\n    }\n}\nelse\n{\n    ErrorData.error.source.type = \"Telegram Settings\";\n    ErrorData.error.message = \"Global Telegram Settings is not Сonfigured\";\n}\n\nvar ProcessingState = \"Processing Completed\";\nif (ErrorData.error.message) ProcessingState = \"Error: \" + ErrorData.error.message;\nvar ProcessingColour = ((DataValid) ? \"green\" : \"red\");\nnode.status({ fill: ProcessingColour, shape: \"dot\", text: ProcessingState });\n\nif (msg.Telegram) return [msg, null];\nelse return [null, ErrorData];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 560,
        "wires": [
            [
                "51d5de82376dfcec"
            ],
            [
                "d5e1270efa8edaeb"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "64f5524246281c64",
        "type": "debug",
        "z": "bdcac5c6aa044a98",
        "name": "Debug Telegram 13 Send to MES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 520,
        "wires": []
    },
    {
        "id": "7353b3361e27234f",
        "type": "debug",
        "z": "bdcac5c6aa044a98",
        "name": "Debug SAP Telegram 13 Save",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 420,
        "wires": []
    },
    {
        "id": "a7c882af0d9563b4",
        "type": "subflow:a9425dc4a51ddbde",
        "z": "bdcac5c6aa044a98",
        "name": "",
        "x": 690,
        "y": 460,
        "wires": [
            [
                "699e1b86f3f9b51b",
                "7353b3361e27234f",
                "42a77b098bda4a81",
                "9e5a77d3fef683dd",
                "51d5de82376dfcec"
            ],
            [
                "d5e1270efa8edaeb"
            ]
        ]
    },
    {
        "id": "9e5a77d3fef683dd",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Save SAP Telegram 13 Log",
        "mode": "link",
        "links": [
            "c3b39756e88de97e"
        ],
        "x": 915,
        "y": 520,
        "wires": []
    },
    {
        "id": "d5e1270efa8edaeb",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Catch Error Telegram 13",
        "mode": "link",
        "links": [
            "716b435a7b50c14e"
        ],
        "x": 915,
        "y": 620,
        "wires": []
    },
    {
        "id": "c286bed73a90c298",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 13 Send to MES Error E-Mail",
        "mode": "link",
        "links": [
            "bc1cafd2925a228c"
        ],
        "x": 1195,
        "y": 560,
        "wires": []
    },
    {
        "id": "51d5de82376dfcec",
        "type": "subflow:2fcbd622bb75a545",
        "z": "bdcac5c6aa044a98",
        "name": "",
        "x": 1010,
        "y": 560,
        "wires": [
            [
                "64f5524246281c64",
                "c286bed73a90c298"
            ],
            [
                "d5e1270efa8edaeb"
            ]
        ]
    },
    {
        "id": "f8b4e892a40c0c20",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 13 - test",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 500,
        "wires": [
            [
                "ed74eec4f9009348"
            ]
        ]
    },
    {
        "id": "ed74eec4f9009348",
        "type": "function",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 13 set payload",
        "func": "msg.req = {};\nmsg.req.url = \"create\";\nmsg.req.method = \"post\";\nmsg.payload = {\n    \"plantid\": \"1950\",\n    \"warehouseid\": \"4000\",\n    \"lineid\": \"P2752\",\n    \"version\": \"FS15\",\n    \"amountshiftb\": 10,\n    \"pallets\": [\n        {\n            \"materialid\": \"795705\",\n            \"batchid\": \"9341178600\", \n            \"proddate\": \"2024-12-10\",\n            \"expdate\": \"2024-12-11\",\n            \"amount\": 10,\n            \"unit\": \"КГ\",\n            \"batchsupplier\": \"0924/24\",\n            \"sscc\": \"346070048987479844\",\n            \"ssccComment\": \"0924/24\"\n        }\n    ]\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 500,
        "wires": [
            [
                "ec81a7ca410ff767"
            ]
        ]
    },
    {
        "id": "344d678749bc09ca",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 15 - test",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1040,
        "wires": [
            [
                "6ea691221628e088"
            ]
        ]
    },
    {
        "id": "6ea691221628e088",
        "type": "function",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 15 set payload",
        "func": " msg.payload = {\n  \"plantid\": \"1900\",\n  \"outwarehouseid\": \"1000\",\n  \"inbwarehouseid\": \"3000\",\n  \"pallets\": [\n    {\n      \"materialid\": \"28005\",\n      \"batchid\": \"9332591300\",\n      \"proddate\": \"2025-04-19\",\n      \"expdate\": \"2025-06-19\",\n      \"amount\": 416.92,\n      \"unit\": \"РљР“\",\n      \"sscc\": \"346070048983282350\",\n      \"ssccComment\": \"OK/025/040\"\n    },\n    {\n      \"materialid\": \"RE796996\",\n      \"batchid\": \"9332591300\",\n      \"proddate\": \"2025-04-19\",\n      \"expdate\": \"2025-06-19\",\n      \"amount\": 467.605,\n      \"unit\": \"РљР“\",\n      \"sscc\": \"346070048983282350\",\n      \"ssccComment\": \"OK/025/034\"\n    },\n    {\n      \"materialid\": \"30067\",\n      \"batchid\": \"9332591300\",\n      \"proddate\": \"2025-04-19\",\n      \"expdate\": \"2025-06-19\",\n      \"amount\": 800,\n      \"unit\": \"РљР“\",\n      \"sscc\": \"346070048983282350\",\n      \"ssccComment\": \"3008/Р РЈРЎ16\"\n    },\n    {\n      \"materialid\": \"28005\",\n      \"batchid\": \"9332591300\",\n      \"proddate\": \"2025-04-19\",\n      \"expdate\": \"2025-06-19\",\n      \"amount\": 160,\n      \"unit\": \"РљР“\",\n      \"sscc\": \"346070048983282350\",\n      \"ssccComment\": \"0509/Р РЈРЎ16\"\n    },\n    {\n      \"materialid\": \"RE796996\",\n      \"batchid\": \"9332591300\",\n      \"proddate\": \"2025-04-19\",\n      \"expdate\": \"2025-06-19\",\n      \"amount\": 700,\n      \"unit\": \"РљР“\",\n      \"sscc\": \"346070048983282350\",\n      \"ssccComment\": \"2508/Р РЈРЎ18\"\n    }\n  ]\n}\n\nreturn msg;\n\n//     {\n//     \"plantid\": \"1900\",\n//     \"outwarehouseid\": \"1010\",\n//     \"inbwarehouseid\": \"3010\",\n//     \"pallets\": [\n//         {\n//             \"materialid\": \"30067\",\n//             \"batchid\": \"93327803\",\n//             \"proddate\": \"2023-10-06\",\n//             \"expdate\": \"2025-10-06\",\n//             \"amount\": 3.64,\n//             \"unit\": \"КГ\",\n//             \"sscc\": \"346070048985381460\",\n//             \"ssccComment\": \"0610/РАО14\"\n//         },\n//         {\n//             \"materialid\": \"30067\",\n//             \"batchid\": \"93334101\",\n//             \"proddate\": \"2023-10-06\",\n//             \"expdate\": \"2025-10-06\",\n//             \"amount\": 75,\n//             \"unit\": \"КГ\",\n//             \"sscc\": \"346070048985381460\",\n//             \"ssccComment\": \"0610/РАО14\"\n//         }\n//     ]\n// }\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1040,
        "wires": [
            [
                "8e534ba65ab20662"
            ]
        ]
    },
    {
        "id": "49ed032cf39f01f3",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 19 - test",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1680,
        "wires": [
            [
                "a6a931761aef6fa5"
            ]
        ]
    },
    {
        "id": "a6a931761aef6fa5",
        "type": "function",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 19 set payload",
        "func": "msg.payload = \"\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1680,
        "wires": [
            [
                "4f141f08fe44ccbd"
            ]
        ]
    },
    {
        "id": "64275991174b5d7d",
        "type": "comment",
        "z": "bdcac5c6aa044a98",
        "name": "Телеграмма 14 Сторнирование приемки готового продукта и полуфабриката из производства",
        "info": "",
        "x": 390,
        "y": 700,
        "wires": []
    },
    {
        "id": "e5435441adb2d8db",
        "type": "http in",
        "z": "bdcac5c6aa044a98",
        "name": "SAP Telegram 14 Create Request",
        "url": "/api/materials/reversal/create",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 740,
        "wires": [
            [
                "712c07423c81f8e3"
            ]
        ]
    },
    {
        "id": "37d2a63bfdcba68e",
        "type": "http response",
        "z": "bdcac5c6aa044a98",
        "name": "SAP Telegram 14 Save Response",
        "statusCode": "",
        "headers": {},
        "x": 980,
        "y": 740,
        "wires": []
    },
    {
        "id": "712c07423c81f8e3",
        "type": "change",
        "z": "bdcac5c6aa044a98",
        "name": "Copy Payload",
        "rules": [
            {
                "t": "set",
                "p": "SAPRequest.Data",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 740,
        "wires": [
            [
                "96b9998f37f7ac83",
                "45f04a98eb5eaf55"
            ]
        ]
    },
    {
        "id": "e7678e82a96e339b",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "Reset IsBusy",
        "props": [
            {
                "p": "ResetIsBusy",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 710,
        "y": 800,
        "wires": [
            [
                "a422eb93f8dce51a"
            ]
        ]
    },
    {
        "id": "907eeea3cc559cf0",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 14 - 5 min",
        "props": [
            {
                "p": "TelegramNumber",
                "v": "14",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 420,
        "y": 840,
        "wires": [
            [
                "bc5df1a23ad4df9d"
            ]
        ]
    },
    {
        "id": "bc5df1a23ad4df9d",
        "type": "function",
        "z": "bdcac5c6aa044a98",
        "name": "Get Telegram Settings",
        "func": "node.status({ fill: \"yellow\", shape: \"dot\", text: \"Processing\" });\n//Шаблон сообщения об ошибке\nvar ErrorData =\n{\n    error:\n    {\n        source:\n        {\n            id: env.get(\"NR_NODE_ID\"),\n            type: undefined,\n            name: env.get(\"NR_NODE_NAME\"),\n            count: 1\n        },\n        message: undefined\n    }\n};\n\nmsg.Telegram = undefined;\nvar Telegrams = global.get(\"Telegram\");\nvar DataValid = false;\nif (Telegrams\n    && (typeof Telegrams?.DataValidGenerateByName == \"function\")\n    && (typeof Telegrams?.DataValidGenerateByObject == \"function\")\n    && (typeof Telegrams?.DataValidCheck == \"function\")\n)\n{\n    msg.Telegram = Telegrams[msg.TelegramNumber];\n    if (msg.Telegram)\n    {\n        DataValid = Telegrams.DataValidCheck(msg.TelegramNumber);\n        if (!DataValid)\n        {\n            ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings\";\n            ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" has Invalid Data\";\n        }\n    }\n    else\n    {\n        ErrorData.error.source.type = \"Telegram \" + msg.TelegramNumber + \" Settings\";\n        ErrorData.error.message = \"Telegram \" + msg.TelegramNumber + \" Settings is not Сonfigured\";\n    }\n}\nelse\n{\n    ErrorData.error.source.type = \"Telegram Settings\";\n    ErrorData.error.message = \"Global Telegram Settings is not Сonfigured\";\n}\n\nvar ProcessingState = \"Processing Completed\";\nif (ErrorData.error.message) ProcessingState = \"Error: \" + ErrorData.error.message;\nvar ProcessingColour = ((DataValid) ? \"green\" : \"red\");\nnode.status({ fill: ProcessingColour, shape: \"dot\", text: ProcessingState });\n\nif (msg.Telegram) return [msg, null];\nelse return [null, ErrorData];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 840,
        "wires": [
            [
                "a422eb93f8dce51a"
            ],
            [
                "27ae93de8c92c3d9"
            ]
        ],
        "outputLabels": [
            "",
            "Error"
        ]
    },
    {
        "id": "10fc4f645243feff",
        "type": "debug",
        "z": "bdcac5c6aa044a98",
        "name": "Debug Telegram 14 Send to MES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 800,
        "wires": []
    },
    {
        "id": "96b9998f37f7ac83",
        "type": "debug",
        "z": "bdcac5c6aa044a98",
        "name": "Debug SAP Telegram 14 Save",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 700,
        "wires": []
    },
    {
        "id": "3028c7e97f494d65",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Save SAP Telegram 13 Log",
        "mode": "link",
        "links": [
            "c3b39756e88de97e"
        ],
        "x": 915,
        "y": 800,
        "wires": []
    },
    {
        "id": "27ae93de8c92c3d9",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Catch Error Telegram 13",
        "mode": "link",
        "links": [
            "716b435a7b50c14e"
        ],
        "x": 915,
        "y": 900,
        "wires": []
    },
    {
        "id": "bab505c3cc594bec",
        "type": "link out",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 13 Send to MES Error E-Mail",
        "mode": "link",
        "links": [
            "bc1cafd2925a228c"
        ],
        "x": 1275,
        "y": 840,
        "wires": []
    },
    {
        "id": "6e995566214beb4e",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 14 - test",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 780,
        "wires": [
            [
                "da20341049e22fc2"
            ]
        ]
    },
    {
        "id": "da20341049e22fc2",
        "type": "function",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 14 set payload",
        "func": "msg.req = {};\nmsg.req.url = \"create\";\nmsg.req.method = \"post\"; \nmsg.payload = {\n     \"plantid\": \"1950\",\n    \"warehouseid\": \"4000\",\n    \"lineid\": \"P2759\",\n    \"version\": \"FS15\",\n    \"amountshiftb\": 703,\n    \"pallets\": [\n        {\n            \"materialid\": \"8953\",\n            \"batchid\": \"9341770600\",\n            \"proddate\": \"2024-07-02\",\n            \"expdate\": \"2024-11-22\",\n            \"amount\": 703,\n            \"unit\": \"КГ\",\n            \"batchsupplier\": \"1604/33\",\n            \"sscc\": \"346070048987353854\",\n            \"ssccComment\": \"1604/33\"\n        }\n    ]\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 780,
        "wires": [
            [
                "712c07423c81f8e3"
            ]
        ]
    },
    {
        "id": "a422eb93f8dce51a",
        "type": "subflow:af3d54f9caaa27a3",
        "z": "bdcac5c6aa044a98",
        "name": "",
        "x": 1050,
        "y": 840,
        "wires": [
            [
                "10fc4f645243feff",
                "bab505c3cc594bec"
            ],
            [
                "27ae93de8c92c3d9"
            ]
        ]
    },
    {
        "id": "45f04a98eb5eaf55",
        "type": "subflow:5919f716f21fdce1",
        "z": "bdcac5c6aa044a98",
        "name": "",
        "x": 690,
        "y": 740,
        "wires": [
            [
                "96b9998f37f7ac83",
                "37d2a63bfdcba68e",
                "3028c7e97f494d65"
            ],
            [
                "a422eb93f8dce51a",
                "27ae93de8c92c3d9"
            ]
        ]
    },
    {
        "id": "9820760473ea1b4a",
        "type": "function",
        "z": "bdcac5c6aa044a98",
        "name": "Создаем ежидневный счетчик",
        "func": "var fs = global.get(\"fsextra\");\nfs.appendFile('C:\\\\TEST111\\\\test.txt','fdfdfdfdf', (err) => {\n        if (err) {\n            console.error('Ошибка при добавлении текста в файл:', err);\n        } else {\n            console.log(`Текст успешно добавлен в файл: C:\\\\TEST\\\\test.txt`);\n        }\n    })\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2400,
        "wires": [
            []
        ]
    },
    {
        "id": "549ccbfede7f482a",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1120,
        "y": 1860,
        "wires": [
            [
                "01be0fcc0488f6a3"
            ]
        ]
    },
    {
        "id": "bff7438cc92f9f39",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 2400,
        "wires": [
            [
                "9820760473ea1b4a"
            ]
        ]
    },
    {
        "id": "c18ab70502434b81",
        "type": "comment",
        "z": "bdcac5c6aa044a98",
        "name": "DTr",
        "info": "",
        "x": 110,
        "y": 320,
        "wires": []
    },
    {
        "id": "1453f4ab4a57b7bb",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 17 - test",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"plantid\":\"1950\",\"warehouseid\":\"1020\",\"supplierid\":\"776981\",\"waybill\":\"24-1007\",\"pallets\":[{\"materialid\":\"219258\",\"batchid\":\"93436302\",\"proddate\":\"2024-12-25\",\"expdate\":\"2025-12-25\",\"amount\":34560,\"unit\":\"ШТ\",\"sscc\":\"346070048990146061\",\"ssccComment\":\"24-16577\"},{\"materialid\":\"219258\",\"batchid\":\"93436302\",\"proddate\":\"2024-12-25\",\"expdate\":\"2025-12-25\",\"amount\":34560,\"unit\":\"ШТ\",\"sscc\":\"346070048990146078\",\"ssccComment\":\"24-16575\"},{\"materialid\":\"219258\",\"batchid\":\"93436302\",\"proddate\":\"2024-12-25\",\"expdate\":\"2025-12-25\",\"amount\":34560,\"unit\":\"ШТ\",\"sscc\":\"346070048990146085\",\"ssccComment\":\"24-16588\"},{\"materialid\":\"219258\",\"batchid\":\"93436302\",\"proddate\":\"2024-12-25\",\"expdate\":\"2025-12-25\",\"amount\":34560,\"unit\":\"ШТ\",\"sscc\":\"346070048990146092\",\"ssccComment\":\"24-16542\"},{\"materialid\":\"219258\",\"batchid\":\"93436302\",\"proddate\":\"2024-12-25\",\"expdate\":\"2025-12-25\",\"amount\":34560,\"unit\":\"ШТ\",\"sscc\":\"346070048990146108\",\"ssccComment\":\"24-16551\"}]}",
        "payloadType": "json",
        "x": 230,
        "y": 1300,
        "wires": [
            [
                "b177de7ef353842c"
            ]
        ]
    },
    {
        "id": "a95832f4ab6e0d6b",
        "type": "inject",
        "z": "bdcac5c6aa044a98",
        "name": "Telegram 13 - 5 min",
        "props": [],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 420,
        "y": 400,
        "wires": [
            [
                "699e1b86f3f9b51b"
            ]
        ]
    },
    {
        "id": "699e1b86f3f9b51b",
        "type": "subflow:56467187de39c9ba",
        "z": "bdcac5c6aa044a98",
        "name": "SAPRepite",
        "x": 660,
        "y": 400,
        "wires": [
            [
                "a7c882af0d9563b4"
            ],
            [
                "c286bed73a90c298",
                "d7e8c5b5f04dced7"
            ]
        ]
    },
    {
        "id": "4aa2d1eafa8c0496",
        "type": "debug",
        "z": "bdcac5c6aa044a98",
        "name": "debug 57",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 2080,
        "wires": []
    },
    {
        "id": "d7e8c5b5f04dced7",
        "type": "debug",
        "z": "bdcac5c6aa044a98",
        "name": "RepiteError",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "416d5ef6cdf1e206",
        "type": "http in",
        "z": "47c2ae891192ea78",
        "name": "[GET] UserActions",
        "url": "/api/rfid/UserActions",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "edc4e7a60fbd96b1",
                "ee7724e4f152e9de"
            ]
        ]
    },
    {
        "id": "bf385498df7e84bb",
        "type": "http response",
        "z": "47c2ae891192ea78",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 1400,
        "y": 180,
        "wires": []
    },
    {
        "id": "fadbdad6c76b7f2f",
        "type": "http in",
        "z": "47c2ae891192ea78",
        "name": "[GET] Events",
        "url": "/api/rfid/Events",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "e55f14de0f61366d",
                "ee7724e4f152e9de"
            ]
        ]
    },
    {
        "id": "01cf1c73f4556d7f",
        "type": "http response",
        "z": "47c2ae891192ea78",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 1400,
        "y": 240,
        "wires": []
    },
    {
        "id": "fd39a8a8af1011e7",
        "type": "http in",
        "z": "47c2ae891192ea78",
        "name": "[GET] UserLog",
        "url": "/api/rfid/UserLog",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "ba544dff1803b922",
                "ee7724e4f152e9de"
            ]
        ]
    },
    {
        "id": "ba544dff1803b922",
        "type": "function",
        "z": "47c2ae891192ea78",
        "name": "Preparation of the Request",
        "func": "const requestStart = '\\\nSELECT \\\n    [nKey] as [key]\\\n    ,[szZoneName] as [zoneName]\\\n    ,[nUserCode] as [userCode]\\\n    ,[dtCreatedAt] as [createdAt]\\\n    ,[szContainerType] as [containerType]\\\n    ,[nContainerNumber] as [containerNumber]\\\n    ,[gActionId] as [actionId] '\n\nconst requestFinish = ' FROM [dbExchange].[dbo].[tblUserLogRFID]'\n\nlet userCode = msg.query && msg.query.userCode ? ` WHERE [nUserCode] = ${msg.query.userCode} ` : '';\nlet containerType = msg.query && msg.query.containerType ? (userCode ? ' AND' : ' WHERE') + ` [szContainerType] = ${msg.query.containerType} ` : '';\nlet containerNumber = msg.query && msg.query.containerNumber ? (userCode || containerType ? ' AND' : ' WHERE') + ` [nContainerNumber] = ${msg.query.containerNumber} ` : '';\nlet actionId = msg.query && msg.query.actionId ? (userCode || containerType || containerNumber ? ' AND' : ' WHERE') + ` [gActionId] = ${msg.query.actionId} ` : '';\n\nconst fullQuery = requestStart + userCode + containerType + containerNumber + actionId + requestFinish;\n\nmsg.request = fullQuery;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 300,
        "wires": [
            [
                "cd1a4008f19b1a36"
            ]
        ]
    },
    {
        "id": "93d9545bc5bf34f8",
        "type": "http response",
        "z": "47c2ae891192ea78",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 1400,
        "y": 300,
        "wires": []
    },
    {
        "id": "762ad972f5aff53b",
        "type": "http in",
        "z": "47c2ae891192ea78",
        "name": "[POST] UserLog",
        "url": "/api/rfid/UserLog",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 360,
        "wires": [
            [
                "282b70a1363fbdcb",
                "ee7724e4f152e9de"
            ]
        ]
    },
    {
        "id": "9a2fba6cf7c5da0f",
        "type": "function",
        "z": "47c2ae891192ea78",
        "name": "Preparation of the Request",
        "func": "const body = msg.data;\n\n// Получаем текущую отметку времени\nvar currentDate = new Date();\n\n// Преобразуем отметку времени в формат datetime2\nvar formattedDate = currentDate.toISOString().replace('T', ' ').replace('Z', '');\n\n// Создаем строку запроса\nconst request = `INSERT INTO [dbExchange].[dbo].[tblUserLogRFID] \\\n           ([gId] \\\n           ,[szZoneName] \\\n           ,[nUserCode] \\\n           ,[dtCreatedAt] \\\n           ,[szContainerType] \\\n           ,[nContainerNumber] \\\n           ,[gActionId] \\\n           ,[nEventId]) \\\n     VALUES \\\n           ('${body.guid}' \\\n           ,'${body.zoneName}' \\\n           ,${body.userCode} \\\n           ,'${formattedDate}' \\\n           ,N'${body.containerType}' \\\n           ,${body.containerNumber} \\\n           ,'${body.actionId}' \\\n           ,${body.eventId}) `;\n\nmsg.payload = body;\nmsg.request = request;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 380,
        "wires": [
            [
                "01ec773902d5dbef"
            ]
        ]
    },
    {
        "id": "43798ff071fd96b5",
        "type": "http response",
        "z": "47c2ae891192ea78",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 1400,
        "y": 380,
        "wires": []
    },
    {
        "id": "282b70a1363fbdcb",
        "type": "change",
        "z": "47c2ae891192ea78",
        "name": "Body",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "body",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 340,
        "wires": [
            [
                "86fa9f67cba40ef2"
            ]
        ]
    },
    {
        "id": "86fa9f67cba40ef2",
        "type": "function",
        "z": "47c2ae891192ea78",
        "name": "Check Fields",
        "func": "const body = msg.body;\nlet lostFields = [];\n\nif (!body.userCode) {\n    lostFields.push('userCode')\n}\nif (!body.containerType) {\n    lostFields.push('containerType')\n}\nif (!body.containerNumber) {\n    lostFields.push('containerNumber')\n}\nif (!body.actionId) {\n    lostFields.push('actionId')\n}\nif (!body.zoneName) {\n    lostFields.push('zoneName')\n}\n\nif (!body.eventId) {\n    lostFields.push('eventId')\n}\n\nif (lostFields.length > 0) {\n    msg.ok = false;\n    msg.payload = {'error': `Fields not found: ${lostFields.join(', ')}`}\n} else {\n    if (body.userCode > 2147483646) {\n        msg.ok = false;\n        msg.payload = { 'error': `UserCode - number is too big` }\n    } else {\n        msg.ok = true;\n        msg.data = msg.body;\n    }\n    \n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 380,
        "wires": [
            [
                "4e5d09ccbb70a771"
            ]
        ]
    },
    {
        "id": "c72d8dd18993e448",
        "type": "http response",
        "z": "47c2ae891192ea78",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 700,
        "y": 420,
        "wires": []
    },
    {
        "id": "4e5d09ccbb70a771",
        "type": "switch",
        "z": "47c2ae891192ea78",
        "name": "Ok",
        "property": "ok",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 340,
        "wires": [
            [
                "d2fe8b85612b0948",
                "9ebc3413b22f6bba"
            ],
            [
                "c72d8dd18993e448"
            ]
        ]
    },
    {
        "id": "9ebc3413b22f6bba",
        "type": "join",
        "z": "47c2ae891192ea78",
        "name": "Join Objects -",
        "mode": "custom",
        "build": "merged",
        "property": "data",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 720,
        "y": 380,
        "wires": [
            [
                "9a2fba6cf7c5da0f"
            ]
        ]
    },
    {
        "id": "dbfafb9d7c3163ac",
        "type": "function",
        "z": "47c2ae891192ea78",
        "name": "Create Object",
        "func": "msg.data = {\"guid\": msg.payload};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 340,
        "wires": [
            [
                "9ebc3413b22f6bba"
            ]
        ]
    },
    {
        "id": "e55f14de0f61366d",
        "type": "function",
        "z": "47c2ae891192ea78",
        "name": "Preparation of the Request",
        "func": "const fromDate = !!msg.req.query && !!msg.req.query.FromDate ? ` AND g.EventDate >= '${msg.req.query.FromDate}' ` : '';\n\nmsg.request = `\nSELECT\tg.EPC as epc \\\n        , g.Id as id \\\n        , g.EPCString as epcString \\\n        , g.EventDate as eventDate \\\n        , g.ZoneName as zoneName \\\n        , g.RetrieveDate as retrieveDate \\\n        , g.IsRetrieved as isRetrieved \\\n        , g.ContainerNumber as containerNumber \\\n        , g.ContainerType as containerType \\\n        , ul.nUserCode as userCode \\\n        , ul.gActionId as actionId \\\n        , ul.dtCreatedAt as commentedAt \\\n    FROM [dbExchange].[dbo].[tblGPOEvent] g \\\n    INNER JOIN ( \\\n        SELECT EPCString \\\n            , max(Id) AS maxId \\\n        FROM [dbExchange].[dbo].[tblGPOEvent] \\\n        GROUP BY EPCString \\\n    ) m ON g.EPCString = m.EPCString \\\n    LEFT JOIN ( \\\n        SELECT nKey, nUserCode, gActionId, nEventId, dtCreatedAt \\\n        , ROW_NUMBER() OVER(PARTITION BY nEventId ORDER BY nKey DESC) as row_num \\\n        FROM [dbExchange].[dbo].[tblUserLogRFID] \\\n    ) ul ON g.Id = ul.nEventId AND ul.row_num = 1 \\\nWHERE g.IsInVerification = 0 \\\n    AND g.Id = m.maxId ${fromDate}\\\nORDER BY g.Id DESC ` \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 240,
        "wires": [
            [
                "e0127dee0d5d6c6c"
            ]
        ]
    },
    {
        "id": "ee7724e4f152e9de",
        "type": "debug",
        "z": "47c2ae891192ea78",
        "name": "debug 52",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 140,
        "wires": []
    },
    {
        "id": "d2fe8b85612b0948",
        "type": "createrandom",
        "z": "47c2ae891192ea78",
        "generator": "UUID",
        "type_generator": "generator",
        "label": "GUID",
        "param_1": "v4",
        "type_param_1": "Version",
        "param_2": "",
        "type_param_2": "msg",
        "param_3": "",
        "type_param_3": "msg",
        "f_use_debug": false,
        "x": 630,
        "y": 340,
        "wires": [
            [
                "dbfafb9d7c3163ac"
            ]
        ]
    },
    {
        "id": "edc4e7a60fbd96b1",
        "type": "MSSQL",
        "z": "47c2ae891192ea78",
        "mssqlCN": "6c4551b7b08b27f9",
        "name": "UserActions",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT\r\n    [gId] as [id]\r\n    ,[nKey] as [key]\r\n    ,[szAction] as [action]\r\nFROM [dbExchange].[dbo].[tblUserActionsRFID]",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1250,
        "y": 180,
        "wires": [
            [
                "bf385498df7e84bb"
            ]
        ]
    },
    {
        "id": "e0127dee0d5d6c6c",
        "type": "MSSQL",
        "z": "47c2ae891192ea78",
        "mssqlCN": "6c4551b7b08b27f9",
        "name": "Events",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT\tg.EPC as epc\r\n\t\t,g.EPCString as epcString\r\n\t\t,g.EventDate as eventDate\r\n\t\t,g.ZoneName as zoneName\r\n\t\t,g.RetrieveDate as retrieveDate\r\n\t\t,g.IsRetrieved as isRetrieved\r\n\t\t,g.ContainerNumber as containerNumber\r\n\t\t,g.ContainerType as containerType\r\nFROM [dbExchange].[dbo].[tblGPOEvent] g\r\nINNER JOIN (\r\n\tSELECT EPC\r\n\t\t,max(Id) AS maxId\r\n\tFROM [dbExchange].[dbo].[tblGPOEvent]\r\n\tGROUP BY EPC\r\n\t) m ON g.EPC = m.EPC\r\nWHERE IsInVerification = 0\r\n\tAND g.Id = m.maxId\r\nORDER BY g.Id DESC",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "request",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1230,
        "y": 240,
        "wires": [
            [
                "01cf1c73f4556d7f"
            ]
        ]
    },
    {
        "id": "cd1a4008f19b1a36",
        "type": "MSSQL",
        "z": "47c2ae891192ea78",
        "mssqlCN": "6c4551b7b08b27f9",
        "name": "UserLog",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "request",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1240,
        "y": 300,
        "wires": [
            [
                "93d9545bc5bf34f8"
            ]
        ]
    },
    {
        "id": "01ec773902d5dbef",
        "type": "MSSQL",
        "z": "47c2ae891192ea78",
        "mssqlCN": "6c4551b7b08b27f9",
        "name": "UserLog",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "request",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": false,
        "params": [],
        "x": 1240,
        "y": 380,
        "wires": [
            [
                "43798ff071fd96b5"
            ]
        ]
    },
    {
        "id": "3b80606eb688d32c",
        "type": "http in",
        "z": "c04c67beef3f4f91",
        "name": "",
        "url": "/api/ping",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "48adbe07b2a7a8d7"
            ]
        ]
    },
    {
        "id": "0d44baf76e5ebdca",
        "type": "http response",
        "z": "c04c67beef3f4f91",
        "name": "Response",
        "statusCode": "200",
        "headers": {},
        "x": 520,
        "y": 140,
        "wires": []
    },
    {
        "id": "48adbe07b2a7a8d7",
        "type": "function",
        "z": "c04c67beef3f4f91",
        "name": "Ok",
        "func": "msg.request = \"Ok\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 140,
        "wires": [
            [
                "0d44baf76e5ebdca"
            ]
        ]
    },
    {
        "id": "5fcfa5b6f1bf6951",
        "type": "http in",
        "z": "94584107e700975b",
        "name": "",
        "url": "/api/reception/value",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "15e3fba45d48a5df",
                "0322e47a91bd49a7",
                "93412260a577651f"
            ]
        ]
    },
    {
        "id": "ace9b95954169ada",
        "type": "http response",
        "z": "94584107e700975b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1210,
        "y": 240,
        "wires": []
    },
    {
        "id": "15e3fba45d48a5df",
        "type": "debug",
        "z": "94584107e700975b",
        "name": "debug 71",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 40,
        "wires": []
    },
    {
        "id": "f0c2e1cdc1ea1705",
        "type": "inject",
        "z": "94584107e700975b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"SourceName\":\"Отделение 1\",\"Amount\":\"10010\",\"Section\":\"\",\"PumpStart\":\"2024-04-26 18:59:41\",\"PumpStop\":\"2024-04-26 19:39:21\",\"DestinationName\":\"3\",\"ExternalNumber\":\"4589\"}",
        "payloadType": "json",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "0322e47a91bd49a7"
            ]
        ]
    },
    {
        "id": "10afe4493678754b",
        "type": "http request",
        "z": "94584107e700975b",
        "name": "Create ProcessingPumpingData",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.ReceptionUrl}}}/api/ProcessPumpingData",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-type",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 210,
        "y": 380,
        "wires": [
            [
                "5a8d840688d87051"
            ]
        ]
    },
    {
        "id": "2ee880981ba40929",
        "type": "switch",
        "z": "94584107e700975b",
        "name": "from tbl or api",
        "property": "loop.value.Key",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 700,
        "y": 360,
        "wires": [
            [
                "adf4cf9e145f6a96"
            ],
            [
                "7f8f2193b282d04f"
            ]
        ]
    },
    {
        "id": "dc0f81b3881755b3",
        "type": "debug",
        "z": "94584107e700975b",
        "name": "debug 72",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 440,
        "wires": []
    },
    {
        "id": "5a8d840688d87051",
        "type": "switch",
        "z": "94584107e700975b",
        "name": "ResponseStatusCode",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 460,
        "y": 380,
        "wires": [
            [
                "2ee880981ba40929"
            ],
            [
                "030b3ffcce0f4e9c"
            ]
        ]
    },
    {
        "id": "b0a0d7eddd427a34",
        "type": "subflow:f2924807aef52857",
        "z": "94584107e700975b",
        "name": "",
        "x": 1220,
        "y": 160,
        "wires": [
            [
                "adf4cf9e145f6a96"
            ]
        ]
    },
    {
        "id": "0322e47a91bd49a7",
        "type": "change",
        "z": "94584107e700975b",
        "name": "payload->Input",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "Input",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 120,
        "wires": [
            [
                "56b94d4a017373f0"
            ]
        ]
    },
    {
        "id": "2dfb1e28efc7859a",
        "type": "function",
        "z": "94584107e700975b",
        "name": "prepare data",
        "func": "//let [, date, month, year, hour, min, sec] = /(\\d+).(\\d+).(\\d+)\\s+(\\d+):(\\d+):(\\d+)/.exec(msg.Input.PumpStart).map(Number);\n//let PumpStart = new Date(year, month - 1, date, hour+3, min, sec);\n//[, date, month, year, hour, min, sec] = /(\\d+).(\\d+).(\\d+)\\s+(\\d+):(\\d+):(\\d+)/.exec(msg.Input.PumpStop).map(Number);\n//let PumpStop = new Date(year, month - 1, date, hour+3, min, sec);\n\nmsg.MES = [{\n        receptionLineId: msg.SQL[0].ReceptionLineId,\n        sourceName: msg.SQL[0].ReceptionLineName,\n        amount: msg.Input.Amount,\n        section: msg.Input.Section,      \n        pumpStart: new Date(msg.Input.PumpStart), \n        pumpStop: new Date(msg.Input.PumpStop),\n        destinationName: msg.SQL[0].DestinationName,\n        destinationStorageLocationId: msg.SQL[0].DestinationStorageLocationId,\n        externalNumber: msg.Input.ExternalNumber, \n        Key: null   \n}]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 120,
        "wires": [
            [
                "08019f48518fc098"
            ]
        ]
    },
    {
        "id": "76694763f4385937",
        "type": "inject",
        "z": "94584107e700975b",
        "name": "",
        "props": [],
        "repeat": "120",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "4d9155dc06b01e62"
            ]
        ]
    },
    {
        "id": "320c7980c30967dc",
        "type": "function",
        "z": "94584107e700975b",
        "name": "prepare date",
        "func": "let MES = [];\nfor (let i=0; i<msg.SQL.length; i++)\n  {                     \n  MES[i] = {\n        receptionLineId: msg.SQL[i].gReceptionLineId,\n        sourceName: msg.SQL[i].szSourceName,\n        amount: msg.SQL[i].szAmount,\n        section: msg.SQL[i].szSection,\n        pumpStart: msg.SQL[i].szPumpStart,\n        pumpStop: msg.SQL[i].szPumpStop,\n        destinationName: msg.SQL[i].szDestinationName,\n        destinationStorageLocationId: msg.SQL[i].gDestinationStorageLocationId,\n        externalNumber: msg.SQL[i].szExternalNumber, \n        Key:  msg.SQL[i].nKey          \n                };        \n  };\n msg.MES=MES;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 180,
        "wires": [
            [
                "08019f48518fc098"
            ]
        ]
    },
    {
        "id": "b37165975de3af88",
        "type": "switch",
        "z": "94584107e700975b",
        "name": "SQL Not null",
        "property": "SQL",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 610,
        "y": 180,
        "wires": [
            [
                "320c7980c30967dc"
            ]
        ]
    },
    {
        "id": "2b4aebf02c0f33bf",
        "type": "debug",
        "z": "94584107e700975b",
        "name": "debug 73",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 300,
        "wires": []
    },
    {
        "id": "8ae5f264b5e055d1",
        "type": "switch",
        "z": "94584107e700975b",
        "name": "from api",
        "property": "MES[0].Key",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1020,
        "y": 240,
        "wires": [
            [
                "ace9b95954169ada",
                "2b4aebf02c0f33bf"
            ]
        ]
    },
    {
        "id": "08019f48518fc098",
        "type": "subflow:ca94f48e1f18b542",
        "z": "94584107e700975b",
        "name": "",
        "x": 1070,
        "y": 160,
        "wires": [
            [
                "b0a0d7eddd427a34"
            ]
        ]
    },
    {
        "id": "4230d9c571b00ac6",
        "type": "comment",
        "z": "94584107e700975b",
        "name": "PZO",
        "info": "",
        "x": 710,
        "y": 60,
        "wires": []
    },
    {
        "id": "4095bc43538c8ae5",
        "type": "http in",
        "z": "94584107e700975b",
        "name": "",
        "url": "/api/reception/weight",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "30a35b5b26859b51",
                "dc0f81b3881755b3"
            ]
        ]
    },
    {
        "id": "cfb043a73cd311c7",
        "type": "http response",
        "z": "94584107e700975b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 520,
        "wires": []
    },
    {
        "id": "8e7b2cdbe22cf3db",
        "type": "function",
        "z": "94584107e700975b",
        "name": "function 21",
        "func": "msg.payload = {\"weight\":\"0\",\"error\":\"errortest\"}\n//msg.statusCode=400\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 520,
        "wires": [
            [
                "cfb043a73cd311c7"
            ]
        ]
    },
    {
        "id": "adf4cf9e145f6a96",
        "type": "loop",
        "z": "94584107e700975b",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "MES",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 790,
        "y": 280,
        "wires": [
            [
                "8ae5f264b5e055d1"
            ],
            [
                "10afe4493678754b"
            ]
        ]
    },
    {
        "id": "56b94d4a017373f0",
        "type": "MSSQL",
        "z": "94584107e700975b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Get ReceptionLine",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @ReceptionLineId uniqueidentifier,@ReceptionLineName nvarchar(255),@DestinationName nvarchar(255),@DestinationStorageLocationId uniqueidentifier\r\nSELECT @ReceptionLineId=ev.gExternalObjectId ,@ReceptionLineName=ev.szName \r\n  FROM [BaseClassifiers].[dbo].[tblExternalVertex] ev\r\n\tINNER JOIN [BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ee ON ee.gExternalVertexId=ev.gId\r\n\tINNER JOIN [BaseClassifiers].[dbo].[tblExternalSystem] es ON es.gId = ee.gExternalSystemId AND es.szName = N'ASUTP'\r\n  WHERE ee.szExternalId = N'{{{Input.SourceName}}}'\r\n\r\nSELECT @DestinationName=ev.szName, @DestinationStorageLocationId = ev.gExternalObjectId\r\n  FROM [BaseClassifiers].[dbo].[tblExternalVertex] ev\r\n\tINNER JOIN [BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ee ON ee.gExternalVertexId=ev.gId\r\n\tINNER JOIN [BaseClassifiers].[dbo].[tblExternalSystem] es ON es.gId = ee.gExternalSystemId AND es.szName = N'ASUTP'\r\n  WHERE ee.szExternalId = N'{{{Input.DestinationName}}}'\r\n\r\nSELECT @ReceptionLineId as 'ReceptionLineId',@ReceptionLineName as 'ReceptionLineName' ,@DestinationName as 'DestinationName',@DestinationStorageLocationId as 'DestinationStorageLocationId'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 630,
        "y": 120,
        "wires": [
            [
                "2dfb1e28efc7859a"
            ]
        ]
    },
    {
        "id": "030b3ffcce0f4e9c",
        "type": "MSSQL",
        "z": "94584107e700975b",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "Insert tblReceptionValueWork",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "INSERT INTO [dbExchange].[dbo].[tblReceptionValueWork]\r\n  VALUES (N'{{{loop.value.receptionLineId}}}'\r\n      ,N'{{{loop.value.sourceName}}}'\r\n      ,N'{{{loop.value.amount}}}'\r\n      ,N'{{{loop.value.section}}}'\r\n      ,N'{{{loop.value.pumpStart}}}'\r\n      ,N'{{{loop.value.pumpStop}}}'\r\n      ,N'{{{loop.value.destinationName}}}'\r\n      ,N'{{{loop.value.externalNumber}}}'\r\n      ,GETDATE()\r\n      ,N'{{{loop.value.destinationStorageLocationId}}}')",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1170,
        "y": 440,
        "wires": [
            [
                "adf4cf9e145f6a96"
            ]
        ]
    },
    {
        "id": "4d9155dc06b01e62",
        "type": "MSSQL",
        "z": "94584107e700975b",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "Get ReceptionValueWork",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT [nKey]\r\n      ,[gReceptionLineId]\r\n      ,[szSourceName]\r\n      ,[szAmount]\r\n      ,[szSection]\r\n      ,[szPumpStart]\r\n      ,[szPumpStop]\r\n      ,[szDestinationName]\r\n      ,[gDestinationStorageLocationId]\r\n      ,[szExternalNumber]\r\n      ,[dtCreatedAt]\r\n  FROM [dbExchange].[dbo].[tblReceptionValueWork]",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 370,
        "y": 180,
        "wires": [
            [
                "b37165975de3af88"
            ]
        ]
    },
    {
        "id": "7f8f2193b282d04f",
        "type": "MSSQL",
        "z": "94584107e700975b",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "Delete tblReceptionValueWork",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DELETE FROM [dbExchange].[dbo].[tblReceptionValueWork] WHERE nKey = {{{loop.value.Key}}}",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 990,
        "y": 400,
        "wires": [
            [
                "adf4cf9e145f6a96"
            ]
        ]
    },
    {
        "id": "93412260a577651f",
        "type": "MSSQL",
        "z": "94584107e700975b",
        "mssqlCN": "6c4551b7b08b27f9",
        "name": "tblReceptionValueNRLog",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "  INSERT INTO [dbExchange].[dbo].[tblReceptionValueNRLog]\r\n  VALUES(N'{{{payload.SourceName}}}','{{{payload.Amount}}}',\r\n    '{{{payload.Section}}}','{{{payload.PumpStart}}}',\r\n   '{{{payload.PumpStop}}}',N'{{{payload.DestinationName}}}',\r\n    '{{{payload.ExternalNumber}}}',GETDATE(),null)",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 450,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "30a35b5b26859b51",
        "type": "MSSQL",
        "z": "94584107e700975b",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get connections",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT es.szExternalId\r\n  FROM [BaseClassifiers].[dbo].[tblExternalVertex] ev \r\n\tINNER JOIN  [BaseClassifiers].[dbo].[tblExternalSystemToEquipment] es ON es.gExternalVertexId=ev.gId \r\n                                                    AND es.gExternalSystemId='062013A2-0B4C-4D79-E607-08DC4343677B'--scales\r\n  WHERE ev.gExternalObjectId='{{{payload.ReceptionLineId}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 380,
        "y": 520,
        "wires": [
            [
                "8e7b2cdbe22cf3db",
                "dc0f81b3881755b3"
            ]
        ]
    },
    {
        "id": "9319d3a66e367fe2",
        "type": "debug",
        "z": "da8ae9bd33a4e199",
        "g": "ccf22ab32adf050a",
        "name": "debug 19",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1880,
        "y": 100,
        "wires": []
    },
    {
        "id": "b4d0eb5a4284684e",
        "type": "function",
        "z": "da8ae9bd33a4e199",
        "d": true,
        "g": "ccf22ab32adf050a",
        "name": "prep Process setStart",
        "func": "let QueryParameterCommand =\"?eventName=ProductionProcess.LeaveNewStep&EventKey=\"+msg.Process[0].gId;\nlet BodyCommand ={ NewStepOutcome : \"InProcess\" } \nmsg.QueryParameter = QueryParameterCommand;\nmsg.payload = BodyCommand;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 100,
        "wires": [
            [
                "2bacfca646459c62"
            ]
        ]
    },
    {
        "id": "2bacfca646459c62",
        "type": "http request",
        "z": "da8ae9bd33a4e199",
        "d": true,
        "g": "ccf22ab32adf050a",
        "name": "start Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.WorkflowUrl}}}/api/Events{{{QueryParameter}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1690,
        "y": 100,
        "wires": [
            [
                "9319d3a66e367fe2"
            ]
        ]
    },
    {
        "id": "5f1db55f912a1894",
        "type": "switch",
        "z": "da8ae9bd33a4e199",
        "g": "ccf22ab32adf050a",
        "name": "ProcessId is not null",
        "property": "Process[0].gId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 980,
        "y": 100,
        "wires": [
            [
                "c5c1918eccc8c9c5"
            ]
        ]
    },
    {
        "id": "c5c1918eccc8c9c5",
        "type": "subflow:ca94f48e1f18b542",
        "z": "da8ae9bd33a4e199",
        "g": "ccf22ab32adf050a",
        "name": "",
        "x": 1150,
        "y": 100,
        "wires": [
            [
                "1b203e4bcd90fdbf"
            ]
        ]
    },
    {
        "id": "44ba252180094d13",
        "type": "switch",
        "z": "da8ae9bd33a4e199",
        "name": "Step",
        "property": "Input.Step",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "New",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "InProcess",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Completed",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 310,
        "y": 180,
        "wires": [
            [
                "76f66c8222dc9d67"
            ],
            [
                "dfc83f5afb5bbf6e"
            ],
            [
                "2328c98a67319fa4",
                "a14aee8cb3af2602"
            ],
            []
        ],
        "outputLabels": [
            "",
            "",
            "",
            "not null"
        ]
    },
    {
        "id": "b25c752966d1c617",
        "type": "switch",
        "z": "da8ae9bd33a4e199",
        "g": "c06981d5c23f52fa",
        "name": "Checking is not null",
        "property": "SQL[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1090,
        "y": 500,
        "wires": [
            [
                "54d9da4f7e2d164a"
            ]
        ]
    },
    {
        "id": "54d9da4f7e2d164a",
        "type": "subflow:ca94f48e1f18b542",
        "z": "da8ae9bd33a4e199",
        "g": "c06981d5c23f52fa",
        "name": "",
        "x": 1250,
        "y": 500,
        "wires": [
            [
                "21bffa78b4c8a00a"
            ]
        ]
    },
    {
        "id": "50b886ef3edac2ae",
        "type": "debug",
        "z": "da8ae9bd33a4e199",
        "g": "0a91e0b9498a5583",
        "name": "debug 29",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1740,
        "y": 720,
        "wires": []
    },
    {
        "id": "a922d4cc213f6fd4",
        "type": "function",
        "z": "da8ae9bd33a4e199",
        "d": true,
        "g": "c06981d5c23f52fa",
        "name": "parse Data",
        "func": "const datas = msg.Input;\nlet outputMsgs = [];\nmsg.payload = [];\ndatas.forEach(function(element) {\n    const data = {\n        ProcessId: element.ProcessId,\n        BatchId: element.BatchId,\n        StorageLocationId: element.StorageLocationId,\n        OperationId: element.OperationId,\n        Quantity: element.Batch_Quantity,\n        CompleteOuttake: true,\n    }\n    outputMsgs.push({data: data});\n});\nreturn [msg]\n//return [outputMsgs];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 500,
        "wires": [
            [
                "d9593d1139f73662"
            ]
        ]
    },
    {
        "id": "d9593d1139f73662",
        "type": "function",
        "z": "da8ae9bd33a4e199",
        "d": true,
        "g": "c06981d5c23f52fa",
        "name": "Outtake",
        "func": "msg.payload = msg.data;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "fd1d155cc093f0a6",
        "type": "http request",
        "z": "da8ae9bd33a4e199",
        "g": "c06981d5c23f52fa",
        "name": "htttp put outtake",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/outtake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1620,
        "y": 580,
        "wires": [
            [
                "ebb2c431d54ab00f"
            ]
        ]
    },
    {
        "id": "1b203e4bcd90fdbf",
        "type": "subflow:f2924807aef52857",
        "z": "da8ae9bd33a4e199",
        "g": "ccf22ab32adf050a",
        "name": "",
        "x": 1300,
        "y": 100,
        "wires": [
            [
                "b4d0eb5a4284684e",
                "a3483c713918e46c"
            ]
        ]
    },
    {
        "id": "21bffa78b4c8a00a",
        "type": "subflow:f2924807aef52857",
        "z": "da8ae9bd33a4e199",
        "g": "c06981d5c23f52fa",
        "name": "",
        "x": 1400,
        "y": 500,
        "wires": [
            [
                "ebb2c431d54ab00f"
            ]
        ]
    },
    {
        "id": "94acb230b7680e6c",
        "type": "comment",
        "z": "da8ae9bd33a4e199",
        "name": "PZo",
        "info": "",
        "x": 50,
        "y": 20,
        "wires": []
    },
    {
        "id": "b658bb6e0f375ef9",
        "type": "debug",
        "z": "da8ae9bd33a4e199",
        "g": "478f8ed0060973d1",
        "name": "debug 50",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 900,
        "wires": []
    },
    {
        "id": "eec1a6ed5866513c",
        "type": "switch",
        "z": "da8ae9bd33a4e199",
        "g": "478f8ed0060973d1",
        "name": "",
        "property": "CookingWater",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 820,
        "wires": [
            [
                "c3243d37c57ef6c7"
            ]
        ]
    },
    {
        "id": "c3243d37c57ef6c7",
        "type": "switch",
        "z": "da8ae9bd33a4e199",
        "g": "478f8ed0060973d1",
        "name": "",
        "property": "CookingWater[0].Quantity",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 820,
        "wires": [
            [
                "ecd216283153df6b"
            ]
        ]
    },
    {
        "id": "6e59586fb3ea7087",
        "type": "subflow:ca94f48e1f18b542",
        "z": "da8ae9bd33a4e199",
        "g": "478f8ed0060973d1",
        "name": "",
        "x": 810,
        "y": 820,
        "wires": [
            [
                "3f3fe390cc5817fd"
            ]
        ]
    },
    {
        "id": "3f3fe390cc5817fd",
        "type": "subflow:f2924807aef52857",
        "z": "da8ae9bd33a4e199",
        "g": "478f8ed0060973d1",
        "name": "",
        "x": 960,
        "y": 820,
        "wires": [
            [
                "4e6f67d1b11f8c76"
            ]
        ]
    },
    {
        "id": "4e6f67d1b11f8c76",
        "type": "function",
        "z": "da8ae9bd33a4e199",
        "g": "478f8ed0060973d1",
        "name": "prepare Outtake",
        "func": " let Outtake = {\n                ProcessId: msg.CookingWater[0].ProcessId,\n                BatchId: msg.Batch[0].BatchId,\n                StorageLocationId:msg.Batch[0].StorageLocationId,\n                OperationId: msg.CookingWater[0].OperationId,\n                Quantity: msg.CookingWater[0].Quantity,\n                CompleteOuttake: false\n                };\n msg.payload=Outtake;            \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 820,
        "wires": [
            [
                "c46a89fa7f3e6f9d"
            ]
        ]
    },
    {
        "id": "c46a89fa7f3e6f9d",
        "type": "http request",
        "z": "da8ae9bd33a4e199",
        "g": "478f8ed0060973d1",
        "name": "htttp put outtake",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/outtake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1320,
        "y": 820,
        "wires": [
            [
                "b1c8e2f619d3cd6b"
            ]
        ]
    },
    {
        "id": "bee26de4fbc1080a",
        "type": "http request",
        "z": "da8ae9bd33a4e199",
        "g": "478f8ed0060973d1",
        "name": "NR Выпуск BOM",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1881/api/Intake/BOM",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 510,
        "y": 900,
        "wires": [
            [
                "b658bb6e0f375ef9"
            ]
        ]
    },
    {
        "id": "b1c8e2f619d3cd6b",
        "type": "function",
        "z": "da8ae9bd33a4e199",
        "g": "478f8ed0060973d1",
        "name": "prepare Intake",
        "func": " let Intake = {\n                processId: msg.CookingWater[0].ProcessId,\n                storageLocationId: msg.CookingWater[0].ProduceStorageLocationId\n             };\n msg.payload=Intake;            \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 900,
        "wires": [
            [
                "bee26de4fbc1080a"
            ]
        ]
    },
    {
        "id": "76f66c8222dc9d67",
        "type": "switch",
        "z": "da8ae9bd33a4e199",
        "name": "szExternalId?",
        "property": "Process[0].szExternalId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "999",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "978",
                "vt": "str"
            },
            {
                "t": "btwn",
                "v": "909",
                "vt": "num",
                "v2": "914",
                "v2t": "num"
            },
            {
                "t": "btwn",
                "v": "939",
                "vt": "num",
                "v2": "940",
                "v2t": "num"
            },
            {
                "t": "btwn",
                "v": "357",
                "vt": "num",
                "v2": "358",
                "v2t": "num"
            },
            {
                "t": "btwn",
                "v": "981",
                "vt": "num",
                "v2": "982",
                "v2t": "num"
            },
            {
                "t": "cont",
                "v": "SIFTER",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PPS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "WSDI",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PASTER",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CURD",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 11,
        "x": 580,
        "y": 100,
        "wires": [
            [
                "5f1db55f912a1894"
            ],
            [
                "5f1db55f912a1894"
            ],
            [
                "5f1db55f912a1894"
            ],
            [
                "5f1db55f912a1894"
            ],
            [
                "5f1db55f912a1894"
            ],
            [
                "5f1db55f912a1894"
            ],
            [
                "5f1db55f912a1894"
            ],
            [
                "5f1db55f912a1894"
            ],
            [
                "5f1db55f912a1894"
            ],
            [
                "5f1db55f912a1894"
            ],
            [
                "420fe20a7b2b4b99"
            ]
        ]
    },
    {
        "id": "7cfd928d3eb4be30",
        "type": "switch",
        "z": "da8ae9bd33a4e199",
        "name": "szExternalId?",
        "property": "Process[0].szExternalId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SIFTER",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 560,
        "y": 720,
        "wires": [
            [
                "8156e1f19f6ed6a8"
            ]
        ]
    },
    {
        "id": "8156e1f19f6ed6a8",
        "type": "switch",
        "z": "da8ae9bd33a4e199",
        "g": "0a91e0b9498a5583",
        "name": "ProcessId is not null",
        "property": "Process[0].gId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 840,
        "y": 720,
        "wires": [
            [
                "450e75fc8aa06ddc"
            ]
        ]
    },
    {
        "id": "e0c68448901af3c9",
        "type": "function",
        "z": "da8ae9bd33a4e199",
        "g": "0a91e0b9498a5583",
        "name": "prepare data",
        "func": "msg.payload={\"processId\": msg.payload.Id,\n            \"storageLocationId\": msg.SL[0].StorageLocationId\n            }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 720,
        "wires": [
            [
                "6ce8bc80fb481202"
            ]
        ]
    },
    {
        "id": "6ce8bc80fb481202",
        "type": "http request",
        "z": "da8ae9bd33a4e199",
        "g": "0a91e0b9498a5583",
        "name": "NR Выпуск OneToOne",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1881/api/Intake/OneToOne",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1560,
        "y": 720,
        "wires": [
            [
                "50b886ef3edac2ae"
            ]
        ]
    },
    {
        "id": "dfc83f5afb5bbf6e",
        "type": "switch",
        "z": "da8ae9bd33a4e199",
        "name": "szExternalId?",
        "property": "Process[0].szExternalId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CRUD",
                "vt": "str"
            },
            {
                "t": "btwn",
                "v": "301",
                "vt": "num",
                "v2": "306",
                "v2t": "num"
            },
            {
                "t": "btwn",
                "v": "401",
                "vt": "num",
                "v2": "405",
                "v2t": "num"
            },
            {
                "t": "btwn",
                "v": "501",
                "vt": "num",
                "v2": "502",
                "v2t": "num"
            },
            {
                "t": "btwn",
                "v": "601",
                "vt": "num",
                "v2": "602",
                "v2t": "num"
            },
            {
                "t": "btwn",
                "v": "981",
                "vt": "num",
                "v2": "982",
                "v2t": "num"
            },
            {
                "t": "eq",
                "v": "SIFTER",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 560,
        "y": 520,
        "wires": [
            [],
            [
                "2f505a6cebe7a1df"
            ],
            [
                "2f505a6cebe7a1df"
            ],
            [
                "2f505a6cebe7a1df"
            ],
            [
                "2f505a6cebe7a1df"
            ],
            [
                "2f505a6cebe7a1df"
            ],
            [
                "2f505a6cebe7a1df"
            ]
        ]
    },
    {
        "id": "378557a1b8a9c2cd",
        "type": "change",
        "z": "da8ae9bd33a4e199",
        "name": "payload->Input",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "Input",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 60,
        "wires": [
            [
                "3c0f107da3504e63"
            ]
        ]
    },
    {
        "id": "c51fa63f93acaa51",
        "type": "catch",
        "z": "da8ae9bd33a4e199",
        "name": "",
        "scope": [
            "3c0f107da3504e63",
            "d7a1ee88eb4db8d5",
            "ecd216283153df6b",
            "450e75fc8aa06ddc",
            "2f505a6cebe7a1df"
        ],
        "uncaught": false,
        "x": 120,
        "y": 1000,
        "wires": [
            [
                "fa86198898732c70"
            ]
        ]
    },
    {
        "id": "fa86198898732c70",
        "type": "debug",
        "z": "da8ae9bd33a4e199",
        "name": "debug 75",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 1000,
        "wires": []
    },
    {
        "id": "a3483c713918e46c",
        "type": "http request",
        "z": "da8ae9bd33a4e199",
        "g": "ccf22ab32adf050a",
        "name": "start Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.MesCoreUrl}}}/api/UserTasks/do_action/{{{Process.0.UserTaskId}}}/InProcess",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1590,
        "y": 140,
        "wires": [
            [
                "9319d3a66e367fe2"
            ]
        ]
    },
    {
        "id": "8777ddbb6383c505",
        "type": "catch",
        "z": "da8ae9bd33a4e199",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 110,
        "y": 1060,
        "wires": [
            [
                "5bbfa21a19747700"
            ]
        ]
    },
    {
        "id": "a0ca258cc5895385",
        "type": "debug",
        "z": "da8ae9bd33a4e199",
        "name": "Debug Save Catch Data",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 1060,
        "wires": []
    },
    {
        "id": "5bbfa21a19747700",
        "type": "subflow:f8fc59a8d3d93ef9",
        "z": "da8ae9bd33a4e199",
        "name": "",
        "x": 320,
        "y": 1060,
        "wires": [
            [
                "a0ca258cc5895385"
            ]
        ]
    },
    {
        "id": "c865a56860acb719",
        "type": "debug",
        "z": "da8ae9bd33a4e199",
        "name": "debug 79",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 220,
        "wires": []
    },
    {
        "id": "cecc79296c814164",
        "type": "link in",
        "z": "da8ae9bd33a4e199",
        "name": "ProcessChange",
        "links": [
            "39bbe7556c25cadb"
        ],
        "x": 45,
        "y": 100,
        "wires": [
            [
                "7efe74b10ce939cb"
            ]
        ]
    },
    {
        "id": "7efe74b10ce939cb",
        "type": "function",
        "z": "da8ae9bd33a4e199",
        "name": "function 15",
        "func": "msg.Input.Id = msg.UTI[0].ownerId\nmsg.Input.Step = 'New' \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 100,
        "wires": [
            [
                "a1d883d09a5318a6"
            ]
        ]
    },
    {
        "id": "0e3c115de887ae78",
        "type": "function",
        "z": "da8ae9bd33a4e199",
        "name": "prep SLRP create cmd",
        "func": "let createStorageLocationCommand =\n{\n    AccessId: '449BF86B-8CDA-4462-AEBD-08651E38A5DB',\n    Description: msg.SLRPType[0].szName,\n    ExternalSystemRfidLink: null,\n    TransferStorageLocationType: msg.SLRPType[0].nTransferStorageLocationType\n}\n\nmsg.payload = createStorageLocationCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 260,
        "wires": [
            [
                "19533d714f03f366",
                "c865a56860acb719"
            ]
        ]
    },
    {
        "id": "19533d714f03f366",
        "type": "http request",
        "z": "da8ae9bd33a4e199",
        "name": "create SLRP",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/createTransferStorageLocation",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1510,
        "y": 260,
        "wires": [
            [
                "c6e23ec883adaf07",
                "410d48034474ed43"
            ]
        ]
    },
    {
        "id": "c6e23ec883adaf07",
        "type": "function",
        "z": "da8ae9bd33a4e199",
        "name": "RFID ID",
        "func": "msg.SLRP = {Id : msg.payload.id, key : msg.payload.key, createdAt: msg.payload.createdAt};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 260,
        "wires": [
            [
                "6afa2196edfbc127"
            ]
        ]
    },
    {
        "id": "0cf079f59dda3e8f",
        "type": "function",
        "z": "da8ae9bd33a4e199",
        "name": "prep SLRP transfer cmd",
        "func": "let transferStorageLocationCommand =\n{\n    StorageLocationId: msg.SLRP.Id,\n    TargetStorageLocationId: msg.SL[0].gStorageLocationId,\n    EventDateTime: msg.TransferStorageLocationEventMessage.EventDateTime\n}\n\nmsg.payload = transferStorageLocationCommand;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "ae382ddec8e6a404",
        "type": "http request",
        "z": "da8ae9bd33a4e199",
        "name": "transfer SLRP",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/v2/Operation/transferStorageLocation",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 2240,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "ad91bb73472577fe",
        "type": "debug",
        "z": "da8ae9bd33a4e199",
        "name": "debug 80",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2220,
        "y": 220,
        "wires": []
    },
    {
        "id": "a1d883d09a5318a6",
        "type": "debug",
        "z": "da8ae9bd33a4e199",
        "name": "debug 81",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 120,
        "wires": []
    },
    {
        "id": "318562b28e77922a",
        "type": "subflow:f2924807aef52857",
        "z": "da8ae9bd33a4e199",
        "name": "",
        "x": 720,
        "y": 260,
        "wires": [
            [
                "51ad6aac8ab9e548"
            ]
        ]
    },
    {
        "id": "420fe20a7b2b4b99",
        "type": "subflow:ca94f48e1f18b542",
        "z": "da8ae9bd33a4e199",
        "name": "",
        "x": 570,
        "y": 260,
        "wires": [
            [
                "318562b28e77922a"
            ]
        ]
    },
    {
        "id": "410d48034474ed43",
        "type": "debug",
        "z": "da8ae9bd33a4e199",
        "name": "debug 82",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1820,
        "y": 200,
        "wires": []
    },
    {
        "id": "7ec75674c6c164e1",
        "type": "function",
        "z": "da8ae9bd33a4e199",
        "name": "function 18",
        "func": "msg.payload = {\n    StorageLocationId: msg.SLRP.Id,\n    TargetStorageLocationId: msg.SL[0].gStorageLocationId,\n    EventDateTime: msg.SLRP.createdAt\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 260,
        "wires": [
            [
                "ad91bb73472577fe",
                "ae382ddec8e6a404"
            ]
        ]
    },
    {
        "id": "5a881703eac12c2a",
        "type": "http request",
        "z": "da8ae9bd33a4e199",
        "name": "transfer SLRP",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/v2/Operation/transferStorageLocation",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1640,
        "y": 400,
        "wires": [
            [
                "dd768e8d961a6994"
            ]
        ]
    },
    {
        "id": "1004e14761831548",
        "type": "switch",
        "z": "da8ae9bd33a4e199",
        "name": "SLRPTransferIsEmpty",
        "property": "SLRPTransfer",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1400,
        "y": 320,
        "wires": [
            [],
            [
                "dd768e8d961a6994"
            ]
        ]
    },
    {
        "id": "75cd4abef365d377",
        "type": "debug",
        "z": "da8ae9bd33a4e199",
        "name": "debug 83",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 380,
        "wires": []
    },
    {
        "id": "a983be43b63b715e",
        "type": "subflow:f2924807aef52857",
        "z": "da8ae9bd33a4e199",
        "name": "",
        "x": 960,
        "y": 320,
        "wires": [
            [
                "07bb19f12490457d"
            ]
        ]
    },
    {
        "id": "9d6515dcb91b2294",
        "type": "subflow:ca94f48e1f18b542",
        "z": "da8ae9bd33a4e199",
        "name": "",
        "x": 810,
        "y": 320,
        "wires": [
            [
                "a983be43b63b715e"
            ]
        ]
    },
    {
        "id": "a14aee8cb3af2602",
        "type": "switch",
        "z": "da8ae9bd33a4e199",
        "name": "szExternalId?",
        "property": "Process[0].szExternalId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CURD",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 600,
        "y": 320,
        "wires": [
            [
                "9d6515dcb91b2294"
            ]
        ]
    },
    {
        "id": "2c6c8afe12231da2",
        "type": "amqp-in",
        "z": "da8ae9bd33a4e199",
        "name": "ProcessStepChangedEvent",
        "broker": "2f76d8b874d08554",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "NR_ProcessStepChangedEvent",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "378557a1b8a9c2cd"
            ]
        ]
    },
    {
        "id": "ebb2c431d54ab00f",
        "type": "loop",
        "z": "da8ae9bd33a4e199",
        "g": "c06981d5c23f52fa",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "SQL",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 1610,
        "y": 500,
        "wires": [
            [
                "7cfd928d3eb4be30"
            ],
            [
                "fd1d155cc093f0a6"
            ]
        ]
    },
    {
        "id": "dd768e8d961a6994",
        "type": "loop",
        "z": "da8ae9bd33a4e199",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "SLRPTransfer",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 1650,
        "y": 320,
        "wires": [
            [],
            [
                "5a881703eac12c2a"
            ]
        ]
    },
    {
        "id": "3c0f107da3504e63",
        "type": "MSSQL",
        "z": "da8ae9bd33a4e199",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Select ProcessById",
        "outField": "Process",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT p.[gId], ee.szExternalId, p.gUserTaskId as 'UserTaskId', p.gOperationId, p.gEquipmentId\r\nFROM [ProductionManagementRunTimeDb].[dbo].[tblProcess] p\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ee ON ee.gEquipmentTreeId=p.gEquipmentId\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystem] es ON es.gId=ee.gExternalSystemId AND es.szName=N'RFID'\r\nWHERE p.gId='{{{Input.Id}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 150,
        "y": 180,
        "wires": [
            [
                "44ba252180094d13"
            ]
        ]
    },
    {
        "id": "d7a1ee88eb4db8d5",
        "type": "MSSQL",
        "z": "da8ae9bd33a4e199",
        "g": "c06981d5c23f52fa",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Select data For Outtake",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @processId UNIQUEIDENTIFIER = @processIdInfo;\r\nSELECT p.gId as 'ProcessId',b.gId as'BatchId',s.gId as 'StorageLocationId',p.gOperationId as 'OperationId',b.nQuantity as 'Quantity', 'true' as 'CompleteOuttake'\r\nFROM [BatchManagementDb].[dbo].[tblBatch] b\r\n\tINNER JOIN [BatchManagementDb].[dbo].[tblStorageLocation] s ON s.gId=b.StorageLocationId AND s.nStaticStorageLocationType = 2 \r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationConsumeStorageLocation] csl ON csl.gStorageLocationId=s.gId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p ON p.gEquipmentId=csl.gEquipmentId AND p.gOperationId=csl.gOperationId\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ee ON ee.[gEquipmentTreeId]=p.gEquipmentId\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystem] es ON es.[gId]=ee.[gExternalSystemId]\r\nWHERE b.bIsCompleted=0 AND es.[szName] = 'RFID' AND p.gId=@processId \r\n\t\tAND ee.szExternalId IN ('301','302','303','304','305','306','401','402','403','404','405','501','502','601','602','981','982','SIFTER')\r\nUNION\r\nSELECT p.gId as 'ProcessId',b.gId as'BatchId',s1.gId as 'StorageLocationId',p.gOperationId as 'OperationId',b.nQuantity as 'Quantity', 'true' as 'CompleteOuttake'\r\nFROM [BatchManagementDb].[dbo].[tblBatch] b\r\n\tINNER JOIN  [BatchManagementDb].[dbo].[tblStorageLocation] s1 ON s1.gId=b.StorageLocationId AND s1.nStorageLocationType=2\r\n\tINNER JOIN [BatchManagementDb].[dbo].[tblStorageLocation] s ON s1.gParentId=s.gId AND s.nStaticStorageLocationType = 2\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationConsumeStorageLocation] csl ON csl.gStorageLocationId=s.gId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p ON p.gEquipmentId=csl.gEquipmentId AND p.gOperationId=csl.gOperationId\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ee ON ee.[gEquipmentTreeId]=p.gEquipmentId\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystem] es ON es.[gId]=ee.[gExternalSystemId]\r\nWHERE b.bIsCompleted=0 AND es.[szName] = 'RFID' AND p.gId=@processId \r\n\t\tAND ee.szExternalId IN ('301','302','303','304','305','306','401','402','403','404','405','501','502','601','602','981','982','SIFTER')\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "processIdInfo",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "payload.Id",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 850,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "2328c98a67319fa4",
        "type": "MSSQL",
        "z": "da8ae9bd33a4e199",
        "g": "478f8ed0060973d1",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "Select Water",
        "outField": "CookingWater",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT pm.gProcessId as 'ProcessId',p.gOperationId as 'OperationId',ISNULL(Water1ActualValue,0)+ISNULL(Water2ActualValue,0) as 'Quantity', os.gStorageLocationId as 'ProduceStorageLocationId'\r\nFROM [dbExchange].[dbo].[tblProcessCheeseMapping] pm\r\n\tINNER JOIN [dbExchange].[dbo].[tblCheeseMakerReport] cr ON pm.nCheeseMakerLink=cr.RowId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p ON p.gId=pm.gProcessId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationProduceStorageLocation] os ON os.gOperationId=p.gOperationId AND os.gEquipmentId=p.gEquipmentId\r\nWHERE pm.gProcessId='{{{Input.Id}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 150,
        "y": 820,
        "wires": [
            [
                "eec1a6ed5866513c"
            ]
        ]
    },
    {
        "id": "ecd216283153df6b",
        "type": "MSSQL",
        "z": "da8ae9bd33a4e199",
        "g": "478f8ed0060973d1",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get Water Batch",
        "outField": "Batch",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT TOP (1) [gId] as 'BatchId',[StorageLocationId] as 'StorageLocationId'\r\nFROM [BatchManagementDb].[dbo].[tblBatch] \r\nWHERE szBatchNumber='Water' AND gAccessId='898634A9-46B5-40C7-8267-C4641FC4C3AD'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 660,
        "y": 820,
        "wires": [
            [
                "6e59586fb3ea7087"
            ]
        ]
    },
    {
        "id": "450e75fc8aa06ddc",
        "type": "MSSQL",
        "z": "da8ae9bd33a4e199",
        "g": "0a91e0b9498a5583",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get  ProduceStorageLocationId",
        "outField": "SL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT s.gId as 'StorageLocationId'\r\nFROM [BatchManagementDb].[dbo].[tblStorageLocation] s \r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationProduceStorageLocation] psl ON psl.gStorageLocationId=s.gId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p ON p.gEquipmentId=psl.gEquipmentId AND p.gOperationId=psl.gOperationId\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ee ON ee.[gEquipmentTreeId]=p.gEquipmentId\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystem] es ON es.[gId]=ee.[gExternalSystemId]\r\nWHERE p.gId='{{{Input.Id}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1110,
        "y": 720,
        "wires": [
            [
                "e0c68448901af3c9"
            ]
        ]
    },
    {
        "id": "2f505a6cebe7a1df",
        "type": "MSSQL",
        "z": "da8ae9bd33a4e199",
        "g": "c06981d5c23f52fa",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Select data For Outtake",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @processId UNIQUEIDENTIFIER = @processIdInfo;\r\nSELECT p.gId as 'ProcessId',b.gId as'BatchId',s.gId as 'StorageLocationId',p.gOperationId as 'OperationId',b.nQuantity as 'Quantity', 'true' as 'CompleteOuttake'\r\nFROM [BatchManagementDb].[dbo].[tblBatch] b\r\n\tINNER JOIN [BatchManagementDb].[dbo].[tblStorageLocation] s ON s.gId=b.StorageLocationId AND s.nStaticStorageLocationType = 2 \r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationConsumeStorageLocation] csl ON csl.gStorageLocationId=s.gId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p ON p.gEquipmentId=csl.gEquipmentId AND p.gOperationId=csl.gOperationId\t\r\nWHERE b.bIsCompleted=0 AND p.gId=@processId \r\n\t\t\r\nUNION\r\nSELECT p.gId as 'ProcessId',b.gId as'BatchId',s1.gId as 'StorageLocationId',p.gOperationId as 'OperationId',b.nQuantity as 'Quantity', 'true' as 'CompleteOuttake'\r\nFROM [BatchManagementDb].[dbo].[tblBatch] b\r\n\tINNER JOIN  [BatchManagementDb].[dbo].[tblStorageLocation] s1 ON s1.gId=b.StorageLocationId AND s1.nStorageLocationType=2\r\n\tINNER JOIN [BatchManagementDb].[dbo].[tblStorageLocation] s ON s1.gParentId=s.gId AND s.nStaticStorageLocationType = 2\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationConsumeStorageLocation] csl ON csl.gStorageLocationId=s.gId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p ON p.gEquipmentId=csl.gEquipmentId AND p.gOperationId=csl.gOperationId\r\nWHERE b.bIsCompleted=0 AND p.gId=@processId ",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "processIdInfo",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "Input.Id",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 850,
        "y": 500,
        "wires": [
            [
                "b25c752966d1c617"
            ]
        ]
    },
    {
        "id": "51ad6aac8ab9e548",
        "type": "MSSQL",
        "z": "da8ae9bd33a4e199",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "GetSLRPType",
        "outField": "SLRPType",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT [nTransferStorageLocationType]\r\n      ,[nWeight]\r\n      ,[szName]\r\n  FROM [BatchManagementDb].[dbo].[tblTransferStorageLocationType]\r\n  WHERE [nTransferStorageLocationType] = 5",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 920,
        "y": 260,
        "wires": [
            [
                "2c988a2c0405ade6"
            ]
        ]
    },
    {
        "id": "2c988a2c0405ade6",
        "type": "MSSQL",
        "z": "da8ae9bd33a4e199",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "GetSL",
        "outField": "SL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT psl.[gStorageLocationId]\r\n   FROM [ProductionManagementRunTimeDb].[dbo].[tblOperationProduceStorageLocation] psl\r\n  WHERE psl.[gOperationId]='{{{Process.0.gOperationId}}}' and psl.[gEquipmentId]='{{{Process.0.gEquipmentId}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1090,
        "y": 260,
        "wires": [
            [
                "0e3c115de887ae78"
            ]
        ]
    },
    {
        "id": "07bb19f12490457d",
        "type": "MSSQL",
        "z": "da8ae9bd33a4e199",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "GetSLRPTransfer",
        "outField": "SLRPTransfer",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @gSL uniqueidentifier, @gASL uniqueidentifier\r\n\r\nSELECT @gSL=psl.[gStorageLocationId],\r\n       @gASL=sl.[gAlternativeStorageLocationId]\r\n   FROM [ProductionManagementRunTimeDb].[dbo].[tblOperationProduceStorageLocation] psl\r\n   INNER JOIN [BatchManagementDb].[dbo].[tblStorageLocation] sl on sl.gId = psl.gStorageLocationId\r\n  WHERE psl.[gOperationId]='{{{Process.0.gOperationId}}}' and psl.[gEquipmentId]='{{{Process.0.gEquipmentId}}}'\r\n\r\nSELECT slrp.[gId] as [StorageLocationId],\r\n       @gASL as [TargetStorageLocationId],\r\n       getUTCDate() as [EventDateTime]\r\n  FROM [BatchManagementDb].[dbo].[tblStorageLocation] slrp \r\n  INNER JOIN [BatchManagementDb].[dbo].[tblStorageLocation] sl on sl.gId = slrp.gParentId\r\n  WHERE slrp.nStorageLocationType = 2 and sl.gId = @gSL",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1170,
        "y": 320,
        "wires": [
            [
                "1004e14761831548",
                "75cd4abef365d377"
            ]
        ]
    },
    {
        "id": "6afa2196edfbc127",
        "type": "MSSQL",
        "z": "da8ae9bd33a4e199",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "UpdateSLRP",
        "outField": "updateSLRP",
        "returnType": 0,
        "throwErrors": 1,
        "query": "UPDATE [BatchManagementDb].[dbo].[tblStorageLocation]\r\n  SET szDescription=szDescription+ ' (' + CAST(nKey as NVARCHAR(50)) + ')'\r\n  WHERE nKey={{{SLRP.key}}}\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1830,
        "y": 260,
        "wires": [
            [
                "7ec75674c6c164e1"
            ]
        ]
    },
    {
        "id": "594216fc97fdfb70",
        "type": "http in",
        "z": "3080ea5fd0475deb",
        "name": "/api/curd/value",
        "url": "/api/curd/value",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "d4c66365e10dd412",
                "f2f1f5c75958c65c",
                "c8fbbe6a343a019d"
            ]
        ]
    },
    {
        "id": "d4c66365e10dd412",
        "type": "http response",
        "z": "3080ea5fd0475deb",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 350,
        "y": 140,
        "wires": []
    },
    {
        "id": "f2f1f5c75958c65c",
        "type": "debug",
        "z": "3080ea5fd0475deb",
        "name": "debug 64",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 200,
        "wires": []
    },
    {
        "id": "ee91c786f93907d4",
        "type": "comment",
        "z": "3080ea5fd0475deb",
        "name": "PZO / UBu/ AGa",
        "info": "",
        "x": 100,
        "y": 40,
        "wires": []
    },
    {
        "id": "190dfbc201313a90",
        "type": "inject",
        "z": "3080ea5fd0475deb",
        "name": "",
        "props": [
            {
                "p": "payload.Output",
                "v": "Отделение 1",
                "vt": "str"
            },
            {
                "p": "payload.Volume",
                "v": "29.5",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 100,
        "y": 240,
        "wires": [
            [
                "77fca768eb289ffd"
            ]
        ]
    },
    {
        "id": "07000b71ef700400",
        "type": "function",
        "z": "3080ea5fd0475deb",
        "name": "OuttakeCommand",
        "func": "let outtakeCommand =\n{\n  processId: msg.result[0].ProcessId,\n  //batchId: msg.result[0].BatchId,\n  operationId: msg.result[0].OperationId,\n  storageLocationId: msg.result[0].StorageLocationId,\n  quantity: msg.result[0].Volume,\n  //completeOuttake: true,\n}\nmsg.payload = outtakeCommand;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 80,
        "wires": [
            [
                "6dfb65c279da4d35",
                "331f239d7c77a529"
            ]
        ]
    },
    {
        "id": "331f239d7c77a529",
        "type": "http request",
        "z": "3080ea5fd0475deb",
        "name": "Outtake",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/outtake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1100,
        "y": 80,
        "wires": [
            [
                "39f2f357e16a1af8"
            ]
        ]
    },
    {
        "id": "58effdf11f3450b5",
        "type": "function",
        "z": "3080ea5fd0475deb",
        "name": "IntakeCommand",
        "func": "let IntakeCommand =\n{\n    processId: msg.result[0].ProcessId,\n    storageLocationId: msg.result[0].StorageLocationIdProduce,\n    operationId: msg.result[0].OperationId,\n    materialId: msg.result[0].MaterialId,\n    quantity: Number(msg.result[0].Volume),\n    doNotCheckQuality: \"false\",\n    comment: null,\n}\n\nmsg.payload = IntakeCommand;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 180,
        "wires": [
            [
                "7e2dba307b9b53ac",
                "a2bafa2e743fa6d5"
            ]
        ]
    },
    {
        "id": "a2bafa2e743fa6d5",
        "type": "http request",
        "z": "3080ea5fd0475deb",
        "name": "Intake",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/Intake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1070,
        "y": 180,
        "wires": [
            [
                "b6cb352ae788ded8"
            ]
        ]
    },
    {
        "id": "39f2f357e16a1af8",
        "type": "switch",
        "z": "3080ea5fd0475deb",
        "name": "statusCode",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1270,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "b6cb352ae788ded8",
        "type": "switch",
        "z": "3080ea5fd0475deb",
        "name": "Error",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1210,
        "y": 180,
        "wires": [
            [
                "4b326aa37c6b45b4",
                "e2c237d1a1898661",
                "a0daac21bec4eeb9"
            ],
            []
        ]
    },
    {
        "id": "0d5b593f5ab83d26",
        "type": "http request",
        "z": "3080ea5fd0475deb",
        "name": "SetBatchParameters",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/SetBatchParameters",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1100,
        "y": 360,
        "wires": [
            [
                "e86e99c89b5fe86e"
            ]
        ]
    },
    {
        "id": "0bce022b1b2b4521",
        "type": "function",
        "z": "3080ea5fd0475deb",
        "name": "PrinterTask",
        "func": "const utcDateStr = msg.Batch.createdAt;\nconst date = new Date(utcDateStr);\nconst hoursToAdd = msg.result[0].MaterialExpirationDurationHr;\ndate.setHours(date.getHours() + hoursToAdd);\nconst localDateTimeStr = date;\n\n\nconst data = {\n    BatchQuantity: msg.Batch.quantity ?? '',\n    BatchNumberSAP: msg.NumberSAP ?? '', \n    BatchCreatedAt: formatDate(new Date(msg.Batch.createdAt)) ?? '',\n    BestBeforeDate: formatDate(localDateTimeStr),\n    ExpirationDays: hoursToDays(hoursToAdd),\n    BatchNumber: msg.Batch.key,\n    ProcessNumber: msg.result[0].nKeyProcess,\n    BatchMaterial: msg.result[0].BatchMaterialName,\n    ProductionOrderNumber: msg.result[0].ProductionOrderNumber,\n    OperationNumber: msg.result[0].OperationNumber\n};\n\nconst taskData = {\n    taskOwnerId: msg.result[0].ProcessId,\n    templateGroup:  '',\n    templateOwnerId: msg.result[0].ProcessId,\n    data: data,\n};\n\nmsg.payload = taskData;\n\nreturn msg;\n\nfunction formatDate(date) {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n\n    return `${year}.${month}.${day} ${hours}:${minutes}`;\n}\n\nfunction hoursToDays(hours) { return Math.floor(hours / 24); }\n ",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 240,
        "wires": [
            [
                "2051889afc248716"
            ]
        ]
    },
    {
        "id": "f4ca395bd991c225",
        "type": "http request",
        "z": "3080ea5fd0475deb",
        "name": "PrinterTask",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.QAUrl}}}/api/PrinterTask/print/7268c0a2-9eb5-485d-9b10-a5894ffad26c",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1650,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "4b326aa37c6b45b4",
        "type": "debug",
        "z": "3080ea5fd0475deb",
        "name": "debug 130",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 180,
        "wires": []
    },
    {
        "id": "e2c237d1a1898661",
        "type": "function",
        "z": "3080ea5fd0475deb",
        "name": "SetBatchParametersCommand",
        "func": "const data = JSON.parse(JSON.stringify(msg.payload));\n//node.warn(data);\nconst batch = data.batches[0];\n//const batch = data.batches.filter(x => x.processId == msg.result[0].ProcessId).at(-1);\n//node.warn(batch);\n\nconst utcDateStr = msg.result[0].MaterialCreatedAt;\nconst date = new Date(utcDateStr);\nconst hoursToAdd = msg.result[0].MaterialExpirationDurationHr;\ndate.setHours(date.getHours() + hoursToAdd);\nconst localDateTimeStr = date;\n\nconst numberSAP = calculateCode();\n\nlet SetBatchParameters =\n{\n    BatchId: batch.id,\n    Expiration: localDateTimeStr,\n    NumberSAP: numberSAP,\n    BatchNumber: msg.result[0].nkeyProcess\n}\n\nmsg.NumberSAP = numberSAP;\nmsg.payload = SetBatchParameters;\nmsg.Batch = batch;\n\nreturn msg;\n\nfunction calculateCode() {\n  const date = new Date();\n  const year = date.getFullYear();\n  \n  // Получаем последнюю цифру года\n  const lastDigitOfYear = year % 10;\n\n  // Получаем порядковый номер дня в году\n  const startOfYear = new Date(year, 0, 1).getTime();\n  const dateInMilliseconds  = date.getTime();\n  // Начало года\n  const dayOfYear = Math.floor((dateInMilliseconds - startOfYear) / (24 * 60 * 60 * 1000)) + 1;\n\n  // Получаем текущее время в формате HH:mm\n  const hours = date.getHours();\n\n  // Определяем партию\n  const party = (hours >= 0 && hours < 8) ? \"01\" : \"02\";\n\n  // Формируем код как строку\n  const code = `92${lastDigitOfYear}${dayOfYear.toString().padStart(3, '0')}${party}`;\n\n  return code;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 280,
        "wires": [
            [
                "0d5b593f5ab83d26",
                "0bce022b1b2b4521"
            ]
        ]
    },
    {
        "id": "2051889afc248716",
        "type": "debug",
        "z": "3080ea5fd0475deb",
        "name": "debug 131",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 300,
        "wires": []
    },
    {
        "id": "db63bd46091a4349",
        "type": "subflow:ca94f48e1f18b542",
        "z": "3080ea5fd0475deb",
        "name": "",
        "x": 550,
        "y": 240,
        "wires": [
            [
                "0127220591848bd3"
            ]
        ]
    },
    {
        "id": "0127220591848bd3",
        "type": "subflow:f2924807aef52857",
        "z": "3080ea5fd0475deb",
        "name": "",
        "x": 700,
        "y": 240,
        "wires": [
            [
                "07000b71ef700400",
                "58effdf11f3450b5"
            ]
        ]
    },
    {
        "id": "89e0a3521d682783",
        "type": "switch",
        "z": "3080ea5fd0475deb",
        "name": "result!=NULL",
        "property": "result",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 240,
        "wires": [
            [
                "db63bd46091a4349"
            ],
            []
        ]
    },
    {
        "id": "f0baa292de635294",
        "type": "debug",
        "z": "3080ea5fd0475deb",
        "name": "debug 156",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "result[0]",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 320,
        "wires": []
    },
    {
        "id": "7e2dba307b9b53ac",
        "type": "debug",
        "z": "3080ea5fd0475deb",
        "name": "debug 173",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 120,
        "wires": []
    },
    {
        "id": "07ee7029e512aaca",
        "type": "debug",
        "z": "3080ea5fd0475deb",
        "name": "debug 174",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 60,
        "wires": []
    },
    {
        "id": "6dfb65c279da4d35",
        "type": "debug",
        "z": "3080ea5fd0475deb",
        "name": "debug 176",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 20,
        "wires": []
    },
    {
        "id": "e86e99c89b5fe86e",
        "type": "debug",
        "z": "3080ea5fd0475deb",
        "name": "debug 186",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 360,
        "wires": []
    },
    {
        "id": "36207c97f6cec063",
        "type": "function",
        "z": "3080ea5fd0475deb",
        "name": "CompleteBatchCommand",
        "func": "let completeBatchCommand =\n{\n  storageLocationId: msg.payload.gStorageLocationId,\n  batchId: msg.payload.gBatchId\n}\n\nmsg.payload = completeBatchCommand;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 600,
        "wires": [
            [
                "82d4e4b59a6fcb62"
            ]
        ]
    },
    {
        "id": "82d4e4b59a6fcb62",
        "type": "http request",
        "z": "3080ea5fd0475deb",
        "name": "CompleteBatch",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/completeBatch",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1480,
        "y": 600,
        "wires": [
            [
                "86a54b367647a4bb",
                "65912ee469572f4a"
            ]
        ]
    },
    {
        "id": "a0daac21bec4eeb9",
        "type": "switch",
        "z": "3080ea5fd0475deb",
        "name": "BatchSort",
        "property": "result[0].BatchMaterialName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "RB8904",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1500,
        "y": 100,
        "wires": [
            [
                "07ee7029e512aaca",
                "52484a51890a2c66"
            ]
        ]
    },
    {
        "id": "079675fcd5f478f4",
        "type": "inject",
        "z": "3080ea5fd0475deb",
        "name": "Ежедневно 10:10",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "10 10 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "c62d84f29b73d85c"
            ]
        ]
    },
    {
        "id": "8296f1d7d6ede9e5",
        "type": "inject",
        "z": "3080ea5fd0475deb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 600,
        "wires": [
            [
                "92b114fdb052dca1"
            ]
        ]
    },
    {
        "id": "4b65cda168cc7969",
        "type": "debug",
        "z": "3080ea5fd0475deb",
        "name": "debug 189",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 560,
        "wires": []
    },
    {
        "id": "a6f0584e6057e409",
        "type": "split",
        "z": "3080ea5fd0475deb",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 810,
        "y": 600,
        "wires": [
            [
                "445df9be282781ed"
            ]
        ]
    },
    {
        "id": "445df9be282781ed",
        "type": "delay",
        "z": "3080ea5fd0475deb",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1010,
        "y": 600,
        "wires": [
            [
                "36207c97f6cec063"
            ]
        ]
    },
    {
        "id": "92b114fdb052dca1",
        "type": "subflow:ca94f48e1f18b542",
        "z": "3080ea5fd0475deb",
        "name": "",
        "x": 270,
        "y": 600,
        "wires": [
            [
                "15d685c2d2eb8098"
            ]
        ]
    },
    {
        "id": "15d685c2d2eb8098",
        "type": "subflow:f2924807aef52857",
        "z": "3080ea5fd0475deb",
        "name": "",
        "x": 420,
        "y": 600,
        "wires": [
            [
                "108db864725c39de"
            ]
        ]
    },
    {
        "id": "86a54b367647a4bb",
        "type": "switch",
        "z": "3080ea5fd0475deb",
        "name": "Error",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1650,
        "y": 600,
        "wires": [
            [
                "c4b727139aa82d7f"
            ],
            [
                "eb260714e1ef2529"
            ]
        ]
    },
    {
        "id": "eb260714e1ef2529",
        "type": "debug",
        "z": "3080ea5fd0475deb",
        "name": "debug 193",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 660,
        "wires": []
    },
    {
        "id": "65912ee469572f4a",
        "type": "debug",
        "z": "3080ea5fd0475deb",
        "name": "debug 194",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 540,
        "wires": []
    },
    {
        "id": "e8b51066ee198056",
        "type": "comment",
        "z": "3080ea5fd0475deb",
        "name": "завершить партии по творогу",
        "info": "",
        "x": 150,
        "y": 560,
        "wires": []
    },
    {
        "id": "6f2fd32770c360f7",
        "type": "comment",
        "z": "3080ea5fd0475deb",
        "name": "запоминаем партии по творогу",
        "info": "",
        "x": 1630,
        "y": 40,
        "wires": []
    },
    {
        "id": "52484a51890a2c66",
        "type": "switch",
        "z": "3080ea5fd0475deb",
        "name": "payload.batches[0].id",
        "property": "payload.batches[0].id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1720,
        "y": 100,
        "wires": [
            [
                "e4eb5c377f4af45b"
            ],
            []
        ]
    },
    {
        "id": "c8fbbe6a343a019d",
        "type": "MSSQL",
        "z": "3080ea5fd0475deb",
        "mssqlCN": "6c4551b7b08b27f9",
        "name": "tblCurdValueNRLog",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "  INSERT INTO [dbExchange].[dbo].[tblCurdValueNRLog]\r\n  VALUES(N'{{{payload.Output}}}','{{{payload.Volume}}}',\r\n    '{{{payload.StartTime}}}','{{{payload.EndTime}}}',GETDATE())",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 390,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "28120db938d59284",
        "type": "MSSQL",
        "z": "3080ea5fd0475deb",
        "d": true,
        "mssqlCN": "a0513bd15284c98d",
        "name": "GetDate",
        "outField": "result",
        "returnType": 0,
        "throwErrors": 1,
        "query": "-- input\r\nDECLARE @output nvarchar(255) = @outputInfo;\r\nDECLARE @volume nvarchar(255) = @volumeInfo;\r\n\r\n-- const\r\nDECLARE @szExternalSystemName nvarchar(255) = 'ASUTP'\r\nDECLARE @szEquipmentTreeNumberSAP nvarchar(255) = '1950' -- 1950\r\n\r\n-- received\r\nDECLARE @gExternalSystemId uniqueidentifier\r\n\t\t,@gEquipmentTreeId uniqueidentifier\r\n\t\t,@gExternalSystemToEquipmentEquipmentTreeId uniqueidentifier\r\n\t\t,@data datetime = GETUTCDATE()\r\n\t\t,@gMaterialId uniqueidentifier\r\n\t\t,@szNameMaterial nvarchar(255)\r\n\t\t,@gProductionOrderId uniqueidentifier\r\n\t\t,@gOperationId uniqueidentifier\r\n\t\t,@gBatchId uniqueidentifier\r\n\t\t,@gStorageLocationId uniqueidentifier\r\n\t\t,@gStorageLocationIdProduce uniqueidentifier\r\n\t\t,@dtMaterialCreatedAt datetime\r\n\t\t,@nMaterialExpirationDurationHr int\r\n\t\t,@szBatchNumberSAP nvarchar(255)\r\n\t\t,@dtBatchCreatedAt datetime\r\n\t\t,@nBatchQuantity decimal(18,6)\r\n\t\t,@szBatchMaterialName nvarchar(255)\r\n\t\t,@szOperationNumber nvarchar(255)\r\n\t\t,@szProductionOrderNumber nvarchar(255)\r\n\t\t,@gProcessId uniqueidentifier\r\n\t\t,@szStep nvarchar(255)\r\n\t\t,@gUserTaskId uniqueidentifier\r\n\t\t,@nKeyProcess int\r\n\r\nDECLARE @tblOperationTemplateEquipment TABLE (gId uniqueidentifier,gEquipmentId uniqueidentifier,gOperationTemplateId uniqueidentifier)\r\nDECLARE @tblOperationConsumeStorageLocation TABLE (gStorageLocationId uniqueidentifier)\r\nDECLARE @tblOperationProduceStorageLocation TABLE (gStorageLocationId uniqueidentifier)\r\nDECLARE @tblOperation TABLE (gMaterialId uniqueidentifier, gOperation uniqueidentifier,gProductionOrderId uniqueidentifier,szNumberOperation nvarchar(255),szNumberProductionOrder nvarchar(255), gProcessId uniqueidentifier,szStep nvarchar(255),gUserTaskId uniqueidentifier,nKeyProcess int)\r\n\r\nSELECT TOP (1) @gExternalSystemId = [gId] FROM [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystem] WHERE szName = @szExternalSystemName;\r\n\r\n-- проверка есть ли запись по @externalSystemName\r\nIF @szExternalSystemName IS NULL\r\nBEGIN\r\n    RAISERROR('Error: No records found for szName = ''ASUTP''.', 16, 1);\r\n\tRETURN\r\n   -- THROW 50000, 'Error: No records found for szName = ''ASUTP''.', 1;\r\nEND\r\n\r\n-- получение 1 записи по @equipmentTreeNumberSAP\r\nSELECT TOP (1) @gEquipmentTreeId = [gId] FROM [HLRURASAP100].[BaseClassifiers].[dbo].[tblEquipmentTree] WHERE szNumberSAP = @szEquipmentTreeNumberSAP\r\n\r\n-- получение 1 записи \r\nSELECT TOP(1) @gExternalSystemToEquipmentEquipmentTreeId = ESE.[gEquipmentTreeId]\r\nFROM [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ESE\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblEquipmentTree] ET\r\n\tON ESE.gEquipmentTreeId = ET.gId\r\nWHERE [gExternalSystemId] = @gExternalSystemId AND szExternalId = @output AND ET.gAccessId = @gEquipmentTreeId\r\n\r\nINSERT INTO @tblOperationTemplateEquipment\r\n\tSELECT [gId], [gEquipmentId], [gOperationTemplateId]\r\n\tFROM [HLRURASAP100].[ProductionManagementMasterData].[dbo].[tblOperationTemplateEquipment]\r\n\tWHERE gEquipmentId = @gExternalSystemToEquipmentEquipmentTreeId \r\n\r\n-- получем операции\r\nINSERT INTO @tblOperation\r\nSELECT po.gMaterialId, o.gId, o.gProductionOrderId, o.szNumber, po.szNumber, p.gId, p.szStep, p.gUserTaskId, p.nKey\r\nFROM [ProductionManagementRunTimeDb].[dbo].[tblEquipmentAllocationWork] as eaw\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperation] as o ON o.[gId] = eaw.gOperationId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProductionOrder] as po ON po.gId=o.gProductionOrderId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] as p ON p.gOperationId = o.[gId]\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblShiftRuntime] sr ON sr.gId=po.gShiftRuntimeId\r\nWHERE eaw.gEquipmentId = @gExternalSystemToEquipmentEquipmentTreeId and  @data BETWEEN sr.[dtStart] AND sr.[dtEnd]\r\n\r\nINSERT INTO @tblOperationConsumeStorageLocation\r\n\tSELECT [gStorageLocationId]\r\n\tFROM [ProductionManagementRunTimeDb].[dbo].[tblOperationConsumeStorageLocation] ocsl\r\n\t\tINNER JOIN @tblOperation rto ON rto.gOperation = ocsl.gOperationId\r\n\tWHERE ocsl.gEquipmentId = @gExternalSystemToEquipmentEquipmentTreeId \r\n\r\n-- Проверка на наличие любых незавершенных партий по любым StorageLocationId\r\nIF NOT EXISTS (SELECT 1 FROM [BatchManagementDb].[dbo].[tblBatch] b\r\n\t\t\t\t\tINNER JOIN @tblOperationConsumeStorageLocation rtocsl ON rtocsl.gStorageLocationId = b.StorageLocationId\r\n\t\t\t\t\tWHERE b.bIsCompleted = 0)\r\nBEGIN\r\n    RAISERROR('Error: No uncompleted batches found for the specified StorageLocationIds.', 16, 1);\r\n    RETURN;\r\nEND\r\n\r\n-- Проверка на наличие незавершенных партий только по одному StorageLocationId\r\nIF EXISTS (SELECT b.StorageLocationId FROM [BatchManagementDb].[dbo].[tblBatch] b\r\n\t\t\tINNER JOIN @tblOperationConsumeStorageLocation rtocsl ON rtocsl.gStorageLocationId = b.StorageLocationId\r\n\t\tWHERE b.bIsCompleted = 0\r\n\t\tGROUP BY b.StorageLocationId\r\n\t\tHAVING COUNT(DISTINCT b.StorageLocationId) > 1) -- Проверка на наличие только одной незавершенной партии по StorageLocationId\r\n\r\nBEGIN\r\n   RAISERROR('Error: Uncompleted batches exist for a specific StorageLocationId.', 16, 1);\r\n   RETURN;\r\nEND\r\n\r\n-- Проверка на наличие партий с только одним материалом\r\nIF EXISTS (SELECT b.gMaterialId FROM [BatchManagementDb].[dbo].[tblBatch] b\r\n\t\t\tINNER JOIN @tblOperationConsumeStorageLocation rtocsl ON rtocsl.gStorageLocationId = b.StorageLocationId\r\n\t\tWHERE b.bIsCompleted = 0\r\n\t\tGROUP BY  b.gMaterialId\r\n\t\tHAVING COUNT(DISTINCT b.gMaterialId) > 1)  -- Условие проверяет, что у партии больше одного уникального материала\r\n\r\nBEGIN\r\n   RAISERROR('Error: One or more batches have more than one material.', 16, 1);\r\n   RETURN;\r\nEND\r\n-- Если все проверки пройдены, можно продолжить выполнение запроса\r\nSELECT TOP(1) \r\n\t--@gMaterialId = b.gMaterialId,\r\n\t@gBatchId = b.gId,\r\n\t@gStorageLocationId = b.StorageLocationId,\r\n\t@dtBatchCreatedAt = [dtCreatedAt],\r\n    @szBatchNumberSAP = [szNumberSAP],\r\n\t@nBatchQuantity = [nQuantity]\r\nFROM [BatchManagementDb].[dbo].[tblBatch] b\r\nINNER JOIN @tblOperationConsumeStorageLocation rtocsl ON rtocsl.gStorageLocationId = b.StorageLocationId\r\nWHERE bIsCompleted = 0;\r\n\r\nSELECT TOP(1)\r\n\t@gMaterialId = rto.gMaterialId,\r\n\t@gProductionOrderId = rto.gProductionOrderId,\r\n\t@gOperationId = rto.gOperation,\r\n\t@szOperationNumber = rto.szNumberOperation,\r\n\t@szProductionOrderNumber = rto.szNumberProductionOrder,\r\n\t@gProcessId = rto.gProcessId,\r\n\t@szStep = rto.szStep,\r\n\t@gUserTaskId = rto.gUserTaskId,\r\n\t@nKeyProcess = rto.nKeyProcess\r\n\r\nFROM @tblOperation as rto\r\n\r\nIF @gProductionOrderId IS NULL\r\nBEGIN\r\n    RAISERROR('Error: no suitable ProductionOrder.', 16, 1);\r\n\tRETURN\r\nEND\r\n\r\nINSERT INTO @tblOperationProduceStorageLocation\r\nSELECT [gStorageLocationId]\r\nFROM [ProductionManagementRunTimeDb].[dbo].[tblOperationProduceStorageLocation] ocsl\r\n\tINNER JOIN @tblOperation rto ON rto.gOperation = ocsl.gOperationId\r\nWHERE ocsl.gEquipmentId = @gExternalSystemToEquipmentEquipmentTreeId \r\n\r\nIF (SELECT COUNT(DISTINCT [gStorageLocationId])\r\n    FROM [ProductionManagementRunTimeDb].[dbo].[tblOperationProduceStorageLocation] ocsl\r\n    INNER JOIN @tblOperation rto ON rto.gOperation = ocsl.gOperationId\r\n    WHERE ocsl.gEquipmentId = @gExternalSystemToEquipmentEquipmentTreeId) > 1\r\nBEGIN\r\n    RAISERROR('More than one unique storage location found.', 16, 1);\r\nEND\r\n\r\nSELECT TOP(1) @gStorageLocationIdProduce = gStorageLocationId\r\nFROM @tblOperationProduceStorageLocation\r\n\r\nSELECT TOP(1) @dtMaterialCreatedAt = [dtCreatedAt], @nMaterialExpirationDurationHr = [nExpirationDurationHr], @szBatchMaterialName = [szName]\r\nFROM [HLRURASAP100].[BaseClassifiers].[dbo].[tblMaterial] where [gId] = @gMaterialId\r\n\r\nIF @dtMaterialCreatedAt IS NULL\r\nBEGIN\r\n    RAISERROR('Error: no found info material.', 16, 1);\r\n\tRETURN\r\nEND\r\n\r\nSELECT \r\n\t@gOperationId as OperationId,\r\n\t@gExternalSystemToEquipmentEquipmentTreeId as EquipmentId,\r\n\t--@equipmentTreeId as EquipmentId,\r\n\t@gBatchId as BatchId,\r\n\t@gStorageLocationId as StorageLocationId,\r\n\t@gMaterialId as MaterialId,\r\n\t@szNameMaterial as MaterialName,\r\n\t@volume as Volume,\r\n\t@gStorageLocationIdProduce as StorageLocationIdProduce,\r\n\t@dtMaterialCreatedAt as MaterialCreatedAt,\r\n\t@nMaterialExpirationDurationHr as MaterialExpirationDurationHr,\r\n\t@dtBatchCreatedAt as BatchCreatedAt,\r\n    @szBatchNumberSAP as BatchNumberSAP,\r\n\t@nBatchQuantity as BatchQuantity,\r\n\t@szBatchMaterialName as BatchMaterialName,\r\n\t@szOperationNumber as OperationNumber,\r\n\t@szProductionOrderNumber as ProductionOrderNumber,\r\n\t@gProcessId as ProcessId,\r\n\t@szStep as szProcessStep,\r\n\t@gUserTaskId as gUserTaskId,\r\n\t@nKeyProcess as nKeyProcess",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "outputInfo",
                "type": "NVarChar(255)",
                "valueType": "msg",
                "value": "payload.Output",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "volumeInfo",
                "type": "NVarChar(255)",
                "valueType": "msg",
                "value": "payload.Volume",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 660,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "e4eb5c377f4af45b",
        "type": "MSSQL",
        "z": "3080ea5fd0475deb",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "BatchTempStorage",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "USE [BatchManagementDb]\r\nIF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tblBatchTempStorage]') AND type in (N'U'))\r\n\tBEGIN\r\n\t\tCREATE TABLE [dbo].[tblBatchTempStorage](\r\n\t\t\t[gBatchId] [uniqueidentifier] NOT NULL,\r\n\t\t\t[dtCreatedAt] [datetime2](7) NOT NULL,\r\n\t\t CONSTRAINT [PK_tblBatchTempStorage] PRIMARY KEY CLUSTERED \r\n\t\t(\r\n\t\t\t[gBatchId] ASC\r\n\t\t)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\r\n\t\t) ON [PRIMARY]\r\n\tEND\r\n\r\nINSERT INTO [BatchManagementDb].[dbo].[tblBatchTempStorage](gBatchId,dtCreatedAt)\r\n    VALUES ('{{{payload.batches.0.id}}}',GETUTCDATE());",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1950,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "c62d84f29b73d85c",
        "type": "MSSQL",
        "z": "3080ea5fd0475deb",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "Delete tblCurdValueNRLog older 30days",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "  DELETE FROM [dbExchange].[dbo].[tblCurdValueNRLog] WHERE dtCreatedAt < (GETDATE() -30)",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 460,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "108db864725c39de",
        "type": "MSSQL",
        "z": "3080ea5fd0475deb",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "BatchTempStorage",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT * FROM [BatchManagementDb].[dbo].[tblBatchTempStorage];",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 610,
        "y": 600,
        "wires": [
            [
                "4b65cda168cc7969",
                "a6f0584e6057e409"
            ]
        ]
    },
    {
        "id": "c4b727139aa82d7f",
        "type": "MSSQL",
        "z": "3080ea5fd0475deb",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "BatchTempStorage",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DELETE FROM [BatchManagementDb].[dbo].[tblBatchTempStorage]\r\nWHERE [gBatchId] = '{{{payload.batches.0.id}}}';\r\n\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1830,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "77fca768eb289ffd",
        "type": "MSSQL",
        "z": "3080ea5fd0475deb",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "GetData",
        "outField": "result",
        "returnType": 0,
        "throwErrors": 1,
        "query": "-- input\r\nDECLARE @output nvarchar(255) = @outputInfo;\r\nDECLARE @volume nvarchar(255) = @volumeInfo;\r\n\r\nDECLARE  @gAcessId uniqueidentifier\r\n\t\t,@gExternalSystemToEquipmentEquipmentTreeId uniqueidentifier\r\n\t\t,@data datetime = GETUTCDATE()\r\n\t\t,@gMaterialId uniqueidentifier\r\n\t\t,@szNameMaterial nvarchar(255)\r\n\t\t,@gProductionOrderId uniqueidentifier\r\n\t\t,@gOperationId uniqueidentifier\r\n\t\t,@gBatchId uniqueidentifier\r\n\t\t,@gStorageLocationId uniqueidentifier\r\n\t\t,@gStorageLocationIdProduce uniqueidentifier\r\n\t\t,@dtMaterialCreatedAt datetime\r\n\t\t,@nMaterialExpirationDurationHr int\r\n\t\t,@szBatchNumberSAP nvarchar(255)\r\n\t\t,@dtBatchCreatedAt datetime\r\n\t\t,@nBatchQuantity decimal(18,6)\r\n\t\t,@szBatchMaterialName nvarchar(255)\r\n\t\t,@szOperationNumber nvarchar(255)\r\n\t\t,@szProductionOrderNumber nvarchar(255)\r\n\t\t,@gProcessId uniqueidentifier\r\n\t\t,@szStep nvarchar(255)\r\n\t\t,@gUserTaskId uniqueidentifier\r\n\t\t,@nKeyProcess int\r\n\r\n\r\nDECLARE @tblConsumeSL TABLE (gStorageLocationId uniqueidentifier)\r\nDECLARE @tblProduceSL TABLE (gStorageLocationId uniqueidentifier)\r\n\r\nDECLARE @tblOperation TABLE (gMaterialId uniqueidentifier, gOperation uniqueidentifier,gProductionOrderId uniqueidentifier,szPOName nvarchar(255),szOName nvarchar(255))\r\n\r\nDECLARE @tblProcess TABLE(gProcessId uniqueidentifier,gEquipmentId uniqueidentifier,gOperationId uniqueidentifier,nProcessLink int)\r\n\r\n-- получение 1 записи по @equipmentTreeNumberSAP\r\nSELECT TOP (1) @gAcessId = [gId] FROM [HLRURASAP100].[BaseClassifiers].[dbo].[tblEquipmentTree] WHERE szNumberSAP = '1950'\r\n\r\n-- получение 1 записи \r\nINSERT INTO @tblProcess\r\n\tSELECT TOP 1 p.gId,p.gEquipmentId,p.gOperationId,p.nKey\r\n\tFROM [ProductionManagementRunTimeDb].[dbo].[tblProcess] p\r\n\t\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ese ON ese.gEquipmentTreeId=p.gEquipmentId AND ese.[szExternalId]=@output\r\n\t\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystem] es ON es.gId=ese.[gExternalSystemId] AND es.[szName] = 'ASUTP'\r\n\tWHERE p.[szStep]='InProcess' AND p.dtStartedAt > (@data -1)\r\n\tORDER BY p.dtCreatedAt\r\n\r\nINSERT INTO @tblConsumeSL\r\n\tSELECT [gStorageLocationId]\r\n\tFROM [ProductionManagementRunTimeDb].[dbo].[tblOperationConsumeStorageLocation] csl\r\n\t\tINNER JOIN @tblProcess p ON p.gOperationId=csl.gOperationId AND p.gEquipmentId=csl.gEquipmentId\r\n\r\nSELECT TOP(1) \r\n\t--@gMaterialId = b.gMaterialId,\r\n\t@gBatchId = b.gId,\r\n\t@gStorageLocationId = b.StorageLocationId,\r\n\t@dtBatchCreatedAt = [dtCreatedAt],\r\n    @szBatchNumberSAP = [szNumberSAP],\r\n\t@nBatchQuantity = [nQuantity]\r\nFROM [BatchManagementDb].[dbo].[tblBatch] b\r\nINNER JOIN @tblConsumeSL csl ON csl.gStorageLocationId = b.StorageLocationId\r\nWHERE bIsCompleted = 0;\r\n\r\nINSERT INTO @tblProduceSL\r\n\tSELECT [gStorageLocationId]\r\n\tFROM [ProductionManagementRunTimeDb].[dbo].[tblOperationProduceStorageLocation] psl\r\n\t\tINNER JOIN @tblProcess p ON p.gOperationId = psl.gOperationId AND p.gEquipmentId=psl.gEquipmentId\r\n\r\nSELECT TOP(1) @gStorageLocationIdProduce = gStorageLocationId FROM @tblProduceSL\r\n\r\nINSERT INTO @tblOperation\r\n\tSELECT po.gMaterialId,o.gId,po.gId,po.szNumber,o.szNumber\r\n\tFROM [ProductionManagementRunTimeDb].[dbo].[tblOperation] o\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProductionOrder] po ON po.gId=o.gProductionOrderId\r\n\tINNER JOIN @tblProcess p ON p.gOperationId=o.gId\r\n\r\nSELECT TOP(1)\r\n\t@gMaterialId = gMaterialId,\r\n\t@gProductionOrderId = gProductionOrderId,\r\n\t@gOperationId = gOperation\t\r\nFROM @tblOperation\r\n\r\nSELECT TOP(1) @dtMaterialCreatedAt = [dtCreatedAt], @nMaterialExpirationDurationHr = [nExpirationDurationHr], @szBatchMaterialName = [szName]\r\nFROM [HLRURASAP100].[BaseClassifiers].[dbo].[tblMaterial] where [gId] = @gMaterialId\r\n\r\nSELECT \r\n\tp.gOperationId as OperationId,\r\n\tp.gEquipmentId as EquipmentId,\r\n\t@gBatchId as BatchId,\r\n\t@gStorageLocationId as StorageLocationId,\r\n\t@gMaterialId as MaterialId,\r\n\t@szNameMaterial as MaterialName,\r\n\t@volume as Volume,\r\n\t@gStorageLocationIdProduce as StorageLocationIdProduce,\r\n\t@dtMaterialCreatedAt as MaterialCreatedAt,\r\n\t@nMaterialExpirationDurationHr as MaterialExpirationDurationHr,\r\n\t@dtBatchCreatedAt as BatchCreatedAt,\r\n    @szBatchNumberSAP as BatchNumberSAP,\r\n\t@nBatchQuantity as BatchQuantity,\r\n\t@szBatchMaterialName as BatchMaterialName,\t\r\n\tp.gProcessId as ProcessId\r\n\t,o.szOName as OperationNumber\r\n\t,o.szPOName as ProductionOrderNumber\r\n\t,p.nProcessLink as nKeyProcess\r\n\tFROM @tblProcess p\r\n\t\tINNER JOIN @tblOperation o ON o.gOperation=p.gOperationId",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "outputInfo",
                "type": "NVarChar(255)",
                "valueType": "msg",
                "value": "payload.Output",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "volumeInfo",
                "type": "NVarChar(255)",
                "valueType": "msg",
                "value": "payload.Volume",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 260,
        "y": 240,
        "wires": [
            [
                "f0baa292de635294",
                "89e0a3521d682783"
            ]
        ]
    },
    {
        "id": "ef99196b9b5ee0c4",
        "type": "inject",
        "z": "a91bf94969659a0b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "120",
        "crontab": "",
        "once": false,
        "onceDelay": "120",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "4728a03f74d6e98f"
            ]
        ]
    },
    {
        "id": "978fb641f63f9008",
        "type": "debug",
        "z": "a91bf94969659a0b",
        "name": "debug 66",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 420,
        "wires": []
    },
    {
        "id": "47d0ac2ee37a585f",
        "type": "function",
        "z": "a91bf94969659a0b",
        "name": "prepere data",
        "func": "let sampleRef =[];\nmsg.SQL.forEach(function(element) {\n      sampleRef.push(element.szSampRef)\n  });\nlet sampleRefUnique =  [...new Set(sampleRef)];//уникальные szSampRef\n//node.warn(sampleRefUnique);\nmsg.payload=[];\n\nsampleRefUnique.forEach(function(element) {\n  let samples = [];\n  let request ={};\n  msg.SQL.filter(x=> x.szSampRef== element).forEach(function(value) {\n    request.sampleId = value.szSampleId;\n    request.laboratoryEquipmentId = value.gLabEquipmentId;\n    request.lotId = value.szSampleId;\n    request.sampledAt = value.tDateTime;\n    request.material = value.szProdName\n   samples.push({\"parameterCode\": value.szName,\n                 \"value\":  value.fValue})\n                });\n  request.sampleValues = samples\n  msg.payload.push(request)\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 220,
        "wires": [
            [
                "7039253434cfebc0"
            ]
        ]
    },
    {
        "id": "d3f79018574eb752",
        "type": "http request",
        "z": "a91bf94969659a0b",
        "name": "htttp put outtake",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.LabEquipmentUrl}}}/api/LaboratoryDataAssignment/createSample",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 340,
        "y": 340,
        "wires": [
            [
                "d38c246f0c0b8de1",
                "978fb641f63f9008"
            ]
        ]
    },
    {
        "id": "3b56eb067d898d76",
        "type": "subflow:f2924807aef52857",
        "z": "a91bf94969659a0b",
        "name": "",
        "x": 900,
        "y": 80,
        "wires": [
            [
                "47d0ac2ee37a585f"
            ]
        ]
    },
    {
        "id": "425bd6b3ac70a5c7",
        "type": "subflow:ca94f48e1f18b542",
        "z": "a91bf94969659a0b",
        "name": "",
        "x": 730,
        "y": 80,
        "wires": [
            [
                "3b56eb067d898d76"
            ]
        ]
    },
    {
        "id": "1235446ccc356ef6",
        "type": "switch",
        "z": "a91bf94969659a0b",
        "name": "",
        "property": "SQL",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 570,
        "y": 80,
        "wires": [
            [
                "425bd6b3ac70a5c7"
            ]
        ]
    },
    {
        "id": "d38c246f0c0b8de1",
        "type": "switch",
        "z": "a91bf94969659a0b",
        "name": "ResponseStatusCode",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 560,
        "y": 340,
        "wires": [
            [
                "662f9ba7cb68cdea",
                "0240a196e76aa6ce"
            ],
            [
                "7039253434cfebc0"
            ]
        ]
    },
    {
        "id": "0240a196e76aa6ce",
        "type": "debug",
        "z": "a91bf94969659a0b",
        "name": "debug 67",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 480,
        "wires": []
    },
    {
        "id": "ea0c1a466e42ebeb",
        "type": "comment",
        "z": "a91bf94969659a0b",
        "name": "PZO",
        "info": "",
        "x": 70,
        "y": 20,
        "wires": []
    },
    {
        "id": "7039253434cfebc0",
        "type": "loop",
        "z": "a91bf94969659a0b",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "payload",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 370,
        "y": 220,
        "wires": [
            [],
            [
                "d3f79018574eb752"
            ]
        ]
    },
    {
        "id": "4728a03f74d6e98f",
        "type": "MSSQL",
        "z": "a91bf94969659a0b",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "sp_EXT_GetMilkoscanData",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "[dbExchange].[dbo].[sp_EXT_GetMilkoscanData]",
        "modeOpt": "",
        "modeOptType": "execute",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "gLabEquipmentId",
                "type": "UniqueIdentifier",
                "valueType": "str",
                "value": "99DFB76D-DC9F-4DEE-9F04-D23206EF0009",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 360,
        "y": 80,
        "wires": [
            [
                "1235446ccc356ef6"
            ]
        ]
    },
    {
        "id": "662f9ba7cb68cdea",
        "type": "MSSQL",
        "z": "a91bf94969659a0b",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "add addInfo1",
        "outField": "Upd",
        "returnType": 0,
        "throwErrors": 1,
        "query": "UPDATE [LabEquipmentRunTimeData].[dbo].[tblSamples]\r\nSET szAddInfo1=N'{{{loop.value.material}}}'\r\nWHERE nKey={{{payload.key}}}",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 810,
        "y": 340,
        "wires": [
            [
                "7039253434cfebc0"
            ]
        ]
    },
    {
        "id": "8819b71b53e716ee",
        "type": "inject",
        "z": "eb52e8f2691be09e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"processId\":\"8613258D-43B0-4D02-8AA0-F0AB63F32A31\",\"operationId\":\"1DC6B91A-2D4A-4E8F-B06C-4766F5FD0234\",\"materialId\":\"6454B55D-7BD6-47D0-B0C7-7110D976B604\",\"storageLocationId\":\"1\",\"quantity\":\"17\",\"dateTime\":\"2024-05-03 09:00:00\",\"doNotCheckQuality\":\"true\",\"comment\":null,\"batchId\":null,\"Token\":\"Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjM0OTNGQ0FEQjFGN0NDMjMzRjFFQTMwNzI3M0QxQUVENEIxQjlGNzAiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJOSlA4cmJIM3pDTV9IcU1ISnowYTdVc2JuM0EifQ.eyJuYmYiOjE3MTQ5OTI3ODIsImV4cCI6MTcxNDk5NjM4MiwiaXNzIjoiaHR0cDovLzEwLjE5Ny40LjIzOjUyNDMxIiwiYXVkIjpbIlByb2xlaVQuQXV0aCIsIlByb2xlaVQuQmF0Y2hNYW5hZ2VtZW50IiwiUHJvbGVpVC5DaGVja2xpc3RDcmVhdG9yQnlTY2hlZHVsZSIsIlByb2xlaVQuQ2hlY2tsaXN0cyIsIlByb2xlaVQuQ0lQIiwiUHJvbGVpVC5CYXNlQ2xhc3NpZmllcnMiLCJTb2xpc29mdC5NZXNDb3JlIiwiUHJvbGVpVC5EaWdpbGFiYVNhcEludGVncmF0aW9uIiwiUHJvbGVpVC5EaWdpbGFiYVNjYWRhSW50ZWdyYXRpb24iLCJQcm9sZWlULkVuZXJnb3NmZXJhRGF0YUNvbGxlY3RvciIsIlByb2xlaVQuRW5lcmd5TWFuYWdlbWVudCIsIlByb2xlaVQuRmlsZU1hbmFnZXIiLCJQcm9sZWlULkluY2lkZW50TWFuYWdlbWVudCIsIlByb2xlaVQuTGFiRXF1aXBtZW50IiwiUHJvbGVpVC5MSU1TIiwiUHJvbGVpVC5Nb3RvckhvdXJzIiwiUHJvbGVpVC5Ob3RpZmljYXRpb25zIiwiUHJvbGVpVC5QbGFudEl0RGF0YUVuZXJneUNvbGxlY3RvciIsIlByb2xlaVQuUHJvZHVjdGlvbk1hbmFnZW1lbnQiLCJTb2xpc29mdC5Qcm9kdWN0aW9uUXVhbGl0eUF1ZGl0IiwiUHJvbGVpVC5RQSIsIlNvbGlzb2Z0LlJlY2VwdGlvbiIsIlByb2xlaVQuU2NoZWR1bGVyIiwiUHJvbGVpVC5UYXNrTWFuYWdlbWVudCIsIlByb2xlaVQuV29ya2Zsb3ciXSwiY2xpZW50X2lkIjoiUHJvbGVpVC5EZXNrdG9wIiwic3ViIjoiYWRtaW5pc3RyYXRvciIsImF1dGhfdGltZSI6MTcxNDk5Mjc4MiwiaWRwIjoibG9jYWwiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoiYWRtaW5pc3RyYXRvciIsImdVc2VySWQiOiIxOWQ5MTljYS0zYmNmLTQxMGItMWRkMy0wOGRiMWIwM2YzMDMiLCJGdWxsTmFtZSI6IkFkbWluaXN0cmF0b3IiLCJBY2Nlc3NQb2xpY3kiOlsiNWE3MTQ3OTEtYTQ3Yy00ZGMwLWExNDctMDExYjJkNTM5MDg0IiwiNDkzODYwYzAtZDIxYS00MGFkLTk1MTAtMDc2YzM5MTllYzFkIiwiZGU4ZWNlMjgtYmIzZi00ZGVmLWE4N2EtMDgxZDI1YmI3N2ZmIiwiNjUzMjFhMWMtZGZhYy00MDE4LTgxZjQtMDgyNjlhZTcxZjljIiwiNWViZGYyZjAtNTBkZS00Y2M5LWExNjAtMDg2NjFlM2U2NGU1IiwiNTg1MzI0NzEtODdlZi00NTUyLThlOTktMTI1Y2NiOWMzZTQyIiwiMTA4ZDc1NDUtMDJiYS00NDVlLWI4NjMtMTQ4MmZiMzllMGQyIiwiMWYwN2UyOTktODM2OS00NmI1LTgzMTQtMThiMjgzMmQ5YzUwIiwiYzA5YWM1ODgtNzgzOC00YTA3LWEyYzctMTkwMzBhYzI0MjQ0IiwiMGY3NDAwMjgtMmQ1NC00YzQ2LTk0M2QtMWE5YzU3OTNhZmU0IiwiMTI4ZWI4ZmYtYzIwOC00M2I5LThlZDItMWI0OTI3N2YzY2I2IiwiZmIwNzI0ZTYtMWIyZi00OTJiLWE4MDgtMWI0Y2RjNTRiZmQwIiwiNGIzMGNjMzItNzk4ZS00ZjJkLWE0NTItMWNmNmI2Y2UwNGU5IiwiNDM3MjRjMTItZjAwMi00YTU0LTkxYzAtMWRlYjM3Mzc1OGJhIiwiN2ViOGE0YWEtOTAxMC00MmIyLTg4ODEtMWVmZDNiOWE2YTUxIiwiMjhiYzM1YmQtYjJkNS00YmRmLWI1MTItMjE2ZGI5MGNkMzFlIiwiNGQ5YjM0ZDUtYWVhMC00ZTkwLWEwNDUtMjU0N2ViODY4Zjk3IiwiNjVlM2NkMDctNWRmYS00NTUwLTlhNmItMjU2OTJkYzNmYzZmIiwiOTcxOGI0MzgtOTE3NC00ODVlLTlmMzgtMjc3MjU3ZDIxY2ZiIiwiNzM3NmM2ZmMtZmI4YS00NDZjLTllOTktMjk2YmEzMmI0Nzc5IiwiODk4NDg5NzctNzhlYi00NzkyLThmZDAtMjk3ZDZiODBlNDM5IiwiYjIxYmQyZDEtMDU3NS00MDc5LWJmYjQtMjlkYTE2MzQ0ZGUzIiwiMGFhOGFhYzUtMGNjMC00NWEzLTljMjYtMmIwNjUxYjNhYTAxIiwiODk0NDdmYmEtY2Y2My00ZmFhLWIxYTctMmJhMTRjMDdhMGM3IiwiYTkxMThhMTgtMmIzNi00YTE0LTlkM2QtMmY0NmEzNzJlOTc2IiwiZmM4NTY3NGItYWRlYS00MGU3LWI3YjQtMzJkMTdlZjkyNDk1IiwiNjU2NjBhZjUtZTRkOC00Y2FhLTg2YjMtMzU0MTZlYmRkM2Y3IiwiZmU4NTNjMjAtNTllMC00N2Y2LThjMTgtMzVkYjU5ODliYmQ4IiwiMTM1YzlmYzctNTAyZC00Mzc4LWFkMTctMzZiODU3MmU4OTliIiwiODBjMzA5NGYtY2QyMi00MmFlLWE0NDAtM2ExYmI4MGE2M2Y2IiwiOTVlZjQ2NjQtYzMxMy00MGU3LWEwZWItM2E3MDYxNzFhYmQyIiwiZmEzY2UwN2YtZjlmYi00MzdlLTk3ZDgtM2VlOTAxMDMxYzU0IiwiYjRjY2FkNTUtZDczZS00MDA2LTk2ZDEtNDBhNDAzNWUwNmIwIiwiYzFhODljYzUtNjNjMS00OGM1LWJjM2QtNDJmMDhhMDE3MDc5IiwiMzIzNmE2ZjEtMTZlOC00ZmIyLThiMTItNDc2ZTg4Y2ViYzNjIiwiMTAyNDhjZDEtMmEzNi00YjljLWE3ZGUtNGM4YzI4YTIwNjJmIiwiMDljMDNkZmYtZWYwOC00MjgzLTk3OTMtNGZjNzRmMTQ0ZmZkIiwiOTk3N2IzNzAtYTI2YS00NTY0LWFiM2QtNTJjZGRjMjk4OTY4IiwiZjEzMDMwNDQtMTJjZi00MTg0LTliMGQtNTQ4N2E4N2FkNzViIiwiZGFkMzMyOWUtNDdiNC00MGNiLWJmNDQtNTYyNDAxY2I2YzBlIiwiNmYzYzIyNjgtNDY0NS00YmFmLWE5NGYtNTg4Y2ZiNTM2ZWQ4IiwiZTg0MzM2ZDctNTgyZi00NzY4LTgzMzctNTlkZmY4ZWUwN2E1IiwiODJmMDI1YzktYTc1OS00YzNiLWEwMGEtNWEwNWY4ZDA4ZWE5IiwiZGI4ZjBmZDQtZjg4Yy00Mjc0LThmZjMtNjA4YzEyNzA0YTkxIiwiZGVhZmQzN2QtMDJkMy00ZWUxLWFmZTctNjA4ZDM4MGNlNjlkIiwiMGI2ZjEyM2MtZTQ4Ny00YjQwLWI2ZTktNjIyYjMxM2YyNTg0IiwiMWY3NWZhM2MtNjcxNi00MzlkLWE2MTUtNjYzODhhNjYzMDc4IiwiZDlkZDc1NTItNjQ5Ny00ZTJkLWE3MTUtNjc2NWRlNTJmNzc1IiwiMjNlNWI3ZTItODVkMS00YjY1LTlhMDQtNmI2YjY2N2Y0Yzk4IiwiZmVlN2VhNjEtZGY3ZS00YjYxLThjYmQtNmI3ZDcwN2M0YTY1IiwiZmZhYjUwNjAtMDE2MC00NjMwLWFhMGItNmNmZmZhMGI0Y2NmIiwiYWY3OWVjNmUtNjU3NC00YjRmLTg5NzItNmQ5OWE3NjhiOGMyIiwiMWU4NmMxNzEtY2VmNy00YmE2LWE2OWMtNzEwZDEwOGY1YTM2IiwiZDJiMzE5NzEtMTdlYi00ZTk3LWE0NGEtNzVmY2FlOTk2NWYxIiwiNjEwNjg1ZjEtMzViMC00MGEwLWE1MzctNzYyYTEyYzc0NzAxIiwiOTgwODMzYzktMjIxNC00OWExLWI4MmYtN2NhNzJlZjNhMjIwIiwiNDM5ZTFiMWYtMWNhYi00NTRkLWI3MDQtODBlM2IxZDVlNWEzIiwiNjg0MTg0ZDUtYzhlYS00OGNlLTkwNTMtODI2YzkxM2QyYTkxIiwiY2Y2MGI1YzUtMzMzZS00OGRmLThmYWYtODJlNjFmMTRiNDI4IiwiNTdhZDMzMjktNWFlNC00YmVmLTg2OWItODMwN2Q2MWZlZGQwIiwiZGUyZmI0YzEtZTJhMS00NmExLWE1ZDEtODk1NjE5NDQzYWU4IiwiODgwYTkxZTUtNjZlNi00MGQzLWE2YmMtOGRkOTI5NTZhMmYzIiwiYzllZTFjYjMtMGMyOC00ODNkLWFjOWUtOWFmMGRiMTYxNWIzIiwiZWQ5ZDVhNWEtNmZlMi00YWZlLTllYmEtYTNhMDVmN2ZmNzcxIiwiNTIyZTE2YjUtNzY0Yy00Y2QxLTk0NzUtYTRiOGFkOTMzMDM3IiwiZmEwNGEwYzAtZTJiOS00NzAyLTlhNDktYWEzOTE3ZDUxNTBkIiwiNjJhNjY3OTQtZjY0YS00MTg1LWFmMmItYWEzOTE3ZDUxNTBkIiwiNjE4NDQ2MTgtZDY1Zi00MDFmLTllMjItYWE1NDVlOTkxNTllIiwiYThiNDk0NDYtNGYyYy00ZmY3LWI0YjktYWU1YWIxNzExY2MwIiwiMjRjOWI2NTYtMGNjYi00ZWI4LWJmOTMtYWVhZTVlYTcwNGY5IiwiNTg4Y2Y0MTgtNWNkYi00YzRjLWJiNmMtYjA2OGQ3Yzc2OWViIiwiMzM3YTBkNzEtZjc1MS00ODNlLWIwMzMtYjJhYjlkYTZjYjc4IiwiYjU4ZjgyYjctMmQwNS00YjMxLWFiNzctYjM0N2RiNzgyNWI1IiwiNjJjOGE3YjEtNTNjZC00MGVmLWEyYmMtYjVkZTMyNjg2MmZiIiwiYzJlZWEyNjMtMjNiYi00OTI3LWE4MTAtYjc2ZTI1MmQwZDZlIiwiZDExMGUzZTgtN2Q0NS00NzYwLTgxN2EtYjg3NzZkNzIzOGYxIiwiNjYxYzQ5MGQtYmNlMC00MzczLWE1YjEtYmIyY2UxMTMzODg3IiwiMzdkZjJiN2QtYWQxZC00NmVhLTgxMmMtYmI3ODZiNTcxODg1IiwiYmZjMGFhYzQtYTU4OC00NzdiLTgzYWQtYmJjZTI3NjhiNzdmIiwiNjIwNmE3YjEtMjQ3Mi00MjljLWE2MDYtYmYxMzA0MTczZmUyIiwiYTUwZjIyZDItOTcxMC00M2U5LWE2NmItYzA4MDEwNTg3OGUwIiwiNDBlNGMzODItMTQyNi00OTdmLWEwZDItYzE1MjIyNTFhMzY1IiwiYmMwNzdmODktNDE2MS00ZTNkLThjNGItYzE2ZGE5MWQxY2MzIiwiNTlhZDRiMjctZTU4Mi00ZDZmLThmZmMtYzdlM2JkZmE4YjgzIiwiODgwMDdkNjItZDZmOC00YzlhLTgwOWUtYzg4MWMyN2EyNWYyIiwiYjg3MDc3YWItZmY3NS00NjMxLWExNmEtYzk4ODI4MzNhZGRmIiwiMmQyNDdmNjUtZjg3OS00ODYyLTkyMDEtZDBmYmEzNDg5MzY1IiwiOTk3NjZiOTctYjVkNS00YThhLWEwZjEtZDE5ODBmOWJhM2I5IiwiMGQwN2JlNWQtMDgxOS00Zjg1LWI3YTktZDI3MzA4ODhjYTQxIiwiMDA2OGUzNTQtMGNkZi00YTJlLWJhZWItZDI4MzdiOGM1YTFhIiwiY2U1NDI4MDMtZDY1ZC00MDEwLWJiMWQtZDJkMTlmM2QzOWYxIiwiY2U0OWY1YTctMTUwMy00YzYxLWIyNDUtZDU1YWMyYjY3NzQ1IiwiYzMyN2Q4MDItODg3Ni00NDQ4LTk3OWEtZDU4ZmYxNmIwOTBjIiwiNGM0MjExZWQtM2Q4Yi00NWZlLWFiMjQtZGM1YTkxZTY4Yjc2IiwiZGI2MTYzZjItMmFlNS00ZjJlLTgzMTQtZTFlM2IzMDY5YjY0IiwiMmE2OWMwZjYtMmMxZC00YTNkLTg0ZDMtZTM4MGM0ZTQzNWM1IiwiNjc2NjU5YjMtNzg0Yy00YWI3LWFjMjYtZTRkMjE0Njc1Y2RjIiwiYzVhZTUzMTEtOThiMy00NDEzLTk1YTktZTk3OGVhZTE3MWYxIiwiNjY0MmY5NmMtM2EwOS00MTYwLWFhOTktZWQ0NWMyMDZiZjhlIiwiMjBkNTM0ZjQtMzE3Ni00OWM2LWE5YzYtZWVlMTA1OGJlOGJhIiwiMWM2YTFmMWMtMjQzMC00ZDNmLWI2M2EtZWYwOWQ1MjY0Nzc2IiwiMWZiODkzOWMtNTQ3NS00YTU2LWFhYWEtZjI1MTUxNGQyMWM0IiwiNTBmMzcwMTAtY2RlZC00MTc3LTlhNzAtZjI1M2Y3ZjIwMjVlIiwiMTI2ZmE0OTgtYzFjZi00Y2M2LTk5Y2MtZjMxNTM5NWM3NTYzIiwiN2Q2Y2FkZmItNWRmMC00OTdkLTkxYTYtZjRjNjQ2YTYxMzQyIiwiMWM3ZWI5ODktMWJlNy00MThlLWIzZWQtZjRmYzJhNWFjNTVmIiwiZmIxODQ2OGItNWQyNi00YjFkLThlODktZjVkMWVhZmM4MjhkIiwiNWFkZmYwZWUtODZhOS00ZDA1LTkxNjMtZjZkZDFlY2RkMGMzIiwiZGMzMzJjYjYtZTMyZi00YThiLTg4ZmEtZjhjNjdhNWYzYmYyIiwiYWYwNjczNzMtYjJiZS00Y2UzLTkyOWQtZmI3MjAxMzFmNmYwIl0sInNjb3BlIjpbInVpX2F1dGgiLCJ1aV9ibSIsInVpX2NoZWNrbGlzdENyZWF0b3JCeVNjaGVkdWxlIiwidWlfY2hlY2tsaXN0cyIsInVpX2NpcCIsInVpX2NsYXMiLCJ1aV9jb3JlIiwidWlfZGlnaWxhYmFTYXBJbnRlZ3IiLCJ1aV9kc2kiLCJ1aV9lbmVyZ29zZmVyYSIsInVpX2VuZXJneSIsInVpX2ZpbGVNYW4iLCJ1aV9pbmNNZ210IiwidWlfbGFiIiwidWlfbGltcyIsInVpX21vdG9yIiwidWlfbm90aSIsInVpX3BpZGVjIiwidWlfcG0iLCJ1aV9wcWEiLCJ1aV9xYSIsInVpX3JlY2VwdGlvbiIsInVpX3NjaGVkdWxlIiwidWlfdGFzayIsInVpX3dvcmtmbG93Iiwib2ZmbGluZV9hY2Nlc3MiXSwiYW1yIjpbIlJlc291cmNlT3duZXJQYXNzd29yZFZhbGlkYXRpb24iXX0.I0E53BNiIdVxjKUnW0J4TpmqMqzcMIbRi_JpAAwusFx8pmMOgRx-tD0MLzoGnb9F7_oA_dYuc_Dgz854Uzx8emUf4_wIEQeDBK0LavLVsQ5fvLGv8DURX2jk0VXs-MxE8KTBFu5qmUnVfvzLLykD6sJfYfqjApyN6L_yfA4i39GPv-Rdbw35aYeNN03ryncNZjxKe_ztSTc6N_kkIhEwdheaP9507vdRPxOoO4r1mNy2e9aQUXIEdpahwJuw4qxS55NXTka9X9YhgwIzFsdd6FypKn5YCg3vcwdcPvh4CdsBgP0Ls1YYZhMeblhmncW2RiqBml1sWZgeNwuCV6WDfmj7f2zm9n9pQLRrJD6_xe48SE8q4iJLF7Tr5Z8tmGsmP9EiQnF90ruM13lVPwMJbZfJx2d9bwfL5xyqo22gNZiVZV1H9CBZX5kK6RaJvcad7vYTyR7AAcU7HrjoTobri3DMEuxwyEfAFO6dxqaIOgxso1XpPUFhLpLeS-PRXLqHl6F2nsfeX4rJOxIXcGQE26LRe9h8kTev3M5sfh66dC1mrHvE3Zj_x_Vk25Z3kCxw0mkHYZ5jQAdX1WE-xxwBoTG08pP0pL405P3TOC2qgs932vMqwQ0aTkqto7QbVB0tiWzh5ErmtP44xbaj_TQcvVttrgpPTwoY8hyDXXKYO5g\"}",
        "payloadType": "json",
        "x": 80,
        "y": 20,
        "wires": [
            [
                "e1d3b7d7c425cb55"
            ]
        ]
    },
    {
        "id": "f0238272454710dd",
        "type": "debug",
        "z": "eb52e8f2691be09e",
        "name": "debug 44",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 80,
        "wires": []
    },
    {
        "id": "e296af8b0922347f",
        "type": "switch",
        "z": "eb52e8f2691be09e",
        "name": "EquipmentNumberRFID?",
        "property": "RFID[0].EquipmentNumberRFID",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "905",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "907",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "912",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SDI",
                "vt": "str"
            },
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 570,
        "y": 100,
        "wires": [
            [
                "36f1b62b9148a62c"
            ],
            [
                "36f1b62b9148a62c"
            ],
            [
                "36f1b62b9148a62c"
            ],
            [
                "123dd4f56a3b5bcc"
            ],
            [
                "21daa115ff892f8b"
            ],
            [
                "21daa115ff892f8b"
            ]
        ]
    },
    {
        "id": "c5914a26281c23cb",
        "type": "debug",
        "z": "eb52e8f2691be09e",
        "name": "debug 45",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 480,
        "wires": []
    },
    {
        "id": "b7a0bc9201046442",
        "type": "comment",
        "z": "eb52e8f2691be09e",
        "name": "стандартный выпуск",
        "info": "",
        "x": 720,
        "y": 300,
        "wires": []
    },
    {
        "id": "e6ed1bc04de1d327",
        "type": "comment",
        "z": "eb52e8f2691be09e",
        "name": "Измельчители",
        "info": "",
        "x": 820,
        "y": 40,
        "wires": []
    },
    {
        "id": "b32d13b647d11714",
        "type": "http request",
        "z": "eb52e8f2691be09e",
        "name": "Intake",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/Intake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1230,
        "y": 320,
        "wires": [
            [
                "a9dd874c8ec94982"
            ]
        ]
    },
    {
        "id": "e83248cc6cc8d83d",
        "type": "function",
        "z": "eb52e8f2691be09e",
        "name": "prepere intake data",
        "func": "let Intake = {\n                processId: msg.payload.processId,\n                operationId: msg.payload.operationId,\n                materialId: msg.payload.materialId,\n                storageLocationId: msg.payload.storageLocationId,\n                quantity: msg.payload.quantity,\n                dateTime: msg.payload.dateTime,\n                doNotCheckQuality: \"true\",\n                comment: null,\n                batchId: msg.payload.batchId\n            }\nmsg.payload = Intake;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 320,
        "wires": [
            [
                "b32d13b647d11714"
            ]
        ]
    },
    {
        "id": "6a843c19ca87bfce",
        "type": "switch",
        "z": "eb52e8f2691be09e",
        "name": "ОТ?",
        "property": "ProduceSL",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 990,
        "y": 80,
        "wires": [
            [
                "b3f993c68b35fe10"
            ],
            [
                "5d69c1e0759d02bb"
            ]
        ]
    },
    {
        "id": "789502782fe0b501",
        "type": "function",
        "z": "eb52e8f2691be09e",
        "name": "PrioritySL",
        "func": "msg.PrioritySL=msg.payload.ProduceStorageLocationId;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 160,
        "wires": [
            [
                "b3f993c68b35fe10"
            ]
        ]
    },
    {
        "id": "4a35653a90a9e4e3",
        "type": "switch",
        "z": "eb52e8f2691be09e",
        "name": "Приоритетный RFID",
        "property": "payload.SLNumberRFID",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "11",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1180,
        "y": 160,
        "wires": [
            [
                "789502782fe0b501"
            ],
            [
                "789502782fe0b501"
            ],
            [
                "789502782fe0b501"
            ],
            [
                "b3f993c68b35fe10"
            ]
        ]
    },
    {
        "id": "d526a1257f4c2862",
        "type": "function",
        "z": "eb52e8f2691be09e",
        "name": "PrioritySL=null",
        "func": "if(msg.PrioritySL == null) {msg.PrioritySL=msg.ProduceSL[0].ProduceStorageLocationId};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 40,
        "wires": [
            [
                "4decd3a243d8e77e"
            ]
        ]
    },
    {
        "id": "21daa115ff892f8b",
        "type": "subflow:ca94f48e1f18b542",
        "z": "eb52e8f2691be09e",
        "name": "",
        "x": 530,
        "y": 320,
        "wires": [
            [
                "e83248cc6cc8d83d"
            ]
        ]
    },
    {
        "id": "4decd3a243d8e77e",
        "type": "change",
        "z": "eb52e8f2691be09e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.storageLocationId",
                "pt": "msg",
                "to": "PrioritySL",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1790,
        "y": 40,
        "wires": [
            [
                "21daa115ff892f8b"
            ]
        ]
    },
    {
        "id": "e1d3b7d7c425cb55",
        "type": "function",
        "z": "eb52e8f2691be09e",
        "name": "Token",
        "func": "msg.Token=msg.payload.token\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 100,
        "wires": [
            [
                "c262dd8917855fa3"
            ]
        ]
    },
    {
        "id": "a9dd874c8ec94982",
        "type": "http response",
        "z": "eb52e8f2691be09e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1390,
        "y": 320,
        "wires": []
    },
    {
        "id": "02f51a0148e8129e",
        "type": "http response",
        "z": "eb52e8f2691be09e",
        "name": "",
        "statusCode": "460",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1000,
        "y": 160,
        "wires": []
    },
    {
        "id": "e4085aba277f53ce",
        "type": "http in",
        "z": "eb52e8f2691be09e",
        "name": "",
        "url": "/api/Intake",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "e1d3b7d7c425cb55",
                "a79e439665f8759d"
            ]
        ]
    },
    {
        "id": "a79e439665f8759d",
        "type": "debug",
        "z": "eb52e8f2691be09e",
        "name": "debug 46",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 200,
        "wires": []
    },
    {
        "id": "3859f2867b28fe56",
        "type": "debug",
        "z": "eb52e8f2691be09e",
        "name": "debug 47",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 480,
        "wires": []
    },
    {
        "id": "5d69c1e0759d02bb",
        "type": "function",
        "z": "eb52e8f2691be09e",
        "name": "Ошибка нет ОТ",
        "func": "msg.payload={messages: [\"Выпуск невозможен, антена не видит ОТ\"]};\n//{\"error\": {\"messages\": [ \"Ошибка\" ]}} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 160,
        "wires": [
            [
                "02f51a0148e8129e"
            ]
        ]
    },
    {
        "id": "69b0630431b436b3",
        "type": "catch",
        "z": "eb52e8f2691be09e",
        "name": "",
        "scope": [
            "c262dd8917855fa3",
            "36f1b62b9148a62c",
            "bb4a5e864d9c82f2"
        ],
        "uncaught": false,
        "x": 100,
        "y": 480,
        "wires": [
            [
                "787c852692e2f390"
            ]
        ]
    },
    {
        "id": "afd03bd3e4d034ed",
        "type": "http response",
        "z": "eb52e8f2691be09e",
        "name": "",
        "statusCode": "460",
        "headers": {
            "content-type": "application/json"
        },
        "x": 520,
        "y": 480,
        "wires": []
    },
    {
        "id": "787c852692e2f390",
        "type": "function",
        "z": "eb52e8f2691be09e",
        "name": "Ошибка БД",
        "func": "msg.payload={messages: [\"Выпуск невозможен, в НодРед проблема с запросом в БД\"]};\n//{\"error\": {\"messages\": [ \"Ошибка\" ]}} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 480,
        "wires": [
            [
                "afd03bd3e4d034ed"
            ]
        ]
    },
    {
        "id": "123dd4f56a3b5bcc",
        "type": "subflow:ca94f48e1f18b542",
        "z": "eb52e8f2691be09e",
        "name": "",
        "x": 390,
        "y": 400,
        "wires": [
            [
                "b47f03d4bef8ec26"
            ]
        ]
    },
    {
        "id": "2178e838dd2d16ce",
        "type": "comment",
        "z": "eb52e8f2691be09e",
        "name": "НСИ пополнение",
        "info": "",
        "x": 470,
        "y": 360,
        "wires": []
    },
    {
        "id": "86294b840486545b",
        "type": "function",
        "z": "eb52e8f2691be09e",
        "name": "prepare outtake",
        "func": "msg.payload={\n  \"storageLocationId\": msg.ConsumeSL[0].ConsumeSLId,\n  \"materialId\": msg.Input.materialId,\n  \"quantity\": msg.Input.quantity,\n  \"operationId\": msg.Input.operationId,\n  \"processId\": msg.Input.processId\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 400,
        "wires": [
            [
                "270960efd6dbce41",
                "c5914a26281c23cb"
            ]
        ]
    },
    {
        "id": "270960efd6dbce41",
        "type": "http request",
        "z": "eb52e8f2691be09e",
        "name": "htttp put outtake",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/outtakeByMaterial",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1120,
        "y": 400,
        "wires": [
            [
                "503e915b3179a935"
            ]
        ]
    },
    {
        "id": "503e915b3179a935",
        "type": "function",
        "z": "eb52e8f2691be09e",
        "name": "prepere intake data",
        "func": "let Intake = {\n                processId: msg.Input.processId,\n                operationId: msg.Input.operationId,\n                materialId: msg.Input.materialId,\n                storageLocationId: msg.Input.storageLocationId,\n                quantity: msg.Input.quantity,\n                dateTime: msg.Input.dateTime,\n                doNotCheckQuality: \"true\",\n                comment: null,\n                batchId: msg.Input.batchId\n            }\nmsg.payload = Intake;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 400,
        "wires": [
            [
                "02c41837e893c332",
                "3859f2867b28fe56"
            ]
        ]
    },
    {
        "id": "b47f03d4bef8ec26",
        "type": "change",
        "z": "eb52e8f2691be09e",
        "name": "payload=>Input",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "Input",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 400,
        "wires": [
            [
                "bb4a5e864d9c82f2"
            ]
        ]
    },
    {
        "id": "02c41837e893c332",
        "type": "http request",
        "z": "eb52e8f2691be09e",
        "name": "Intake",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/Intake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1470,
        "y": 400,
        "wires": [
            [
                "1540824be3c8c770"
            ]
        ]
    },
    {
        "id": "1540824be3c8c770",
        "type": "http response",
        "z": "eb52e8f2691be09e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1590,
        "y": 400,
        "wires": []
    },
    {
        "id": "b3f993c68b35fe10",
        "type": "loop",
        "z": "eb52e8f2691be09e",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "ProduceSL",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 1190,
        "y": 40,
        "wires": [
            [
                "d526a1257f4c2862",
                "f0238272454710dd"
            ],
            [
                "4a35653a90a9e4e3"
            ]
        ]
    },
    {
        "id": "c262dd8917855fa3",
        "type": "MSSQL",
        "z": "eb52e8f2691be09e",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Select ProcessById",
        "outField": "RFID",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT ee.szExternalId as 'EquipmentNumberRFID'      \r\nFROM [ProductionManagementRunTimeDb].[dbo].[tblProcess] p\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ee ON ee.gEquipmentTreeId=p.gEquipmentId\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystem] es ON es.gId=ee.gExternalSystemId AND es.szName=N'RFID'\r\nWHERE p.gId='{{{payload.processId}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 350,
        "y": 100,
        "wires": [
            [
                "e296af8b0922347f"
            ]
        ]
    },
    {
        "id": "36f1b62b9148a62c",
        "type": "MSSQL",
        "z": "eb52e8f2691be09e",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "ProduceSL",
        "outField": "ProduceSL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT s.gId as 'ProduceStorageLocationId',ee.szExternalId as 'SLNumberRFID'\r\nFROM [ProductionManagementRunTimeDb].[dbo].[tblProcess] p\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationProduceStorageLocation] psl ON psl.gOperationId=p.gOperationId AND  psl.gEquipmentId=p.gEquipmentId\r\n\tINNER JOIN [BatchManagementDb].[dbo].[tblStorageLocation] s ON s.gParentId=psl.gStorageLocationId\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalVertex] ev ON ev.gExternalObjectId=psl.gStorageLocationId\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ee ON ee.gExternalVertexId = ev.gId\r\n\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystem] es ON es.gId = ee.gExternalSystemId AND es.szName=N'RFID'\r\nWHERE p.gId ='{{{payload.processId}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 830,
        "y": 80,
        "wires": [
            [
                "6a843c19ca87bfce"
            ]
        ]
    },
    {
        "id": "bb4a5e864d9c82f2",
        "type": "MSSQL",
        "z": "eb52e8f2691be09e",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get ConsumeSL",
        "outField": "ConsumeSL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT rp.gId as N'ConsumeSLId'\r\nFROM [ProductionManagementRunTimeDb].[dbo].[tblProcess] p\t\t\r\n\t\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationConsumeStorageLocation] csl ON csl.gEquipmentId=p.gEquipmentId AND csl.gOperationId = p.gOperationId\r\n\t\tINNER JOIN [BatchManagementDb].[dbo].[tblStorageLocation] rp ON rp.gParentId=csl.gStorageLocationId\r\nWHERE p.gId ='{{{Input.processId}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 750,
        "y": 400,
        "wires": [
            [
                "86294b840486545b"
            ]
        ]
    },
    {
        "id": "3b82856690210166",
        "type": "inject",
        "z": "f1cf6febbf29252b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "b766526f02e0578b"
            ]
        ]
    },
    {
        "id": "1c4aa7e4f94a7d9a",
        "type": "debug",
        "z": "f1cf6febbf29252b",
        "name": "debug 68",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 320,
        "wires": []
    },
    {
        "id": "ac4dac1876150a5b",
        "type": "switch",
        "z": "f1cf6febbf29252b",
        "name": "Active==0",
        "property": "payload.Active",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 220,
        "y": 280,
        "wires": [
            [
                "e3aa19b2b4ce6d09"
            ],
            [
                "360afab8e73432c9",
                "ab518ff2f707bd0a",
                "1c4aa7e4f94a7d9a"
            ]
        ]
    },
    {
        "id": "ab518ff2f707bd0a",
        "type": "websocket out",
        "z": "f1cf6febbf29252b",
        "name": "",
        "server": "6d82fe123d0812e0",
        "client": "",
        "x": 1520,
        "y": 220,
        "wires": []
    },
    {
        "id": "d44a0f9e8401072c",
        "type": "switch",
        "z": "f1cf6febbf29252b",
        "name": "Memory != null",
        "property": "payload.Memory",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 300,
        "y": 400,
        "wires": [
            [
                "cc8ad9a20e3d60d9"
            ],
            [
                "de41fe442980105b"
            ]
        ]
    },
    {
        "id": "2aea1bbfa59c2919",
        "type": "function",
        "z": "f1cf6febbf29252b",
        "name": "prepare data",
        "func": "let storageLocationId =[];\nmsg.SQL.forEach(function(element) {\n  storageLocationId.push(element.storageLocationId)\n  });\nlet storageLocationIdUnique = [...new Set(storageLocationId)];//уникальные storageLocationId\nmsg.payload=[];\n\nstorageLocationIdUnique.forEach(function(element) {\n  let process = [];\n  let request ={};\n  msg.SQL.filter(x => x.storageLocationId == element).forEach(function(value) {\n    request.storageLocationId = value.storageLocationId;\n    request.storageLocationName = value.storageLocationName;\n    request.storageLocationLink = value.storageLocationLink;\n    request.materialId = value.materialId;\n    //request.materialName = value.materialName;\n    request.Memory = value.Memory;\n    request.EmptyMemory = value.EmptyMemory;\n    request.Active = value.Active;\n    request.minQuantity = value.minQuantity;\n    request.EmptyActual = value.EmptyActual;\n                    process.push({\"location\": value.location,\n                                  \"quantity\": value.quantity,\n                                  \"processId\": value.processId\n                                })\n                                                                              });\n  request.process = process\n  msg.payload.push(request)\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 100,
        "wires": [
            [
                "360afab8e73432c9"
            ]
        ]
    },
    {
        "id": "b3f0a00cc449c46a",
        "type": "debug",
        "z": "f1cf6febbf29252b",
        "name": "debug 70",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 160,
        "wires": []
    },
    {
        "id": "cc8ad9a20e3d60d9",
        "type": "switch",
        "z": "f1cf6febbf29252b",
        "name": "EmptyActual=1",
        "property": "payload.EmptyActual",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 500,
        "y": 340,
        "wires": [
            [
                "26142ae04277ce94"
            ],
            [
                "c2b3cd185c15ef1a"
            ]
        ]
    },
    {
        "id": "26142ae04277ce94",
        "type": "switch",
        "z": "f1cf6febbf29252b",
        "name": "EmptyMemory=1",
        "property": "payload.EmptyMemory",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 300,
        "wires": [
            [
                "360afab8e73432c9"
            ],
            [
                "ab518ff2f707bd0a"
            ]
        ]
    },
    {
        "id": "c2b3cd185c15ef1a",
        "type": "switch",
        "z": "f1cf6febbf29252b",
        "name": "EmptyMemory=0",
        "property": "payload.EmptyMemory",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 360,
        "wires": [
            [
                "360afab8e73432c9"
            ],
            [
                "3ef867958cc458e6"
            ]
        ]
    },
    {
        "id": "360afab8e73432c9",
        "type": "loop",
        "z": "f1cf6febbf29252b",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "payload",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 870,
        "y": 100,
        "wires": [
            [],
            [
                "ac4dac1876150a5b"
            ]
        ]
    },
    {
        "id": "b766526f02e0578b",
        "type": "MSSQL",
        "z": "f1cf6febbf29252b",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Check min weight",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @tblCheck TABLE (storageLocationId uniqueidentifier,storageLocationName nvarchar(50),storageLocationLink int,materialId uniqueidentifier,Memory int,EmptyMemory int,Active int,minQuantity decimal(18,6))\r\nDECLARE @tblProcess TABLE (processId uniqueidentifier,gMaterialId uniqueidentifier,location nvarchar(50),quantity decimal(18,6))\r\nINSERT INTO @tblCheck\r\n\tSELECT DISTINCT  min(rp.gId),min(et.szName) + N' ('+min(sl.szDescription)+')',min(rp.nKey), min(b.gMaterialId),min(wcw.nStorageLocationLink),ISNULL(min(wcw.nEmpty),0)\r\n\t\t,CASE  WHEN ISNULL(SUM(b.nQuantity),0) <= ISNULL(min(sl.nBaseStorageAmount),0) THEN 1 ELSE 0 END,ISNULL(min(sl.nBaseStorageAmount),0)-ISNULL(SUM(b.nQuantity),0)\r\n\tFROM [ProductionManagementRunTimeDb].[dbo].[tblProcess] p\r\n\t\tINNER JOIN [BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ee ON ee.gEquipmentTreeId=p.gEquipmentId\r\n\t\tINNER JOIN [BaseClassifiers].[dbo].[tblExternalSystem] es ON es.gId=ee.gExternalSystemId AND es.szName=N'RFID'\r\n\t\tINNER JOIN [BaseClassifiers].[dbo].[tblEquipmentTree] et ON et.gId=p.gEquipmentId\r\n\t\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationConsumeStorageLocation] csl ON csl.gEquipmentId=p.gEquipmentId AND csl.gOperationId = p.gOperationId\r\n\t\tINNER JOIN [BatchManagementDb].[dbo].[tblStorageLocation] sl ON sl.gId=csl.gStorageLocationId\r\n\t\tINNER JOIN [BatchManagementDb].[dbo].[tblStorageLocation] rp ON rp.gParentId=csl.gStorageLocationId\r\n\t\tLEFT JOIN [dbExchange].[dbo].[tblWeghtClusterWork] wcw ON wcw.nStorageLocationLink=rp.nKey\r\n\t\tLEFT JOIN [BatchManagementDb].[dbo].[tblBatch] b ON b.StorageLocationId=rp.gId AND b.bIsCompleted = 0\r\n\tWHERE p.szStep='InProcess' AND ee.szExternalId IN ('111','222','333','444','555') \r\n\tGROUP BY b.StorageLocationId\r\nINSERT INTO @tblProcess\r\n\tSELECT p.gId as N'processId',b.gMaterialId,min(et.szName) as N'location',sum(b.nQuantity) as N'quantity'\r\n\tFROM [ProductionManagementRunTimeDb].[dbo].[tblProcess] p\r\n\t\tINNER JOIN [BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ee ON ee.gEquipmentTreeId=p.gEquipmentId\r\n\t\tINNER JOIN [BaseClassifiers].[dbo].[tblExternalSystem] es ON es.gId=ee.gExternalSystemId AND es.szName=N'RFID'\r\n\t\tINNER JOIN [BaseClassifiers].[dbo].[tblEquipmentTree] et ON et.gId=p.gEquipmentId\r\n\t\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationConsumeStorageLocation] csl ON csl.gEquipmentId=p.gEquipmentId AND csl.gOperationId = p.gOperationId\r\n\t\tINNER JOIN [BatchManagementDb].[dbo].[tblStorageLocation] sl ON sl.gId=csl.gStorageLocationId\r\n\t\tINNER JOIN [BatchManagementDb].[dbo].[tblStorageLocation] rp ON rp.gParentId=csl.gStorageLocationId\r\n\t\tINNER JOIN [BatchManagementDb].[dbo].[tblBatch] b ON b.StorageLocationId=rp.gId AND b.bIsCompleted = 0\t\r\n\tWHERE p.szStep='InProcess' AND ee.szExternalId IN ('SDI')\r\n\tGROUP BY p.gId,b.gMaterialId\r\n\t\r\n\tSELECT  ch.*,p.location,p.quantity,p.processId, CASE WHEN p.processId IS NULL THEN 1 ELSE 0 END as 'EmptyActual' \r\n\tFROM @tblCheck ch \r\n\t\tLEFT JOIN @tblProcess p ON p.gMaterialId=ch.materialId",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 330,
        "y": 100,
        "wires": [
            [
                "2aea1bbfa59c2919"
            ]
        ]
    },
    {
        "id": "de41fe442980105b",
        "type": "MSSQL",
        "z": "f1cf6febbf29252b",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Memory",
        "outField": "Memory",
        "returnType": 0,
        "throwErrors": 1,
        "query": "INSERT INTO [dbExchange].[dbo].[tblWeghtClusterWork]\r\n  VALUES({{{payload.storageLocationLink}}},{{{payload.EmptyActual}}}) ",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1140,
        "y": 400,
        "wires": [
            [
                "360afab8e73432c9",
                "ab518ff2f707bd0a"
            ]
        ]
    },
    {
        "id": "e3aa19b2b4ce6d09",
        "type": "MSSQL",
        "z": "f1cf6febbf29252b",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Unmemory",
        "outField": "Unmemory",
        "returnType": 0,
        "throwErrors": 1,
        "query": " DELETE FROM [dbExchange].[dbo].[tblWeghtClusterWork] WHERE nStorageLocationLink={{{payload.storageLocationLink}}}",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 550,
        "y": 240,
        "wires": [
            [
                "360afab8e73432c9"
            ]
        ]
    },
    {
        "id": "3ef867958cc458e6",
        "type": "MSSQL",
        "z": "f1cf6febbf29252b",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Update Empty",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "UPDATE [dbExchange].[dbo].[tblWeghtClusterWork]\r\n  SET nEmpty=0\r\n  WHERE nStorageLocationLink={{{payload.storageLocationLink}}}",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1000,
        "y": 360,
        "wires": [
            [
                "ab518ff2f707bd0a",
                "b3f0a00cc449c46a",
                "360afab8e73432c9"
            ]
        ]
    },
    {
        "id": "94daa747b7eaa1e7",
        "type": "http in",
        "z": "8a82633e8612364f",
        "name": "",
        "url": "/api/UserActivityOnEquipment/:equipmentId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 540,
        "wires": [
            [
                "22f44f6c538ed989"
            ]
        ]
    },
    {
        "id": "9fe06793ade5a324",
        "type": "http response",
        "z": "8a82633e8612364f",
        "name": "http Result 200",
        "statusCode": "",
        "headers": {},
        "x": 1020,
        "y": 540,
        "wires": []
    },
    {
        "id": "5336a6504b6b8aa7",
        "type": "function",
        "z": "8a82633e8612364f",
        "name": "Result Validation",
        "func": "if(msg.result?.length === 0){\n    msg.payload = [];\n    return msg;\n}\nmsg.payload = msg.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 540,
        "wires": [
            [
                "9fe06793ade5a324"
            ]
        ]
    },
    {
        "id": "0dd0095467db5529",
        "type": "http in",
        "z": "8a82633e8612364f",
        "name": "",
        "url": "/api/UserActivityOnEquipment",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 480,
        "wires": [
            [
                "47e26ba82c800248"
            ]
        ]
    },
    {
        "id": "31f7b9627dc1d553",
        "type": "http response",
        "z": "8a82633e8612364f",
        "name": "",
        "statusCode": "500",
        "headers": {},
        "x": 1640,
        "y": 240,
        "wires": []
    },
    {
        "id": "37ddb11a26d682b2",
        "type": "debug",
        "z": "8a82633e8612364f",
        "name": "debug 75",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2380,
        "y": 320,
        "wires": []
    },
    {
        "id": "3b98bbe24a5ec2f2",
        "type": "switch",
        "z": "8a82633e8612364f",
        "name": "IsEquipment",
        "property": "equipment[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 990,
        "y": 480,
        "wires": [
            [
                "1df776a4fed704f2"
            ],
            [
                "0fb86d2002433aa4"
            ]
        ]
    },
    {
        "id": "0fb86d2002433aa4",
        "type": "function",
        "z": "8a82633e8612364f",
        "name": "Equipment IS NULL",
        "func": "msg.payload = {\n    error: \"Не найдено оборудование.\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 360,
        "wires": [
            [
                "31f7b9627dc1d553"
            ]
        ]
    },
    {
        "id": "57ad918e17ce3f40",
        "type": "switch",
        "z": "8a82633e8612364f",
        "name": "",
        "property": "shiftRuntime[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1370,
        "y": 480,
        "wires": [
            [
                "29450951bb6a252c"
            ],
            [
                "9b033bf4281bc4f0"
            ]
        ]
    },
    {
        "id": "9b033bf4281bc4f0",
        "type": "function",
        "z": "8a82633e8612364f",
        "name": "ShiftRuntime IS NULL",
        "func": "msg.payload = {\n    error: \"Смена не найдена.\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 380,
        "wires": [
            [
                "31f7b9627dc1d553"
            ]
        ]
    },
    {
        "id": "f3378ebf27555359",
        "type": "http response",
        "z": "8a82633e8612364f",
        "name": "http Result 200",
        "statusCode": "",
        "headers": {},
        "x": 2100,
        "y": 480,
        "wires": []
    },
    {
        "id": "ca6c2fa9f4c32205",
        "type": "function",
        "z": "8a82633e8612364f",
        "name": "Result Validation",
        "func": "if(msg.userActivityOnEquipment?.length === 0){\n    msg.payload = null;\n    return msg;\n}\nmsg.payload = msg.userActivityOnEquipment[0];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 480,
        "wires": [
            [
                "f3378ebf27555359",
                "352373a60ec08f7a"
            ]
        ]
    },
    {
        "id": "47e26ba82c800248",
        "type": "function",
        "z": "8a82633e8612364f",
        "name": "Validation",
        "func": "msg.errorValidation = null;\nif(!msg.payload.equipmentId){\n    msg.errorValidation = \"Оборудование не задано.\"\n}\nif(!msg.payload.personnelNumber) {\n    msg.errorValidation = msg.errorValidation == null\n        ? \"Табельный номер пустой.\"\n        : msg.errorValidation + \" Табельный номер пустой.\"\n    \n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 480,
        "wires": [
            [
                "fed2f9ef22cebb99"
            ]
        ]
    },
    {
        "id": "fed2f9ef22cebb99",
        "type": "switch",
        "z": "8a82633e8612364f",
        "name": "Check ErrorValidation",
        "property": "errorValidation",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 480,
        "wires": [
            [
                "f6dd290e77b5fcc8"
            ],
            [
                "c6ca86b8dc3055fe"
            ]
        ]
    },
    {
        "id": "c6ca86b8dc3055fe",
        "type": "function",
        "z": "8a82633e8612364f",
        "name": "Error Validation",
        "func": "msg.payload = {\n    error: msg.errorValidation\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 360,
        "wires": [
            [
                "31f7b9627dc1d553"
            ]
        ]
    },
    {
        "id": "dcbdb1f6267242a8",
        "type": "inject",
        "z": "8a82633e8612364f",
        "name": "",
        "props": [],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1530,
        "y": 160,
        "wires": [
            [
                "915f9e190ce10af9"
            ]
        ]
    },
    {
        "id": "4b699259f49d66ea",
        "type": "websocket out",
        "z": "8a82633e8612364f",
        "name": "",
        "server": "644cc6226b950a71",
        "client": "",
        "x": 2430,
        "y": 200,
        "wires": []
    },
    {
        "id": "352373a60ec08f7a",
        "type": "function",
        "z": "8a82633e8612364f",
        "name": "Mapper",
        "func": "if(msg.payload === null){\n    msg.payload = [];\n} else {\n    msg.payload = [msg.payload.equipmentId];\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 340,
        "wires": [
            [
                "4b699259f49d66ea",
                "37ddb11a26d682b2"
            ]
        ]
    },
    {
        "id": "04d6db3c57f7a9a2",
        "type": "http in",
        "z": "8a82633e8612364f",
        "name": "",
        "url": "/api/UserActivityOnEquipment",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 660,
        "wires": [
            [
                "f13ca731d7c53ecb"
            ]
        ]
    },
    {
        "id": "f13ca731d7c53ecb",
        "type": "function",
        "z": "8a82633e8612364f",
        "name": "Validation",
        "func": "msg.errorValidation = null;\nif(!msg.payload.equipmentId){\n    msg.errorValidation = \"Оборудование не задано.\"\n}\nif(!msg.payload.personnelNumber) {\n    msg.errorValidation = msg.errorValidation == null\n        ? \"Табельный номер пустой.\"\n        : msg.errorValidation + \" Табельный номер пустой.\"\n    \n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 660,
        "wires": [
            [
                "a87cae12119cd47c"
            ]
        ]
    },
    {
        "id": "a87cae12119cd47c",
        "type": "switch",
        "z": "8a82633e8612364f",
        "name": "Check ErrorValidation",
        "property": "errorValidation",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 560,
        "y": 660,
        "wires": [
            [
                "a5509bf75b9d5a37"
            ],
            [
                "c6ca86b8dc3055fe"
            ]
        ]
    },
    {
        "id": "72bd03dc9bce62d1",
        "type": "http response",
        "z": "8a82633e8612364f",
        "name": "http Result 200",
        "statusCode": "",
        "headers": {},
        "x": 1460,
        "y": 660,
        "wires": []
    },
    {
        "id": "2f057ca4b55107bf",
        "type": "function",
        "z": "8a82633e8612364f",
        "name": "Result Validation",
        "func": "if(msg.userActivityOnEquipment?.length === 0){\n    msg.payload = null;\n    return msg;\n}\nmsg.payload = msg.userActivityOnEquipment[0];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 660,
        "wires": [
            [
                "72bd03dc9bce62d1",
                "9a587c825392741f"
            ]
        ]
    },
    {
        "id": "9a587c825392741f",
        "type": "function",
        "z": "8a82633e8612364f",
        "name": "Mapper",
        "func": "if(msg.payload === null){\n    msg.payload = [];\n} else {\n    msg.payload = [msg.payload.equipmentId];\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 580,
        "wires": [
            [
                "4b699259f49d66ea"
            ]
        ]
    },
    {
        "id": "22f44f6c538ed989",
        "type": "MSSQL",
        "z": "8a82633e8612364f",
        "mssqlCN": "a0513bd15284c98d",
        "name": "GetByQuipmentId",
        "outField": "result",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @equipmentId UNIQUEIDENTIFIER = @equipmentIdInfo\r\n\r\nIF OBJECT_ID('[UserManagement].[dbo].[tblUserActivityOnEquipment]', 'U') IS NULL\r\nBEGIN\r\n    CREATE TABLE [UserManagement].[dbo].[tblUserActivityOnEquipment] (\r\n        [nKey] INT IDENTITY(1,1) PRIMARY KEY,\r\n        [gEquipmentId] UNIQUEIDENTIFIER NOT NULL,\r\n        [szPersonnelNumber] NVARCHAR(255) NOT NULL,\r\n        [gShiftRunTimeId] UNIQUEIDENTIFIER NOT NULL,\r\n        [bIsActive] BIT NOT NULL,\r\n        [dtActiveSince] DATETIME2(7) NOT NULL,\r\n        [dtActiveTill] DATETIME2(7) NOT NULL,\r\n        INDEX idx_EquipmentId (gEquipmentId)\r\n    );\r\nEND\r\n\r\nSELECT\r\n    nKey as [key],\r\n    gEquipmentId AS equipmentId,\r\n    szPersonnelNumber as personnelNumber,\r\n    gShiftRunTimeId AS shiftRunTimeId,\r\n    bIsActive AS isActive,\r\n    dtActiveSince AS activeSince,\r\n    dtActiveTill as activeTill\r\nFROM [UserManagement].[dbo].[tblUserActivityOnEquipment]\r\n    WHERE gEquipmentId = @equipmentId and bIsActive = 1;",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "equipmentIdInfo",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "req.params.equipmentId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 530,
        "y": 540,
        "wires": [
            [
                "5336a6504b6b8aa7"
            ]
        ]
    },
    {
        "id": "f6dd290e77b5fcc8",
        "type": "MSSQL",
        "z": "8a82633e8612364f",
        "mssqlCN": "a0513bd15284c98d",
        "name": "GetDataEquipment",
        "outField": "equipment",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @equipmentId UNIQUEIDENTIFIER = @equipmentIdInfo;\r\n\r\nSELECT TOP(1) [gId] as id\r\n      ,[gAccessId] as accessId\r\nFROM [BaseClassifiers].[dbo].[tblEquipmentTree]\r\nWHERE gId = @equipmentId;",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "equipmentIdInfo",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "payload.equipmentId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 810,
        "y": 480,
        "wires": [
            [
                "3b98bbe24a5ec2f2"
            ]
        ]
    },
    {
        "id": "1df776a4fed704f2",
        "type": "MSSQL",
        "z": "8a82633e8612364f",
        "mssqlCN": "a0513bd15284c98d",
        "name": "GetShiftRuntime",
        "outField": "shiftRuntime",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @accessId UNIQUEIDENTIFIER = @accessIdInfo;\r\n\r\nDECLARE @currentDateUTC DATETIME SET @currentDateUTC = GETUTCDATE();\r\n\r\nSELECT TOP (1) [gId] as id\r\n    ,[dtEnd] as [end]\r\n    ,@currentDateUTC AS [currentUTC]\r\nFROM [BaseClassifiers].[dbo].[tblShiftRuntime]\r\nWHERE [gPlantId] = @accessId AND [dtStart] <= @currentDateUTC AND [dtEnd] >= @currentDateUTC\r\nORDER BY [nKey] ASC",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "accessIdInfo",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "equipment[0].accessId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 1180,
        "y": 480,
        "wires": [
            [
                "57ad918e17ce3f40"
            ]
        ]
    },
    {
        "id": "29450951bb6a252c",
        "type": "MSSQL",
        "z": "8a82633e8612364f",
        "mssqlCN": "a0513bd15284c98d",
        "name": "UpdateUserActivityOnEquipment",
        "outField": "userActivityOnEquipment",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @currentUTC DATETIME2(7) = @currentUTCInfo,\r\n        @shiftRuntimeId UniqueIdentifier = @shiftRuntimeIdInfo,\r\n        @shiftRuntimeEnd DATETIME2(7) = @shiftRuntimeEndInfo,\r\n        @equipmentId UniqueIdentifier = @equipmentIdInfo,\r\n\t\t@personnelNumber NVarChar(255) = @personnelNumberInfo\r\n\r\n\r\nIF OBJECT_ID('[UserManagement].[dbo].[tblUserActivityOnEquipment]', 'U') IS NULL\r\nBEGIN\r\n    CREATE TABLE [UserManagement].[dbo].[tblUserActivityOnEquipment] (\r\n        [nKey] INT IDENTITY(1,1) PRIMARY KEY,\r\n        [gEquipmentId] UNIQUEIDENTIFIER NOT NULL,\r\n        [szPersonnelNumber] NVARCHAR(255) NOT NULL,\r\n        [gShiftRunTimeId] UNIQUEIDENTIFIER NOT NULL,\r\n        [bIsActive] BIT NOT NULL,\r\n        [dtActiveSince] DATETIME2(7) NOT NULL,\r\n        [dtActiveTill] DATETIME2(7) NOT NULL,\r\n        INDEX idx_EquipmentId (gEquipmentId)\r\n    );\r\nEND\r\n\r\nUPDATE [UserManagement].[dbo].[tblUserActivityOnEquipment] \r\nSET \r\n\t[bIsActive] = 0\r\nWHERE \r\n\t[gEquipmentId] = @equipmentId\r\n\tAND [szPersonnelNumber] = @personnelNumber\r\n\tAND [bIsActive] = 1\r\n\r\nDECLARE @newRow AS TABLE (\r\n    [nKey] INT,\r\n    [gEquipmentId] UNIQUEIDENTIFIER,\r\n    [szPersonnelNumber] NVARCHAR(255),\r\n    [gShiftRunTimeId] UNIQUEIDENTIFIER,\r\n    [bIsActive] BIT,\r\n    [dtActiveSince] DATETIME2(7),\r\n    [dtActiveTill] DATETIME2(7) \r\n)\r\n\r\nINSERT INTO [UserManagement].[dbo].[tblUserActivityOnEquipment] (\r\n    [gEquipmentId],\r\n    [szPersonnelNumber],\r\n    [gShiftRunTimeId],\r\n    [bIsActive],\r\n    [dtActiveSince],\r\n    [dtActiveTill]\r\n) OUTPUT inserted.* INTO @newRow VALUES (\r\n    @equipmentId,\r\n    @personnelNumber,\r\n    @shiftRuntimeId,\r\n    1,\r\n    @currentUTC,\r\n    @shiftRuntimeEnd\r\n)\r\n\r\nSelect \r\n    nKey as [key],\r\n    gEquipmentId AS equipmentId,\r\n    szPersonnelNumber as personnelNumber,\r\n    gShiftRunTimeId AS shiftRunTimeId,\r\n    bIsActive AS isActive,\r\n    dtActiveSince AS activeSince,\r\n    dtActiveTill as activeTill\r\nfrom @newRow",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "currentUTCInfo",
                "type": "DateTime2(7)",
                "valueType": "msg",
                "value": "shiftRuntime[0].currentUTC",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "shiftRuntimeIdInfo",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "shiftRuntime[0].id",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "shiftRuntimeEndInfo",
                "type": "DateTime2(7)",
                "valueType": "msg",
                "value": "shiftRuntime[0].end",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "equipmentIdInfo",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "equipment[0].id",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "personnelNumberInfo",
                "type": "NVarChar(255)",
                "valueType": "msg",
                "value": "payload.personnelNumber",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 1620,
        "y": 480,
        "wires": [
            [
                "ca6c2fa9f4c32205"
            ]
        ]
    },
    {
        "id": "915f9e190ce10af9",
        "type": "MSSQL",
        "z": "8a82633e8612364f",
        "mssqlCN": "a0513bd15284c98d",
        "name": "UpdatingUserActivityOnEquipmentByTime",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "IF OBJECT_ID('[UserManagement].[dbo].[tblUserActivityOnEquipment]', 'U') IS NULL\r\nBEGIN\r\n    CREATE TABLE [UserManagement].[dbo].[tblUserActivityOnEquipment] (\r\n        [nKey] INT IDENTITY(1,1) PRIMARY KEY,\r\n        [gEquipmentId] UNIQUEIDENTIFIER NOT NULL,\r\n        [szPersonnelNumber] NVARCHAR(255) NOT NULL,\r\n        [gShiftRunTimeId] UNIQUEIDENTIFIER NOT NULL,\r\n        [bIsActive] BIT NOT NULL,\r\n        [dtActiveSince] DATETIME2(7) NOT NULL,\r\n        [dtActiveTill] DATETIME2(7) NOT NULL,\r\n        INDEX idx_EquipmentId (gEquipmentId)\r\n    );\r\nEND\r\n\r\nDECLARE @updatedEquipmentIds AS TABLE ( [gEquipmentId] UNIQUEIDENTIFIER )\r\n\r\nUPDATE [UserManagement].[dbo].[tblUserActivityOnEquipment]\r\nSET  \r\n    [bIsActive] = 0 \r\nOUTPUT \r\n    inserted.[gEquipmentId] \r\nINTO @updatedEquipmentIds\r\nWHERE \r\n    [dtActiveTill] <= GETUTCDATE() and\r\n    bIsActive = 1\r\n\r\n\r\nSELECT\r\n    DISTINCT [gEquipmentId] as equipmentId\r\nFROM @updatedEquipmentIds",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1800,
        "y": 160,
        "wires": [
            [
                "4b699259f49d66ea",
                "37ddb11a26d682b2"
            ]
        ]
    },
    {
        "id": "a5509bf75b9d5a37",
        "type": "MSSQL",
        "z": "8a82633e8612364f",
        "mssqlCN": "a0513bd15284c98d",
        "name": "UpdateUserActivityOnEquipment",
        "outField": "userActivityOnEquipment",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @equipmentId UniqueIdentifier = @equipmentIdInfo,\r\n\t\t@personnelNumber NVarChar(255) = @personnelNumberInfo\r\n\r\nIF OBJECT_ID('[UserManagement].[dbo].[tblUserActivityOnEquipment]', 'U') IS NULL\r\nBEGIN\r\n    CREATE TABLE [UserManagement].[dbo].[tblUserActivityOnEquipment] (\r\n        [nKey] INT IDENTITY(1,1) PRIMARY KEY,\r\n        [gEquipmentId] UNIQUEIDENTIFIER NOT NULL,\r\n        [szPersonnelNumber] NVARCHAR(255) NOT NULL,\r\n        [gShiftRunTimeId] UNIQUEIDENTIFIER NOT NULL,\r\n        [bIsActive] BIT NOT NULL,\r\n        [dtActiveSince] DATETIME2(7) NOT NULL,\r\n        [dtActiveTill] DATETIME2(7) NOT NULL,\r\n        INDEX idx_EquipmentId (gEquipmentId)\r\n    );\r\nEND\r\n\r\nDECLARE @updatedEquipmentIds AS TABLE ( [gEquipmentId] UNIQUEIDENTIFIER )\r\n\r\nUPDATE [UserManagement].[dbo].[tblUserActivityOnEquipment]\r\nSET  \r\n    [bIsActive] = 0 \r\nOUTPUT \r\n    inserted.[gEquipmentId] \r\nINTO @updatedEquipmentIds\r\nWHERE \r\n    [gEquipmentId] = @equipmentId\r\n    AND [szPersonnelNumber] = @personnelNumber\r\n\r\n\r\nSELECT\r\n    DISTINCT [gEquipmentId] as equipmentId\r\nFROM @updatedEquipmentIds",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "equipmentIdInfo",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "payload.equipmentId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "personnelNumberInfo",
                "type": "NVarChar(255)",
                "valueType": "msg",
                "value": "payload.personnelNumber",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 860,
        "y": 660,
        "wires": [
            [
                "2f057ca4b55107bf"
            ]
        ]
    },
    {
        "id": "39d6da085f2d5703",
        "type": "http response",
        "z": "c764d88e569893de",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 650,
        "y": 200,
        "wires": []
    },
    {
        "id": "079d70ea36144fb5",
        "type": "http in",
        "z": "c764d88e569893de",
        "name": "oee",
        "url": "api/oee",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 200,
        "wires": [
            [
                "03b16282de7bd399"
            ]
        ]
    },
    {
        "id": "3aed65fb57e5f643",
        "type": "inject",
        "z": "c764d88e569893de",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"id\":\"45516ADD-1DDC-449A-A5CA-BEE4F6630C3B\"}",
        "payloadType": "json",
        "x": 300,
        "y": 140,
        "wires": [
            [
                "03b16282de7bd399"
            ]
        ]
    },
    {
        "id": "b28b33f2989fa3a7",
        "type": "debug",
        "z": "c764d88e569893de",
        "name": "debug 77",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 240,
        "wires": []
    },
    {
        "id": "03b16282de7bd399",
        "type": "MSSQL",
        "z": "c764d88e569893de",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get OEE",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @dtNow datetime = GETUTCDATE(),@nEfficiency decimal(18,6)=498.000000,@nOee decimal(5,2)\r\n\tDECLARE @tblProcess TABLE (gId uniqueidentifier,dtPlanStart datetime,dtPlanEnd datetime,nPlanDuration decimal(18,6),dtProcessStart datetime,dtProcessStop datetime,nProcessDuration decimal(18,6),nInterval decimal(18,2),gMaterialId uniqueidentifier\r\n\t,gEquipmentId uniqueidentifier,nWeightNet decimal(18,6),nWeightHRU decimal(18,2),nWeightQA decimal(18,2),nWeightReject decimal(18,6),nWeightWaste decimal(18,6),nWeightAll decimal(18,6),nWeightLost decimal(18,6),nEfficiency decimal(18,6),fPlanAmount decimal(18,6))\r\n\tDECLARE @tblInterval TABLE (nKey int ,gProcessEquipmentId uniqueidentifier,dtStart datetime, dtEnd datetime,nDuration int,gProcessId uniqueidentifier)\r\n\r\n\tINSERT INTO @tblProcess(gId,dtPlanStart,dtProcessStart,dtProcessStop,gMaterialId,gEquipmentId,fPlanAmount,nInterval)\r\n\t\tSELECT p.[gId],po.dtPlanStart,p.[dtStartedAt],ISNULL(p.[dtCompletedAt],@dtNow),po.gMaterialId,p.[gEquipmentId],p.fProcessAmount,0\r\n\t\tFROM [HLRURASAP99].[ProductionManagementRunTimeDb].[dbo].[tblProcess] p\r\n\t\t\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperation] o ON o.gId = p.gOperationId\r\n\t\t\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProductionOrder] po ON po.gId = o.gProductionOrderId\t\t\t\t\t\t\r\n\t\tWHERE p.szName LIKE N'%Фасовка%' AND po.gId='{{{payload.id}}}'\r\n\r\n\tUPDATE @tblProcess\r\n\t\tSET nWeightNet=nWeight,nEfficiency=ISNULL(nPerfomance,500) \r\n\t\tFROM (\tSELECT be.gProcessId as gProc, SUM(be.nQuantity) as nWeight,MIN(ep.nPerfomance) as nPerfomance\r\n\t\t\t\tFROM [BatchManagementDb].[dbo].[tblBatchEvent] be\r\n\t\t\t\t\tINNER JOIN [BatchManagementDb].[dbo].[tblBatch] b ON b.gId = be.gBatchId\r\n\t\t\t\t\tINNER JOIN @tblProcess p ON p.gId=b.[gProcessId]\r\n\t\t\t\t\tLEFT JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblEquipmentPerformance] ep ON ep.gEquipmentId=p.gEquipmentId AND ep.gMaterialId=p.gMaterialId AND ep.szProductionVersion=b.szVersion\r\n\t\t\t\tWHERE nType =100 AND p.gMaterialId=b.gMaterialId\r\n\t\t\t\tGROUP BY be.gProcessId) tbl\r\n\t\tWHERE gId = gProc\r\n\t\t\r\n\tUPDATE @tblProcess\r\n\t\tSET nWeightHRU=nWeight \r\n\t\tFROM (\tSELECT be.gProcessId as gProc, SUM(be.nQuantity) as nWeight\r\n\t\t\t\tFROM [BatchManagementDb].[dbo].[tblBatchEvent] be\r\n\t\t\t\t\tINNER JOIN[BatchManagementDb].[dbo].[tblBatch] b ON b.gId = be.gBatchId\r\n\t\t\t\t\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblMaterial] m ON m.gId=b.gMaterialId\r\n\t\t\t\t\tINNER JOIN @tblProcess p ON p.gId=b.[gProcessId]\r\n\t\t\t\tWHERE nType =100 AND p.gMaterialId<>b.gMaterialId AND m.szName LIKE N'HRU%' \r\n\t\t\t\tGROUP BY be.gProcessId) tbl\r\n\t\tWHERE gId = gProc\r\n\r\n\tUPDATE @tblProcess\r\n\t\tSET nWeightQA=nWeight \r\n\t\tFROM (\tSELECT be.gProcessId as gProc, SUM(be.nQuantity) as nWeight\r\n\t\t\t\tFROM [BatchManagementDb].[dbo].[tblBatchEvent] be\r\n\t\t\t\t\tINNER JOIN [BatchManagementDb].[dbo].[tblBatch] b ON b.gId = be.gBatchId\r\n\t\t\t\t\tINNER JOIN [BatchManagementDb].[dbo].[tblStorageLocation] sl ON sl.gId=b.StorageLocationId \r\n\t\t\t\t\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblMaterial] m ON m.gId=b.gMaterialId\r\n\t\t\t\t\tINNER JOIN @tblProcess p ON p.gId=b.[gProcessId]\r\n\t\t\t\tWHERE nType =100 \r\n\t\t\t\t\tAND p.gMaterialId=b.gMaterialId AND sl.szExternalSystemSapLink='6060' --выпуск материал совпадающий с материалом процесса и лежащий в хранилище лаборатория(6060)\r\n\t\t\t\tGROUP BY be.gProcessId) tbl\r\n\t\tWHERE gId = gProc\r\n\tUPDATE @tblProcess\r\n\t\tSET nWeightReject=nWeight \r\n\t\tFROM (\tSELECT be.gProcessId as gProc, SUM(be.nQuantity) as nWeight\r\n\t\t\t\tFROM [BatchManagementDb].[dbo].[tblBatchEvent] be\r\n\t\t\t\t\tINNER JOIN [BatchManagementDb].[dbo].[tblBatch] b ON b.gId = be.gBatchId\r\n\t\t\t\t\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblMaterial] m ON m.gId=b.gMaterialId\r\n\t\t\t\t\tINNER JOIN @tblProcess p ON p.gId=b.[gProcessId]\r\n\t\t\t\tWHERE nType =100 AND p.gMaterialId<>b.gMaterialId AND m.szName LIKE N'Reject%' \r\n\t\t\t\tGROUP BY be.gProcessId) tbl\r\n\t\tWHERE gId = gProc\r\n\t\r\n\tUPDATE @tblProcess\r\n\t\tSET nWeightWaste=nWeight \r\n\t\tFROM (\tSELECT be.gProcessId as gProc, SUM(be.nQuantity) as nWeight\r\n\t\t\t\tFROM [BatchManagementDb].[dbo].[tblBatchEvent] be\r\n\t\t\t\t\tINNER JOIN [BatchManagementDb].[dbo].[tblBatch] b ON b.gId = be.gBatchId\r\n\t\t\t\t\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblMaterial] m ON m.gId=b.gMaterialId\r\n\t\t\t\t\tINNER JOIN @tblProcess p ON p.gId=b.[gProcessId]\r\n\t\t\t\tWHERE nType =100 AND p.gMaterialId<>b.gMaterialId AND m.szName LIKE N'Waste%' \r\n\t\t\t\tGROUP BY be.gProcessId) tbl\r\n\t\tWHERE gId = gProc\r\n\r\n\tUPDATE @tblProcess\r\n\t\tSET nProcessDuration=DATEDIFF(ss,dtProcessStart,dtProcessStop)\r\n\t\t,dtPlanEnd = DATEADD(ss,fPlanAmount/(ISNULL(nEfficiency,@nEfficiency)/3600),dtPlanStart)\r\n\t\t,nWeightAll=ISNULL(nWeightNet,0)+ISNULL(nWeightReject,0)+ISNULL(nWeightHRU,0)+ISNULL(nWeightQA,0)+ISNULL(nWeightWaste,0)\r\n\t\t,nWeightLost=ISNULL(nWeightReject,0)+ISNULL(nWeightQA,0)+ISNULL(nWeightHRU,0)+ISNULL(nWeightWaste,0)\r\n\t\tFROM @tblProcess\r\n\t\r\n\tUPDATE @tblProcess\r\n\t\tSET nPlanDuratioN=DATEDIFF(ss,dtPlanStart,dtPlanEnd)\r\n\r\n\tINSERT INTO @tblInterval(nKey,gProcessEquipmentId,dtStart,dtEnd,gProcessId)\r\n\t\tSELECT rti.nKey,ee.gEquipmentTreeId,rti.dtStart,ISNULL(dtEnd,@dtNow),p.gId\t\t\t\r\n\t\tFROM [OeeRunTimeData].[dbo].[tblProductionTimeInterval] rti\r\n\t\t\tINNER JOIN [OeeMasterData].[dbo].[tblProductionTimeInterval] mti ON mti.gId=rti.gProductionTimeIntervalLink\r\n\t\t\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ee ON ee.szExternalId=rti.gProductionEquipmentLink AND ee.szExternalId IS NOT NULL AND [gEquipmentTreeId] IS NOT NULL\r\n\t\t\tINNER JOIN [HLRURASAP100].[BaseClassifiers].[dbo].[tblExternalSystem] es ON es.gId=ee.gExternalSystemId AND es.szName=N'OEE'\r\n\t\t\tINNER JOIN @tblProcess p ON  p.gEquipmentId=ee.[gEquipmentTreeId]\r\n\t\tWHERE (rti.bIsGroup=1 AND rti.dtStart >= p.dtProcessStart AND rti.dtStart < p.dtProcessStop AND rti.[bIsOperatingTime]=0)\r\n\t\t\tOR (rti.bIsGroup=1 AND rti.dtEnd >= p.dtProcessStart AND rti.dtEnd < p.dtProcessStop AND rti.[bIsOperatingTime]=0)\r\n\t\t\tOR (rti.bIsGroup=0 AND bIsActive=0 AND bIsMicroStop=1 AND rti.dtStart >=  p.dtProcessStart AND rti.dtStart < p.dtProcessStop AND rti.[bIsOperatingTime]=0) \r\n\r\n\t UPDATE i\r\n\t\tSET dtStart = dtProcessStart\r\n\t\tFROM @tblInterval i\r\n\t\t\tINNER JOIN @tblProcess p ON p.gId=i.gProcessId\r\n\t\tWHERE dtStart < p.dtProcessStart \r\n\tUPDATE i\r\n\t\tSET dtEnd = dtProcessStop\r\n\t\tFROM @tblInterval i\r\n\t\t\tINNER JOIN @tblProcess p ON p.gId=i.gProcessId\r\n\t\tWHERE dtEnd > p.dtProcessStop\r\n\t\r\n\tUPDATE @tblInterval\r\n\t\t\tSET nDuration = DATEDIFF(ss,dtStart,dtEnd)\r\n\t\r\n\tUPDATE @tblProcess\r\n\t\tSET nInterval=nDuration\r\n\t\tFROM (SELECT gProcessId,SUM(nDuration) as 'nDuration' FROM @tblInterval GROUP BY gProcessId) i\r\n\t\tWHERE gId=gProcessId\r\n\r\n\tSELECT @nOee=CAST((nProcessDuration-nInterval)*(nWeightAll-nWeightLost)/ISNULL(nEfficiency,@nEfficiency)*360000/nPlanDuration/nPlanDuration as decimal(5,2)) \r\n\t--,CAST(((nProcessDuration-nInterval)*100/nPlanDuration/100*((nWeightAll*100)/ISNULL(nEfficiency,@nEfficiency)/nPlanDuration*3600)/100*((nWeightAll-nWeightLost)*100/nWeightAll)/100)*100 as decimal(5,2)) as 'OEE'\r\n\tFROM @tblProcess\r\n    SELECT ISNULL(@nOee,0) as 'OEE'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 480,
        "y": 200,
        "wires": [
            [
                "39d6da085f2d5703",
                "b28b33f2989fa3a7"
            ]
        ]
    },
    {
        "id": "4c3ade61fab1dcf8",
        "type": "switch",
        "z": "453361abcae0776c",
        "name": "CheckInspLotOnNull",
        "property": "SQL[0]['inspectionLotId']",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1020,
        "y": 180,
        "wires": [
            [
                "cc809e5da989c431"
            ],
            [
                "e62d1de61260c55b"
            ]
        ]
    },
    {
        "id": "e62d1de61260c55b",
        "type": "debug",
        "z": "453361abcae0776c",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 180,
        "wires": []
    },
    {
        "id": "bbd1ee79308f9b27",
        "type": "function",
        "z": "453361abcae0776c",
        "name": "PrepareDuplicateRequest",
        "func": "msg.url = \"http://10.70.6.61:52448/api/InspectionLot/duplicate\";\n\nmsg.payload = {};\n\nmsg.payload.id = msg.SQL[0]['inspectionLotId'];\nmsg.payload.notOkOnly = true;\nmsg.payload.inspectionCharacteristicIds = [msg.SQL[0]['inspectionCharacteristicId']];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 280,
        "wires": [
            [
                "766357f696e1bf6b"
            ]
        ]
    },
    {
        "id": "fbd630948f8238b5",
        "type": "http request",
        "z": "453361abcae0776c",
        "name": "CreateDuplicate",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-type",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 720,
        "y": 280,
        "wires": [
            [
                "d2592d864915f4e9"
            ]
        ]
    },
    {
        "id": "c0dbd497ca67151f",
        "type": "debug",
        "z": "453361abcae0776c",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 320,
        "wires": []
    },
    {
        "id": "766357f696e1bf6b",
        "type": "json",
        "z": "453361abcae0776c",
        "name": "ToJson",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 540,
        "y": 280,
        "wires": [
            [
                "fbd630948f8238b5",
                "badd086e495896a3"
            ]
        ]
    },
    {
        "id": "95c7aa8401b3e530",
        "type": "debug",
        "z": "453361abcae0776c",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 120,
        "wires": []
    },
    {
        "id": "badd086e495896a3",
        "type": "debug",
        "z": "453361abcae0776c",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 360,
        "wires": []
    },
    {
        "id": "cc809e5da989c431",
        "type": "subflow:ca94f48e1f18b542",
        "z": "453361abcae0776c",
        "name": "",
        "x": 90,
        "y": 280,
        "wires": [
            [
                "cc6023a8462294d9"
            ]
        ]
    },
    {
        "id": "cc6023a8462294d9",
        "type": "subflow:f2924807aef52857",
        "z": "453361abcae0776c",
        "name": "",
        "x": 100,
        "y": 340,
        "wires": [
            [
                "bbd1ee79308f9b27"
            ]
        ]
    },
    {
        "id": "d2592d864915f4e9",
        "type": "json",
        "z": "453361abcae0776c",
        "name": "json",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 890,
        "y": 260,
        "wires": [
            [
                "44e9eab2a12ae21a",
                "c0dbd497ca67151f"
            ]
        ]
    },
    {
        "id": "44e9eab2a12ae21a",
        "type": "function",
        "z": "453361abcae0776c",
        "name": "PrepareMoveToProcessStep",
        "func": "msg.url = \"http://10.70.6.61:52448/api/Events?eventName=InspectionLot.GetInProcess&eventKey=\" + msg.payload.id;\n\nmsg.payload = {};\n\nmsg.payload.NextStep = 1;\nmsg.payload.Decision = 0;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 260,
        "wires": [
            [
                "c404954eda2a9cac"
            ]
        ]
    },
    {
        "id": "c404954eda2a9cac",
        "type": "http request",
        "z": "453361abcae0776c",
        "name": "MoveToProcessStep",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-type",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 1360,
        "y": 260,
        "wires": [
            [
                "23016ef5e5ab2297"
            ]
        ]
    },
    {
        "id": "23016ef5e5ab2297",
        "type": "debug",
        "z": "453361abcae0776c",
        "name": "debug 122",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 260,
        "wires": []
    },
    {
        "id": "8af93b533680cf70",
        "type": "amqp-in",
        "z": "453361abcae0776c",
        "d": true,
        "name": "DegustationInspectionMeasurementCompletedEvent",
        "broker": "2f76d8b874d08554",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "",
        "exchangeType": "topic",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "DegustationInspectionMeasurementCompletedEvent",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 230,
        "y": 180,
        "wires": [
            [
                "95c7aa8401b3e530",
                "390d0cda4c9e79a5"
            ]
        ]
    },
    {
        "id": "390d0cda4c9e79a5",
        "type": "MSSQL",
        "z": "453361abcae0776c",
        "mssqlCN": "a0513bd15284c98d",
        "name": "GetInspectionLot",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "select top 1 il.gId as N'inspectionLotId', v.gInspectionCharacteristicId as N'inspectionCharacteristicId' from (select * from [HLRURASAP99].QARunTimeData.dbo.tblInspectionMeasurement where gId = '{{{payload.InspectionMeasurementId}}}') m\r\nleft join [HLRURASAP99].BatchManagementDb.dbo.tblInspectionLot il on il.gInspectionMeasurementId = m.gId\r\nleft join [HLRURASAP99].QARunTimeData.dbo.tblInspectionCharacteristicValue v on v.gInspectionMeasurementId = m.gId \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   and v.nUsageDecision = 2\r\nleft join  [HLRURASAP100].QAMasterData.dbo.tblInspectionCharacteristic ic on v.gInspectionCharacteristicId = ic.gId\r\nleft join  [HLRURASAP99].WorkflowData.dbo.tblInspectionMeasurementTemplateWorkflow w on w.gInspectionMeasurementTemplateId = m.gInspectionMeasurementTemplateId \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t and w.nWorkflow = 15\r\n\r\nwhere v.gId is not null\r\nand ic.szCode = N'Консистенция'\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 790,
        "y": 180,
        "wires": [
            [
                "4c3ade61fab1dcf8"
            ]
        ]
    },
    {
        "id": "244b96f9.09b36a",
        "type": "inject",
        "z": "def1857dcad7e99b",
        "name": "Сохранение всего node-red раз в день",
        "props": [],
        "repeat": "",
        "crontab": "00 22 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 80,
        "wires": [
            [
                "74d67887aa7f2cea"
            ]
        ]
    },
    {
        "id": "b02b6afd.9a03a8",
        "type": "comment",
        "z": "def1857dcad7e99b",
        "name": "Backup DTr",
        "info": "",
        "x": 150,
        "y": 40,
        "wires": []
    },
    {
        "id": "d92f17e49143c79f",
        "type": "exec",
        "z": "def1857dcad7e99b",
        "command": "\"C:\\Program Files\\7-Zip\\7z.exe\"",
        "addpay": "filename",
        "append": "",
        "useSpawn": "false",
        "timer": "10",
        "winHide": false,
        "oldrc": false,
        "name": "Сохранение node-red",
        "x": 760,
        "y": 80,
        "wires": [
            [
                "a8fe36c2741a90e4"
            ],
            [
                "e13b13d0c55eb1b8"
            ],
            [
                "1ea51c053cec8584"
            ]
        ]
    },
    {
        "id": "74d67887aa7f2cea",
        "type": "function",
        "z": "def1857dcad7e99b",
        "name": "Подготовка данных",
        "func": "const fs = global.get(\"fsextra\");\nmsg.error = {\n    Messages : []\n}\n\nif (fs.existsSync(\"C:/Backups/Node-red/1881\")){\n    let output =\"C:/Backups/Node-red/1881/backup_All_\"+(new Date().toISOString().replace(':', '_').replace(':', '_').replace(/\\..+/, ''))+\".7z\";\n    let source=\"C:/ProgramData/npm/npm/node_modules/node-red-1881/projects/1881_NR/flows.json\";\n\n    msg.filename=\" a -ssw -mx9 \" + output + \" \" + source;\n    \n}\nelse {\n    msg.error.Messages.push(\"Путь для сохранения не найден\")\n}\n\nif (msg.error.Messages.length > 0){\n    return [null, msg];\n}\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 80,
        "wires": [
            [
                "d92f17e49143c79f"
            ],
            [
                "1bb8d1267d0eedd8"
            ]
        ]
    },
    {
        "id": "a8fe36c2741a90e4",
        "type": "debug",
        "z": "def1857dcad7e99b",
        "d": true,
        "name": "debug 117",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 160,
        "wires": []
    },
    {
        "id": "e13b13d0c55eb1b8",
        "type": "debug",
        "z": "def1857dcad7e99b",
        "d": true,
        "name": "debug 118",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 200,
        "wires": []
    },
    {
        "id": "1ea51c053cec8584",
        "type": "debug",
        "z": "def1857dcad7e99b",
        "d": true,
        "name": "debug 119",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 240,
        "wires": []
    },
    {
        "id": "f5779b59a4999e4d",
        "type": "function",
        "z": "def1857dcad7e99b",
        "name": "Файл для отправки",
        "func": "const fs = global.get(\"fsextra\");\nconst backUpFolder = \"C:/Backups/Node-red/1881\";\nmsg.error={\n    Messages : []\n}\n\n\ntry {\n    if (fs.existsSync(backUpFolder)){\n        const files = await fs.readdir(backUpFolder);\n\n        if (files && files != \"\"){\n            for (const file of files) {\n                const filePath = backUpFolder + \"/\" + file;\n                const creationTime = fs.statSync(filePath).birthtime;\n                var lastSaveFile = Date.now() - 86400*1000 // настоящие время - день назад\n                \n                if (creationTime > lastSaveFile) {\n                    var attachment ={\n                        \"filename\": file,\n                        \"path\": filePath.replace(/\\//g, \"\\\\\")\n                    }\n                    lastSaveFile = creationTime;\n                }\n            }\n            msg.topic = \"`Server Backup 61:1881`\";\n            msg.payload = \"`Тестовый сервер: 61:1881`\";\n            msg.from = \"trapeznikovdanil00@mail.ru\"//\"MES_PA_Setting@hochland.com\";\n            msg.to = \"trapeznikov-danil2004@mail.ru\"//\"HochlandNodeRedBackup@hochland.com\";\n            msg.attachments = attachment\n        }\n        else {\n            msg.error.Messages.push(\"В папке нет файлов для отправки\")\n        }\n    }\n    else {\n        msg.error.Messages.push(\"Путь для сохранения не найден\")\n    }\n} catch (err) {\n    msg.error.Messages.push(\"Error: \" + err.message);\n\n}\nif (msg.error.Messages.length > 0){\n    return[null, msg]\n}\nreturn[msg, null]\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 220,
        "wires": [
            [
                "dc6991e5147291ed",
                "b21235bd0891cbf6"
            ],
            [
                "acf6c40475f0aa93",
                "dc6991e5147291ed"
            ]
        ]
    },
    {
        "id": "065a30a1c18a94d9",
        "type": "inject",
        "z": "def1857dcad7e99b",
        "name": "Отправка бэкапов раз в 3 дня",
        "props": [],
        "repeat": "259200",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 220,
        "wires": [
            [
                "f5779b59a4999e4d"
            ]
        ]
    },
    {
        "id": "dc6991e5147291ed",
        "type": "debug",
        "z": "def1857dcad7e99b",
        "d": true,
        "name": "debug 227",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 180,
        "wires": []
    },
    {
        "id": "2d7068e4acf55016",
        "type": "inject",
        "z": "def1857dcad7e99b",
        "name": "Удаление бэкапов раз в 30 дней",
        "props": [],
        "repeat": "",
        "crontab": "00 22 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 300,
        "wires": [
            [
                "647e1cb8ccb0ab31"
            ]
        ]
    },
    {
        "id": "647e1cb8ccb0ab31",
        "type": "function",
        "z": "def1857dcad7e99b",
        "name": "Выборка файлов",
        "func": "const fs = global.get(\"fsextra\");\nconst backUpFolder = \"C:/Backups/Node-red/1881\";\nconst timeToLive = Date.now() - 259200000 * 1000;\nmsg.error = {\n    Messages : []\n}\n\ntry {\n    if (fs.existsSync(backUpFolder)){\n        const files = await fs.readdir(backUpFolder);\n        var filesToDel = \"\"\n\n        if (files && files != \"\")\n        {\n            for (const file of files) {\n                const filePath = (backUpFolder + \"/\" + file)\n                const creationTime = fs.statSync(filePath).birthtime;\n                \n                if (creationTime < timeToLive) {\n                    \n                    filesToDel += filePath.replace(/\\//g, '\\\\') + \" \";\n                }\n            }\n            if (filesToDel != \"\")\n            {\n                msg.payload = filesToDel\n            }\n            else {\n                return [null, null]\n            }\n        }\n        else {\n            msg.error.Messages.push(\"В папке нет файлов для удаления\")\n        }\n    }\n    else {\n        msg.error.Messages.push(\"Путь для сохранения не найден\")\n    }\n} catch (err) {\n    msg.error.Messages.push(\"Error: \" + err.message);\n}\n\nif (msg.error.Messages.length > 0) {\n    return [null, msg]\n}\nreturn [msg, null]\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 300,
        "wires": [
            [
                "fef262c744975029"
            ],
            [
                "2c6501261ed76065"
            ]
        ]
    },
    {
        "id": "fef262c744975029",
        "type": "exec",
        "z": "def1857dcad7e99b",
        "command": "del /f ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "10",
        "winHide": false,
        "oldrc": false,
        "name": "Удаление файлов",
        "x": 750,
        "y": 300,
        "wires": [
            [
                "a8fe36c2741a90e4"
            ],
            [
                "e13b13d0c55eb1b8"
            ],
            [
                "1ea51c053cec8584"
            ]
        ]
    },
    {
        "id": "1bb8d1267d0eedd8",
        "type": "link out",
        "z": "def1857dcad7e99b",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "6d9892ce3e17ca27"
        ],
        "x": 675,
        "y": 140,
        "wires": []
    },
    {
        "id": "2c6501261ed76065",
        "type": "link out",
        "z": "def1857dcad7e99b",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "6d9892ce3e17ca27"
        ],
        "x": 675,
        "y": 360,
        "wires": []
    },
    {
        "id": "acf6c40475f0aa93",
        "type": "link out",
        "z": "def1857dcad7e99b",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "6d9892ce3e17ca27"
        ],
        "x": 675,
        "y": 260,
        "wires": []
    },
    {
        "id": "6d9892ce3e17ca27",
        "type": "link in",
        "z": "def1857dcad7e99b",
        "name": "link in 2",
        "links": [
            "2c6501261ed76065",
            "acf6c40475f0aa93",
            "1bb8d1267d0eedd8"
        ],
        "x": 75,
        "y": 400,
        "wires": [
            [
                "5058bb193bae359a"
            ]
        ]
    },
    {
        "id": "5058bb193bae359a",
        "type": "debug",
        "z": "def1857dcad7e99b",
        "name": "Ошибки",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 400,
        "wires": []
    },
    {
        "id": "d012b856954f7ae3",
        "type": "catch",
        "z": "def1857dcad7e99b",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 110,
        "y": 480,
        "wires": [
            [
                "5058bb193bae359a"
            ]
        ]
    },
    {
        "id": "8e8d645aacc62b31",
        "type": "debug",
        "z": "def1857dcad7e99b",
        "name": "Debug Save Catch Data",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 480,
        "wires": []
    },
    {
        "id": "b21235bd0891cbf6",
        "type": "e-mail",
        "z": "def1857dcad7e99b",
        "server": "smtp.mail.ru",
        "port": "587",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": false,
        "tls": false,
        "name": "",
        "dname": "Send E-Mail",
        "x": 730,
        "y": 220,
        "wires": []
    },
    {
        "id": "d49668a8c8134d2b",
        "type": "inject",
        "z": "852151fb0c2db6c2",
        "name": "начать",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "lastRequestLogEntryId",
                "v": "lastRequestLogEntryId",
                "vt": "flow"
            },
            {
                "p": "pathCriteria",
                "v": "pathCriteria",
                "vt": "flow"
            },
            {
                "p": "apiPaths",
                "v": "apiPaths",
                "vt": "flow"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 180,
        "wires": [
            [
                "e9bef792d3fd6108"
            ]
        ]
    },
    {
        "id": "6e0fc2ef3a060a49",
        "type": "debug",
        "z": "852151fb0c2db6c2",
        "name": "debug 120",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 400,
        "wires": []
    },
    {
        "id": "78aff213bb3e64eb",
        "type": "function",
        "z": "852151fb0c2db6c2",
        "name": "подготовка записей протокола",
        "func": "let pathCriteria = msg.pathCriteria;\n\nlet protocolRecords = [];\n\nmsg.payload.forEach(element => checkCriteria(element));\n\nfunction checkCriteria(element) {\n    let path = element.Path.toLowerCase();\n\n    let apiPath = msg.apiPaths.find(x => path.includes(x));\n\n    let targetDescription = null;\n\n    if (apiPath)\n        targetDescription = pathCriteria.get(apiPath);\n\n    if (targetDescription) {\n\n        let userInfo = getUserInfo(element.Headers)\n        protocolRecords.push(\n            {\n                UtcTimestamp: element.UtcTimestamp,\n                Method: element.Method,\n                Path: element.Path,\n                Target: targetDescription,\n                Body: element.Body,\n                ResponseStatusCode: element.ResponseStatusCode,\n                UserId: userInfo.UserId,\n                User: userInfo.FullName,\n                RequestLogLink: element.Id\n            }\n        )\n    }\n}\n\nfunction getUserInfo(headersString) {\n    let headers = JSON.parse(headersString);\n    if (!headers.Authorization) return { FullName: 'н/д', UserId: null };\n    let Token = headers.Authorization[0];\n    if (Token) {\n        Token = Token.replace(\"Bearer \", \"\");\n        let TokenData = Token.split('.')[1];\n        if (TokenData) {\n            let TokenParse = JSON.parse(Buffer.from(TokenData, 'base64').toString());\n            return {\n                FullName: TokenParse?.FullName,\n                UserId: TokenParse?.gUserId\n            };\n        }\n    }\n    return { FullName: 'н/д', UserId: null };\n}\n\n// сохраняем Id последней записи в выборке из лога\nlet lastRequestLogEntry = msg.payload.slice(-1)[0];\nif (lastRequestLogEntry) {\n    flow.set('lastRequestLogEntryId', lastRequestLogEntry.Id);\n    msg.lastRequestLogEntryId = lastRequestLogEntry.Id;\n}\n\nmsg.protocolRecords = protocolRecords;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 260,
        "wires": [
            [
                "20791da68d19f898"
            ]
        ]
    },
    {
        "id": "8b8d0b2d7471e6c4",
        "type": "switch",
        "z": "852151fb0c2db6c2",
        "name": "не пустое ",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 340,
        "y": 260,
        "wires": [
            [
                "78aff213bb3e64eb"
            ],
            [
                "85fc39082580a89a"
            ]
        ]
    },
    {
        "id": "e5c47b2bb7d8d787",
        "type": "delay",
        "z": "852151fb0c2db6c2",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1250,
        "y": 260,
        "wires": [
            [
                "840075660b33348e"
            ]
        ]
    },
    {
        "id": "f3350407d787f14c",
        "type": "function",
        "z": "852151fb0c2db6c2",
        "name": "msg.lastRequestLogEntryId=",
        "func": "msg.lastRequestLogEntryId = msg.lastRequestLogEntryId || 0;\nflow.set('isRunning', true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 180,
        "wires": [
            [
                "05fec830ac0ecbc3"
            ]
        ]
    },
    {
        "id": "e9bef792d3fd6108",
        "type": "switch",
        "z": "852151fb0c2db6c2",
        "name": "isRunning?",
        "property": "isRunning",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 180,
        "wires": [
            [
                "f3350407d787f14c"
            ],
            [
                "f3350407d787f14c"
            ]
        ]
    },
    {
        "id": "9d07cf537034eed7",
        "type": "inject",
        "z": "852151fb0c2db6c2",
        "name": "при запуске NR",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "36ef3bef64dcf681",
                "ec79fd890b3209f1"
            ]
        ]
    },
    {
        "id": "85fc39082580a89a",
        "type": "function",
        "z": "852151fb0c2db6c2",
        "name": "flow.isRunning=false",
        "func": "flow.set('isRunning', false);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "231de1df60e8b8b7",
        "type": "function",
        "z": "852151fb0c2db6c2",
        "name": "flow.isRunning = false",
        "func": "flow.set('isRunning', false);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "2492d089d522e3c9",
        "type": "inject",
        "z": "852151fb0c2db6c2",
        "name": "прервать выполнение",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "231de1df60e8b8b7"
            ]
        ]
    },
    {
        "id": "840075660b33348e",
        "type": "switch",
        "z": "852151fb0c2db6c2",
        "name": "isRunning?",
        "property": "isRunning",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1430,
        "y": 260,
        "wires": [
            [
                "05fec830ac0ecbc3"
            ]
        ]
    },
    {
        "id": "401cf8ecc930cd48",
        "type": "debug",
        "z": "852151fb0c2db6c2",
        "name": "Debug Save Catch Data",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 480,
        "wires": []
    },
    {
        "id": "dbf8be49fc86c812",
        "type": "subflow:f8fc59a8d3d93ef9",
        "z": "852151fb0c2db6c2",
        "name": "",
        "x": 370,
        "y": 480,
        "wires": [
            [
                "401cf8ecc930cd48"
            ]
        ]
    },
    {
        "id": "4d57a496ab84f7cd",
        "type": "catch",
        "z": "852151fb0c2db6c2",
        "name": "ловить все",
        "scope": null,
        "uncaught": false,
        "x": 140,
        "y": 480,
        "wires": [
            [
                "dbf8be49fc86c812",
                "6e0fc2ef3a060a49",
                "85fc39082580a89a"
            ]
        ]
    },
    {
        "id": "ec79fd890b3209f1",
        "type": "function",
        "z": "852151fb0c2db6c2",
        "name": "установить критерии отбора запросов",
        "func": "let pathCriteria = new Map();\naddCriteria(pathCriteria, '/api/EquipmentTree', 'Дерево оборудования');\naddCriteria(pathCriteria, '/api/EquipmentTree', 'Дерево оборудования');\naddCriteria(pathCriteria, '/api/ExternalVertex', 'Дерево оборудования (внешние элементы)');\naddCriteria(pathCriteria, '/api/ExternalSystem', 'Внешние системы');\naddCriteria(pathCriteria, '/api/ExternalSystemToEquipment', 'Внешняя система на оборудование');\naddCriteria(pathCriteria, '/api/Material', 'Материалы');\naddCriteria(pathCriteria, '/api/MaterialClass', 'Класс материалов');\naddCriteria(pathCriteria, '/api/MaterialGroup', 'Группа материалов');\naddCriteria(pathCriteria, '/api/MaterialsCollection', 'Коллекция материалов');\naddCriteria(pathCriteria, '/api/CatalogGroup', 'Группа каталогов');\naddCriteria(pathCriteria, '/api/CatalogValue', 'Каталожные значения');\naddCriteria(pathCriteria, '/api/Counterparty', 'Поставщики');\naddCriteria(pathCriteria, '/api/CounterpartyGroup', 'Группа поставщиков');\naddCriteria(pathCriteria, '/api/CounterpartyToMaterial', 'Поставщик на материал');\naddCriteria(pathCriteria, '/api/User2Plant', 'Пользователь на завод');\n//addCriteria(pathCriteria, '/BatchHub', 'тест');\n//QA\naddCriteria(pathCriteria, '/api/CatalogValueDecision', 'QA Решение об использовании кат.значения');\naddCriteria(pathCriteria, '/api/InspectionCharacteristic', 'Анализ');\naddCriteria(pathCriteria, '/api/InspectionCharacteristicSpecification', 'Спецификация анализа');\naddCriteria(pathCriteria, '/api/InspectionMeasurementTemplate', 'План анализа');\naddCriteria(pathCriteria, '/api/InspectionMeasurementTemplateItem', 'План анализа (записи)');\naddCriteria(pathCriteria, '/api/TaskTemplate/task_template', 'Шаблон задания на печать');\n//Checklists\naddCriteria(pathCriteria, '/api/ChecklistAutoGenerationTemplate', 'Шаблон автогенерации чеклиста');\naddCriteria(pathCriteria, '/api/ChecklistCategory', 'Категория чеклиста');\naddCriteria(pathCriteria, '/api/ControlPoint', 'Контрольная точка');\n//TaskMan                                      \naddCriteria(pathCriteria, '/api/InspectionMeasurementTemplatePriority', 'Приоритет Плана анализа (TaskManagement)');\naddCriteria(pathCriteria, '/api/UserTaskSetting', 'Временные схемы контроля');\n//Scheduler           \naddCriteria(pathCriteria, '/api/Scheduler', 'Планировщик');\naddCriteria(pathCriteria, '/api/SchedulerGroup', 'Группа планировщиков');\n//Workflow\naddCriteria(pathCriteria, '/api/BasicChecklistSetting', 'Настройки чекслистов (WF)');\naddCriteria(pathCriteria, '/api/InspectionMeasurementTemplateWorkflow', 'Бизнес-процесс на План анализов (WF)');\naddCriteria(pathCriteria, '/api/ProductionOrderTemplateWorkflow', 'Бизнес-процесс на Шаблон ПЗ (WF)');\naddCriteria(pathCriteria, '/api/QualityPeriodicalValue', 'Автоматические анализы (WF)');\naddCriteria(pathCriteria, '/api/StepToUserNotification', 'Информирование пользователей (WF)');\naddCriteria(pathCriteria, '/api/WorkflowToUserGroup', 'Распределения групп пользователей на схемы бизнес-процессов (WF)');\n//LabEq                                        \naddCriteria(pathCriteria, '/api/LaboratoryEquipment', 'Лабораторное оборудование');\n//FileMan                                      \naddCriteria(pathCriteria, '/api/Report', 'Отчеты');\n//BatchMan            \naddCriteria(pathCriteria, '/api/Operation/CreateStorageLocation', 'Создание Хранилища');\naddCriteria(pathCriteria, '/api/Operation/UpdateStorageLocation', 'Изменение Хранилища');\naddCriteria(pathCriteria, '/api/Operation/DeleteStorageLocation', 'Удаление Хранилища');\naddCriteria(pathCriteria, '/api/Operation/createTransferStorageLocation', 'Создание Оборотной тары');\n//ProdMan                                      \naddCriteria(pathCriteria, '/api/BillOfMaterial', 'Спецификации (BOM)');\naddCriteria(pathCriteria, '/api/BomItem', 'Спецификация (записи BOM)');\naddCriteria(pathCriteria, '/api/BomItemsVersion', 'Спецификация (версии BOM)');\naddCriteria(pathCriteria, '/api/OperationControlRule', 'Правила контроля операции');\naddCriteria(pathCriteria, '/api/OperationTemplate', 'Шаблоны операции');\naddCriteria(pathCriteria, '/api/OrderTemplate', 'Шаблоны ПЗ');\n//Reception\naddCriteria(pathCriteria, '/api/CounterpartyContract', 'Договора контрагентов');\naddCriteria(pathCriteria, '/api/DeliveryControlRule',  'Правила контоля на приемке');\naddCriteria(pathCriteria, '/api/Driver',               'Водители');\naddCriteria(pathCriteria, '/api/Grade',                'Сортность(Grade)');\naddCriteria(pathCriteria, '/api/GradeSet',             'Набор сортности(GradeSet)');\naddCriteria(pathCriteria, '/api/Producer',             'Производители');\naddCriteria(pathCriteria, '/api/ReceptionLine',        'Линии примеки');\naddCriteria(pathCriteria, '/api/Setting',              'Настройки приемки');\naddCriteria(pathCriteria, '/api/TransportCompany',     'Транспортные компании');\naddCriteria(pathCriteria, '/api/Truck',                'Автомашины');\n\nflow.set('pathCriteria', pathCriteria);\n\nlet apiPaths = Array.from((pathCriteria.keys()));\nflow.set('apiPaths', apiPaths);\n\nfunction addCriteria(criterias, path, description) {\n    if (criterias && path && description) criterias.set(path.toLowerCase(), description);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "20791da68d19f898",
        "type": "switch",
        "z": "852151fb0c2db6c2",
        "name": "protocolRecords",
        "property": "protocolRecords",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 820,
        "y": 260,
        "wires": [
            [
                "6503ac65e6e87514"
            ],
            [
                "e5c47b2bb7d8d787"
            ]
        ]
    },
    {
        "id": "05fec830ac0ecbc3",
        "type": "MSSQL",
        "z": "852151fb0c2db6c2",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "select request logs",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "declare @lastProcessedRequestLogLink int = 0\r\n\r\nselect top 1 @lastProcessedRequestLogLink = [RequestLogLink] FROM [HttpRequestLogsAll].[dbo].[UserActionProtocol]\r\norder by Id desc\r\n\r\nSELECT TOP (1000) [Id]\r\n      ,[Host]\r\n      ,[Method]\r\n      ,[Path]\r\n      ,[Query]\r\n      ,[Headers]\r\n      ,[Cookies]\r\n      ,[Body]\r\n      ,[UtcTimestamp]\r\n      ,[ProcessingTimeMs]\r\n      ,[ResponseStatusCode]\r\n      ,[Exception]\r\n      ,[IdempotencyRequestKey]\r\n  FROM [HttpRequestLogsAll].[dbo].[HttpRequestLogs]\r\n  where Method not in ('GET', 'OPTIONS') and Id > {{{lastRequestLogEntryId}}} --@lastProcessedRequestLogLink\r\n  order by Id  ",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 150,
        "y": 260,
        "wires": [
            [
                "8b8d0b2d7471e6c4"
            ]
        ]
    },
    {
        "id": "36ef3bef64dcf681",
        "type": "MSSQL",
        "z": "852151fb0c2db6c2",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "ensure user protocol table exists",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "IF OBJECT_ID('[HttpRequestLogsAll].[dbo].[UserActionProtocol]', 'U') IS NULL\r\nBEGIN\r\n   CREATE TABLE [HttpRequestLogsAll].[dbo].[UserActionProtocol](\r\n\t[Id] [int] IDENTITY(1,1) NOT NULL,\t\r\n\t[Method] [nvarchar](15) NULL,\r\n\t[Path] [nvarchar](max) NULL,\t\r\n\t[Target] [nvarchar](255) NULL,\r\n\t[Body] [nvarchar](max) NULL,\r\n\t[UserId] [nvarchar](36) NULL,\r\n\t[User] [nvarchar](max) NULL,\r\n\t[UtcTimestamp] [datetime2](7) NOT NULL,\t\r\n\t[ResponseStatusCode] [int] NOT NULL,\t\r\n\t[RequestLogLink] [int] NOT NULL\r\nPRIMARY KEY CLUSTERED \r\n(\r\n\t[Id] ASC\r\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\r\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\r\nEND",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 390,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "6503ac65e6e87514",
        "type": "MSSQL",
        "z": "852151fb0c2db6c2",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "insert user actions protocol",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "[HttpRequestLogsAll].[dbo].[UserActionProtocol]",
        "modeOpt": "",
        "modeOptType": "bulk",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "protocolRecords",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "Method",
                "type": "NVarChar(15)",
                "valueType": "num",
                "value": "0",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "Path",
                "type": "NVarChar(max)",
                "valueType": "num",
                "value": "0",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "Body",
                "type": "NVarChar(max)",
                "valueType": "num",
                "value": "0",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "Target",
                "type": "NVarChar(255)",
                "valueType": "num",
                "value": "0",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "UserId",
                "type": "NVarChar(36)",
                "valueType": "num",
                "value": "0",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "User",
                "type": "NVarChar(max)",
                "valueType": "num",
                "value": "0",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "UtcTimestamp",
                "type": "DateTime2",
                "valueType": "num",
                "value": "0",
                "options": {
                    "nullable": false,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "ResponseStatusCode",
                "type": "int",
                "valueType": "num",
                "value": "0",
                "options": {
                    "nullable": false,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "RequestLogLink",
                "type": "int",
                "valueType": "num",
                "value": "0",
                "options": {
                    "nullable": false,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 1040,
        "y": 220,
        "wires": [
            [
                "e5c47b2bb7d8d787"
            ]
        ]
    },
    {
        "id": "90972917505886c2",
        "type": "MSSQL",
        "z": "852151fb0c2db6c2",
        "mssqlCN": "a0513bd15284c98d",
        "name": "select users",
        "outField": "Users",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT[Id]\r\n      ,[UserName]\r\n      ,[szFullName]\r\n  FROM [UserManagement].[dbo].[AspNetUsers]",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1050,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "2cf04ab718e977f5",
        "type": "http response",
        "z": "266f5e7038bdea8e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1410,
        "y": 100,
        "wires": []
    },
    {
        "id": "69e7d60a34f3d162",
        "type": "debug",
        "z": "266f5e7038bdea8e",
        "name": "debug 124",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 300,
        "wires": []
    },
    {
        "id": "c136c3270f4585a6",
        "type": "http in",
        "z": "266f5e7038bdea8e",
        "name": "",
        "url": "/api/PeriodicalControlTasksForInspectionLots",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 100,
        "wires": [
            [
                "3f11e3bc2878e9e3",
                "69e7d60a34f3d162"
            ]
        ]
    },
    {
        "id": "f14bb6dfa80d5983",
        "type": "function",
        "z": "266f5e7038bdea8e",
        "name": "SQL in JSON",
        "func": "msg.payload = msg.SQL ?? [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 100,
        "wires": [
            [
                "2cf04ab718e977f5",
                "69e7d60a34f3d162"
            ]
        ]
    },
    {
        "id": "3f11e3bc2878e9e3",
        "type": "switch",
        "z": "266f5e7038bdea8e",
        "name": "inspectionLotIds is not null",
        "property": "payload.inspectionLotIds[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 100,
        "wires": [
            [
                "ad2194428f1b9b67"
            ],
            [
                "f14bb6dfa80d5983"
            ]
        ]
    },
    {
        "id": "ad2194428f1b9b67",
        "type": "function",
        "z": "266f5e7038bdea8e",
        "name": "function 13",
        "func": "msg.ids = msg.payload.inspectionLotIds.join(','); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 60,
        "wires": [
            [
                "497d067f2f548646"
            ]
        ]
    },
    {
        "id": "497d067f2f548646",
        "type": "MSSQL",
        "z": "266f5e7038bdea8e",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Select",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @inspectionLotIds NVarChar(max) = '{{{ids}}}';\r\n\r\nwith InspectionLotIds as (\r\n\tSELECT DISTINCT [value] as InspectionLotId FROM STRING_SPLIT(@inspectionLotIds, ',')\r\n)\r\n, InspectionLots as (\r\n\tSELECT il.gid as gInspectionLotId, imtw.nWorkflow, b.gMaterialId, d.gCounterpartyId, b.gId as gBatchId, im.gInspectionMeasurementTemplateId\r\n\tFROM InspectionLotIds\r\n\t\tinner join [BatchManagementDb].[dbo].[tblInspectionLot] il on InspectionLotIds.InspectionLotId = il.gid\r\n\t\tinner join [BatchManagementDb].[dbo].[tblBatch] b on il.gBatchId = b.gid\r\n\t\tinner join [ReceptionRuntime].[dbo].[tblDelivery] d on b.gDeliveryId = d.gid\r\n\t\tinner join [QARuntimeData].[dbo].[tblInspectionMeasurement] im on il.gInspectionMeasurementId = im.gid\r\n\t\tinner join [QAMasterData].[dbo].[tblInspectionMeasurementTemplate] imt on im.gInspectionMeasurementTemplateId = imt.gid\r\n\t\tinner join [WorkflowData].[dbo].[tblInspectionMeasurementTemplateWorkflow] imtw on imt.gid = imtw.gInspectionMeasurementTemplateId\r\n\twhere (imtw.nWorkflow in (8, 10))\r\n\t)\r\n, PeriodicalControlTasks as (\r\n\tselect ut.gid, ut.nkey, imtw.nWorkflow, ut.gMaterialId, ut.gCounterpartyId\r\n\tfrom [TaskManagementRunTimeData].[dbo].[tblUserTask] ut\r\n\t\tinner join [QAMasterData].[dbo].[tblInspectionMeasurementTemplate] imt on ut.gInspectionMeasurementTemplateId = imt.gid\r\n\t\tinner join [WorkflowData].[dbo].[tblInspectionMeasurementTemplateWorkflow] imtw on imt.gid = imtw.gInspectionMeasurementTemplateId\r\n\twhere ut.bIsExpired = 0 \r\n\t\tand ut.bIsCompleted = 0\r\n\t\tand ut.nType = 0 \r\n\t\tand imtw.nworkflow in (8,10,16)\r\n)\r\n\r\nSELECT\tPeriodicalControlTasks.gId as UserTaskId,\r\n\t\tPeriodicalControlTasks.nkey as [Key],\r\n\t\tInspectionLots.gInspectionLotId as InspectionLotId, \r\n\t\tInspectionLots.gBatchId as BatchId, \r\n\t\tInspectionLots.gInspectionMeasurementTemplateId as InspectionMeasurementTemplateId, \r\n\t\tPeriodicalControlTasks.gCounterpartyId as CounterpartyId, \r\n\t\tInspectionLots.gMaterialId as MaterialId\r\nFROM InspectionLots, PeriodicalControlTasks\r\nwhere (InspectionLots.gMaterialId = PeriodicalControlTasks.gMaterialId)\r\n\tand (InspectionLots.gCounterpartyId = PeriodicalControlTasks.gCounterpartyId or PeriodicalControlTasks.gCounterpartyId is null)\r\n\tand (InspectionLots.nWorkflow = PeriodicalControlTasks.nWorkflow or (InspectionLots.nWorkflow = 10 and PeriodicalControlTasks.nWorkflow = 16))\r\norder by PeriodicalControlTasks.gCounterpartyId",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 990,
        "y": 60,
        "wires": [
            [
                "f14bb6dfa80d5983"
            ]
        ]
    },
    {
        "id": "71867b4ee993dc07",
        "type": "http in",
        "z": "c58b75e0f3f386f8",
        "name": "",
        "url": "/api/print",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "be9278cba8d03869",
                "f45c04416f750602",
                "fc1f2efbcc38eed3"
            ]
        ]
    },
    {
        "id": "b5a09e9a3c3fd3de",
        "type": "http request",
        "z": "c58b75e0f3f386f8",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1882/api/print",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-type",
                "valueType": "other",
                "valueValue": "application/json"
            },
            {
                "keyType": "other",
                "keyValue": "initiator-user",
                "valueType": "msg",
                "valueValue": "UserId"
            }
        ],
        "x": 1190,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "be9278cba8d03869",
        "type": "json",
        "z": "c58b75e0f3f386f8",
        "name": "ToJSObject",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 330,
        "y": 60,
        "wires": [
            [
                "38f20a9cd5c4b3df"
            ]
        ]
    },
    {
        "id": "2c7dc6a420f4ca5d",
        "type": "json",
        "z": "c58b75e0f3f386f8",
        "name": "ToJson",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1040,
        "y": 60,
        "wires": [
            [
                "b5a09e9a3c3fd3de"
            ]
        ]
    },
    {
        "id": "38f20a9cd5c4b3df",
        "type": "function",
        "z": "c58b75e0f3f386f8",
        "name": "InitData",
        "func": "msg.UserId = msg.req.headers[\"initiator-user\"];\nif(msg.UserId == null)\n{\n    msg.UserId = msg.payload.UserId;\n}\n\nmsg.payloadBackup = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 60,
        "wires": [
            [
                "462a5aa0d52344b9"
            ]
        ]
    },
    {
        "id": "fc1f2efbcc38eed3",
        "type": "debug",
        "z": "c58b75e0f3f386f8",
        "name": "debug 125",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 340,
        "wires": []
    },
    {
        "id": "8b85efc5dab04090",
        "type": "function",
        "z": "c58b75e0f3f386f8",
        "name": "RestorePayload",
        "func": "\nmsg.payload = msg.payloadBackup;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 60,
        "wires": [
            [
                "2c7dc6a420f4ca5d"
            ]
        ]
    },
    {
        "id": "462a5aa0d52344b9",
        "type": "subflow:2d0368e857414e1b",
        "z": "c58b75e0f3f386f8",
        "name": "",
        "x": 680,
        "y": 60,
        "wires": [
            [
                "8b85efc5dab04090"
            ]
        ]
    },
    {
        "id": "f45c04416f750602",
        "type": "http response",
        "z": "c58b75e0f3f386f8",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 280,
        "y": 180,
        "wires": []
    },
    {
        "id": "1be5122ef5e111e0",
        "type": "http in",
        "z": "c58b75e0f3f386f8",
        "name": "",
        "url": "/api/print",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 500,
        "wires": [
            [
                "611e975d61c61b6d",
                "d8d6db326e5878e6"
            ]
        ]
    },
    {
        "id": "611e975d61c61b6d",
        "type": "json",
        "z": "c58b75e0f3f386f8",
        "name": "ToJSObject",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 350,
        "y": 500,
        "wires": [
            [
                "61e657c63143d3ee"
            ]
        ]
    },
    {
        "id": "705be404ee3df64d",
        "type": "json",
        "z": "c58b75e0f3f386f8",
        "name": "ToJson",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1060,
        "y": 500,
        "wires": [
            [
                "55650ed8a05c4a9c"
            ]
        ]
    },
    {
        "id": "61e657c63143d3ee",
        "type": "function",
        "z": "c58b75e0f3f386f8",
        "name": "InitData",
        "func": "msg.UserId = msg.req.headers[\"initiator-user\"];\nif(msg.UserId == null)\n{\n    msg.UserId = msg.payload.UserId;\n}\n\nmsg.payloadBackup = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 500,
        "wires": [
            [
                "dacba271e30cbcc3"
            ]
        ]
    },
    {
        "id": "d8d6db326e5878e6",
        "type": "debug",
        "z": "c58b75e0f3f386f8",
        "name": "debug 90",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 780,
        "wires": []
    },
    {
        "id": "dacba271e30cbcc3",
        "type": "subflow:2d0368e857414e1b",
        "z": "c58b75e0f3f386f8",
        "name": "",
        "x": 700,
        "y": 500,
        "wires": [
            [
                "566170da30dd6589"
            ]
        ]
    },
    {
        "id": "31614a575f2347e2",
        "type": "http response",
        "z": "c58b75e0f3f386f8",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1540,
        "y": 500,
        "wires": []
    },
    {
        "id": "566170da30dd6589",
        "type": "function",
        "z": "c58b75e0f3f386f8",
        "name": "RestorePayload",
        "func": "\nmsg.payload = msg.payloadBackup;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 500,
        "wires": [
            [
                "705be404ee3df64d"
            ]
        ]
    },
    {
        "id": "55650ed8a05c4a9c",
        "type": "http request",
        "z": "c58b75e0f3f386f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1882/api/print",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-type",
                "valueType": "other",
                "valueValue": "application/json"
            },
            {
                "keyType": "other",
                "keyValue": "initiator-user",
                "valueType": "msg",
                "valueValue": "UserId"
            }
        ],
        "x": 1210,
        "y": 500,
        "wires": [
            [
                "2aae058c1724e18e",
                "aba7d4ec61fc89b1"
            ]
        ]
    },
    {
        "id": "2aae058c1724e18e",
        "type": "debug",
        "z": "c58b75e0f3f386f8",
        "name": "debug 91",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 580,
        "wires": []
    },
    {
        "id": "aba7d4ec61fc89b1",
        "type": "json",
        "z": "c58b75e0f3f386f8",
        "name": "ToJSObject",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 1370,
        "y": 500,
        "wires": [
            [
                "31614a575f2347e2"
            ]
        ]
    },
    {
        "id": "7419a6f54d76b36f",
        "type": "function",
        "z": "110961a95f601ab7",
        "name": "prep data",
        "func": "msg.payload ={\n    status:msg.SQL[0].nStatusNew,\n     deliveryId:msg.SQL[0].gDeliveryId\n     };                                      \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 300,
        "wires": [
            [
                "710f606f8488942c"
            ]
        ]
    },
    {
        "id": "710f606f8488942c",
        "type": "http request",
        "z": "110961a95f601ab7",
        "name": "/api/Delivery/SetStatus",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "query",
        "url": "{{{Config.ReceptionUrl}}}/api/Delivery/SetStatus",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-Type",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 600,
        "y": 300,
        "wires": [
            [
                "a84604614a041e6b"
            ]
        ]
    },
    {
        "id": "a84604614a041e6b",
        "type": "switch",
        "z": "110961a95f601ab7",
        "name": "out1  - statusCode =200",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 300,
        "wires": [
            [
                "568ebcebfb9502ac"
            ],
            []
        ]
    },
    {
        "id": "ccff8a364f041253",
        "type": "debug",
        "z": "110961a95f601ab7",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 460,
        "wires": []
    },
    {
        "id": "9183ca6e4ea2fe0a",
        "type": "debug",
        "z": "110961a95f601ab7",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 460,
        "wires": []
    },
    {
        "id": "11fb58ded80d347a",
        "type": "switch",
        "z": "110961a95f601ab7",
        "name": "nStatusOld != nStatusNew",
        "property": "SQL[0].nStatusNew",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "SQL[0].nStatusOld",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1340,
        "y": 160,
        "wires": [
            [
                "031082d371aa2d2a"
            ]
        ]
    },
    {
        "id": "ee9cbaecb50a1f65",
        "type": "json",
        "z": "110961a95f601ab7",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 250,
        "y": 160,
        "wires": [
            [
                "f1078e56ab6e4b2a"
            ]
        ]
    },
    {
        "id": "4f98b258053fa47d",
        "type": "switch",
        "z": "110961a95f601ab7",
        "name": "gDeliveryId != NULL",
        "property": "Delivery[0].gDeliveryId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 820,
        "y": 160,
        "wires": [
            [
                "9da16a110bc339d8"
            ]
        ]
    },
    {
        "id": "f1078e56ab6e4b2a",
        "type": "switch",
        "z": "110961a95f601ab7",
        "name": "Workflow Reception",
        "property": "payload.Workflow",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Reception",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 420,
        "y": 160,
        "wires": [
            [
                "4aa9d881ee07c76d"
            ]
        ]
    },
    {
        "id": "1a1534618a619932",
        "type": "comment",
        "z": "110961a95f601ab7",
        "name": "PZo",
        "info": "",
        "x": 90,
        "y": 40,
        "wires": []
    },
    {
        "id": "0bc9835eb7fbb967",
        "type": "debug",
        "z": "110961a95f601ab7",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 840,
        "wires": []
    },
    {
        "id": "4ac5540a2e61ab1d",
        "type": "subflow:f2924807aef52857",
        "z": "110961a95f601ab7",
        "name": "",
        "x": 260,
        "y": 300,
        "wires": [
            [
                "7419a6f54d76b36f"
            ]
        ]
    },
    {
        "id": "031082d371aa2d2a",
        "type": "subflow:ca94f48e1f18b542",
        "z": "110961a95f601ab7",
        "name": "",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "4ac5540a2e61ab1d"
            ]
        ]
    },
    {
        "id": "81776545eb69711e",
        "type": "switch",
        "z": "110961a95f601ab7",
        "name": "gDeliveryId != NULL",
        "property": "UserTaskInfo[0].workflow",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Reception",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 660,
        "y": 100,
        "wires": [
            [
                "73815446f89a3b8f"
            ]
        ]
    },
    {
        "id": "3e2c9ae9c0af889c",
        "type": "switch",
        "z": "110961a95f601ab7",
        "name": "",
        "property": "payload.EventType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "eq",
                "v": "Complete",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1050,
        "y": 360,
        "wires": [
            [
                "11fb58ded80d347a"
            ],
            [
                "ede7ee326fbfcff6"
            ]
        ]
    },
    {
        "id": "ae87ddabc25b7108",
        "type": "switch",
        "z": "110961a95f601ab7",
        "name": "Operation empty?",
        "property": "Operation",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 460,
        "wires": [
            [
                "4fe3adb5db6605e0"
            ],
            [
                "605abbb954a60eb5"
            ]
        ]
    },
    {
        "id": "4fe3adb5db6605e0",
        "type": "subflow:ca94f48e1f18b542",
        "z": "110961a95f601ab7",
        "name": "",
        "x": 470,
        "y": 460,
        "wires": [
            [
                "54dbc6f281376180"
            ]
        ]
    },
    {
        "id": "54dbc6f281376180",
        "type": "subflow:f2924807aef52857",
        "z": "110961a95f601ab7",
        "name": "",
        "x": 620,
        "y": 460,
        "wires": [
            [
                "983c7b8db46a9fdc"
            ]
        ]
    },
    {
        "id": "8bbccfad2e5861f5",
        "type": "function",
        "z": "110961a95f601ab7",
        "name": "ProcessCreateCommand",
        "func": "let ProcessCreateCommand = \n                     {\n                            OperationId: msg.payload.gId,\n                            ProcessAmount: 0,\n                            EquipmentId: msg.payload.gEquipmentId,\n                            BillOfMaterialId: '',\n                            CreateTypeId: 1                                                          \n                            };          \nmsg.payload=ProcessCreateCommand;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 660,
        "wires": [
            [
                "8e07ab3fb87c2284"
            ]
        ]
    },
    {
        "id": "8e07ab3fb87c2284",
        "type": "http request",
        "z": "110961a95f601ab7",
        "name": "create Process",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.ProductionUrl}}}/api/Process",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 340,
        "y": 720,
        "wires": [
            [
                "34ddc3218cfe0aa1"
            ]
        ]
    },
    {
        "id": "f9e92139e396cb89",
        "type": "http request",
        "z": "110961a95f601ab7",
        "name": "start Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.MesCoreUrl}}}/api/UserTasks/do_action/{{{payload.gUserTaskId}}}/InProcess",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 330,
        "y": 880,
        "wires": [
            [
                "78ece9dbbd544f20"
            ]
        ]
    },
    {
        "id": "ede7ee326fbfcff6",
        "type": "change",
        "z": "110961a95f601ab7",
        "name": "payload->Input",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "Input",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 380,
        "wires": [
            [
                "44d5de4bbd62935e"
            ]
        ]
    },
    {
        "id": "34ddc3218cfe0aa1",
        "type": "switch",
        "z": "110961a95f601ab7",
        "name": "out1  - statusCode =200",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 720,
        "wires": [
            [
                "6cdcc46f312ea5d4"
            ],
            [
                "983c7b8db46a9fdc"
            ]
        ]
    },
    {
        "id": "78ece9dbbd544f20",
        "type": "switch",
        "z": "110961a95f601ab7",
        "name": "out1  - statusCode =200",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 880,
        "wires": [
            [
                "983c7b8db46a9fdc"
            ],
            [
                "983c7b8db46a9fdc"
            ]
        ]
    },
    {
        "id": "483c080105863f33",
        "type": "comment",
        "z": "110961a95f601ab7",
        "name": "Алгоритм работы",
        "info": "Ищется конкретный ПЗ по материалу Introw \nв нём ищутся процессы запущенные в которых хранилищем выпуска являются те танки которые у бачей в поставке\nесли нет то создаёт и запускает или запускает если процессы есть и шаг new\nдалее делает потребление бачей поставки с количеством в бачах\nдалее выпуск в танк количества указанного в привязанной скачке.\n(добавить если нет скачки то найти плотность и пересчитать все бачи по плотности????)\n(добавить по любой нехватки инфы в потреблении или выпуске, возвращать ошибку в прил)\nи статус поставки меняет",
        "x": 810,
        "y": 680,
        "wires": []
    },
    {
        "id": "feab9ffa2f67e678",
        "type": "switch",
        "z": "110961a95f601ab7",
        "name": "ProcessId?",
        "property": "payload.ProcessId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 110,
        "y": 760,
        "wires": [
            [
                "8bbccfad2e5861f5"
            ],
            [
                "c0645b0f3a4ad054"
            ]
        ]
    },
    {
        "id": "65d62ae1240645a9",
        "type": "inject",
        "z": "110961a95f601ab7",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"DeliveryId\":\"D9B6123B-4CCF-45DD-919F-EA15A0493BA3\",\"EventType\":\"Complete\"}",
        "payloadType": "json",
        "x": 880,
        "y": 380,
        "wires": [
            [
                "3e2c9ae9c0af889c"
            ]
        ]
    },
    {
        "id": "c0645b0f3a4ad054",
        "type": "switch",
        "z": "110961a95f601ab7",
        "name": "szStep?",
        "property": "payload.szStep",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "New",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 120,
        "y": 820,
        "wires": [
            [
                "f9e92139e396cb89"
            ],
            [
                "983c7b8db46a9fdc"
            ]
        ]
    },
    {
        "id": "fa187b043565a596",
        "type": "switch",
        "z": "110961a95f601ab7",
        "name": "gDeliveryId != NULL",
        "property": "Delivery[0].gDeliveryId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1060,
        "y": 100,
        "wires": [
            [
                "131b151f09abb91a"
            ]
        ]
    },
    {
        "id": "6cdcc46f312ea5d4",
        "type": "function",
        "z": "110961a95f601ab7",
        "name": "userTaskId",
        "func": "msg.payload={\"gUserTaskId\":msg.payload[0].userTaskId}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 800,
        "wires": [
            [
                "f9e92139e396cb89"
            ]
        ]
    },
    {
        "id": "02f6fd3bda473fde",
        "type": "http request",
        "z": "110961a95f601ab7",
        "name": "htttp put outtake",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/outtake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 640,
        "y": 600,
        "wires": [
            [
                "702ba73bf6d77d63"
            ]
        ]
    },
    {
        "id": "702ba73bf6d77d63",
        "type": "switch",
        "z": "110961a95f601ab7",
        "name": "out1  - statusCode =200",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 600,
        "wires": [
            [
                "25e965918dc64903"
            ],
            [
                "25e965918dc64903"
            ]
        ]
    },
    {
        "id": "7ad30ef202bc2572",
        "type": "http request",
        "z": "110961a95f601ab7",
        "name": "Intake",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/Intake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1070,
        "y": 580,
        "wires": [
            [
                "9831698f80e2f413"
            ]
        ]
    },
    {
        "id": "9831698f80e2f413",
        "type": "switch",
        "z": "110961a95f601ab7",
        "name": "out1  - statusCode =200",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1250,
        "y": 580,
        "wires": [
            [
                "93f5719d91180113"
            ],
            [
                "93f5719d91180113"
            ]
        ]
    },
    {
        "id": "39f2c07d07ec0f3f",
        "type": "comment",
        "z": "110961a95f601ab7",
        "name": "Начало",
        "info": "",
        "x": 1230,
        "y": 340,
        "wires": []
    },
    {
        "id": "702697d0fe049003",
        "type": "function",
        "z": "110961a95f601ab7",
        "name": "prep data",
        "func": "msg.payload ={\n    status:msg.SQL[0].nStatusNew,\n     deliveryId:msg.SQL[0].gDeliveryId\n     };                                      \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 700,
        "wires": [
            [
                "aefecbaf148296c0"
            ]
        ]
    },
    {
        "id": "aefecbaf148296c0",
        "type": "http request",
        "z": "110961a95f601ab7",
        "name": "/api/Delivery/SetStatus",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "query",
        "url": "{{{Config.ReceptionUrl}}}/api/Delivery/SetStatus",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-Type",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 1240,
        "y": 700,
        "wires": [
            [
                "3c29795442f582ea"
            ]
        ]
    },
    {
        "id": "3c29795442f582ea",
        "type": "switch",
        "z": "110961a95f601ab7",
        "name": "out1  - statusCode =200",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1470,
        "y": 700,
        "wires": [
            [
                "96f0f1b3e0fac3de"
            ],
            []
        ]
    },
    {
        "id": "6d37dcd8fd604588",
        "type": "switch",
        "z": "110961a95f601ab7",
        "name": "Outtake empty?",
        "property": "Outtake",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 520,
        "y": 520,
        "wires": [
            [
                "3fadfbc0174cc613"
            ],
            [
                "3a5a5576eeec1b70"
            ]
        ]
    },
    {
        "id": "0773cc6a771f4aa0",
        "type": "switch",
        "z": "110961a95f601ab7",
        "name": "Intake empty?",
        "property": "Intake",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 840,
        "y": 460,
        "wires": [
            [
                "25e965918dc64903"
            ],
            [
                "ae7ac1cc69be884b"
            ]
        ]
    },
    {
        "id": "c823e9426842f381",
        "type": "http in",
        "z": "110961a95f601ab7",
        "name": "",
        "url": "api/reception/delivery/complete",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1060,
        "wires": [
            [
                "3417010e7b6f627f"
            ]
        ]
    },
    {
        "id": "df8f5e421dc5dd1b",
        "type": "http response",
        "z": "110961a95f601ab7",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2220,
        "y": 600,
        "wires": []
    },
    {
        "id": "2f468847668fe1b9",
        "type": "function",
        "z": "110961a95f601ab7",
        "name": "PreapreResponse",
        "func": "msg.statusCode=404;\nmsg.payload = {\n    Messages: { \"Russian\": [msg.message] },\n    ExceptionType: \"SolisoftEntityNotFoundException\",\n    StatusCode: msg.statusCode\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1060,
        "wires": [
            [
                "39dd7b2e45513fab",
                "3407a49015a8e906"
            ]
        ]
    },
    {
        "id": "605abbb954a60eb5",
        "type": "function",
        "z": "110961a95f601ab7",
        "name": "OperationEmpty",
        "func": "if(msg.message == null)\n{\n    msg.message = \"\";\n}\n\nmsg.message += \"Не найдена операция на смену.\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1020,
        "wires": [
            [
                "2f468847668fe1b9"
            ]
        ]
    },
    {
        "id": "3407a49015a8e906",
        "type": "http response",
        "z": "110961a95f601ab7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1290,
        "y": 1060,
        "wires": []
    },
    {
        "id": "3a5a5576eeec1b70",
        "type": "function",
        "z": "110961a95f601ab7",
        "name": "OuttakeEmpty",
        "func": "if(msg.message == null)\n{\n    msg.message = \"\";\n}\n\nmsg.message += \"Не найдены выпуски на смену и такой материал.\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1080,
        "wires": [
            [
                "2f468847668fe1b9"
            ]
        ]
    },
    {
        "id": "ae7ac1cc69be884b",
        "type": "function",
        "z": "110961a95f601ab7",
        "name": "IntakeEmpty",
        "func": "if(msg.message == null)\n{\n    msg.message = \"\";\n}\n\nmsg.message += \"Не найдены потребления на смену и такой материал.\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1140,
        "wires": [
            [
                "2f468847668fe1b9"
            ]
        ]
    },
    {
        "id": "39dd7b2e45513fab",
        "type": "debug",
        "z": "110961a95f601ab7",
        "name": "debug 134",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1200,
        "wires": []
    },
    {
        "id": "e37e8150e18a08d8",
        "type": "json",
        "z": "110961a95f601ab7",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1110,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "3417010e7b6f627f",
        "type": "function",
        "z": "110961a95f601ab7",
        "name": "SetDeliveryId",
        "func": "msg.DeliveryId = msg.payload.DeliveryId;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1060,
        "wires": [
            [
                "6ab7cbd54e03b320"
            ]
        ]
    },
    {
        "id": "c56b796dcb8ec453",
        "type": "function",
        "z": "110961a95f601ab7",
        "name": "Finish",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 600,
        "wires": [
            [
                "ed34fd9ee962c4c8"
            ]
        ]
    },
    {
        "id": "fe7a5b3811a5fb97",
        "type": "amqp-in",
        "z": "110961a95f601ab7",
        "name": "DeliveryEvent",
        "broker": "2f76d8b874d08554",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "NR_DeliveryEvent",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 70,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "ce9a180b6cec7cf3",
        "type": "amqp-in",
        "z": "110961a95f601ab7",
        "name": "WorkflowEvent",
        "broker": "2f76d8b874d08554",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "NR_WorkflowEventDelivery",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "ee9cbaecb50a1f65"
            ]
        ]
    },
    {
        "id": "adbcd7cab7a9d747",
        "type": "amqp-in",
        "z": "110961a95f601ab7",
        "name": "NR_DeliveryStatus_StateChangedEvent",
        "broker": "2f76d8b874d08554",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "NR_DeliveryStatus_StateChangedEvent",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "cac4cfe40f2196e5"
            ]
        ]
    },
    {
        "id": "983c7b8db46a9fdc",
        "type": "loop",
        "z": "110961a95f601ab7",
        "name": "Operation",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "Operation",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 160,
        "y": 540,
        "wires": [
            [
                "245856cd7c1aedd5"
            ],
            [
                "feab9ffa2f67e678"
            ]
        ]
    },
    {
        "id": "25e965918dc64903",
        "type": "loop",
        "z": "110961a95f601ab7",
        "name": "Outtake",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "Outtake",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 880,
        "y": 520,
        "wires": [
            [
                "93f5719d91180113"
            ],
            [
                "02f6fd3bda473fde"
            ]
        ]
    },
    {
        "id": "93f5719d91180113",
        "type": "loop",
        "z": "110961a95f601ab7",
        "name": "Intake",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "Intake",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 1190,
        "y": 520,
        "wires": [
            [
                "207a6e767bff2e65"
            ],
            [
                "7ad30ef202bc2572"
            ]
        ]
    },
    {
        "id": "6ab7cbd54e03b320",
        "type": "MSSQL",
        "z": "110961a95f601ab7",
        "mssqlCN": "6c4551b7b08b27f9",
        "name": "sp_GetDeliveryStatus",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "dbExchange.dbo.sp_GetDeliveryStatus ",
        "modeOpt": "",
        "modeOptType": "execute",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "gDeliveryId",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "payload.DeliveryId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "szEventType",
                "type": "NVarChar(25)",
                "valueType": "msg",
                "value": "payload.EventType",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 300,
        "y": 360,
        "wires": [
            [
                "3e2c9ae9c0af889c"
            ]
        ]
    },
    {
        "id": "4aa9d881ee07c76d",
        "type": "MSSQL",
        "z": "110961a95f601ab7",
        "mssqlCN": "6c4551b7b08b27f9",
        "name": "Get DeliveryId",
        "outField": "Delivery",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @gInspLotId uniqueidentifier,@Batch uniqueidentifier\r\nSELECT @gInspLotId=Reference FROM [WorkflowData].[wfc].[Workflow] where InstanceId='{{{payload.WorkflowId}}}'\r\nSELECT @Batch=gBatchId FROM [BatchManagementDb].[dbo].[tblInspectionLot] WHERE gId=@gInspLotId\r\nSELECT gDeliveryId FROM [BatchManagementDb].[dbo].[tblBatch] WHERE gId=@Batch",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "gInspLotId",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "0",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 620,
        "y": 160,
        "wires": [
            [
                "4f98b258053fa47d"
            ]
        ]
    },
    {
        "id": "9da16a110bc339d8",
        "type": "MSSQL",
        "z": "110961a95f601ab7",
        "mssqlCN": "6c4551b7b08b27f9",
        "name": "sp_GetDeliveryStatus",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "dbExchange.dbo.sp_GetDeliveryStatus ",
        "modeOpt": "",
        "modeOptType": "execute",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "gDeliveryId",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "Delivery[0].gDeliveryId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "szEventType",
                "type": "NVarChar(25)",
                "valueType": "msg",
                "value": "payload.EventType",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 1040,
        "y": 160,
        "wires": [
            [
                "11fb58ded80d347a"
            ]
        ]
    },
    {
        "id": "568ebcebfb9502ac",
        "type": "MSSQL",
        "z": "110961a95f601ab7",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "tblDeliveryStatusLog",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @nLinkLast int,@dtNow datetime = GETUTCDATE()\r\n\r\n  SELECT @nLinkLast = nKey FROM [ReceptionRuntime].[dbo].[tblDeliveryStatusLog] WHERE gDeliveryId='{{{SQL.0.gDeliveryId}}}'\r\n\r\n  IF @nLinkLast IS NOT NULL\r\n\tUPDATE [ReceptionRuntime].[dbo].[tblDeliveryStatusLog]\r\n\t\tSET dtEndAt = @dtNow\r\n\t\tWHERE nKey = @nLinkLast\r\n\r\n  INSERT INTO [ReceptionRuntime].[dbo].[tblDeliveryStatusLog]\r\n\tVALUES('{{{SQL.0.gDeliveryId}}}',{{{SQL.0.nStatusNew}}},@dtNow,null)",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1080,
        "y": 260,
        "wires": [
            [
                "c56b796dcb8ec453"
            ]
        ]
    },
    {
        "id": "cac4cfe40f2196e5",
        "type": "MSSQL",
        "z": "110961a95f601ab7",
        "mssqlCN": "6c4551b7b08b27f9",
        "name": "Get UserTaskInfo",
        "outField": "UserTaskInfo",
        "returnType": 0,
        "throwErrors": 1,
        "query": "  SELECT  [gId] as N'id'\r\n      ,[gOwnerId] as N'ownerId'\r\n      ,[szOwnerType] as N'ownerType'\r\n\r\n      ,[szWorkflow] as N'workflow'\r\n      ,[szState] as N'state'\r\n\r\n  FROM [MesCoreRuntime].[dbo].[tblUserTasks]\r\n  where gId = '{{{payload.Id}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 450,
        "y": 100,
        "wires": [
            [
                "81776545eb69711e"
            ]
        ]
    },
    {
        "id": "73815446f89a3b8f",
        "type": "MSSQL",
        "z": "110961a95f601ab7",
        "mssqlCN": "6c4551b7b08b27f9",
        "name": "Get DeliveryId",
        "outField": "Delivery",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @gInspLotId uniqueidentifier,@Batch uniqueidentifier\r\nSELECT @gInspLotId = '{{{UserTaskInfo.0.ownerId}}}'\r\nSELECT @Batch=gBatchId FROM [BatchManagementDb].[dbo].[tblInspectionLot] WHERE gId=@gInspLotId\r\nSELECT gDeliveryId FROM [BatchManagementDb].[dbo].[tblBatch] WHERE gId=@Batch",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "gInspLotId",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "0",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 860,
        "y": 100,
        "wires": [
            [
                "fa187b043565a596"
            ]
        ]
    },
    {
        "id": "131b151f09abb91a",
        "type": "MSSQL",
        "z": "110961a95f601ab7",
        "mssqlCN": "6c4551b7b08b27f9",
        "name": "sp_GetDeliveryStatus",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "dbExchange.dbo.sp_GetDeliveryStatus ",
        "modeOpt": "",
        "modeOptType": "execute",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "gDeliveryId",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "Delivery[0].gDeliveryId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "szEventType",
                "type": "NVarChar(25)",
                "valueType": "msg",
                "value": "payload.EventType",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 1280,
        "y": 100,
        "wires": [
            [
                "11fb58ded80d347a"
            ]
        ]
    },
    {
        "id": "44d5de4bbd62935e",
        "type": "MSSQL",
        "z": "110961a95f601ab7",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get Operation",
        "outField": "Operation",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @gShiftId uniqueidentifier, @dtNow datetime2(7) =GETUTCDATE(),@gMaterialId uniqueidentifier\r\n\r\nSELECT @gShiftId=gId FROM [BaseClassifiers].[dbo].[tblShiftRuntime] WHERE @dtNow BETWEEN [dtStart] AND [dtEnd] AND [gPlantId]='449BF86B-8CDA-4462-AEBD-08651E38A5DB'\r\nSELECT @gMaterialId=gId FROM [BaseClassifiers].[dbo].[tblMaterial] WHERE szName = 'INTRAW'\r\nSELECT o.gId,ot.gEquipmentId,p.gId as [ProcessId],p.szStep,p.gUserTaskId,psl.gStorageLocationId,'{{{Input.DeliveryId}}}' as gDeliveryId,@gShiftId as [gShiftId],@gMaterialId as [gMaterialId]\r\nFROM [ProductionManagementRunTimeDb].[dbo].[tblOperation] o\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProductionOrder] po ON po.gid=o.gProductionOrderId\r\n\tINNER JOIN ProductionManagementMasterData.[dbo].[tblOperationTemplateEquipment] AS ot ON ot.gOperationTemplateId = o.gOperationTemplateId\r\n\t\t\t\t\t\t\t\t\t\tAND po.gMaterialId=@gMaterialId AND po.gShiftRuntimeId=@gShiftId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationProduceStorageLocation] psl ON psl.gOperationId = o.gId AND psl.gEquipmentId=ot.gEquipmentId\r\n\tINNER JOIN (SELECT gTargetStorageLocationId FROM [ReceptionRuntime].[dbo].[tblReceptionBuffer] WHERE gDeliveryId='{{{Input.DeliveryId}}}' GROUP BY gTargetStorageLocationId) rb ON  rb.gTargetStorageLocationId=psl.gStorageLocationId\r\n\tLEFT JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p on p.gOperationId=o.gId AND p.gEquipmentId=ot.gEquipmentId AND p.szStep != N'Completed'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 120,
        "y": 460,
        "wires": [
            [
                "ae87ddabc25b7108"
            ]
        ]
    },
    {
        "id": "245856cd7c1aedd5",
        "type": "MSSQL",
        "z": "110961a95f601ab7",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get Outtake",
        "outField": "Outtake",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @tblBatch TABLE (gBatchId uniqueidentifier,nQuantity decimal(18,6),gSLId uniqueidentifier,gMatId uniqueidentifier)\r\n\r\nINSERT INTO @tblBatch\r\n\tSELECT b.gId,b.nQuantity,rb.gTargetStorageLocationId,b.gMaterialId\r\n\tFROM [BatchManagementDb].[dbo].[tblBatch] b\r\n\t\tINNER JOIN [ReceptionRuntime].[dbo].[tblReceptionBuffer] rb ON rb.gBatchId=b.gId\r\n\tWHERE b.bIsCompleted=0 AND b.gDeliveryId='{{{Input.DeliveryId}}}'\r\n \r\n\r\nSELECT p.gId as [ProcessId],b.gBatchId as [BatchId],b.gSLId as [StorageLocationId],o.gId as [OperationId],b.nQuantity as [Quantity], 'true' as [CompleteOuttake],b.gMatId\r\nFROM [ProductionManagementRunTimeDb].[dbo].[tblOperation] o\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProductionOrder] po ON po.gid=o.gProductionOrderId\r\n\tINNER JOIN ProductionManagementMasterData.[dbo].[tblOperationTemplateEquipment] AS ot ON ot.gOperationTemplateId = o.gOperationTemplateId\r\n\t\t\t\t\t\t\t\t\t\tAND po.gMaterialId='{{{Operation.0.gMaterialId}}}' AND po.gShiftRuntimeId='{{{Operation.0.gShiftId}}}'\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationProduceStorageLocation] psl ON psl.gOperationId = o.gId AND psl.gEquipmentId=ot.gEquipmentId\r\n\tINNER JOIN @tblBatch b ON  b.gSLId=psl.gStorageLocationId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p on p.gOperationId=o.gId AND p.gEquipmentId=ot.gEquipmentId AND p.szStep != N'In Process'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 350,
        "y": 540,
        "wires": [
            [
                "6d37dcd8fd604588"
            ]
        ]
    },
    {
        "id": "3fadfbc0174cc613",
        "type": "MSSQL",
        "z": "110961a95f601ab7",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get Intake",
        "outField": "Intake",
        "returnType": 0,
        "throwErrors": 1,
        "query": "\r\nSELECT p.gId as [processId],psl.gStorageLocationId as [storageLocationId],pd.nAmount as[quantity],'{{{Outtake.0.gMatId}}}' as [materialId]\r\nFROM [ProductionManagementRunTimeDb].[dbo].[tblOperation] o\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProductionOrder] po ON po.gid=o.gProductionOrderId\r\n\tINNER JOIN [HLRURASAP100].[ProductionManagementMasterData].[dbo].[tblOperationTemplateEquipment] AS ot ON ot.gOperationTemplateId = o.gOperationTemplateId\r\n\t\t\t\t\t\t\t\t\t\tAND po.gMaterialId='{{{Operation.0.gMaterialId}}}' AND po.gShiftRuntimeId='{{{Operation.0.gShiftId}}}'\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationProduceStorageLocation] psl ON psl.gOperationId = o.gId AND psl.gEquipmentId=ot.gEquipmentId\r\n\tINNER JOIN [ReceptionRuntime].[dbo].[tblProcessPumpingData] pd ON pd.gDestinationStorageLocationId=psl.gStorageLocationId AND pd.gDeliveryId='{{{Input.DeliveryId}}}'\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p on p.gOperationId=o.gId AND p.gEquipmentId=ot.gEquipmentId AND p.szStep = N'InProcess'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 690,
        "y": 520,
        "wires": [
            [
                "0773cc6a771f4aa0"
            ]
        ]
    },
    {
        "id": "207a6e767bff2e65",
        "type": "MSSQL",
        "z": "110961a95f601ab7",
        "mssqlCN": "6c4551b7b08b27f9",
        "name": "sp_GetDeliveryStatus",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "dbExchange.dbo.sp_GetDeliveryStatus ",
        "modeOpt": "",
        "modeOptType": "execute",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "gDeliveryId",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "Input.DeliveryId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "szEventType",
                "type": "NVarChar(25)",
                "valueType": "msg",
                "value": "Input.EventType",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 1500,
        "y": 540,
        "wires": [
            [
                "702697d0fe049003"
            ]
        ]
    },
    {
        "id": "96f0f1b3e0fac3de",
        "type": "MSSQL",
        "z": "110961a95f601ab7",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "tblDeliveryStatusLog",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @nLinkLast int,@dtNow datetime = GETUTCDATE()\r\n\r\n  SELECT @nLinkLast = nKey FROM [ReceptionRuntime].[dbo].[tblDeliveryStatusLog] WHERE gDeliveryId='{{{SQL.0.gDeliveryId}}}'\r\n\r\n  IF @nLinkLast IS NOT NULL\r\n\tUPDATE [ReceptionRuntime].[dbo].[tblDeliveryStatusLog]\r\n\t\tSET dtEndAt = @dtNow\r\n\t\tWHERE nKey = @nLinkLast\r\n\r\n  INSERT INTO [ReceptionRuntime].[dbo].[tblDeliveryStatusLog]\r\n\tVALUES('{{{SQL.0.gDeliveryId}}}',{{{SQL.0.nStatusNew}}},@dtNow,null)",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1080,
        "y": 760,
        "wires": [
            [
                "0bc9835eb7fbb967",
                "c56b796dcb8ec453"
            ]
        ]
    },
    {
        "id": "ed34fd9ee962c4c8",
        "type": "MSSQL",
        "z": "110961a95f601ab7",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Update Prod Order Quantity",
        "outField": "sum",
        "returnType": 0,
        "throwErrors": 1,
        "query": "begin\r\ndeclare @fQuantity real;\r\n\r\n select top 1 @fQuantity = sum(be.nQuantity) from (select b.* from BatchManagementDb.dbo.tblBatch b\r\nwhere b.gDeliveryId in (select d.gId from [ReceptionRuntime].[dbo].[tblDelivery] d\r\nwhere d.gReceptionOrderId in\r\n(\r\nSELECT [gReceptionOrderId]  \r\n  FROM [ReceptionRuntime].[dbo].[tblDelivery]\r\n  where gId = '{{{DeliveryId}}}'\r\n)\r\nand nStatus in (10, 11)\r\n)) batch\r\njoin BatchManagementDb.dbo.tblBatchEvent be on be.gBatchId = batch.gId and be.nType = 100;\r\n\r\nupdate [ReceptionRuntime].[dbo].tblReceptionOrder\r\nset fQuantityActual = @fQuantity\r\n\r\nwhere @fQuantity is not null and gId in (SELECT [gReceptionOrderId]  \r\n  FROM [ReceptionRuntime].[dbo].[tblDelivery]\r\n  where gId = '{{{DeliveryId}}}')\r\n  end;",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1940,
        "y": 600,
        "wires": [
            [
                "df8f5e421dc5dd1b"
            ]
        ]
    },
    {
        "id": "ea6fc2463d844f66",
        "type": "inject",
        "z": "d72dfa0634828aca",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "errorPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\In\\\\Error\\\\",
                "vt": "str"
            },
            {
                "p": "successPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\In\\\\Success\\\\",
                "vt": "str"
            },
            {
                "p": "successFiles",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "errorFiles",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "successRequestCount",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "errorRequestCount",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "currentFileName",
                "v": "undefined",
                "vt": "str"
            },
            {
                "p": "currentPath",
                "v": "C:\\\\Vekas\\\\FileOp",
                "vt": "str"
            },
            {
                "p": "configPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\config.json",
                "vt": "str"
            },
            {
                "p": "dataPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\data_hlrurad263.json",
                "vt": "str"
            },
            {
                "p": "errorObjectNumber",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "netPath",
                "v": "Z:\\",
                "vt": "str"
            },
            {
                "p": "EquipmentId",
                "v": "4a351463-c88c-40c6-8713-34e5319948be",
                "vt": "str"
            },
            {
                "p": "netDrive",
                "v": "Z:",
                "vt": "str"
            },
            {
                "p": "netPathTempl",
                "v": "\\\\hlrurad263\\Log",
                "vt": "str"
            },
            {
                "p": "netPathLogin",
                "v": "Hochland\\C-Solisoft_RA5",
                "vt": "str"
            },
            {
                "p": "netPathPassword",
                "v": "A70C0C9A35-",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "a5d28057f7c96981"
            ]
        ]
    },
    {
        "id": "318cb780763758c8",
        "type": "function",
        "z": "d72dfa0634828aca",
        "name": "10.36.96.70",
        "func": "//node.warn(\"FINISHED\");\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "a5d28057f7c96981",
        "type": "subflow:b5263af018a59806",
        "z": "d72dfa0634828aca",
        "name": "MAIN",
        "x": 550,
        "y": 420,
        "wires": [
            [
                "318cb780763758c8"
            ]
        ]
    },
    {
        "id": "77382a27bc981670",
        "type": "inject",
        "z": "d72dfa0634828aca",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "errorPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\In\\\\Error\\\\",
                "vt": "str"
            },
            {
                "p": "successPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\In\\\\Success\\\\",
                "vt": "str"
            },
            {
                "p": "successFiles",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "errorFiles",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "successRequestCount",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "errorRequestCount",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "currentFileName",
                "v": "undefined",
                "vt": "str"
            },
            {
                "p": "currentPath",
                "v": "C:\\\\Vekas\\\\FileOp",
                "vt": "str"
            },
            {
                "p": "configPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\config.json",
                "vt": "str"
            },
            {
                "p": "dataPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\data_hlrurad231.json",
                "vt": "str"
            },
            {
                "p": "errorObjectNumber",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "netPath",
                "v": "Y:\\",
                "vt": "str"
            },
            {
                "p": "EquipmentId",
                "v": "b009f4bd-c865-40c4-9ca4-221c32a679c6",
                "vt": "str"
            },
            {
                "p": "netDrive",
                "v": "Y:",
                "vt": "str"
            },
            {
                "p": "netPathTempl",
                "v": "\\\\hlrurad231\\Log",
                "vt": "str"
            },
            {
                "p": "netPathLogin",
                "v": "Hochland\\C-Solisoft_RA5",
                "vt": "str"
            },
            {
                "p": "netPathPassword",
                "v": "A70C0C9A35-",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 500,
        "wires": [
            [
                "dda609c5e7c10d16"
            ]
        ]
    },
    {
        "id": "f06b5497472a4b25",
        "type": "function",
        "z": "d72dfa0634828aca",
        "name": "10.36.96.52",
        "func": "//node.warn(\"FINISHED\");\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "dda609c5e7c10d16",
        "type": "subflow:b5263af018a59806",
        "z": "d72dfa0634828aca",
        "name": "MAIN",
        "x": 550,
        "y": 500,
        "wires": [
            [
                "f06b5497472a4b25"
            ]
        ]
    },
    {
        "id": "56667670a4f47457",
        "type": "inject",
        "z": "d72dfa0634828aca",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "errorPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\In\\\\Error\\\\",
                "vt": "str"
            },
            {
                "p": "successPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\In\\\\Success\\\\",
                "vt": "str"
            },
            {
                "p": "successFiles",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "errorFiles",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "successRequestCount",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "errorRequestCount",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "currentFileName",
                "v": "undefined",
                "vt": "str"
            },
            {
                "p": "currentPath",
                "v": "C:\\\\Vekas\\\\FileOp",
                "vt": "str"
            },
            {
                "p": "configPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\config.json",
                "vt": "str"
            },
            {
                "p": "dataPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\data_hlrurad199.json",
                "vt": "str"
            },
            {
                "p": "errorObjectNumber",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "netPath",
                "v": "X:\\",
                "vt": "str"
            },
            {
                "p": "EquipmentId",
                "v": "6eacc49c-441b-4b4a-b267-29a632f5a7c3",
                "vt": "str"
            },
            {
                "p": "netDrive",
                "v": "X:",
                "vt": "str"
            },
            {
                "p": "netPathTempl",
                "v": "\\\\hlrurad342\\Log",
                "vt": "str"
            },
            {
                "p": "netPathLogin",
                "v": "Hochland\\C-Solisoft_RA5",
                "vt": "str"
            },
            {
                "p": "netPathPassword",
                "v": "A70C0C9A35-",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 580,
        "wires": [
            [
                "5c25cffe83fccdc5"
            ]
        ]
    },
    {
        "id": "6ef91c74423bb184",
        "type": "function",
        "z": "d72dfa0634828aca",
        "name": "10.36.96.113",
        "func": "//node.warn(\"FINISHED\");\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "5c25cffe83fccdc5",
        "type": "subflow:b5263af018a59806",
        "z": "d72dfa0634828aca",
        "name": "MAIN",
        "x": 550,
        "y": 580,
        "wires": [
            [
                "6ef91c74423bb184"
            ]
        ]
    },
    {
        "id": "0aa5652603c4c86d",
        "type": "catch",
        "z": "d72dfa0634828aca",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 160,
        "y": 960,
        "wires": [
            [
                "225b2a9b30eb24f7"
            ]
        ]
    },
    {
        "id": "d509a798fd90826f",
        "type": "debug",
        "z": "d72dfa0634828aca",
        "name": "Debug Save Catch Data",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 960,
        "wires": []
    },
    {
        "id": "225b2a9b30eb24f7",
        "type": "subflow:f8fc59a8d3d93ef9",
        "z": "d72dfa0634828aca",
        "name": "",
        "x": 370,
        "y": 960,
        "wires": [
            [
                "d509a798fd90826f"
            ]
        ]
    },
    {
        "id": "47dea3f6a7894e52",
        "type": "comment",
        "z": "d72dfa0634828aca",
        "name": "Обработчик исключений потока и отправка ошибок в файлы логирования",
        "info": "",
        "x": 370,
        "y": 880,
        "wires": []
    },
    {
        "id": "3351a9d1dd5d4a5a",
        "type": "comment",
        "z": "d72dfa0634828aca",
        "name": "заменили брукер 122 на 10.36.96.113(hlrurad342)",
        "info": "заменили брукер 122\n10.36.96.113",
        "x": 1130,
        "y": 580,
        "wires": []
    },
    {
        "id": "c25675f0c5469945",
        "type": "comment",
        "z": "d72dfa0634828aca",
        "name": "Vekas",
        "info": "",
        "x": 150,
        "y": 280,
        "wires": []
    },
    {
        "id": "e33b962a61b4f623",
        "type": "inject",
        "z": "d72dfa0634828aca",
        "d": true,
        "name": "Lumex",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "dataPath",
                "v": "C:\\\\LabEquipment\\\\data_lumex.json",
                "vt": "str"
            },
            {
                "p": "netPath",
                "v": "T:\\",
                "vt": "str"
            },
            {
                "p": "EquipmentId",
                "v": "420C558A-57E9-42A6-8EC8-788357E4BAA4",
                "vt": "str"
            },
            {
                "p": "netDrive",
                "v": "T:",
                "vt": "str"
            },
            {
                "p": "netPathTempl",
                "v": "\\\\hlrurad344\\Export",
                "vt": "str"
            },
            {
                "p": "netPathLogin",
                "v": "Hochland\\C-Solisoft_RA5",
                "vt": "str"
            },
            {
                "p": "netPathPassword",
                "v": "A70C0C9A35-",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 640,
        "wires": [
            [
                "d2e06a36adf901ad"
            ]
        ]
    },
    {
        "id": "d2e06a36adf901ad",
        "type": "subflow:e593d58e62761e62",
        "z": "d72dfa0634828aca",
        "name": "Handler",
        "x": 420,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "34eb19933e574de1",
        "type": "inject",
        "z": "d72dfa0634828aca",
        "d": true,
        "name": "Create LabEquipment folder",
        "props": [
            {
                "p": "path",
                "v": "C:\\\\",
                "vt": "str"
            },
            {
                "p": "folderName",
                "v": "LabEquipment",
                "vt": "str"
            },
            {
                "p": "filePath",
                "v": "C:\\\\LabEquipment\\\\data_lumex.json",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 240,
        "y": 800,
        "wires": [
            [
                "1f1eac552f871312"
            ]
        ]
    },
    {
        "id": "aa6a20ebcb3c6bdf",
        "type": "file",
        "z": "d72dfa0634828aca",
        "name": "",
        "filename": "filePath",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 960,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "e028b947c393b1cc",
        "type": "function",
        "z": "d72dfa0634828aca",
        "name": "10.36.96.113",
        "func": "msg.payload = \"\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 800,
        "wires": [
            [
                "aa6a20ebcb3c6bdf"
            ]
        ]
    },
    {
        "id": "7d26efe802e39b1a",
        "type": "file",
        "z": "d72dfa0634828aca",
        "name": "Write data.json",
        "filename": "dataPath",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 820,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "64e3e1dbe5be27dd",
        "type": "file in",
        "z": "d72dfa0634828aca",
        "name": "Read data",
        "filename": "dataPath",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 430,
        "y": 740,
        "wires": [
            [
                "d1d3c66db2aaf512"
            ]
        ]
    },
    {
        "id": "d1d3c66db2aaf512",
        "type": "function",
        "z": "d72dfa0634828aca",
        "name": "FilterFiles",
        "func": "let rawdata = JSON.parse(msg.payload);\n\nlet objects = [];\nfor (let i = 0; i < rawdata.length; i++) {\n    if (new Date(rawdata[i].Date) >= new Date(new Date().getTime() - (2 * 24 * 60 * 60 * 1000)))\n        objects.push(rawdata[i]);\n}\n\nnode.warn(rawdata);\nmsg.payload = objects;\nnode.warn(objects);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 740,
        "wires": [
            [
                "7d26efe802e39b1a"
            ]
        ]
    },
    {
        "id": "528b376eafdb8695",
        "type": "inject",
        "z": "d72dfa0634828aca",
        "d": true,
        "name": "Clean data_lumex",
        "props": [
            {
                "p": "dataPath",
                "v": "C:\\\\LabEquipment\\\\data_lumex.json",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 01 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 740,
        "wires": [
            [
                "64e3e1dbe5be27dd"
            ]
        ]
    },
    {
        "id": "e7a9a1303e96f8ca",
        "type": "file in",
        "z": "d72dfa0634828aca",
        "name": "",
        "filename": "F:\\MESSync\\Dictionary.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 640,
        "y": 1040,
        "wires": [
            [
                "05e5d4a20b5a3524"
            ]
        ]
    },
    {
        "id": "05e5d4a20b5a3524",
        "type": "csv",
        "z": "d72dfa0634828aca",
        "name": "",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\r\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": true,
        "x": 870,
        "y": 1040,
        "wires": [
            [
                "484635336bdc0b8f",
                "ce7343a0026666ab"
            ]
        ]
    },
    {
        "id": "10e9a80ffe0ac8f6",
        "type": "inject",
        "z": "d72dfa0634828aca",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 380,
        "y": 1040,
        "wires": [
            [
                "e7a9a1303e96f8ca"
            ]
        ]
    },
    {
        "id": "484635336bdc0b8f",
        "type": "debug",
        "z": "d72dfa0634828aca",
        "name": "debug 133",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 1040,
        "wires": []
    },
    {
        "id": "ce7343a0026666ab",
        "type": "function",
        "z": "d72dfa0634828aca",
        "name": "function 14",
        "func": "const map = new Map(msg.payload.map(item => [item.Origin, item.Translate]));\nnode.warn(map);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "e30efebc95177ef5",
        "type": "subflow:30daf455e2857de4",
        "z": "d72dfa0634828aca",
        "name": "",
        "x": 1050,
        "y": 660,
        "wires": []
    },
    {
        "id": "53d677e6c967718d",
        "type": "inject",
        "z": "d72dfa0634828aca",
        "d": true,
        "name": "Lumex",
        "props": [
            {
                "p": "netPathTempl",
                "v": "\\\\hlrurad344\\Export",
                "vt": "str"
            },
            {
                "p": "netPath",
                "v": "T:\\",
                "vt": "str"
            },
            {
                "p": "netDrive",
                "v": "T:",
                "vt": "str"
            },
            {
                "p": "dictionaryPath",
                "v": "F:\\MESSync\\Dictionary.csv",
                "vt": "str"
            },
            {
                "p": "dataPath",
                "v": "C:\\\\LabEquipment\\\\data_lumex.json",
                "vt": "str"
            },
            {
                "p": "typeEquipment",
                "v": "Lumex",
                "vt": "str"
            },
            {
                "p": "EquipmentId",
                "v": "420C558A-57E9-42A6-8EC8-788357E4BAA4",
                "vt": "str"
            },
            {
                "p": "netPathLogin",
                "v": "Hochland\\C-Solisoft_RA5",
                "vt": "str"
            },
            {
                "p": "netPathPassword",
                "v": "A70C0C9A35-",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 840,
        "y": 680,
        "wires": [
            [
                "e30efebc95177ef5"
            ]
        ]
    },
    {
        "id": "9ec85ff61b73b10a",
        "type": "inject",
        "z": "d72dfa0634828aca",
        "d": true,
        "name": "Bruker",
        "props": [
            {
                "p": "successRequestCount",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "successFiles",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "errorRequestCount",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "errorFiles",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "errorObjectNumber",
                "v": "[]",
                "vt": "jsonata"
            },
            {
                "p": "currentFileName",
                "v": "undefined",
                "vt": "str"
            },
            {
                "p": "netPath",
                "v": "X:\\",
                "vt": "str"
            },
            {
                "p": "netDrive",
                "v": "X:",
                "vt": "str"
            },
            {
                "p": "dataPath",
                "v": "C:\\\\Vekas\\\\FileOp\\\\data_hlrurad263.json",
                "vt": "str"
            },
            {
                "p": "dictionaryPath",
                "v": "F:\\MESSync\\Dictionary.csv",
                "vt": "str"
            },
            {
                "p": "netPathTempl",
                "v": "\\\\hlrurad231\\Log",
                "vt": "str"
            },
            {
                "p": "typeEquipment",
                "v": "Bruker",
                "vt": "str"
            },
            {
                "p": "EquipmentId",
                "v": "6eacc49c-441b-4b4a-b267-29a632f5a7c3",
                "vt": "str"
            },
            {
                "p": "netPathLogin",
                "v": "Hochland\\C-Solisoft_RA5",
                "vt": "str"
            },
            {
                "p": "netPathPassword",
                "v": "A70C0C9A35-",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 840,
        "y": 640,
        "wires": [
            [
                "e30efebc95177ef5"
            ]
        ]
    },
    {
        "id": "1f1eac552f871312",
        "type": "fs-mkdir",
        "z": "d72dfa0634828aca",
        "name": "",
        "purpose": "reg",
        "path": "path",
        "pathType": "msg",
        "foldername": "folderName",
        "foldernameType": "msg",
        "recursive": true,
        "exists": true,
        "prefix": "",
        "prefixType": "str",
        "mode": "777",
        "property": "payload",
        "propertyType": "msg",
        "x": 550,
        "y": 800,
        "wires": [
            [
                "e028b947c393b1cc"
            ]
        ]
    },
    {
        "id": "e4e570183fe2c026",
        "type": "switch",
        "z": "056ccbd5a38f655b",
        "name": "OwnerType?",
        "property": "UTI[0].ownerType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ProductionOrder",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Process",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "InspectionLot",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Checklist",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 510,
        "y": 180,
        "wires": [
            [
                "97443315a05a7e63"
            ],
            [
                "ad462f52d7f74e62"
            ],
            [
                "5430dfbbf3934f5d"
            ],
            [
                "d110d84f7d25e27b"
            ]
        ]
    },
    {
        "id": "0b45cf26c05e0fc2",
        "type": "debug",
        "z": "056ccbd5a38f655b",
        "name": "debug 178",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 80,
        "wires": []
    },
    {
        "id": "521d24b018713d8f",
        "type": "switch",
        "z": "056ccbd5a38f655b",
        "name": "ChangeType PO",
        "property": "payload.ChangeType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1030,
        "y": 40,
        "wires": [
            [
                "2ccebe638aef47fa"
            ],
            [],
            []
        ],
        "outputLabels": [
            "Create",
            "Updated",
            "Deleted"
        ]
    },
    {
        "id": "4cc78eb77f867d66",
        "type": "link out",
        "z": "056ccbd5a38f655b",
        "name": "UTE Create Insplot",
        "mode": "link",
        "links": [
            "7504a0609f6f3579"
        ],
        "x": 1215,
        "y": 320,
        "wires": []
    },
    {
        "id": "7fb19ade54709b85",
        "type": "switch",
        "z": "056ccbd5a38f655b",
        "name": "ChangeType Process",
        "property": "payload.ChangeType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1020,
        "y": 180,
        "wires": [
            [
                "08207736f0b50894",
                "39bbe7556c25cadb"
            ],
            [],
            []
        ],
        "outputLabels": [
            "Create",
            "Updated",
            "Deleted"
        ]
    },
    {
        "id": "9ecdd02ef8d589c4",
        "type": "switch",
        "z": "056ccbd5a38f655b",
        "name": "ChangeType IL",
        "property": "payload.ChangeType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1040,
        "y": 360,
        "wires": [
            [
                "4cc78eb77f867d66"
            ],
            [
                "b404045fd7fe34fb"
            ],
            [
                "e1265c5ec0c4f297"
            ]
        ],
        "outputLabels": [
            "Create",
            "Updated",
            "Deleted"
        ]
    },
    {
        "id": "a6c9a89e018e1f96",
        "type": "switch",
        "z": "056ccbd5a38f655b",
        "name": "ChangeType ChL",
        "property": "payload.ChangeType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1030,
        "y": 540,
        "wires": [
            [
                "82f949d4473acd0e"
            ],
            [
                "02f5cdce9ef498ed"
            ],
            [
                "31adfe7bc4026f56"
            ]
        ],
        "outputLabels": [
            "Create",
            "Updated",
            "Deleted"
        ]
    },
    {
        "id": "b404045fd7fe34fb",
        "type": "link out",
        "z": "056ccbd5a38f655b",
        "name": "UTE Update Insplot",
        "mode": "link",
        "links": [],
        "x": 1215,
        "y": 360,
        "wires": []
    },
    {
        "id": "e1265c5ec0c4f297",
        "type": "link out",
        "z": "056ccbd5a38f655b",
        "name": "UTE Delete Insplot",
        "mode": "link",
        "links": [],
        "x": 1215,
        "y": 400,
        "wires": []
    },
    {
        "id": "82f949d4473acd0e",
        "type": "link out",
        "z": "056ccbd5a38f655b",
        "name": "UTE Create Checklist",
        "mode": "link",
        "links": [
            "ea3bb937fd5fdcd3"
        ],
        "x": 1215,
        "y": 500,
        "wires": []
    },
    {
        "id": "02f5cdce9ef498ed",
        "type": "link out",
        "z": "056ccbd5a38f655b",
        "name": "UTE Update Checklist",
        "mode": "link",
        "links": [],
        "x": 1215,
        "y": 540,
        "wires": []
    },
    {
        "id": "31adfe7bc4026f56",
        "type": "link out",
        "z": "056ccbd5a38f655b",
        "name": "UTE Delete Checklist",
        "mode": "link",
        "links": [],
        "x": 1215,
        "y": 580,
        "wires": []
    },
    {
        "id": "97443315a05a7e63",
        "type": "switch",
        "z": "056ccbd5a38f655b",
        "name": "UTE||SCE",
        "property": "UTI[0].changeType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 60,
        "wires": [
            [
                "521d24b018713d8f"
            ],
            []
        ]
    },
    {
        "id": "08207736f0b50894",
        "type": "debug",
        "z": "056ccbd5a38f655b",
        "name": "debug 179",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 100,
        "wires": []
    },
    {
        "id": "ad462f52d7f74e62",
        "type": "switch",
        "z": "056ccbd5a38f655b",
        "name": "UTE||SCE",
        "property": "UTI[0].changeType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 180,
        "wires": [
            [
                "7fb19ade54709b85"
            ],
            []
        ]
    },
    {
        "id": "5430dfbbf3934f5d",
        "type": "switch",
        "z": "056ccbd5a38f655b",
        "name": "UTE||SCE",
        "property": "UTI[0].changeType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 360,
        "wires": [
            [
                "9ecdd02ef8d589c4"
            ],
            [
                "15c5f0699943494d"
            ]
        ]
    },
    {
        "id": "d110d84f7d25e27b",
        "type": "switch",
        "z": "056ccbd5a38f655b",
        "name": "UTE||SCE",
        "property": "UTI[0].changeType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 540,
        "wires": [
            [
                "a6c9a89e018e1f96"
            ],
            [
                "06d617aa0727dfb4"
            ]
        ]
    },
    {
        "id": "15c5f0699943494d",
        "type": "link out",
        "z": "056ccbd5a38f655b",
        "name": "UTE State Insplot",
        "mode": "link",
        "links": [],
        "x": 1215,
        "y": 440,
        "wires": []
    },
    {
        "id": "06d617aa0727dfb4",
        "type": "link out",
        "z": "056ccbd5a38f655b",
        "name": "UTE State Checklist",
        "mode": "link",
        "links": [],
        "x": 1215,
        "y": 620,
        "wires": []
    },
    {
        "id": "2ccebe638aef47fa",
        "type": "link out",
        "z": "056ccbd5a38f655b",
        "name": "UTE Create PO",
        "mode": "link",
        "links": [],
        "x": 1225,
        "y": 20,
        "wires": []
    },
    {
        "id": "39bbe7556c25cadb",
        "type": "link out",
        "z": "056ccbd5a38f655b",
        "name": "CreateProcess",
        "mode": "link",
        "links": [
            "cecc79296c814164"
        ],
        "x": 1255,
        "y": 180,
        "wires": []
    },
    {
        "id": "0da15a9d1d2ee115",
        "type": "amqp-in",
        "z": "056ccbd5a38f655b",
        "name": "NR_UTE_HUB",
        "broker": "2f76d8b874d08554",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "NR_UTE_HUB",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 100,
        "y": 140,
        "wires": [
            [
                "bd6643be3411eb30",
                "0b45cf26c05e0fc2"
            ]
        ]
    },
    {
        "id": "953a70a47912a6ea",
        "type": "amqp-in",
        "z": "056ccbd5a38f655b",
        "name": "NR_SCE_HUB",
        "broker": "2f76d8b874d08554",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "",
        "exchangeType": "direct",
        "exchangeRoutingKey": "",
        "exchangeDurable": true,
        "queueName": "NR_SCE_HUB",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 100,
        "y": 220,
        "wires": [
            [
                "bd6643be3411eb30",
                "0b45cf26c05e0fc2"
            ]
        ]
    },
    {
        "id": "bd6643be3411eb30",
        "type": "MSSQL",
        "z": "056ccbd5a38f655b",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get UserTaskInfo",
        "outField": "UTI",
        "returnType": 0,
        "throwErrors": 1,
        "query": "  SELECT [gId] as N'id',[gOwnerId] as N'ownerId',[szOwnerType] as N'ownerType',[szWorkflow] as N'workflow',[szState] as N'state',gParentId as [parentId]\r\n  ,ISNULL('{{{payload.ChangeType}}}',-1) as [changeType]\r\n  FROM [MesCoreRuntime].[dbo].[tblUserTasks] where gId = '{{{payload.Id}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 310,
        "y": 180,
        "wires": [
            [
                "e4e570183fe2c026"
            ]
        ]
    },
    {
        "id": "5ca08e3bc848f166",
        "type": "http in",
        "z": "011c53b11af439eb",
        "name": "",
        "url": "/api/production/paster",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 480,
        "wires": [
            [
                "0a10c018b2f217d8",
                "070f61d220e22eb5"
            ]
        ]
    },
    {
        "id": "0a10c018b2f217d8",
        "type": "debug",
        "z": "011c53b11af439eb",
        "name": "debug 125",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 440,
        "wires": []
    },
    {
        "id": "070f61d220e22eb5",
        "type": "http response",
        "z": "011c53b11af439eb",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 480,
        "wires": []
    },
    {
        "id": "b4513d19e056a152",
        "type": "comment",
        "z": "011c53b11af439eb",
        "name": "PZO",
        "info": "",
        "x": 90,
        "y": 40,
        "wires": []
    },
    {
        "id": "b89eaa3787510a2c",
        "type": "http in",
        "z": "011c53b11af439eb",
        "name": "",
        "url": "/api/production/paster/volume",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 120,
        "wires": [
            [
                "6577668043759bbf",
                "a2ae767d9c089bb5"
            ]
        ]
    },
    {
        "id": "6577668043759bbf",
        "type": "debug",
        "z": "011c53b11af439eb",
        "name": "debug 126",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 80,
        "wires": []
    },
    {
        "id": "a2ae767d9c089bb5",
        "type": "http response",
        "z": "011c53b11af439eb",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 120,
        "wires": []
    },
    {
        "id": "d48938d3dc877220",
        "type": "inject",
        "z": "011c53b11af439eb",
        "name": "/api/production/paster/volume",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"rowid\":\"12345\",\"line\":\"22W\",\"sourceMilk\":\"1\",\"sourceCream\":\"6\",\"destination\":\"26TA18\",\"volumeMilk\":\"350,00\",\"volumeCream\":\"46,000\",\"volumeDestination\":\"396,000\",\"eventdate\":\"2024-12-10 11:30:02\",\"sourceMilkEmpty\":\"true\",\"sourceCreamEmpty\":\"true\",\"changeType\":\"1\"}",
        "payloadType": "json",
        "x": 260,
        "y": 180,
        "wires": [
            [
                "daaed53cc6cbce24"
            ]
        ]
    },
    {
        "id": "f451d84a65a78327",
        "type": "comment",
        "z": "011c53b11af439eb",
        "name": "",
        "info": "{\"rowid\":\"12345\",\"line\":\"22WT01\",\"sourceMilk\":\"21TA01\",\"sourceCream\":\"23TA06\",\"destination\":\"43TA32\"\n\n,\"volumeMilk\":\"350,00\",\"volumeCream\":\"46,000\",\"volumeDestination\":\"396,000\"\n\n,\"eventdate\":\"2024-09-10 11:30:02\",\"sourceMilkEmpty\":\"true\",\"sourceCreamEmpty\":\"true\",\"changeType\":\"1\"}\n\nrowid- уникальный идентификатор процесса в Indusoft\n\n,line-пастеризатор\n\n,sourcemilk-танк сырого молока откуда подают на пастер\n\n,sourcecream-танк сырых сливок откуда подают на пастер\n\n,destination- танк сквашивания куда подают с пастера\n\n,volumemilk- объём в литрах сырого молока откуда подают на пастер\n\n,volumecream-объём в литрах сырых сливок откуда подают на пастер\n\n,volumedestination-объём в литрах нормализованной смеси куда подают с пастера\n\neventdate - дата+время события в Indusoft\n\nsourceMilkEmpty - значение(true / false или 0 / 1 как удобнее), бит о том что танк молока пустой. (взводится, как только пришёл сигнал от танка молока, что он пустой, который в данный момент является source и сбрасывается после отправки нам телеграммы)\n\nsourceCreamEmpty - значение(true / false или 0 / 1 как удобнее), бит о том что танк сливок пустой.(взводится, как только пришёл сигнал от танка молока, что он пустой, который в данный момент является source и сбрасывается после отправки нам телеграммы)\n\nchangeType - значения:1-телеграмма пришла т.к сменился sourceMilk,2-сменился sourceCream,3-сменился destination.",
        "x": 310,
        "y": 220,
        "wires": []
    },
    {
        "id": "c9d4913bfa4e6f30",
        "type": "inject",
        "z": "011c53b11af439eb",
        "name": "чистка лога /api/production/paster",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 12 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 600,
        "wires": [
            [
                "e4c589159bf77b32"
            ]
        ]
    },
    {
        "id": "d6f2525f6c38bcc4",
        "type": "debug",
        "z": "011c53b11af439eb",
        "name": "debug 194",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4650,
        "y": 160,
        "wires": []
    },
    {
        "id": "daaed53cc6cbce24",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "validate telegram",
        "func": "//проверяем есть ли все поля в телеграмме\nvar isErrored = false;\nif(!(msg.payload.hasOwnProperty('rowid')) ||\n    !(msg.payload.hasOwnProperty('line')) ||\n    !(msg.payload.hasOwnProperty('sourceMilk')) ||\n    !(msg.payload.hasOwnProperty('sourceCream')) ||\n    !(msg.payload.hasOwnProperty('destination')) ||\n    !(msg.payload.hasOwnProperty('volumeMilk')) ||\n    !(msg.payload.hasOwnProperty('volumeCream')) ||\n    !(msg.payload.hasOwnProperty('volumeDestination')) ||\n    !(msg.payload.hasOwnProperty('eventdate')) ||\n    !(msg.payload.hasOwnProperty('sourceMilkEmpty')) ||\n    !(msg.payload.hasOwnProperty('sourceCreamEmpty')) ||\n!(msg.payload.hasOwnProperty('changeType')))\n{\n    isErrored = true;\n    \n}\nmsg.isErrored = isErrored;\nmsg.Tg = msg.payload\nmsg.state = true;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 180,
        "wires": [
            [
                "09198b11ea3788d6"
            ]
        ]
    },
    {
        "id": "09198b11ea3788d6",
        "type": "switch",
        "z": "011c53b11af439eb",
        "name": "sw tg error",
        "property": "isErrored",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 180,
        "wires": [
            [
                "2007780eccb082be"
            ],
            [
                "2c9ae849bf82167e",
                "5479fe079f5ff9c3"
            ]
        ]
    },
    {
        "id": "2007780eccb082be",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "error action (empty)",
        "func": "//какой-то ответ об ошибке,хз пока че тут написать\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "5dc3a2473d9b8dd6",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "ProcessCreateCommand",
        "func": "let ProcessCreateCommand = \n                     {\n                            OperationId: msg.Operations[msg.i].gId,\n                            ProcessAmount: 0,\n                            EquipmentId: msg.PO[0].gEquipmentId,\n                            BillOfMaterialId: '',\n                            CreateTypeId: 1                                                          \n                            };          \nmsg.payload=ProcessCreateCommand;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1900,
        "wires": [
            [
                "e334624a57c11321"
            ]
        ]
    },
    {
        "id": "e334624a57c11321",
        "type": "http request",
        "z": "011c53b11af439eb",
        "name": "create Process",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.ProductionUrl}}}/api/Process",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1500,
        "y": 1900,
        "wires": [
            [
                "bcb55bbb92434265"
            ]
        ]
    },
    {
        "id": "f6280071a8ec4cf4",
        "type": "subflow:ca94f48e1f18b542",
        "z": "011c53b11af439eb",
        "name": "",
        "x": 1750,
        "y": 160,
        "wires": [
            [
                "1da3c4fd80d4840c"
            ]
        ]
    },
    {
        "id": "1da3c4fd80d4840c",
        "type": "subflow:f2924807aef52857",
        "z": "011c53b11af439eb",
        "name": "",
        "x": 1920,
        "y": 160,
        "wires": [
            [
                "5dbe1056e5b3c325"
            ]
        ]
    },
    {
        "id": "97d4e940137682b1",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "cycle start & ++",
        "func": "msg.isOk = false;\nif(msg.hasOwnProperty('i'))\n{\n    msg.i = msg.i + 1;\n}\nelse{\n    var i = 0;\n    msg.i = i;\n}\nif((msg.i+1) == msg.Operations.length)\n{\n    msg.isOk = true;\n}\nnode.warn(\"iteration \"+msg.i);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1900,
        "wires": [
            [
                "5dc3a2473d9b8dd6"
            ]
        ]
    },
    {
        "id": "979e6f41688874ac",
        "type": "switch",
        "z": "011c53b11af439eb",
        "name": "sw isOk for cycle",
        "property": "isOk",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1870,
        "y": 1900,
        "wires": [
            [
                "3b277d59d879d966"
            ],
            [
                "97d4e940137682b1"
            ]
        ]
    },
    {
        "id": "bcb55bbb92434265",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "save to buffer",
        "func": "var buffer = msg.payload;\nif(msg.hasOwnProperty('ProccessBuffer'))\n{\nmsg.ProccessBuffer.push(buffer);\n}\nelse{\n    var arr = [];\n    arr.push(buffer);\n    msg.ProccessBuffer = arr;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1900,
        "wires": [
            [
                "979e6f41688874ac"
            ]
        ]
    },
    {
        "id": "d2d2d0cae6fa0574",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "err fix...",
        "func": "msg.TT = msg.PO[0].order;\nnode.warn(msg.TT);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1860,
        "wires": [
            [
                "de9a6e72f7137fc8"
            ]
        ]
    },
    {
        "id": "a50d20457515f11e",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "prepare outtake",
        "func": "switch (msg.j) {\n  case 0:\n    msg.payload = {\n      \"storageLocationId\": msg.SourceMilk_data[0].gExternalObjectId,\n      //\"materialId\": msg.SourceMilk_data[0].gMaterialId,\n      \"quantity\": parseFloat(msg.Tg.volumeMilk),\n      \"operationId\": msg.Operations[1].gId,\n      \"processId\": msg.ProccessBuffer[1][0].id.toUpperCase()\n    }\n    break;\n  case 1:\n    msg.payload = {\n      \"storageLocationId\": msg.SourceCream_data[0].gExternalObjectId,\n      //\"materialId\": msg.SourceCream_data[0].gMaterialId,\n      \"quantity\": parseFloat(msg.Tg.volumeCream),\n      \"operationId\": msg.Operations[1].gId,\n      \"processId\": msg.ProccessBuffer[1][0].id.toUpperCase()\n    }\n    break;\n  default:\n    break;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1980,
        "wires": [
            [
                "385de23e6d9087b9",
                "93d3ac284a43986a"
            ]
        ]
    },
    {
        "id": "385de23e6d9087b9",
        "type": "http request",
        "z": "011c53b11af439eb",
        "name": "htttp put outtake",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/outtake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1040,
        "y": 1980,
        "wires": [
            [
                "1743c8a30caae711"
            ]
        ]
    },
    {
        "id": "dcf7048993df8133",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "prepere intake data",
        "func": "let Intake = {\n                processId: msg.Input.processId,\n                operationId: msg.Input.operationId,\n                materialId: msg.Input.materialId,\n                storageLocationId: msg.Input.storageLocationId,\n                quantity: msg.Input.quantity,\n                dateTime: msg.Input.dateTime,\n                doNotCheckQuality: \"true\",\n                //comment: null,\n                //batchId: msg.Input.batchId\n            }\nmsg.payload = Intake;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 1780,
        "wires": [
            [
                "128e11bf79314b15"
            ]
        ]
    },
    {
        "id": "128e11bf79314b15",
        "type": "http request",
        "z": "011c53b11af439eb",
        "name": "Intake",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/Intake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 2050,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "dd1232e5779bbaca",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "start cycle & ++",
        "func": "msg.isOk = false;\nif(msg.hasOwnProperty('j'))\n{\n    msg.j = msg.j + 1;\n}\nelse{\n    var j = 0;\n    msg.j = j;\n}\nif((msg.j+1) == 2)\n{\n    msg.isOk = true;\n}\nnode.warn(\"iteration \"+msg.j);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1980,
        "wires": [
            [
                "a50d20457515f11e"
            ]
        ]
    },
    {
        "id": "1743c8a30caae711",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "function 22",
        "func": "var buffer = JSON.parse(msg.payload);\nif(msg.hasOwnProperty('OuttakeBuffer_to_paster'))\n{\n    msg.OuttakeBuffer_to_paster.push(buffer);\n}\nelse{\n    var arr = [];\n    arr.push(buffer);\n    msg.OuttakeBuffer_to_paster = arr;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1980,
        "wires": [
            [
                "104de197483f5329"
            ]
        ]
    },
    {
        "id": "104de197483f5329",
        "type": "switch",
        "z": "011c53b11af439eb",
        "name": "sw isOk for cycle",
        "property": "isOk",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1390,
        "y": 1980,
        "wires": [
            [],
            [
                "dd1232e5779bbaca"
            ]
        ]
    },
    {
        "id": "93d3ac284a43986a",
        "type": "debug",
        "z": "011c53b11af439eb",
        "name": "debug 200",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 2060,
        "wires": []
    },
    {
        "id": "974a1b48bb8d9116",
        "type": "http request",
        "z": "011c53b11af439eb",
        "name": "create Process",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.ProductionUrl}}}/api/Process",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 2060,
        "y": 240,
        "wires": [
            [
                "35751b00f4f157a0"
            ]
        ]
    },
    {
        "id": "3f0cf48837346c45",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "ProcessCreateCommand",
        "func": "let ProcessCreateCommand = \n                     {\n                            OperationId: msg.payload.operationid,\n                            ProcessAmount: 0,\n                            EquipmentId: msg.payload.gEquipmentId,\n                            BillOfMaterialId: '',\n                            CreateTypeId: 1                                                          \n                            };          \nmsg.payload=ProcessCreateCommand;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 240,
        "wires": [
            [
                "974a1b48bb8d9116"
            ]
        ]
    },
    {
        "id": "222347e874416b4d",
        "type": "switch",
        "z": "011c53b11af439eb",
        "name": "sw err",
        "property": "PO",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1410,
        "y": 160,
        "wires": [
            [
                "0e143b215186e8d4"
            ],
            [
                "2007780eccb082be"
            ]
        ]
    },
    {
        "id": "35751b00f4f157a0",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "save to buffer",
        "func": "var buffer = msg.payload;\nif(msg.hasOwnProperty('ProccessBuffer'))\n{\nmsg.ProccessBuffer.push(buffer);\n}\nelse{\n    var arr = [];\n    arr.push(buffer);\n    msg.ProccessBuffer = arr;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 240,
        "wires": [
            [
                "5dbe1056e5b3c325"
            ]
        ]
    },
    {
        "id": "8c42adf2a28a6b83",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "to/out paster",
        "func": "msg.ProccessBuffer.forEach(function(element) {\n    switch (element[0].name) {\n        case \"на пастер 22\":\n           msg.toPaster = element[0].id \n            break;\n        case \"от пастера\":\n            msg.outPaster = element[0].id\n            break;\n        default:\n            \n    }\n});\nmsg.loopCycle = 0;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 160,
        "wires": [
            [
                "b901cfa1e00e32d7"
            ]
        ]
    },
    {
        "id": "69a7a7bf07b13d18",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "prepare outtake",
        "func": "var payload_copy = msg.payload;\nmsg.payload_copy = payload_copy;\n//node.warn(msg);\nswitch (msg.payload.gProcessId) {\n  case msg.toPaster.toUpperCase():\n    switch (msg.loopCycle) {\n      case 0:\n        msg.payload = {\n          \"storageLocationId\": msg.payload.outtake,\n          \"quantity\": parseFloat(msg.Tg.volumeMilk),\n          \"operationId\": msg.PO[0].operationid.toUpperCase(),\n          \"processId\": msg.payload.gProcessId.toUpperCase()\n        };\n        \n        break;\n      case 1:\n        msg.payload = {\n          \"storageLocationId\": msg.payload.outtake,\n          \"quantity\": parseFloat(msg.Tg.sourceCream),\n          \"operationId\": msg.PO[0].operationid.toUpperCase(),\n          \"processId\": msg.payload.gProcessId.toUpperCase()\n        };\n        \n        break;\n      default:\n        break\n    }\n    break;\n  case msg.outPaster.toUpperCase():\n    msg.payload = {\n      \"storageLocationId\": msg.payload.outtake,\n      \"quantity\": parseFloat(msg.Tg.volumeDestination),\n      \"operationId\": msg.PO[1].operationid.toUpperCase(),\n      \"processId\": msg.payload.gProcessId.toUpperCase()\n    }\n    break;\n  default:\n   break; \n}\n//node.warn(msg.payload);\n\n   /* msg.payload = {\n      \"storageLocationId\": msg.SourceMilk_data[0].gExternalObjectId,\n      //\"materialId\": msg.SourceMilk_data[0].gMaterialId,\n      \"quantity\": parseFloat(msg.Tg.volumeMilk),\n      \"operationId\": msg.Operations[1].gId,\n      \"processId\": msg.ProccessBuffer[1][0].id.toUpperCase()\n    }*/\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2500,
        "y": 240,
        "wires": [
            [
                "92df9ae892f89fc7"
            ]
        ]
    },
    {
        "id": "92df9ae892f89fc7",
        "type": "http request",
        "z": "011c53b11af439eb",
        "name": "htttp put outtake",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/outtake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 2680,
        "y": 240,
        "wires": [
            [
                "61beb97c2f2c82dc",
                "8dd9f53a90644c47"
            ]
        ]
    },
    {
        "id": "61beb97c2f2c82dc",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "prepere intake data",
        "func": "var whatValue;\n//node.warn(msg);\nswitch (msg.payload_copy.gProcessId) {\n  case msg.toPaster.toUpperCase():\n    switch (msg.loopCycle) {\n      case 0:\n        msg.payload = {\n          processId: msg.payload_copy.gProcessId.toUpperCase(),\n          operationId: msg.PO[0].operationid.toUpperCase(),\n          materialId: msg.PO[0].gMaterialId,\n          storageLocationId: msg.payload_copy.intake,\n          quantity: parseFloat(msg.Tg.volumeMilk),\n          dateTime: msg.Tg.eventdate,\n          doNotCheckQuality: \"true\",\n        };\n        msg.loopCycle = msg.loopCycle + 1;\n        break;\n      case 1:\n        msg.payload = {\n          processId: msg.payload_copy.gProcessId.toUpperCase(),\n          operationId: msg.PO[0].operationid.toUpperCase(),\n          materialId: msg.PO[0].gMaterialId,\n          storageLocationId: msg.payload_copy.intake,\n          quantity: parseFloat(msg.Tg.volumeCream),\n          dateTime: msg.Tg.eventdate,\n          doNotCheckQuality: \"true\",\n        };\n       \n        break;\n      default:\n        break\n    }\n    break;\n  case msg.outPaster.toUpperCase():\n    msg.payload = {\n      processId: msg.payload_copy.gProcessId.toUpperCase(),\n      operationId: msg.PO[1].operationid.toUpperCase(),\n      materialId: msg.PO[0].gMaterialId,\n      storageLocationId: msg.payload_copy.intake,\n      quantity: parseFloat(msg.Tg.volumeDestination),\n      dateTime: msg.Tg.eventdate,\n      doNotCheckQuality: \"true\",\n    };\n    break;\n  default:\n   break; \n}\n//node.warn(msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 240,
        "wires": [
            [
                "667a175b70d1c992"
            ]
        ]
    },
    {
        "id": "667a175b70d1c992",
        "type": "http request",
        "z": "011c53b11af439eb",
        "name": "Intake",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/Intake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 3030,
        "y": 240,
        "wires": [
            [
                "cb789c4024f28471",
                "f5bcb06ca248dc9e"
            ]
        ]
    },
    {
        "id": "b8f21ebf260255f7",
        "type": "http request",
        "z": "011c53b11af439eb",
        "name": "end Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.MesCoreUrl}}}/api/UserTasks/do_action/{{{del}}}/Complete",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 3710,
        "y": 240,
        "wires": [
            [
                "19da183713c71de7",
                "609728da8af7e6db"
            ]
        ]
    },
    {
        "id": "a3414b6fc7365ad9",
        "type": "inject",
        "z": "011c53b11af439eb",
        "name": "завершение ручками для тестов",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3700,
        "y": 80,
        "wires": [
            [
                "3799ee757463a823"
            ]
        ]
    },
    {
        "id": "609728da8af7e6db",
        "type": "debug",
        "z": "011c53b11af439eb",
        "name": "debug 201",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3890,
        "y": 240,
        "wires": []
    },
    {
        "id": "1dbc652bd9d7fbd8",
        "type": "http request",
        "z": "011c53b11af439eb",
        "name": "end Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.MesCoreUrl}}}/api/UserTasks/do_action/CD198492-3B18-4671-AAD2-602478A80BB1/Complete",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 4270,
        "y": 80,
        "wires": [
            [
                "cff746aadfd47183"
            ]
        ]
    },
    {
        "id": "cff746aadfd47183",
        "type": "debug",
        "z": "011c53b11af439eb",
        "name": "debug 202",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4430,
        "y": 80,
        "wires": []
    },
    {
        "id": "3799ee757463a823",
        "type": "subflow:ca94f48e1f18b542",
        "z": "011c53b11af439eb",
        "name": "",
        "x": 3910,
        "y": 80,
        "wires": [
            [
                "18b02f0b2f4a6c21"
            ]
        ]
    },
    {
        "id": "18b02f0b2f4a6c21",
        "type": "subflow:f2924807aef52857",
        "z": "011c53b11af439eb",
        "name": "",
        "x": 4080,
        "y": 80,
        "wires": [
            [
                "1dbc652bd9d7fbd8"
            ]
        ]
    },
    {
        "id": "8dd9f53a90644c47",
        "type": "debug",
        "z": "011c53b11af439eb",
        "name": "debug 203",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2790,
        "y": 300,
        "wires": []
    },
    {
        "id": "4c3f40d7b03c5f3c",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "kostil for api",
        "func": "msg.del = msg.out[0].gUserTaskId;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 240,
        "wires": [
            [
                "b8f21ebf260255f7"
            ]
        ]
    },
    {
        "id": "86ff503e034a468b",
        "type": "delay",
        "z": "011c53b11af439eb",
        "name": "anti-bug delay",
        "pauseType": "delay",
        "timeout": "8",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3440,
        "y": 160,
        "wires": [
            [
                "19da183713c71de7"
            ]
        ]
    },
    {
        "id": "0e143b215186e8d4",
        "type": "switch",
        "z": "011c53b11af439eb",
        "name": "sw tg",
        "property": "Tg.changeType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1590,
        "y": 160,
        "wires": [
            [
                "d85011cd3a8d7b75"
            ],
            [
                "f6280071a8ec4cf4"
            ]
        ]
    },
    {
        "id": "f5bcb06ca248dc9e",
        "type": "debug",
        "z": "011c53b11af439eb",
        "name": "debug 205",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3040,
        "y": 300,
        "wires": []
    },
    {
        "id": "d85011cd3a8d7b75",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "ProccessBuffer replication",
        "func": "var ProccessBuffer = [];\nmsg.PO.forEach(function(element) {\n    var prc =  {\n        'id': element.operationid,\n    };\n    ProccessBuffer.push(prc);\n});\nmsg.ProccessBuffer = ProccessBuffer;\nmsg.state = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 80,
        "wires": [
            [
                "8c42adf2a28a6b83"
            ]
        ]
    },
    {
        "id": "eb99d065a769256b",
        "type": "comment",
        "z": "011c53b11af439eb",
        "name": "State 1&2",
        "info": "",
        "x": 1940,
        "y": 40,
        "wires": []
    },
    {
        "id": "1b34d03d85e4d11a",
        "type": "comment",
        "z": "011c53b11af439eb",
        "name": "State 3",
        "info": "",
        "x": 1930,
        "y": 120,
        "wires": []
    },
    {
        "id": "1011ac63d841f886",
        "type": "switch",
        "z": "011c53b11af439eb",
        "name": "sw SLData len",
        "property": "SLData",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2800,
        "y": 160,
        "wires": [
            [
                "cb789c4024f28471"
            ],
            [
                "2007780eccb082be"
            ]
        ]
    },
    {
        "id": "403606b2dc632013",
        "type": "inject",
        "z": "011c53b11af439eb",
        "name": "/api/production/paster",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"rowid\":\"12345\",\"line\":\"22WT01\",\"event\":\"1\",\"eventdate\":\"2024-09-10 09:20:15\"}",
        "payloadType": "json",
        "x": 280,
        "y": 540,
        "wires": [
            [
                "7fb00edb86c5668e"
            ]
        ]
    },
    {
        "id": "7fb00edb86c5668e",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "validate telegram",
        "func": "//проверяем есть ли все поля в телеграмме\n//copy\nvar isErrored = false;\nif(!(msg.payload.hasOwnProperty('rowid')) ||\n    !(msg.payload.hasOwnProperty('line')) ||\n    !(msg.payload.hasOwnProperty('event')) ||\n    !(msg.payload.hasOwnProperty('eventdate')))\n{\n    isErrored = true;\n}\nmsg.isErrored = isErrored;\nmsg.Tg = msg.payload\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 540,
        "wires": [
            [
                "8e7028677a33bfba"
            ]
        ]
    },
    {
        "id": "8e7028677a33bfba",
        "type": "switch",
        "z": "011c53b11af439eb",
        "name": "sw tg error",
        "property": "isErrored",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 540,
        "wires": [
            [
                "a196a9f36df5c153"
            ],
            [
                "290ce62ee88856d2"
            ]
        ]
    },
    {
        "id": "a196a9f36df5c153",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "error action (empty)",
        "func": "//какой-то ответ об ошибке,хз пока че тут написать\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "dc91d1812b5f6a7f",
        "type": "inject",
        "z": "011c53b11af439eb",
        "name": "чистка лога /api/production/paster/volume",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 12 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 260,
        "wires": [
            [
                "d614f0d1cc9cc642"
            ]
        ]
    },
    {
        "id": "73a6b9c3ed4b995f",
        "type": "comment",
        "z": "011c53b11af439eb",
        "name": "",
        "info": "{  \"orderTemplateId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",  \"planAmount\": 0,  \"planStart\": \"2024-12-10T09:35:40.561Z\",  \"shiftRuntimeId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",  ---\"finalEquipmentId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",  \"createTypeId\": 1,  --\"relatedOrdersIds\": [    \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"  ]\n}",
        "x": 1130,
        "y": 400,
        "wires": []
    },
    {
        "id": "66d5b4c1c30968b8",
        "type": "debug",
        "z": "011c53b11af439eb",
        "name": "debug 206",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2750,
        "y": 80,
        "wires": []
    },
    {
        "id": "7abd616e7a3a7d64",
        "type": "comment",
        "z": "011c53b11af439eb",
        "name": "при state 1&2 удрать завершение ",
        "info": "",
        "x": 3260,
        "y": 80,
        "wires": []
    },
    {
        "id": "a877c812c6badf1a",
        "type": "comment",
        "z": "011c53b11af439eb",
        "name": "",
        "info": "если тут [ProductionManagementRunTimeDb].[dbo].[tblOperation] нет [szPreviousOperationTemplateId] то эт наши операции",
        "x": 3250,
        "y": 400,
        "wires": []
    },
    {
        "id": "7134f1303c323f6e",
        "type": "switch",
        "z": "011c53b11af439eb",
        "name": "sw bracker",
        "property": "state",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3230,
        "y": 160,
        "wires": [
            [
                "86ff503e034a468b"
            ]
        ]
    },
    {
        "id": "8b0774897214ff1b",
        "type": "http request",
        "z": "011c53b11af439eb",
        "name": "create Process",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.ProductionUrl}}}/api/Process",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 4480,
        "y": 160,
        "wires": [
            [
                "d6f2525f6c38bcc4"
            ]
        ]
    },
    {
        "id": "95aa3b78242318f5",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "ProcessCreateCommand",
        "func": "let ProcessCreateCommand = \n                     {\n                            OperationId: msg.KVAS[0].operationid,\n       //OperationId:'DA2AE06A-4103-43EC-8219-46BDAB64BF55',\n                            ProcessAmount: 0,\n                            EquipmentId: msg.KVAS[0].gEquipmentId,\n              //EquipmentId:'FB7B38C0-3AAF-404F-8967-DDBE80F22DC1',\n                            BillOfMaterialId: '',\n                            CreateTypeId: 1                                                          \n                            };          \nmsg.payload=ProcessCreateCommand;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4270,
        "y": 160,
        "wires": [
            [
                "8b0774897214ff1b"
            ]
        ]
    },
    {
        "id": "916cd52d020f1ab2",
        "type": "inject",
        "z": "011c53b11af439eb",
        "name": "ручками создаем квас",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3880,
        "y": 380,
        "wires": [
            [
                "c6547ae1ea42e57d"
            ]
        ]
    },
    {
        "id": "c6547ae1ea42e57d",
        "type": "subflow:ca94f48e1f18b542",
        "z": "011c53b11af439eb",
        "name": "",
        "x": 4070,
        "y": 380,
        "wires": [
            [
                "b924209296636ed9"
            ]
        ]
    },
    {
        "id": "b924209296636ed9",
        "type": "subflow:f2924807aef52857",
        "z": "011c53b11af439eb",
        "name": "",
        "x": 4240,
        "y": 380,
        "wires": [
            [
                "9ece721e929d9d2e"
            ]
        ]
    },
    {
        "id": "ad3bf49bef080cc4",
        "type": "http request",
        "z": "011c53b11af439eb",
        "name": "create Order",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{Config.ProductionUrl}}}/api/ProductionOrder/createByOrderTemplateId",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 910,
        "y": 900,
        "wires": [
            [
                "0dc87ad1d0688056"
            ]
        ]
    },
    {
        "id": "ce430796a425f40e",
        "type": "function",
        "z": "011c53b11af439eb",
        "name": "OrderCreateCommand",
        "func": "let OrderCreateCommand = \n                    {\n                     OrderTemplateId: \"D6B69225-A107-4490-8DAB-4EC370B59C5B\",\n    planAmount: 0,\n    planStart: \"2024-12-10T18:35:40.561Z\",\n    shiftRuntimeId: \"BD37273D-48EA-4442-A8E0-74DA6BF44135\",\n    createTypeId: 1\n                    }         \nmsg.payload = OrderCreateCommand;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 860,
        "wires": [
            [
                "ad3bf49bef080cc4"
            ]
        ]
    },
    {
        "id": "e3b6574c9aaab8c7",
        "type": "inject",
        "z": "011c53b11af439eb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"orderTemplateId\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\"planAmount\":0,\"planStart\":\"2024-12-10T09:35:40.561Z\",\"shiftRuntimeId\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\"createTypeId\":1}",
        "payloadType": "json",
        "x": 260,
        "y": 960,
        "wires": [
            [
                "882e140ab4966ad1"
            ]
        ]
    },
    {
        "id": "882e140ab4966ad1",
        "type": "subflow:ca94f48e1f18b542",
        "z": "011c53b11af439eb",
        "name": "",
        "x": 390,
        "y": 800,
        "wires": [
            [
                "48d7df7b5fe7a6e6"
            ]
        ]
    },
    {
        "id": "48d7df7b5fe7a6e6",
        "type": "subflow:f2924807aef52857",
        "z": "011c53b11af439eb",
        "name": "",
        "x": 580,
        "y": 800,
        "wires": [
            [
                "ce430796a425f40e"
            ]
        ]
    },
    {
        "id": "0dc87ad1d0688056",
        "type": "debug",
        "z": "011c53b11af439eb",
        "name": "debug 208",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 900,
        "wires": []
    },
    {
        "id": "5dbe1056e5b3c325",
        "type": "loop",
        "z": "011c53b11af439eb",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "PO",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 2130,
        "y": 160,
        "wires": [
            [
                "8c42adf2a28a6b83"
            ],
            [
                "3f0cf48837346c45"
            ]
        ]
    },
    {
        "id": "cb789c4024f28471",
        "type": "loop",
        "z": "011c53b11af439eb",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "SLData",
        "enumerationType": "msg",
        "limit": "100000",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 3010,
        "y": 160,
        "wires": [
            [
                "7134f1303c323f6e"
            ],
            [
                "69a7a7bf07b13d18"
            ]
        ]
    },
    {
        "id": "19da183713c71de7",
        "type": "loop",
        "z": "011c53b11af439eb",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "PO",
        "enumerationType": "msg",
        "limit": "100000",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 3650,
        "y": 160,
        "wires": [
            [
                "9ece721e929d9d2e"
            ],
            [
                "0f42ceed295d3b78"
            ]
        ]
    },
    {
        "id": "5479fe079f5ff9c3",
        "type": "MSSQL",
        "z": "011c53b11af439eb",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "ищем смену, затем для неё ищем ПЗ и ищем операции и процессы",
        "outField": "PO",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @gShifId uniqueidentifier,@gPOId uniqueidentifier,@szPONumber nvarchar(255),@gMatId uniqueidentifier\r\nSELECT  @gShifId=[gId]  \r\n  FROM [BaseClassifiers].[dbo].[tblShiftRuntime] WHERE GETUTCDATE() BETWEEN dtStart AND dtEnd AND gPlantId='449BF86B-8CDA-4462-AEBD-08651E38A5DB'\r\n\r\nSELECT @gPOId=po.gId,@szPONumber=po.szNumber,@gMatId=po.gMaterialId FROM [ProductionManagementRunTimeDb].[dbo].[tblProductionOrder] po\r\n\tINNER JOIN [BaseClassifiers].[dbo].[tblExternalSystemToEquipment]es ON es.gEquipmentTreeId=po.gEquipmentId \r\n            AND gExternalSystemId='95A65B4F-5A88-44EA-A7A4-7A3CEB86CD2A' AND szExternalId='22W' \r\n WHERE po.gShiftRuntimeId=@gShifId\r\n\r\nSELECT TOP (2) @gPOId as [order],@szPONumber as [ordernumber],o.gId as [operationid],o.gAccessId, ote.gEquipmentId,@gMatId as[gMaterialId],o.szPreviousOperationTemplateId\r\n  FROM [ProductionManagementRunTimeDb].[dbo].[tblOperation] o \r\n--INNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p ON p.gOperationId = o.gId\r\nINNER JOIN [ProductionManagementMasterData].[dbo].[tblOperationTemplateEquipment] ote ON ote.gOperationTemplateId=o.gOperationTemplateId\r\n WHERE o.gProductionOrderId=@gPOId AND o.szPreviousOperationTemplateId = '[]' \r\n  ",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1090,
        "y": 160,
        "wires": [
            [
                "222347e874416b4d"
            ]
        ]
    },
    {
        "id": "2c9ae849bf82167e",
        "type": "MSSQL",
        "z": "011c53b11af439eb",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "лог запись",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "insert into [dbExchange].[dbo].[tblNormalizationNRLog]\r\n(rowid,line,sourceMilk,sourceCream,destination,volumeMilk,volumeCream,volumeDestination,eventdate,sourceMilkEmpty,sourceCreamEmpty,changeType)\r\nvalues ('{{{payload.rowid}}}','{{{payload.line}}}','{{{payload.sourceMilk}}}','{{{payload.sourceCream}}}','{{{payload.destination}}}','{{{payload.volumeMilk}}}','{{{payload.volumeCream}}}','{{{payload.volumeDestination}}}','{{{payload.eventdate}}}','{{{payload.sourceMilkEmpty}}}','{{{payload.sourceCreamEmpty}}}','{{{payload.changeType}}}')",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 910,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "e4c589159bf77b32",
        "type": "MSSQL",
        "z": "011c53b11af439eb",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "лог -> удаляем что стреше месяца",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "delete FROM [dbExchange].[dbo].[tblNormalizationProccessNRLog]\r\nwhere cast(eventdate as datetime2) < DATEADD(m,-1,GETUTCDATE())\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 550,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "de9a6e72f7137fc8",
        "type": "MSSQL",
        "z": "011c53b11af439eb",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "На пастер / от пастера",
        "outField": "Operations",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT TOP (2) [gId]  \r\n      ,[szName]\r\n      ,[gProductionOrderId]\r\n  FROM [ProductionManagementRunTimeDb].[dbo].[tblOperation]\r\n  where gProductionOrderId = '{{{TT}}}'\r\n  order by dtCreatedAt desc\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 510,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "2851e672909db5ac",
        "type": "MSSQL",
        "z": "011c53b11af439eb",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "а есть ли процессы?",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1220,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "3b277d59d879d966",
        "type": "MSSQL",
        "z": "011c53b11af439eb",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "SourceMilk_data",
        "outField": "SourceMilk_data",
        "returnType": "0",
        "throwErrors": 1,
        "query": "select top 1 ev.gExternalObjectId, btch.gMaterialId\r\nfrom [BaseClassifiers].[dbo].[tblExternalSystemToEquipment] es \r\nINNER JOIN [BaseClassifiers].[dbo].[tblExternalVertex] ev ON ev.gId=es.gExternalVertexId\r\ninner join [BatchManagementDb].[dbo].[tblBatch] btch on ev.gExternalObjectId = btch.StorageLocationId\r\n           where  gExternalSystemId='95A65B4F-5A88-44EA-A7A4-7A3CEB86CD2A' AND szExternalId='{{{Tg.sourceMilk}}}' AND bIsCompleted = 0",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 210,
        "y": 1980,
        "wires": [
            [
                "c9800edfad3d5e73"
            ]
        ]
    },
    {
        "id": "c9800edfad3d5e73",
        "type": "MSSQL",
        "z": "011c53b11af439eb",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "SourceCream_data",
        "outField": "SourceCream_data",
        "returnType": "0",
        "throwErrors": 1,
        "query": "select top 1 ev.gExternalObjectId, btch.gMaterialId\r\nfrom [BaseClassifiers].[dbo].[tblExternalSystemToEquipment] es \r\nINNER JOIN [BaseClassifiers].[dbo].[tblExternalVertex] ev ON ev.gId=es.gExternalVertexId\r\ninner join [BatchManagementDb].[dbo].[tblBatch] btch on ev.gExternalObjectId = btch.StorageLocationId\r\n           where  gExternalSystemId='95A65B4F-5A88-44EA-A7A4-7A3CEB86CD2A' AND szExternalId='{{{Tg.sourceCream}}}' AND bIsCompleted = 0",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 430,
        "y": 1980,
        "wires": [
            [
                "dd1232e5779bbaca"
            ]
        ]
    },
    {
        "id": "b901cfa1e00e32d7",
        "type": "MSSQL",
        "z": "011c53b11af439eb",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "Супер-запрос",
        "outField": "SLData",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @tblTelegramCSL TABLE (gSL uniqueidentifier)\r\n DECLARE @tblTelegramPSL TABLE (gSL uniqueidentifier)\r\n DECLARE @tblTelegram TABLE (gProcessId uniqueidentifier,gCSL uniqueidentifier,gPSL uniqueidentifier)\r\n INSERT INTO @tblTelegramCSL\r\n SELECT ev.gExternalObjectId from [BaseClassifiers].[dbo].[tblExternalSystemToEquipment] es \r\n\t\tINNER JOIN [BaseClassifiers].[dbo].[tblExternalVertex] ev ON ev.gId=es.gExternalVertexId\r\n WHERE  gExternalSystemId='95A65B4F-5A88-44EA-A7A4-7A3CEB86CD2A' AND szExternalId IN ('{{{Tg.sourceMilk}}}','{{{Tg.sourceCream}}}')\r\n\r\n INSERT INTO @tblTelegramPSL\r\n SELECT ev.gExternalObjectId from [BaseClassifiers].[dbo].[tblExternalSystemToEquipment] es \r\n\t\tINNER JOIN [BaseClassifiers].[dbo].[tblExternalVertex] ev ON ev.gId=es.gExternalVertexId\r\n WHERE  gExternalSystemId='95A65B4F-5A88-44EA-A7A4-7A3CEB86CD2A' AND szExternalId = '{{{Tg.destination}}}'\r\nINSERT INTO @tblTelegram\r\n SELECT p.gid, csl.[gStorageLocationId ] as [gCSL],psl.[gStorageLocationId ] as [gPSL]\r\n FROM [ProductionManagementRunTimeDb].[dbo].[tblProcess] p \r\n  INNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperation] o ON o.gid=p.gOperationId\r\n  INNER JOIN [ProductionManagementMasterData].[dbo].[tblOperationTemplateConsumeStorageLocation] csl ON csl.gOperationTemplateId=o.gOperationTemplateId AND csl.gEquipmentId=p.gEquipmentId\r\n  INNER JOIN [ProductionManagementMasterData].[dbo].[tblOperationTemplateProduceStorageLocation] psl ON psl.gOperationTemplateId=o.gOperationTemplateId AND psl.gEquipmentId=p.gEquipmentId\r\n  INNER JOIN @tblTelegramCSL tcsl ON tcsl.gSL=csl.[gStorageLocationId ]\r\n -- INNER JOIN @tblTelegramPSL tpsl ON tpsl.gSL=psl.[gStorageLocationId ]\r\n  WHERE p.gId IN ('{{{toPaster}}}','{{{outPaster}}}')\r\n  INSERT INTO @tblTelegram\r\n  SELECT p.gid, csl.[gStorageLocationId ] as [gCSL],psl.[gStorageLocationId ] as [gPSL]\r\n FROM [ProductionManagementRunTimeDb].[dbo].[tblProcess] p \r\n  INNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperation] o ON o.gid=p.gOperationId\r\n  INNER JOIN [ProductionManagementMasterData].[dbo].[tblOperationTemplateConsumeStorageLocation] csl ON csl.gOperationTemplateId=o.gOperationTemplateId AND csl.gEquipmentId=p.gEquipmentId\r\n  INNER JOIN [ProductionManagementMasterData].[dbo].[tblOperationTemplateProduceStorageLocation] psl ON psl.gOperationTemplateId=o.gOperationTemplateId AND psl.gEquipmentId=p.gEquipmentId\r\n --INNER JOIN @tblTelegramCSL tcsl ON tcsl.gSL=csl.[gStorageLocationId ]\r\n  INNER JOIN @tblTelegramPSL tpsl ON tpsl.gSL=psl.[gStorageLocationId ]\r\n    WHERE p.gId IN ('{{{toPaster}}}','{{{outPaster}}}')\r\n  select gProcessId, gCSL as outtake,gPSL as intake from @tblTelegram",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 2560,
        "y": 160,
        "wires": [
            [
                "66d5b4c1c30968b8"
            ]
        ]
    },
    {
        "id": "0f42ceed295d3b78",
        "type": "MSSQL",
        "z": "011c53b11af439eb",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "Вытягиваем gUTID по OID",
        "outField": "out",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT\t[gUserTaskId]\r\n  FROM [ProductionManagementRunTimeDb].[dbo].[tblProcess]\r\n  where gOperationId = '{{{payload.operationid}}}'\r\n  order by dtCreatedAt desc\r\n\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 3340,
        "y": 240,
        "wires": [
            [
                "4c3f40d7b03c5f3c"
            ]
        ]
    },
    {
        "id": "290ce62ee88856d2",
        "type": "MSSQL",
        "z": "011c53b11af439eb",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "лог запись",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "insert into [dbExchange].[dbo].[tblNormalizationProccessNRLog]\r\n(rowid,line,event,eventdate)\r\nvalues ('{{{payload.rowid}}}','{{{payload.line}}}','{{{payload.event}}}','{{{payload.eventdate}}}')",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 910,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "d614f0d1cc9cc642",
        "type": "MSSQL",
        "z": "011c53b11af439eb",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "лог -> удаляем что стреше месяца",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "delete FROM [dbExchange].[dbo].[tblNormalizationNRLog]\r\nwhere cast(eventdate as datetime2) < DATEADD(m,-1,GETUTCDATE())\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 550,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "9ece721e929d9d2e",
        "type": "MSSQL",
        "z": "011c53b11af439eb",
        "mssqlCN": "a0513bd15284c98d",
        "name": "вытягиваем сквашивание",
        "outField": "KVAS",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @gShifId uniqueidentifier,@gPOId uniqueidentifier,@szPONumber nvarchar(255),@gMatId uniqueidentifier\r\nSELECT  @gShifId=[gId]  \r\n  FROM [BaseClassifiers].[dbo].[tblShiftRuntime] WHERE GETUTCDATE() BETWEEN dtStart AND dtEnd AND gPlantId='449BF86B-8CDA-4462-AEBD-08651E38A5DB'\r\n\r\nSELECT @gPOId=po.gId,@szPONumber=po.szNumber,@gMatId=po.gMaterialId FROM [ProductionManagementRunTimeDb].[dbo].[tblProductionOrder] po\r\n\tINNER JOIN [BaseClassifiers].[dbo].[tblExternalSystemToEquipment]es ON es.gEquipmentTreeId=po.gEquipmentId \r\n            AND gExternalSystemId='95A65B4F-5A88-44EA-A7A4-7A3CEB86CD2A' AND szExternalId='22W' \r\n WHERE po.gShiftRuntimeId=@gShifId\r\n\r\nSELECT  @gPOId as [order] ,@szPONumber as [ordernumber],o.szName,o.gId as [operationid],o.gAccessId, ote.gEquipmentId,@gMatId as[gMaterialId],o.szPreviousOperationTemplateId\r\n  FROM [ProductionManagementRunTimeDb].[dbo].[tblOperation] o \r\n--INNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p ON p.gOperationId = o.gId\r\nINNER JOIN [ProductionManagementMasterData].[dbo].[tblOperationTemplateEquipment] ote ON ote.gOperationTemplateId=o.gOperationTemplateId\r\nINNER JOIN [BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ese ON  ese.gEquipmentTreeId = ote.gEquipmentId\r\n WHERE o.gProductionOrderId=@gPOId AND o.szPreviousOperationTemplateId != '[]'  AND ese.szExternalId = '26TA18' \r\n  \r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 4020,
        "y": 160,
        "wires": [
            [
                "95aa3b78242318f5"
            ]
        ]
    },
    {
        "id": "71592fa6fe133f37",
        "type": "comment",
        "z": "41c936a05a44db83",
        "name": "PZO/DTr",
        "info": "",
        "x": 80,
        "y": 40,
        "wires": []
    },
    {
        "id": "a3038a3894a17599",
        "type": "catch",
        "z": "41c936a05a44db83",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 140,
        "y": 500,
        "wires": [
            [
                "c0bff530a826d657"
            ]
        ]
    },
    {
        "id": "8e4c501d9bd64c1a",
        "type": "debug",
        "z": "41c936a05a44db83",
        "name": "Debug Save Catch Data",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 500,
        "wires": []
    },
    {
        "id": "c0bff530a826d657",
        "type": "subflow:f8fc59a8d3d93ef9",
        "z": "41c936a05a44db83",
        "name": "",
        "x": 340,
        "y": 500,
        "wires": [
            [
                "8e4c501d9bd64c1a"
            ]
        ]
    },
    {
        "id": "a0183a467079d2a2",
        "type": "function",
        "z": "41c936a05a44db83",
        "name": "JsonToString",
        "func": "msg.payload.Parameters = JSON.stringify(msg.payload.Parameters);\nmsg.CopyPayload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 320,
        "wires": [
            [
                "21c7941e54f1fbbe",
                "e83968914d94d37f",
                "9c0e586aef3fa48b"
            ]
        ]
    },
    {
        "id": "bb0139879cbc6007",
        "type": "switch",
        "z": "41c936a05a44db83",
        "name": "Type",
        "property": "payload.Type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 670,
        "y": 320,
        "wires": [
            [
                "f908680bafdbd672"
            ],
            [
                "1c1e37c378d0089c"
            ],
            [
                "80a8576843af0e2c"
            ]
        ]
    },
    {
        "id": "e83968914d94d37f",
        "type": "subflow:ca94f48e1f18b542",
        "z": "41c936a05a44db83",
        "name": "",
        "x": 530,
        "y": 320,
        "wires": [
            [
                "bb0139879cbc6007"
            ]
        ]
    },
    {
        "id": "66e617ea25d456ca",
        "type": "switch",
        "z": "41c936a05a44db83",
        "name": "Process != null",
        "property": "Process",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1060,
        "y": 240,
        "wires": [
            [
                "ca1614c3d070c1c3"
            ],
            []
        ]
    },
    {
        "id": "1c1e37c378d0089c",
        "type": "function",
        "z": "41c936a05a44db83",
        "name": "ConvertToArray",
        "func": "const jsonString = msg.payload.Parameters;\n\nlet jsonObject;\ntry {\n    jsonObject = JSON.parse(jsonString);\n} catch (e) {\n    msg.payload = \"Ошибка парсинга JSON: \" + e.message;\n    return msg;\n}\nlet jsonArray = Object.keys(jsonObject).map(key => ({ key: key, type: jsonObject[key].type, value: jsonObject[key].value })); // Преобразуем в массив объект JSON\n\nmsg.resultArray = []; \n\njsonArray.forEach(function (element) {\n    if (element.type == 'datetime') {\n        msg.resultArray.push({ key: element.key, value: new Date(element.value) });\n    }\n    else msg.resultArray.push({ key: element.key, value: element.value });\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 320,
        "wires": [
            [
                "7e8707f3a7ad3308"
            ]
        ]
    },
    {
        "id": "3109699ef6b3d335",
        "type": "http response",
        "z": "41c936a05a44db83",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 970,
        "y": 60,
        "wires": []
    },
    {
        "id": "3406e008da898696",
        "type": "http in",
        "z": "41c936a05a44db83",
        "name": "",
        "url": "/api/cooking",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "a0183a467079d2a2"
            ]
        ]
    },
    {
        "id": "1dbd9933d735ce48",
        "type": "inject",
        "z": "41c936a05a44db83",
        "name": "Ежедневно 9:00",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 09 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 560,
        "wires": [
            [
                "8161444459e85e22"
            ]
        ]
    },
    {
        "id": "2192bb9651da3f44",
        "type": "catch",
        "z": "41c936a05a44db83",
        "name": "SQL error",
        "scope": [
            "f908680bafdbd672",
            "043f86f28bdb0612",
            "5f3689d641a1a332",
            "fc013fdd238280f9",
            "ebdcc8e1c6d87537",
            "7e8707f3a7ad3308"
        ],
        "uncaught": false,
        "x": 480,
        "y": 40,
        "wires": [
            [
                "60061062528b52d3"
            ]
        ]
    },
    {
        "id": "21c7941e54f1fbbe",
        "type": "debug",
        "z": "41c936a05a44db83",
        "name": "debug 188",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 260,
        "wires": []
    },
    {
        "id": "6407e74f6683638b",
        "type": "function",
        "z": "41c936a05a44db83",
        "name": "statusCode=200",
        "func": "msg.statusCode=200\nmsg.payload={\"Response\":\"Запись в лог успешно\"}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 100,
        "wires": [
            [
                "3109699ef6b3d335"
            ]
        ]
    },
    {
        "id": "60061062528b52d3",
        "type": "function",
        "z": "41c936a05a44db83",
        "name": "statusCode=460",
        "func": "msg.statusCode=460\nmsg.payload={\"Response\":\"Запись в лог не прошла\"}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 40,
        "wires": [
            [
                "3109699ef6b3d335"
            ]
        ]
    },
    {
        "id": "ed882d60364bfb4a",
        "type": "inject",
        "z": "41c936a05a44db83",
        "name": "Type 1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Type\":\"1\",\"RowId\":\"129730\",\"BoilerNumber\":\"KS 3\",\"Factory\":\"1900\"}",
        "payloadType": "json",
        "x": 170,
        "y": 180,
        "wires": [
            [
                "a0183a467079d2a2"
            ]
        ]
    },
    {
        "id": "9a4529f62521bc77",
        "type": "inject",
        "z": "41c936a05a44db83",
        "name": "Type 3",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Type\":\"3\",\"RowId\":\"129730\",\"Factory\":\"1900\",\"Parameters\":{\"DrainStartTime\":{\"type\":\"datetime\",\"value\":\"2024-04-04 04:44:58\"},\"DrainEndTime\":{\"type\":\"datetime\",\"value\":\"2024-04-04 04:44:54\"},\"CookingNumber\":{\"type\":\"numeric\",\"value\":\"44\"},\"ProgramNumber\":{\"type\":\"numeric\",\"value\":\"44\"},\"CookingStartTime\":{\"type\":\"datetime\",\"value\":\"2024-04-04 4:44:58\"},\"CookingEndTime\":{\"type\":\"datetime\",\"value\":\"2024-04-04 4:44:54\"},\"CookingSetTemperature\":{\"type\":\"numeric\",\"value\":\"44\"}}}",
        "payloadType": "json",
        "x": 170,
        "y": 260,
        "wires": [
            [
                "a0183a467079d2a2"
            ]
        ]
    },
    {
        "id": "eff35ea245e472dd",
        "type": "inject",
        "z": "41c936a05a44db83",
        "name": "Type 2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Type\":\"2\",\"RowId\":\"129730\",\"Factory\":\"1900\",\"Parameters\":{\"CookingNumber\":{\"type\":\"numeric\",\"value\":\"22\"},\"ProgramNumber\":{\"type\":\"numeric\",\"value\":\"22\"},\"CookingStartTime\":{\"type\":\"datetime\",\"value\":\"2024-03-27 2:22:58\"},\"CookingEndTime\":{\"type\":\"datetime\",\"value\":\"2024-02-22 2:22:54\"},\"CookingSetTemperature\":{\"type\":\"numeric\",\"value\":\"22\"},\"CookingActualTemperature\":{\"type\":\"numeric\",\"value\":\"44\"}}}",
        "payloadType": "json",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "a0183a467079d2a2"
            ]
        ]
    },
    {
        "id": "5dcf966927c72736",
        "type": "debug",
        "z": "41c936a05a44db83",
        "name": "debug 239",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 140,
        "wires": []
    },
    {
        "id": "88d0e83bac54523c",
        "type": "debug",
        "z": "41c936a05a44db83",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 220,
        "wires": []
    },
    {
        "id": "1977dd26294dca11",
        "type": "subflow:f2924807aef52857",
        "z": "41c936a05a44db83",
        "name": "",
        "x": 1520,
        "y": 220,
        "wires": [
            [
                "fec5be2c960eedb9"
            ]
        ]
    },
    {
        "id": "4655bd44dfba007a",
        "type": "http request",
        "z": "41c936a05a44db83",
        "name": "start Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.MesCoreUrl}}}/api/UserTasks/do_action/{{{Process.0.UserTaskId}}}/InProcess",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1890,
        "y": 220,
        "wires": [
            [
                "88d0e83bac54523c"
            ]
        ]
    },
    {
        "id": "fec5be2c960eedb9",
        "type": "function",
        "z": "41c936a05a44db83",
        "name": "payload  clear",
        "func": "msg.payload=undefined;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 220,
        "wires": [
            [
                "4655bd44dfba007a"
            ]
        ]
    },
    {
        "id": "282ec3c6bfe0672d",
        "type": "switch",
        "z": "41c936a05a44db83",
        "name": "Data = null",
        "property": "data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1230,
        "y": 320,
        "wires": [
            [
                "2f16ef03e87d266a"
            ],
            []
        ]
    },
    {
        "id": "f8f745748d1cd83a",
        "type": "subflow:f2924807aef52857",
        "z": "41c936a05a44db83",
        "name": "",
        "x": 1200,
        "y": 400,
        "wires": [
            [
                "340c5104b25c163c"
            ]
        ]
    },
    {
        "id": "f6d9d9cc058923e6",
        "type": "http request",
        "z": "41c936a05a44db83",
        "name": "end Process",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.MesCoreUrl}}}/api/UserTasks/do_action/{{{data.0.gUserTaskId}}}/Complete",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 2150,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "c43320809a7e105e",
        "type": "function",
        "z": "41c936a05a44db83",
        "name": "payload  clear",
        "func": "msg.payload=undefined;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 440,
        "wires": [
            [
                "f6d9d9cc058923e6"
            ]
        ]
    },
    {
        "id": "5b1e3d950d36e2ba",
        "type": "switch",
        "z": "41c936a05a44db83",
        "name": "Data = null",
        "property": "data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1270,
        "y": 560,
        "wires": [
            [
                "1efe26bfa3de7e6d"
            ],
            []
        ]
    },
    {
        "id": "622a3306b89e27eb",
        "type": "function",
        "z": "41c936a05a44db83",
        "name": "to WF[0]",
        "func": "msg.WF=[];\nmsg.WF[0]={\"gProcessId\":msg.data[0].gProcessId};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 560,
        "wires": [
            [
                "959bed357b9ae5cb"
            ]
        ]
    },
    {
        "id": "4e7966d8f1e07215",
        "type": "switch",
        "z": "41c936a05a44db83",
        "name": "data empty?",
        "property": "CookingWater",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1010,
        "y": 400,
        "wires": [
            [
                "f8f745748d1cd83a"
            ]
        ]
    },
    {
        "id": "340c5104b25c163c",
        "type": "switch",
        "z": "41c936a05a44db83",
        "name": "Quantity?",
        "property": "CookingWater[0].Quantity",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1380,
        "y": 400,
        "wires": [
            [
                "1fb66bc98683f293"
            ],
            [
                "e3ff326ae86e5c55"
            ]
        ]
    },
    {
        "id": "920c4d35d8994265",
        "type": "function",
        "z": "41c936a05a44db83",
        "name": "prepare Outtake",
        "func": " let Outtake = {\n                ProcessId: msg.CookingWater[0].ProcessId,\n                BatchId: msg.Batch[0].BatchId,\n                StorageLocationId:msg.Batch[0].StorageLocationId,\n                OperationId: msg.CookingWater[0].OperationId,\n                Quantity: msg.CookingWater[0].Quantity,\n                CompleteOuttake: false\n                };\n msg.payload=Outtake;            \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 380,
        "wires": [
            [
                "fb71a35aa79ddac2"
            ]
        ]
    },
    {
        "id": "fb71a35aa79ddac2",
        "type": "http request",
        "z": "41c936a05a44db83",
        "name": "htttp put outtake",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.BatchUrl}}}/api/Operation/outtake",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1960,
        "y": 380,
        "wires": [
            [
                "e3ff326ae86e5c55"
            ]
        ]
    },
    {
        "id": "35688a11f6488906",
        "type": "http request",
        "z": "41c936a05a44db83",
        "name": "NR Выпуск BOM",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://10.70.6.61:52431/api/Intake/BOM",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1770,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "e3ff326ae86e5c55",
        "type": "function",
        "z": "41c936a05a44db83",
        "name": "prepare Intake",
        "func": " let Intake = {\n                processId: msg.CookingWater[0].ProcessId,\n                storageLocationId: msg.CookingWater[0].ProduceStorageLocationId\n             };\n msg.payload=Intake;            \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 440,
        "wires": [
            [
                "c43320809a7e105e"
            ]
        ]
    },
    {
        "id": "99d9847a18edbe46",
        "type": "comment",
        "z": "41c936a05a44db83",
        "name": "Outtake воды при стопе варки и Intake по BOM",
        "info": "",
        "x": 2260,
        "y": 380,
        "wires": []
    },
    {
        "id": "1b1c08aea3463fbb",
        "type": "inject",
        "z": "41c936a05a44db83",
        "name": "",
        "props": [
            {
                "p": "Input",
                "v": "{\"Id\":\"335463BA-0DC2-45C3-BB18-F07CD1524EE5\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 640,
        "y": 400,
        "wires": [
            [
                "b3980171ca4c03d2"
            ]
        ]
    },
    {
        "id": "fcd396c1b6ffc647",
        "type": "debug",
        "z": "41c936a05a44db83",
        "name": "debug 246",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 620,
        "wires": []
    },
    {
        "id": "80a8576843af0e2c",
        "type": "function",
        "z": "41c936a05a44db83",
        "name": "ConvertArrayToMap",
        "func": "const jsonString = msg.payload.Parameters;\n\nlet jsonObject;\ntry {\n    jsonObject = JSON.parse(jsonString);\n} catch (e) {\n    msg.payload = \"Ошибка парсинга JSON: \" + e.message;\n    return msg;\n}\n\nlet jsonArray = Object.keys(jsonObject).map(key => ({ key: key, type: jsonObject[key].type, value: jsonObject[key].value })); // Преобразуем в массив объект JSON\n\nmsg.resultArray = [];\nmsg.resultArrayStr = [];\n\njsonArray.forEach(function (element) {\n    if (element.type == 'datetime') {\n        msg.resultArray.push({ key: element.key, value: new Date(element.value).toISOString(),type:element.type });\n    }\n    else msg.resultArray.push({ key: element.key, value: element.value,type:element.type });\n});\n//msg.resultArray = msg.resultArray.map(item => `('${item.key}', '${item.value.toISOString()}')`).join(\", \");\nmsg.resultArrayStr = msg.resultArray.map(item => `('${item.key}', '${item.value}', '${item.type}')`).join(\", \");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 560,
        "wires": [
            [
                "fc013fdd238280f9"
            ]
        ]
    },
    {
        "id": "959bed357b9ae5cb",
        "type": "link out",
        "z": "41c936a05a44db83",
        "name": "Cooking",
        "mode": "link",
        "links": [
            "3e41135099d5a9b0"
        ],
        "x": 1825,
        "y": 560,
        "wires": []
    },
    {
        "id": "a3853aa155f5e017",
        "type": "switch",
        "z": "41c936a05a44db83",
        "name": "",
        "property": "RowCount.0.rCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1870,
        "y": 320,
        "wires": [
            [
                "87d21eb6fbd9f62a"
            ],
            [
                "b859be6a0a9d901b",
                "2f16ef03e87d266a"
            ]
        ]
    },
    {
        "id": "87d21eb6fbd9f62a",
        "type": "debug",
        "z": "41c936a05a44db83",
        "name": "ParamIsDuplicated",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "RowCount.0.rCount",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 300,
        "wires": []
    },
    {
        "id": "b859be6a0a9d901b",
        "type": "debug",
        "z": "41c936a05a44db83",
        "name": "debug 252",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 340,
        "wires": []
    },
    {
        "id": "2f16ef03e87d266a",
        "type": "loop",
        "z": "41c936a05a44db83",
        "name": "LoopForArray",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "resultArray",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-last",
        "x": 1420,
        "y": 320,
        "wires": [
            [
                "b3980171ca4c03d2"
            ],
            [
                "ab3d953ec6da2235"
            ]
        ]
    },
    {
        "id": "9c0e586aef3fa48b",
        "type": "MSSQL",
        "z": "41c936a05a44db83",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "tblCookingNRLog",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "INSERT INTO [dbExchange].[dbo].[tblCookingNRLog]\r\nVALUES({{{payload.Type}}},{{{payload.RowId}}},'{{{payload.Factory}}}' ,'{{{payload.BoilerNumber}}}',GETDATE(),'{{{payload.Parameters}}}')",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 510,
        "y": 100,
        "wires": [
            [
                "6407e74f6683638b"
            ]
        ]
    },
    {
        "id": "f908680bafdbd672",
        "type": "MSSQL",
        "z": "41c936a05a44db83",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "Get ProccesId start",
        "outField": "Process",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @gAccess uniqueidentifier\r\nSELECT @gAccess=gId FROM [BaseClassifiers].[dbo].[tblEquipmentTree]\r\nWHERE nType=1 AND szName='{{{payload.Factory}}}'\r\n\r\nSELECT TOP (1)  p.gId as 'ProcessId', p.gUserTaskId as 'UserTaskId'\r\nFROM [BaseClassifiers].[dbo].[tblEquipmentTree] et\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblEquipmentAllocationWork] ew ON ew.gEquipmentId=et.gId\r\n\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblProcess] p ON p.gOperationId = ew.gOperationId AND p.gEquipmentId=et.gId\r\n\tINNER JOIN [BaseClassifiers].[dbo].[tblExternalSystemToEquipment] ee ON ee.[gEquipmentTreeId]=p.gEquipmentId\r\n\tINNER JOIN [BaseClassifiers].[dbo].[tblExternalSystem] es ON es.gId=ee.[gExternalSystemId] AND es.szName=N'ASUTP'\r\nWHERE p.szStep='New' AND ee.[szExternalId]='{{{payload.BoilerNumber}}}' AND p.gAccessId=@gAccess\r\nORDER BY p.nKey\r\n\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 850,
        "y": 240,
        "wires": [
            [
                "66e617ea25d456ca"
            ]
        ]
    },
    {
        "id": "fc013fdd238280f9",
        "type": "MSSQL",
        "z": "41c936a05a44db83",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "Get_Parameters",
        "outField": "data",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT gEquipmentId, gProcessId, gAccess as [gAccessId], dtCreatedAt \r\nFROM [dbExchange].[dbo].[tblCheeseCookingReport]\r\nWHERE nRowId = {{{CopyPayload.RowId}}} \r\n        and gAccess = (SELECT gAccessId FROM [BaseClassifiers].[dbo].[tblEquipmentTree] \r\n                WHERE nType = 1 AND szNumberSAP = '{{{payload.Factory}}}')",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1080,
        "y": 560,
        "wires": [
            [
                "5b1e3d950d36e2ba"
            ]
        ]
    },
    {
        "id": "7e8707f3a7ad3308",
        "type": "MSSQL",
        "z": "41c936a05a44db83",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "Get_Parameters",
        "outField": "data",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @gAccess uniqueidentifier,@gProcessId uniqueidentifier\r\nSELECT @gAccess=gId FROM [BaseClassifiers].[dbo].[tblEquipmentTree]\r\nWHERE nType=1 AND szName='{{{payload.Factory}}}'\r\n\r\nSELECT @gProcessId=gProcessId FROM [dbExchange].[dbo].[tblCheeseCookingReport]\r\nWHERE nRowId = {{{CopyPayload.RowId}}} AND gAccess = @gAccess\r\n\r\nSELECT gId,gEquipmentId,gAccessId,gUserTaskId FROM [ProductionManagementRunTimeDb].[dbo].[tblProcess] WHERE gId=@gProcessId",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1040,
        "y": 320,
        "wires": [
            [
                "282ec3c6bfe0672d"
            ]
        ]
    },
    {
        "id": "8161444459e85e22",
        "type": "MSSQL",
        "z": "41c936a05a44db83",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "Delete tblCookingNRLog older 30days",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "  DELETE FROM [dbExchange].[dbo].[tblCookingNRLog] WHERE dtCreatedAt < (GETDATE() -30)",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 440,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "ca1614c3d070c1c3",
        "type": "MSSQL",
        "z": "41c936a05a44db83",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "tblCheeseCookingReport",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "INSERT INTO [dbExchange].[dbo].[tblCheeseCookingReport](nRowId, gAccess, gEquipmentId, gProcessId, dtCreatedAt)\r\n    SELECT {{{CopyPayload.RowId}}},gAccessId, gEquipmentId,'{{{Process.0.ProcessId}}}',GETUTCDATE() \r\n    FROM [ProductionManagementRunTimeDb].[dbo].[tblProcess]\r\n    WHERE gId = '{{{Process.0.ProcessId}}}';\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1290,
        "y": 220,
        "wires": [
            [
                "1977dd26294dca11",
                "5dcf966927c72736"
            ]
        ]
    },
    {
        "id": "1efe26bfa3de7e6d",
        "type": "MSSQL",
        "z": "41c936a05a44db83",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "MERGEtoCookingReport",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @tbl1  TABLE (ParameterName NVARCHAR(255),ParameterValue NVARCHAR(255),ParameterType NVARCHAR(50));\r\n\r\nINSERT INTO @tbl1 (ParameterName, ParameterValue,ParameterType)\r\nVALUES {{{resultArrayStr}}};\r\n    \r\nMERGE [dbExchange].[dbo].[tblCheeseCookingReport] AS tgt\r\nUSING (SELECT ParameterName, ParameterValue,ParameterType FROM @tbl1) AS src(szParam, szValue,szType)\r\n    ON (tgt.szParameterName = szParam and tgt.gProcessId = '{{{data.0.gProcessId}}}')\r\nWHEN MATCHED\r\n    THEN\r\n        UPDATE\r\n        SET szParameterValue = szValue, dtUpdatedAt = GETUTCDATE()\r\nWHEN NOT MATCHED\r\n    THEN\r\n        INSERT (nRowId, gAccess, gEquipmentId, gProcessId, szParameterName, szParameterValue, dtCreatedAt, dtUpdatedAt,szType)\r\n        VALUES ({{{CopyPayload.RowId}}}, '{{{data.0.gAccessId}}}', '{{{data.0.gEquipmentId}}}', '{{{data.0.gProcessId}}}', szParam, szValue, GETUTCDATE(), GETUTCDATE(),szType);\r\n",
        "modeOpt": "",
        "modeOptType": "query",
        "queryOpt": "",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "resultArray",
                "type": "int",
                "valueType": "msg",
                "value": "resultArray",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 1490,
        "y": 560,
        "wires": [
            [
                "fcd396c1b6ffc647",
                "622a3306b89e27eb"
            ]
        ]
    },
    {
        "id": "b3980171ca4c03d2",
        "type": "MSSQL",
        "z": "41c936a05a44db83",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "Get data",
        "outField": "CookingWater",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @tblProcess TABLE (ProcessId uniqueidentifier,OperationId uniqueidentifier,ProduceStorageLocationId uniqueidentifier,Quantity decimal(18,6))\r\nINSERT INTO @tblProcess\r\n\tSELECT p.gId,p.gOperationId,os.gStorageLocationId,0\r\n\tFROM  [ProductionManagementRunTimeDb].[dbo].[tblProcess] p\r\n\t\tINNER JOIN [ProductionManagementRunTimeDb].[dbo].[tblOperationProduceStorageLocation] os ON os.gOperationId=p.gOperationId AND os.gEquipmentId=p.gEquipmentId\r\n\tWHERE p.gId='{{{data.0.gId}}}'\r\nUPDATE @tblProcess\r\n\tSET Quantity=tbl.nsum\r\n\tFROM (SELECT SUM(CAST(szParameterValue as decimal(18,6))) as [nsum] FROM [dbExchange].[dbo].[tblCheeseCookingReport] \r\n\tWHERE gProcessId='{{{data.0.gId}}}' AND szParameterName IN(N'Water1ActualValue',N'Water2ActualValue')) tbl\r\nSELECT * FROM @tblProcess",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 840,
        "y": 400,
        "wires": [
            [
                "4e7966d8f1e07215"
            ]
        ]
    },
    {
        "id": "1fb66bc98683f293",
        "type": "MSSQL",
        "z": "41c936a05a44db83",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "Get Water Batch",
        "outField": "Batch",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT TOP (1) [gId] as 'BatchId',[StorageLocationId] as 'StorageLocationId'\r\nFROM [BatchManagementDb].[dbo].[tblBatch] \r\nWHERE szBatchNumber='Water' AND gAccessId='898634A9-46B5-40C7-8267-C4641FC4C3AD' AND bIsCompleted=0\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1560,
        "y": 380,
        "wires": [
            [
                "920c4d35d8994265"
            ]
        ]
    },
    {
        "id": "ab3d953ec6da2235",
        "type": "MSSQL",
        "z": "41c936a05a44db83",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "tblCheeseCookingReport",
        "outField": "RowCount",
        "returnType": 0,
        "throwErrors": 1,
        "query": "MERGE INTO [dbExchange].[dbo].[tblCheeseCookingReport] AS target\r\nUSING (SELECT\r\n    '{{{CopyPayload.RowId}}}' AS nRowId,\r\n    '{{{data.0.gAccessId}}}' AS gAccess,\r\n    '{{{data.0.gEquipmentId}}}' AS gEquipmentId,\r\n    '{{{data.0.gId}}}' AS gProcessId,\r\n    '{{{payload.key}}}' AS szParameterName,\r\n    '{{{payload.value}}}' AS szParameterValue,\r\n    GETUTCDATE() AS dtCreatedAt\r\n) AS source\r\nON target.nRowId = source.nRowId AND target.szParameterName = '{{{payload.key}}}'\r\nWHEN NOT MATCHED THEN\r\n    INSERT (nRowId, gAccess, gEquipmentId, gProcessId, szParameterName, szParameterValue, dtCreatedAt, dtUpdatedAt)\r\n    VALUES (source.nRowId, source.gAccess, source.gEquipmentId, source.gProcessId, source.szParameterName, source.szParameterValue, source.dtCreatedAt, null);\r\nSELECT @@ROWCOUNT as rCount",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1650,
        "y": 320,
        "wires": [
            [
                "a3853aa155f5e017"
            ]
        ]
    },
    {
        "id": "717dfda02b07e66a",
        "type": "debug",
        "z": "01b1d63d2a62703b",
        "name": "debug 137",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 60,
        "wires": []
    },
    {
        "id": "f537723704f83c8e",
        "type": "inject",
        "z": "01b1d63d2a62703b",
        "name": "Start Up 5 sec",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 240,
        "y": 60,
        "wires": [
            [
                "1aef1350b9990f60"
            ]
        ]
    },
    {
        "id": "1aef1350b9990f60",
        "type": "function",
        "z": "01b1d63d2a62703b",
        "name": "Prepare Request",
        "func": "msg.TokenStatus = \n{\n    Type: \"GetToken\", //Тип элемента безопасности\n    Name: \"Get Token\", //Название элемента безопасности\n    Title: \"Получение токена\", //Название элемента безопасности на русском для электронного письма \n    MESAPI: //Объект с параметрами запроса в MES\n    {\n        Method: \"POST\", //Метод запроса GET, PUT, POST\n        URL: \"http://10.70.6.61:52431/connect/token\", //Адрес Api\n        TimeoutSec: 120, //Таймаут отправки в секундах больше или равный 60\n    },\n    APIData: //Объект с данными для отправки в запрос\n    {\n        grant_type: \"password\", //Тип авторизации\n        client_id: \"ProleiT.Desktop\", //ID клиента\n        client_secret: \"secret\", //Кодовое слово\n        username: \"SYSTEM_NR\", //Имя пользователя\n        password: \"ProAdmin777\" //Пароль\n    },\n    TimeCreate: new Date(),\n    Token: \"\",\n    ExpiresIn: \"\"\n}\n\nmsg.headers = {};\nmsg.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\nmsg.method = msg.TokenStatus.MESAPI.Method;\nmsg.url = msg.TokenStatus.MESAPI.URL;\nmsg.requestTimeout = msg.TokenStatus.MESAPI.TimeoutSec * 1000;\nmsg.payload = msg.TokenStatus.APIData;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 60,
        "wires": [
            [
                "323f8c57bfd67c21"
            ]
        ]
    },
    {
        "id": "36986b9c0bdf09a4",
        "type": "link in",
        "z": "01b1d63d2a62703b",
        "name": "link in 1",
        "links": [],
        "x": 175,
        "y": 260,
        "wires": [
            [
                "ea61ea08a0852880"
            ]
        ]
    },
    {
        "id": "ea61ea08a0852880",
        "type": "function",
        "z": "01b1d63d2a62703b",
        "name": "Prepare Request",
        "func": "msg.GetTokenSettings = global.get(\"Token\");\n\n\nif (msg.GetTokenSettings != undefined && msg.GetTokenSettings?.MESAPI && msg.GetTokenSettings?.APIData &&\n    msg.GetTokenSettings?.Token && msg.GetTokenSettings?.ExpiresIn)\n{\n    // node.warn(Date.now());\n    // node.warn(msg.GetTokenSettings.ExpiresIn - 120 * 1000);\n    msg.StringExpiresIn = new Date(msg.GetTokenSettings.ExpiresIn).toISOString();\n    if (Date.now() > (msg.GetTokenSettings.ExpiresIn - 120*1000)){\n        msg.TokenIsValid = false;\n        msg.headers = {};\n        msg.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n        msg.method = msg.GetTokenSettings.MESAPI.Method;\n        msg.url = msg.GetTokenSettings.MESAPI.URL;\n        msg.requestTimeout = msg.GetTokenSettings.MESAPI.TimeoutSec * 1000;\n        msg.payload = msg.GetTokenSettings.APIData;\n    }\n    else msg.TokenIsValid = true;\n    return [msg, null];\n}\nelse\n{\n    msg.StringExpiresIn = null\n    msg.TokenIsValid = null;\n    msg.ReqIsComp = null;\n    msg.TokenError = \"The global variable Token has not been created\";\n    msg.ErrorData =\n    {\n        error:\n        {\n            source:\n            {\n                id: env.get(\"NR_NODE_ID\"),\n                type: msg.TokenError,\n                name: env.get(\"NR_NODE_NAME\"),\n                count: 1\n            },\n            message: msg.TokenError\n        }\n    };\n    return [null, msg];\n}\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 260,
        "wires": [
            [
                "71e82665aa1228f5",
                "841f973a826e5dc5"
            ],
            [
                "5b77e994844be099",
                "23bdf67a0f78c25a"
            ]
        ]
    },
    {
        "id": "0b3abf43bacf4da3",
        "type": "catch",
        "z": "01b1d63d2a62703b",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 230,
        "y": 440,
        "wires": [
            [
                "9afe60e5bbc8661f"
            ]
        ]
    },
    {
        "id": "c8849ddc6eb648bf",
        "type": "inject",
        "z": "01b1d63d2a62703b",
        "name": "",
        "props": [],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 320,
        "wires": [
            [
                "ea61ea08a0852880"
            ]
        ]
    },
    {
        "id": "5b77e994844be099",
        "type": "debug",
        "z": "01b1d63d2a62703b",
        "name": "debug 138",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 360,
        "wires": []
    },
    {
        "id": "9afe60e5bbc8661f",
        "type": "debug",
        "z": "01b1d63d2a62703b",
        "name": "debug 139",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 440,
        "wires": []
    },
    {
        "id": "71e82665aa1228f5",
        "type": "switch",
        "z": "01b1d63d2a62703b",
        "name": "msg.TokenIsValid == true",
        "property": "TokenIsValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 240,
        "wires": [
            [
                "aaf5fb1a54b8b81c"
            ],
            [
                "5d7fbbb45bfcfdd1"
            ]
        ]
    },
    {
        "id": "5d7fbbb45bfcfdd1",
        "type": "http request",
        "z": "01b1d63d2a62703b",
        "name": "Get Token",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 890,
        "y": 260,
        "wires": [
            [
                "2a4de58a75a178e8",
                "0ce6513b599bc5ab"
            ]
        ]
    },
    {
        "id": "aaf5fb1a54b8b81c",
        "type": "function",
        "z": "01b1d63d2a62703b",
        "name": "Prepare Response",
        "func": "if (!msg.TokenIsValid)\n{\n    if (msg.statusCode == 200) {\n        if (msg.GetTokenSettings.Token != \"Bearer \" + msg.payload.access_token){\n            msg.GetTokenSettings.TimeCreate = new Date();\n            msg.GetTokenSettings.Token = \"Bearer \" + msg.payload.access_token;\n            msg.GetTokenSettings.ExpiresIn = Date.now() + msg.payload.expires_in * 1000;\n            global.set(\"Token\", msg.GetTokenSettings);\n        }\n        else\n        {\n            msg.ReqIsComp = false\n            msg.ErrorData = \"Token Is Not Update\"\n            return [null, msg];\n        }\n    }    \n    else\n    {\n        var ErrorMessage = \"Get Token: \" + msg.statusCode + \": \";\n        if ([\"ECONNRESET\", \"ETIMEDOUT\"].includes(msg.statusCode)) ErrorMessage = ErrorMessage + msg.payload;\n        else ErrorMessage = ErrorMessage + JSON.stringify(msg.payload);\n        msg.ErrorData = ErrorMessage;\n        msg.ReqIsComp = false\n        return [null, msg];\n    }\n}\nmsg.Token = msg.GetTokenSettings.Token\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 240,
        "wires": [
            [
                "9306ed25ce7db192",
                "0b9c1fec0fe109d2"
            ],
            [
                "23bdf67a0f78c25a",
                "5b77e994844be099"
            ]
        ]
    },
    {
        "id": "2a4de58a75a178e8",
        "type": "debug",
        "z": "01b1d63d2a62703b",
        "d": true,
        "name": "debug 212",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 180,
        "wires": []
    },
    {
        "id": "323f8c57bfd67c21",
        "type": "http request",
        "z": "01b1d63d2a62703b",
        "name": "Get Token",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 60,
        "wires": [
            [
                "c298c803c8ee7c5b",
                "841f973a826e5dc5"
            ]
        ]
    },
    {
        "id": "c298c803c8ee7c5b",
        "type": "function",
        "z": "01b1d63d2a62703b",
        "name": "Prepare Response",
        "func": "if (msg.statusCode == 200)\n{\n    msg.TokenStatus.Token = \"Bearer \" + msg.payload.access_token;\n    msg.TokenStatus.ExpiresIn = Date.now() + msg.payload.expires_in * 1000;\n    global.set(\"Token\", msg.TokenStatus)\n\n    msg.StringExpiresIn = new Date(msg.GetTokenSettings.ExpiresIn).toISOString();\n    msg.ErrorData.message = \"Server was update\"\n} \nelse\n{\n    var ErrorMessage = \"Get Token: \" + msg.statusCode + \": \";\n    if ([\"ECONNRESET\", \"ETIMEDOUT\"].includes(msg.statusCode)) ErrorMessage = ErrorMessage + msg.payload;\n    else ErrorMessage = ErrorMessage + JSON.stringify(msg.payload);\n    msg.TokenError = ErrorMessage;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 60,
        "wires": [
            [
                "717dfda02b07e66a",
                "23bdf67a0f78c25a"
            ]
        ]
    },
    {
        "id": "841f973a826e5dc5",
        "type": "debug",
        "z": "01b1d63d2a62703b",
        "d": true,
        "name": "debug 214",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 180,
        "wires": []
    },
    {
        "id": "9306ed25ce7db192",
        "type": "debug",
        "z": "01b1d63d2a62703b",
        "d": true,
        "name": "debug 215",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 180,
        "wires": []
    },
    {
        "id": "0ce6513b599bc5ab",
        "type": "function",
        "z": "01b1d63d2a62703b",
        "name": "CreateNewToken",
        "func": "msg.ErrorData = 'Create new Token'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 260,
        "wires": [
            [
                "aaf5fb1a54b8b81c"
            ]
        ]
    },
    {
        "id": "df448801bb300f64",
        "type": "inject",
        "z": "01b1d63d2a62703b",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 600,
        "wires": [
            [
                "4b331a8047040a92"
            ]
        ]
    },
    {
        "id": "4b331a8047040a92",
        "type": "function",
        "z": "01b1d63d2a62703b",
        "name": "ForExpiresIn ",
        "func": "global.set(\"Token.ExpiresIn\", Date.now() + 120*1000)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "62224f8e802a8446",
        "type": "debug",
        "z": "01b1d63d2a62703b",
        "d": true,
        "name": "debug 216",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 320,
        "wires": []
    },
    {
        "id": "0b9c1fec0fe109d2",
        "type": "function",
        "z": "01b1d63d2a62703b",
        "name": "Prepare Request",
        "func": "msg.method = \"GET\";\nmsg.url = \"http://10.70.6.61:52431/api/User/ServiceUser\";\nmsg.headers = {};\nmsg.headers.accept = \"text/plain\";\nmsg.headers.Authorization = msg.Token\nmsg.headers[\"Content-Type\"] = \"application/json\"\nmsg.payload = {}\nmsg.payload.TokenExpirationDateTime = new Date().toISOString();\nmsg.payload.TokenLifeTime = 0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 320,
        "wires": [
            [
                "88fdc9205b548285"
            ]
        ]
    },
    {
        "id": "88fdc9205b548285",
        "type": "http request",
        "z": "01b1d63d2a62703b",
        "name": "GetServiceUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.70.6.61:52431/api/User/ServiceUser",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1120,
        "y": 320,
        "wires": [
            [
                "70bb73b02620323b"
            ]
        ]
    },
    {
        "id": "70bb73b02620323b",
        "type": "function",
        "z": "01b1d63d2a62703b",
        "name": "Prepare Response",
        "func": "if (msg.statusCode == 200) msg.ReqIsComp = true\nelse \n{\n    msg.ReqIsComp = false\n    msg.ErrorData = JSON.stringify(msg.headers)\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 320,
        "wires": [
            [
                "23bdf67a0f78c25a",
                "62224f8e802a8446"
            ]
        ]
    },
    {
        "id": "ac98aa5d58ca5965",
        "type": "inject",
        "z": "01b1d63d2a62703b",
        "name": "Ежедневно в 15:00",
        "props": [],
        "repeat": "",
        "crontab": "00 15 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 260,
        "y": 520,
        "wires": [
            [
                "6dbaf04806dc301c"
            ]
        ]
    },
    {
        "id": "bf9a29b09db79d20",
        "type": "comment",
        "z": "01b1d63d2a62703b",
        "name": "DTR",
        "info": "",
        "x": 90,
        "y": 20,
        "wires": []
    },
    {
        "id": "23bdf67a0f78c25a",
        "type": "MSSQL",
        "z": "01b1d63d2a62703b",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "LOG",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "INSERT INTO [dbExchange].[dbo].[tblCheckTokenIsValidLog] (dtCreatedAt, dtExpiresIn, szIsValid, szReqCompleted, szError)\r\nVALUES (GETUTCDATE(), '{{{StringExpiresIn}}}', '{{{TokenIsValid}}}', '{{{ReqIsComp}}}', '{{{ErrorData.message}}}' )",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1490,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "6dbaf04806dc301c",
        "type": "MSSQL",
        "z": "01b1d63d2a62703b",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Delete tblCheckTokenIsValidLog older 2 days",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "  DELETE FROM [dbExchange].[dbo].[tblCheckTokenIsValidLog] WHERE dtCreatedAt < (GETDATE() - 2)",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 570,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "2efaa79fe7cd505b",
        "type": "debug",
        "z": "3a2b12ac853420a3",
        "name": "debug 146",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 200,
        "wires": []
    },
    {
        "id": "8f796af734a53282",
        "type": "http response",
        "z": "3a2b12ac853420a3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 330,
        "y": 340,
        "wires": []
    },
    {
        "id": "1075c75e52ea1d93",
        "type": "http in",
        "z": "3a2b12ac853420a3",
        "name": "",
        "url": "/api/scanLog",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 280,
        "wires": [
            [
                "2efaa79fe7cd505b",
                "62c8db6c3ed82484",
                "8f796af734a53282"
            ]
        ]
    },
    {
        "id": "b772fdf923c9d038",
        "type": "function",
        "z": "3a2b12ac853420a3",
        "name": "TokenCheckFunction",
        "func": "msg.TokenCheck =\n{\n    Token : \"\",\n    UserId : null,\n    FullName : null,\n    Role : undefined,\n    Messages : [],\n    IsSuccess : false\n};\n \nvar GuidPattern = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/gi;\n \nif (\"req\" in msg)\n{\n    if (\"rawHeaders\" in msg.req)\n    {\n        var Token = msg.req.rawHeaders.find(el => el.includes(\"Bearer \"));\n        if (Token)\n        {\n            msg.TokenCheck.Token = Token.replace(\"Bearer \", \"\");\n            var TokenData = msg.TokenCheck.Token.split('.')[1];\n            if (TokenData)\n            {\n                var TokenParse = JSON.parse(Buffer.from(TokenData, 'base64').toString()); \n                var UserId = TokenParse?.gUserId;\n                if (UserId)\n                {\n                    if (GuidPattern.test(UserId)) msg.TokenCheck.UserId = UserId;\n                    else msg.TokenCheck.Messages.push(\"UserId должен быть типа Guid\");\n                }\n                else msg.TokenCheck.Messages.push(\"UserId в токене не найден\");\n                var FullName = TokenParse?.FullName;\n                if (FullName) {\n                    msg.TokenCheck.FullName = FullName;\n                }\n                else msg.TokenCheck.Messages.push(\"FullName в токене не найден\");\n                msg.TokenCheck.Role = TokenParse?.Role;\n            }\n            else msg.TokenCheck.Messages.push(\"Токен имеет неправильный формат\");\n        }\n        else msg.TokenCheck.Messages.push(\"Токен в заголовке запроса отсутствует\");\n    }\n    else msg.TokenCheck.Messages.push(\"Структура заголовка запроса отсутствует\");\n}\nelse msg.TokenCheck.Messages.push(\"Структура запроса отсутствует\");\n \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 280,
        "wires": [
            [
                "69729f2ed507c46d",
                "e27e4ca90355e169"
            ]
        ]
    },
    {
        "id": "69729f2ed507c46d",
        "type": "debug",
        "z": "3a2b12ac853420a3",
        "d": true,
        "name": "debug 148",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 360,
        "wires": []
    },
    {
        "id": "40c9f697ef8c98bf",
        "type": "comment",
        "z": "3a2b12ac853420a3",
        "name": "PSE / VI",
        "info": "Апи, по которому логируется сканирование в десктопе (пока только в нем на момент 2024-12-17)",
        "x": 100,
        "y": 140,
        "wires": []
    },
    {
        "id": "62c8db6c3ed82484",
        "type": "MSSQL",
        "z": "3a2b12ac853420a3",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "create LabelScanLog table",
        "outField": "mssql",
        "returnType": 0,
        "throwErrors": 1,
        "query": "use Logs\r\nIF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'LabelScanLog'))\r\nbegin\r\n\tcreate table dbo.LabelScanLog (\r\n\t\tId INT PRIMARY KEY IDENTITY,\r\n\t \tAction NVARCHAR(50) not null,\r\n\t \tUserId uniqueidentifier not null,\r\n\t\tUserName NVARCHAR(255) not null,\r\n\t\tUtcTimestamp DATETIME DEFAULT GETDATE()\tnot null,\r\n\t\tLabelData NVARCHAR(1024) null,\r\n\t\tStatus NVARCHAR(50) not null,\r\n\t\tErrorMessage NVARCHAR(max) null,\r\n\t\tDeviceName NVARCHAR(255) null\r\n\t\t)\r\nend;\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 400,
        "y": 280,
        "wires": [
            [
                "b772fdf923c9d038"
            ]
        ]
    },
    {
        "id": "e27e4ca90355e169",
        "type": "MSSQL",
        "z": "3a2b12ac853420a3",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Insert SomeNote",
        "outField": "",
        "returnType": 0,
        "throwErrors": 1,
        "query": "USE Logs\r\n\r\nINSERT INTO dbo.LabelScanLog\r\n      (\r\n            Action,\r\n            UserId,\r\n            UserName,\r\n            UtcTimestamp,\r\n            LabelData,\r\n            Status,\r\n            ErrorMessage,\r\n            DeviceName\r\n      )\r\n     VALUES\r\n      (\r\n            N'{{{payload.Message}}}',\r\n            N'{{{TokenCheck.UserId}}}',\r\n            N'{{{TokenCheck.FullName}}}',\r\n            GETDATE(),\r\n            N'{{{payload.LabelData}}}',\r\n            N'{{{payload.Status}}}',\r\n            N'{{{payload.ErrorMessage}}}',\r\n            N'{{{payload.DeviceName}}}'\r\n      )",
        "modeOpt": "",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 910,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "24f76afb1c36988b",
        "type": "http in",
        "z": "5247ec0d7c2c38bb",
        "name": "",
        "url": "/api/boards",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "487ef2c57521db72",
                "1c555a71381b18e6"
            ]
        ]
    },
    {
        "id": "487ef2c57521db72",
        "type": "function",
        "z": "5247ec0d7c2c38bb",
        "name": "function 24",
        "func": "msg.payload = {\n        \"TitleDescription\": \"Дополнительная информация по заказу:\",\n        \"TitleValue\": \"RU0930293788828\",\n        \"Items\": [{\n            \"SortOrder\": 1,\n            \"Name\": \"TotalPacks\",\n            \"Description\": \"Упаковок в Заказе\",\n            \"Value\": \"34000\"\n        },\n        {\n            \"SortOrder\": 2,\n            \"Name\": \"CurrentShiftPacks\",\n            \"Description\": \"Упаковок текущая смена\",\n            \"Value\": \"14000\"\n        }]\n    \n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 140,
        "wires": [
            [
                "83db8f7b1b14202c"
            ]
        ]
    },
    {
        "id": "83db8f7b1b14202c",
        "type": "http response",
        "z": "5247ec0d7c2c38bb",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 140,
        "wires": []
    },
    {
        "id": "1c555a71381b18e6",
        "type": "debug",
        "z": "5247ec0d7c2c38bb",
        "name": "debug 217",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 60,
        "wires": []
    },
    {
        "id": "12691eb0c30512f3",
        "type": "http in",
        "z": "1d4b73c50ceee9e5",
        "name": "",
        "url": "/api/redeclare",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 40,
        "wires": [
            [
                "079eda45f37626d9",
                "6a6216e640a21586"
            ]
        ]
    },
    {
        "id": "34b842a4b27a24a5",
        "type": "http response",
        "z": "1d4b73c50ceee9e5",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2360,
        "y": 60,
        "wires": []
    },
    {
        "id": "4ddc263fe8a20490",
        "type": "switch",
        "z": "1d4b73c50ceee9e5",
        "name": "CheckBatchesNotEmpty",
        "property": "Batches",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 180,
        "wires": [
            [
                "34b842a4b27a24a5"
            ],
            [
                "581fa6c2cfe5373d"
            ]
        ]
    },
    {
        "id": "01562fa8a84ab734",
        "type": "function",
        "z": "1d4b73c50ceee9e5",
        "name": "Prepare Outtake",
        "func": "msg.batch = msg.payload;\nmsg.payload = \n{\n    ProcessId: msg.Process[0].gId,\n    BatchId : msg.payload.gId,\n    OperationId: msg.Process[0].gOperationId,\n    StorageLocationId : msg.payload.StorageLocationId,\n    Quantity: msg.payload.nQuantity,\n    DateTime: new Date().toISOString(),\n    CompleteOuttake: true\n}\n\nmsg.url = \"http://localhost:52448/api/Operation/Outtake\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 180,
        "wires": [
            [
                "b83d5d2434abbb7a",
                "5ce5c52507541dfa"
            ]
        ]
    },
    {
        "id": "b83d5d2434abbb7a",
        "type": "http request",
        "z": "1d4b73c50ceee9e5",
        "name": "Outtake",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-type",
                "valueType": "other",
                "valueValue": ""
            },
            {
                "keyType": "other",
                "keyValue": "initiator-user",
                "valueType": "msg",
                "valueValue": "UserId"
            }
        ],
        "x": 2200,
        "y": 180,
        "wires": [
            [
                "e47ced9bbad77077",
                "52d784a6fbeb9ced"
            ]
        ]
    },
    {
        "id": "75bc0991ae3da56c",
        "type": "function",
        "z": "1d4b73c50ceee9e5",
        "name": "Prepare CreateBatch",
        "func": "msg.payload = \n{\n    OperationId: msg.Process[0].gOperationId,\n    MaterialId: msg.requestData.MaterialId,\n    StorageLocationId: msg.Batches[0].StorageLocationId,\n    DateTime: new Date().toISOString(),\n    DoNotCheckQuality:false,\n    BatchNumber: \"\",\n    SupplierNumber: \"\",\n    Comment: \"\",\n    ProcessId: msg.Process[0].gId,\n    NumberSap: \"\"\n};\n\nmsg.url = \"http://localhost:52448/api/Operation/Create\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 400,
        "wires": [
            [
                "bb8fd38ce9891333",
                "f1b34e5cbbda2dc5"
            ]
        ]
    },
    {
        "id": "6a6216e640a21586",
        "type": "function",
        "z": "1d4b73c50ceee9e5",
        "name": "Init",
        "func": "msg.requestData = msg.payload;\nmsg.UserId = msg.req.headers[\"initiator-user\"];\nif(msg.UserId == null)\n{\n    msg.UserId = msg.payload.UserId;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 90,
        "y": 180,
        "wires": [
            [
                "f399c635ca03b4e5"
            ]
        ]
    },
    {
        "id": "bb8fd38ce9891333",
        "type": "http request",
        "z": "1d4b73c50ceee9e5",
        "name": "Create",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-type",
                "valueType": "other",
                "valueValue": "application/json"
            },
            {
                "keyType": "other",
                "keyValue": "initiator-user",
                "valueType": "msg",
                "valueValue": "UserId"
            }
        ],
        "x": 990,
        "y": 400,
        "wires": [
            [
                "ad8dbaba53b0b1b7",
                "734e6e49df491657"
            ]
        ]
    },
    {
        "id": "da34faf48c1c58ad",
        "type": "function",
        "z": "1d4b73c50ceee9e5",
        "name": "PrepareIntake",
        "func": "msg.payload = \n{\n    OperationId: msg.payload.operationId,\n    MaterialId: msg.requestData.MaterialId,\n    StorageLocationId: msg.payload.storageLocation.id,\n    DateTime: new Date().toISOString(),\n    DoNotCheckQuality:false,\n    BatchNumber: msg.payload.batchNumber,\n    SupplierNumber: msg.payload.supplierNumber,\n    Comment: msg.payload.comment,\n    ProcessId: msg.payload.processId,\n    NumberSap: msg.payload.numberSAP,\n    Quantity: msg.Quantity[0].quantity,\n    BatchId: msg.payload.id\n};\n\nmsg.url = \"http://localhost:52448/api/Operation/Intake\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 400,
        "wires": [
            [
                "8d930dc79ac64085",
                "f1f5c0fb195d9cc1"
            ]
        ]
    },
    {
        "id": "8d930dc79ac64085",
        "type": "http request",
        "z": "1d4b73c50ceee9e5",
        "name": "Intake",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-type",
                "valueType": "other",
                "valueValue": "application/json"
            },
            {
                "keyType": "other",
                "keyValue": "initiator-user",
                "valueType": "msg",
                "valueValue": "UserId"
            }
        ],
        "x": 1850,
        "y": 400,
        "wires": [
            [
                "a48f779111ba40a4",
                "54376f02996ca0fc"
            ]
        ]
    },
    {
        "id": "5ce5c52507541dfa",
        "type": "debug",
        "z": "1d4b73c50ceee9e5",
        "name": "debug 219",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 340,
        "wires": []
    },
    {
        "id": "e47ced9bbad77077",
        "type": "debug",
        "z": "1d4b73c50ceee9e5",
        "name": "debug 220",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 340,
        "wires": []
    },
    {
        "id": "f1b34e5cbbda2dc5",
        "type": "debug",
        "z": "1d4b73c50ceee9e5",
        "name": "debug 221",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 700,
        "wires": []
    },
    {
        "id": "ad8dbaba53b0b1b7",
        "type": "debug",
        "z": "1d4b73c50ceee9e5",
        "name": "debug 222",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 700,
        "wires": []
    },
    {
        "id": "f1f5c0fb195d9cc1",
        "type": "debug",
        "z": "1d4b73c50ceee9e5",
        "name": "debug 223",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 720,
        "wires": []
    },
    {
        "id": "a48f779111ba40a4",
        "type": "debug",
        "z": "1d4b73c50ceee9e5",
        "name": "debug 224",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 720,
        "wires": []
    },
    {
        "id": "8f598bb1a92626a7",
        "type": "subflow:2d0368e857414e1b",
        "z": "1d4b73c50ceee9e5",
        "name": "",
        "x": 1620,
        "y": 180,
        "wires": [
            [
                "a2646fefc7fd0685"
            ]
        ]
    },
    {
        "id": "c22244d1fd7d87f4",
        "type": "function",
        "z": "1d4b73c50ceee9e5",
        "name": "ConcatBatchIds",
        "func": "\nmsg.batchIds = msg.Batches.map(x => \"'\"+x.gId+\"'\").join(',');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 400,
        "wires": [
            [
                "61a45616888e9cdf"
            ]
        ]
    },
    {
        "id": "079eda45f37626d9",
        "type": "debug",
        "z": "1d4b73c50ceee9e5",
        "name": "debug 225",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "034be61c249791ea",
        "type": "debug",
        "z": "1d4b73c50ceee9e5",
        "name": "debug 226",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 740,
        "wires": []
    },
    {
        "id": "14ceb2d622ee014e",
        "type": "json",
        "z": "1d4b73c50ceee9e5",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 1510,
        "y": 400,
        "wires": [
            [
                "da34faf48c1c58ad"
            ]
        ]
    },
    {
        "id": "52d784a6fbeb9ced",
        "type": "switch",
        "z": "1d4b73c50ceee9e5",
        "name": "CheckStatusCode",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2450,
        "y": 180,
        "wires": [
            [
                "a2646fefc7fd0685"
            ],
            [
                "9e826e2fac2dbff2"
            ]
        ]
    },
    {
        "id": "734e6e49df491657",
        "type": "switch",
        "z": "1d4b73c50ceee9e5",
        "name": "CheckStatusCode",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1190,
        "y": 400,
        "wires": [
            [
                "14ceb2d622ee014e"
            ],
            [
                "9e826e2fac2dbff2"
            ]
        ]
    },
    {
        "id": "9e826e2fac2dbff2",
        "type": "http response",
        "z": "1d4b73c50ceee9e5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2670,
        "y": 440,
        "wires": []
    },
    {
        "id": "54376f02996ca0fc",
        "type": "switch",
        "z": "1d4b73c50ceee9e5",
        "name": "CheckStatusCode",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2050,
        "y": 400,
        "wires": [
            [
                "34b842a4b27a24a5"
            ],
            [
                "9e826e2fac2dbff2"
            ]
        ]
    },
    {
        "id": "5dbaa0153fe6cb8b",
        "type": "catch",
        "z": "1d4b73c50ceee9e5",
        "name": "",
        "scope": [
            "e1d1c23013153fac",
            "61a45616888e9cdf",
            "f399c635ca03b4e5"
        ],
        "uncaught": false,
        "x": 2300,
        "y": 320,
        "wires": [
            [
                "8bd50f3b03c9aeb6"
            ]
        ]
    },
    {
        "id": "8bd50f3b03c9aeb6",
        "type": "function",
        "z": "1d4b73c50ceee9e5",
        "name": "SQL error",
        "func": "if(msg.message == null)\n{\n    msg.message = \"\";\n}\n\nmsg.message += \"Ошибка SQL ноды в НР\"\n\nmsg.statusCode=400;\nmsg.payload = {\n    Messages: { \"Russian\": [msg.message] },\n    ExceptionType: \"SolisoftInvalidOperationException\",\n    StatusCode: msg.statusCode\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2460,
        "y": 320,
        "wires": [
            [
                "9e826e2fac2dbff2"
            ]
        ]
    },
    {
        "id": "581fa6c2cfe5373d",
        "type": "function",
        "z": "1d4b73c50ceee9e5",
        "name": "CheckBatchesHasOneStorageLocation",
        "func": "msg.isSingleStorageLocation = msg.Batches.every((x) => x.StorageLocationId === msg.Batches[0].StorageLocationId);\n\nif (msg.isSingleStorageLocation == false)\n{\n    msg.statusCode=400;\nmsg.payload = {\n    Messages: { \"Russian\": [\"Хранилищ для смены материала больше чем 1.\"] },\n    ExceptionType: \"SolisoftInvalidOperationException\",\n    StatusCode: msg.statusCode\n}    \n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 180,
        "wires": [
            [
                "14f15c35e908cfe6"
            ]
        ]
    },
    {
        "id": "14f15c35e908cfe6",
        "type": "switch",
        "z": "1d4b73c50ceee9e5",
        "name": "CheckBatchesHasOneStorageLocation",
        "property": "isSingleStorageLocation",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1320,
        "y": 180,
        "wires": [
            [
                "8f598bb1a92626a7"
            ],
            [
                "9e826e2fac2dbff2"
            ]
        ]
    },
    {
        "id": "a2646fefc7fd0685",
        "type": "loop",
        "z": "1d4b73c50ceee9e5",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "Batches",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 1810,
        "y": 180,
        "wires": [
            [
                "c22244d1fd7d87f4"
            ],
            [
                "01562fa8a84ab734"
            ]
        ]
    },
    {
        "id": "e1d1c23013153fac",
        "type": "MSSQL",
        "z": "1d4b73c50ceee9e5",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "GetBatches",
        "outField": "Batches",
        "returnType": 0,
        "throwErrors": 1,
        "query": "\r\n select top 10 b.* from (SELECT *\r\n  FROM [ProductionManagementRunTimeDb].[dbo].[tblProcess]\r\n  where gId = '{{{requestData.ProcessId}}}') p\r\n  join [ProductionManagementRunTimeDb].[dbo].[tblOperationProduceStorageLocation] csl on csl.gOperationId = p.gOperationId\r\n  join [BatchManagementDb].[dbo].[tblStorageLocation] sl on sl.gId = csl.gStorageLocationId\r\n                                                            and csl.gEquipmentId = p.gEquipmentId\r\n  join [BatchManagementDb].[dbo].[tblBatch] b on b.StorageLocationId = sl.gId \r\n\t\t\t\t\t\t\t\t\t\t\t\t and b.bIsCompleted = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t and nQuantity != 0\r\n order by b.nKey asc",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 430,
        "y": 180,
        "wires": [
            [
                "4ddc263fe8a20490"
            ]
        ]
    },
    {
        "id": "61a45616888e9cdf",
        "type": "MSSQL",
        "z": "1d4b73c50ceee9e5",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "GetQuantity",
        "outField": "Quantity",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT abs(isnull(sum([nQuantity]),0)) as N'quantity'\r\nFROM [BatchManagementDb].[dbo].[tblBatchEvent]\r\nWHERE gProcessId='{{{requestData.ProcessId}}}'\r\n  and nType = 200",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 310,
        "y": 400,
        "wires": [
            [
                "75bc0991ae3da56c",
                "034be61c249791ea"
            ]
        ]
    },
    {
        "id": "f399c635ca03b4e5",
        "type": "MSSQL",
        "z": "1d4b73c50ceee9e5",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "GetProcess",
        "outField": "Process",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT *\r\n  FROM [ProductionManagementRunTimeDb].[dbo].[tblProcess]\r\n  where gId = '{{{requestData.ProcessId}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 250,
        "y": 180,
        "wires": [
            [
                "e1d1c23013153fac"
            ]
        ]
    },
    {
        "id": "7798071a1ddaf638",
        "type": "http in",
        "z": "e5230b0e29472dd4",
        "name": "",
        "url": "/api/process/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "4c805bdaafb1cda6",
                "0515371f424472a9"
            ]
        ]
    },
    {
        "id": "6b961d6d71dbc99c",
        "type": "http response",
        "z": "e5230b0e29472dd4",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 1140,
        "y": 860,
        "wires": []
    },
    {
        "id": "ea0a8111e3cfbd2b",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "function 2",
        "func": "const processId = msg.req.params.id;\nconst headers = msg.req.headers;\nconst tareWork = msg.req.headers.tarework === 'true';\nconst outsideRecipe = msg.req.headers.outsiderecipe === 'true';\nconst controlPointRaw = msg.req.headers.controlpoint || '';\nconst controlPoint = controlPointRaw != '' ? controlPointRaw.split(';') : [];\nconst controlPoints = controlPoint.length > 0;\nmsg.token = msg.req.headers.authorization || '';\n\n\nmsg.url = `${ msg.s.url }:52449/api/Process/${processId}`;\nmsg.headers = headers;\n\nmsg.headers = headers;\nmsg.processId = processId;\n\nmsg.options = {};\n\nmsg.options.tareWork = tareWork;\nmsg.options.outsideRecipe = outsideRecipe;\nmsg.options.controlPoint = controlPoint;\nmsg.options.controlPoints = controlPoints;\n\nmsg.process = {};\nmsg.process.checklists = {};\nmsg.process.checklists = {\n    options: [],\n    checklist: [],\n    inspectionLot: [],\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 80,
        "wires": [
            [
                "fc782d3e89c6a6ec"
            ]
        ]
    },
    {
        "id": "080cd27ed2304a7f",
        "type": "http request",
        "z": "e5230b0e29472dd4",
        "name": "Process",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 820,
        "y": 240,
        "wires": [
            [
                "2d711bf5ad39b7ac"
            ]
        ]
    },
    {
        "id": "07e104e4a2e5d52f",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "PrepReq Batches",
        "func": "/** URL */\nmsg.url = `${msg.s.url}:52448/api/Batch/byEventProcess?ProcessId=${msg.processId}`;\n\n/** HEADERS */\nmsg.headers = {\n    authorization: msg.token,\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 420,
        "wires": [
            [
                "4d1663bcf27ed6aa"
            ]
        ]
    },
    {
        "id": "4d1663bcf27ed6aa",
        "type": "http request",
        "z": "e5230b0e29472dd4",
        "name": "BatchEvents",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 830,
        "y": 420,
        "wires": [
            [
                "bf12af3823b72a23"
            ]
        ]
    },
    {
        "id": "bf12af3823b72a23",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "Cleanup Batches data",
        "func": "const batchEvents = msg.payload;\n\n/** Данные вкладки Материальный учет */\nlet accounting = {\n    consume: [],\n    produce: [],\n};\n\n/** Проходим по всем записям */\nbatchEvents.forEach(x => {\n    /** Consume */\n    let c = 0;\n    /** Produse */\n    let p = 0;\n\n    x.batchEvents\n        .filter(b => b.processId === msg.processId) /** Фильтруем по идентификатору Процесса */\n        .forEach(b => {\n            if (b.type == 200) {\n                c += b.quantity;\n            } else {\n                p += b.quantity;\n            }\n        });\n        let quantity = 0;\n        /** Цель Выпуск или Потребление */\n        let target = '';\n        /** Определяем цель */\n        if (c != 0) {\n            quantity = c;\n            target = 'c';\n        } else if (p != 0) {\n            quantity = p;\n            target = 'p';\n        }\n        if (quantity != 0) {\n            /** Формируем данные */\n            let item = {\n                id: x.id,\n                number: x.number,\n                numberSAP: x.numberSAP,\n                isCompleted: x.isCompleted,\n                materialId: x.materialId,\n                quantity: quantity,\n            };\n            /** Добавляем в целевой массив */\n            if (target === 'c') {\n                accounting.consume.push(item);\n            } else {\n                accounting.produce.push(item);\n            }\n        }\n        \n});\n\n/** Добавляем данные в объект процесса */\nmsg.process.accounting = accounting;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 420,
        "wires": [
            [
                "dfd38f54ac5cf0a9"
            ]
        ]
    },
    {
        "id": "4444e06d784154c0",
        "type": "http request",
        "z": "e5230b0e29472dd4",
        "name": "Operation",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 820,
        "y": 300,
        "wires": [
            [
                "75125138b9df11e5"
            ]
        ]
    },
    {
        "id": "388feec3c5b2bdf9",
        "type": "http request",
        "z": "e5230b0e29472dd4",
        "name": "Batches",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 820,
        "y": 560,
        "wires": [
            [
                "7041db080f333b03"
            ]
        ]
    },
    {
        "id": "dfd38f54ac5cf0a9",
        "type": "switch",
        "z": "e5230b0e29472dd4",
        "name": "TareWork is Enabled",
        "property": "options.tareWork",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 180,
        "y": 500,
        "wires": [
            [
                "886a73f3566e8b76"
            ],
            [
                "d01b86dc92dea974"
            ]
        ]
    },
    {
        "id": "886a73f3566e8b76",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "PrepReq StorageLocations",
        "func": "/** URL */\nmsg.url = `${msg.s.url}:52448/api/StorageLocation?HasUncompletedBathes=false&StorageLocationTypes=1&StorageLocationTypes=2`;\n\n/** HEADERS */\nmsg.headers = {\n    authorization: msg.token,\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 500,
        "wires": [
            [
                "625c108664df2702"
            ]
        ]
    },
    {
        "id": "625c108664df2702",
        "type": "http request",
        "z": "e5230b0e29472dd4",
        "name": "StorageLocations",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 850,
        "y": 500,
        "wires": [
            [
                "186cf3ddfd832aec"
            ]
        ]
    },
    {
        "id": "186cf3ddfd832aec",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "Cleanup Storage Location data",
        "func": "const storageLocations = msg.payload;\n\n/** Хранилища  */\nconst units = msg.units;\n\n/** Плоский массив идентификаторов оборотной тары */\nlet a = [];\n\n/** Массив хранилищ и оборотной тары (дерево)\n * id { string } - идентификатор хранилища\n * children { string[] } - список оборотной тары в данном хранилище\n */\nlet tree = [];\n\n/** Формируем массив с хранилищами */\nunits.forEach(x => {\n    tree.push({\n        id: x,\n        children: [],\n    })\n})\n\n/** Проходим по списку оборотной тары */\nstorageLocations.forEach(x => {\n    /** Если нет родительского идентификатора - пропускаем */\n    if (x.parentStorageLocationId === null) return;\n    /** Родительский идентификатор совпадает с одним из хранилищ */\n    if (units.includes(x.parentStorageLocationId.toLowerCase())) {\n        /** Добавляем в плоский список */\n        a.push(x.id);\n        /** Добавляем в дерево */\n        tree.forEach(t => {\n            if (t.id == x.parentStorageLocationId) {\n                t.children.push(x.id);\n            }\n        })\n    }\n});\n\n/** Добавляем данные в объект процесса */\nmsg.process.tree = tree;\n\n/** Обновляем список */\nmsg.units = [...a, ...units];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 500,
        "wires": [
            [
                "d01b86dc92dea974"
            ]
        ]
    },
    {
        "id": "7041db080f333b03",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "Cleanup Batches data",
        "func": "msg.process.batches = [];\n\n/** Массив партий */\nlet batches = [];\n\n/** Флаг подсветки материала вне спецификации */\nconst check = msg.options.outsideRecipe;\n\n/** Массив идентификаторов  */\nlet recipeMaterials = [];\n\n/** Формируем массив идентификаторов из спецификаций потребления */\nif (check) {\n    recipeMaterials = msg.process.specifications.consume\n        .filter(x => x.itemClass == 1)\n        .map(x => x.materialId);\n}\n\n/** Заполняем массив партий */\nmsg.payload.forEach(x => {\n    batches.push({\n        id: x.id,\n        materialId: x.materialId,\n        quantity: x.quantity,\n        storageLocationId: x.storageLocation.id,\n        outsideRecipe: check && !recipeMaterials.includes(x.materialId),\n    });\n});\n\n/** Добавляем данные в объект процесса */\nmsg.process.batches = batches;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 560,
        "wires": [
            [
                "2459a0516e8e0913"
            ]
        ]
    },
    {
        "id": "2d711bf5ad39b7ac",
        "type": "switch",
        "z": "e5230b0e29472dd4",
        "name": "Token Expired",
        "property": "payload.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1000,
        "y": 180,
        "wires": [
            [
                "7ad09b113bd2ad8c"
            ],
            [
                "c800a4c0af21000a"
            ]
        ]
    },
    {
        "id": "9f63c562a4cb5b5e",
        "type": "http request",
        "z": "e5230b0e29472dd4",
        "name": "ProductionOrder",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 840,
        "y": 360,
        "wires": [
            [
                "c45a80e9849a8631"
            ]
        ]
    },
    {
        "id": "4c805bdaafb1cda6",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "Settings",
        "func": "msg.s = {\n    /** URL сервера */\n    url: 'http://10.70.6.61',\n    /** С какого дня загружать партии в буферах */\n    batchCreatedTimeFrom: 7,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 80,
        "wires": [
            [
                "ea0a8111e3cfbd2b"
            ]
        ]
    },
    {
        "id": "2459a0516e8e0913",
        "type": "switch",
        "z": "e5230b0e29472dd4",
        "name": "UserTaskId filled",
        "property": "process.userTaskId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 160,
        "y": 660,
        "wires": [
            [
                "358bfa94cce6071f"
            ],
            [
                "cf887f285df1efb8"
            ]
        ]
    },
    {
        "id": "358bfa94cce6071f",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "PrepReq Params",
        "func": "/** URL */\nmsg.url = `${msg.s.url}:5280/api/UserTasks/Parent/${msg.process.userTaskId}/10`;\n\n/** HEADERS */\nmsg.headers = {\n    authorization: msg.token,\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 660,
        "wires": [
            [
                "fa60638eb42aaccf"
            ]
        ]
    },
    {
        "id": "fa60638eb42aaccf",
        "type": "http request",
        "z": "e5230b0e29472dd4",
        "name": "ChecklistsByProcess",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 860,
        "y": 660,
        "wires": [
            [
                "51dce689e2454ec2"
            ]
        ]
    },
    {
        "id": "51dce689e2454ec2",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "Cleanup Checklist data",
        "func": "const data = msg.payload;\n\nconst params = data\n    .filter(x => ('WorkflowName' in x.ownerData.stringValues) && (x.ownerType.toLowerCase() == 'checklist'))\n    .map(x => { \n        const item = x.ownerData.stringValues;\n        return {\n            id: item.Id.toLowerCase(),\n            inspectionMeasurementId: item.InspectionMeasurementId.toLowerCase(),\n            number: item.Number,\n            state: x.state,\n            createdAt: x.createdAt,\n        };\n    });\n\nmsg.process.checklists = {\n    params: params,\n    inspectionLots: [],\n    checklists: [],\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 660,
        "wires": [
            [
                "cf887f285df1efb8"
            ]
        ]
    },
    {
        "id": "0560f1359c52bdb9",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "PrepReq Checklists",
        "func": "/** URL */\nmsg.url = `${msg.s.url}:5280/api/UserTasks/Parent/${ msg.process.operation.userTaskId }/10`;\n\n/** HEADERS */\nmsg.headers = {\n    authorization: msg.token,\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 740,
        "wires": [
            [
                "309445a239163996"
            ]
        ]
    },
    {
        "id": "309445a239163996",
        "type": "http request",
        "z": "e5230b0e29472dd4",
        "name": "ChecklistsByOperation",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 860,
        "y": 740,
        "wires": [
            [
                "4a73e2fcf279b1ad"
            ]
        ]
    },
    {
        "id": "4a73e2fcf279b1ad",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "TODO",
        "func": "const checklist = msg.payload;\n\nmsg.process.checklists.checklists = checklist;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 740,
        "wires": [
            [
                "a1086bbf484efcd5"
            ]
        ]
    },
    {
        "id": "cf887f285df1efb8",
        "type": "switch",
        "z": "e5230b0e29472dd4",
        "name": "controlPoints",
        "property": "options.controlPoints",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 740,
        "wires": [
            [
                "0560f1359c52bdb9"
            ],
            [
                "a1086bbf484efcd5"
            ]
        ]
    },
    {
        "id": "2bd49608d163bd2c",
        "type": "http request",
        "z": "e5230b0e29472dd4",
        "name": "InspectionLots",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 840,
        "y": 800,
        "wires": [
            [
                "289ebb0638fa6c62"
            ]
        ]
    },
    {
        "id": "a1086bbf484efcd5",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "PrepReq InspectionLots",
        "func": "/** URL */\nmsg.url = `${msg.s.url}:52448/api/InspectionLot?OperationIds=${ msg.process.operation.id }`;\n\n/** HEADERS */\nmsg.headers = {\n    authorization: msg.token,\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 800,
        "wires": [
            [
                "2bd49608d163bd2c"
            ]
        ]
    },
    {
        "id": "289ebb0638fa6c62",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "Cleanup InspectionLot data",
        "func": "const inspLotsRaw = msg.payload;\n\nconst inspLots = inspLotsRaw.map(x => {\n    return {\n        id: x.id,\n        batchId: x.batchId,\n        inspectionMeasurementId: x.inspectionMeasurementId,\n        createdAt: x.createdAt,\n        fullNumber: x.fullNumber,\n        externalLink: x.externalLink,\n    };\n});\n\nmsg.process.checklists.inspectionLots = inspLots;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 800,
        "wires": [
            [
                "2a28b52786531cd6",
                "6d4df41dae7ea338"
            ]
        ]
    },
    {
        "id": "fc782d3e89c6a6ec",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "PrepReq Process",
        "func": "/** URL */\nmsg.url = `${msg.s.url}:52449/api/Process/${ msg.processId }`;\n\n/** HEADERS */\nmsg.headers = {\n    authorization: msg.token,\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 240,
        "wires": [
            [
                "080cd27ed2304a7f"
            ]
        ]
    },
    {
        "id": "d6f73a838d16a5de",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "PrepReq Operation",
        "func": "/** URL */\nmsg.url = `${msg.s.url}:52449/api/Operation/${ msg.process.operationId }`;\n\n/** HEADERS */\nmsg.headers = {\n    authorization: msg.token,\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 300,
        "wires": [
            [
                "4444e06d784154c0"
            ]
        ]
    },
    {
        "id": "c800a4c0af21000a",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "Cleanup Process data",
        "func": "const proc = msg.payload;\n\n// Спецификации. Оставляем только нужные данные\nconst specifications = proc.specifications.map(x => {\n    return {\n        /** Идентификатор спецификации */\n        id: x.id,\n        /** Идентификатор материала */\n        materialId: x.materialId,\n        /** Планируемое кол-во */\n        amount: x.amount,\n        /** Максимальное кол-во */\n        maxAmount: x.maxAmount,\n        /** Минимальное кол-во */\n        minAmount: x.minAmount,\n        /** Признак: Потребление / Выпуск */\n        itemClass: x.itemClass,\n    };\n});\n\nlet spec = {\n    produce: [],\n    consume: [],\n};\n\nspecifications.forEach(x => {\n    if (x.itemClass == 1) {\n        spec.consume.push(x);\n    } else {\n        spec.produce.push(x);\n    }\n});\n\n// Данные по процессу\nmsg.process = {\n    /** Идентификатор Процесса */\n    id: proc.id,\n    /** Текущий статус */\n    step: proc.step,\n    /** Идентификатор юзертаски */\n    userTaskId: proc.userTaskId,\n    /** Идентификатор Операции */\n    operationId: proc.operationId,\n    /** Ожидаемое кол-во материала */\n    processAmount: proc.processAmount,\n    /** Номер процесса */\n    number: proc.number,\n    /** Идентификатор БОМа */\n    billOfMaterialId: proc.billOfMaterialId,\n    /** Спецификации */\n    specifications: spec,\n    /** Идентификатор оборудования */\n    equipmentId: proc.equipmentId,\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 240,
        "wires": [
            [
                "d6f73a838d16a5de"
            ]
        ]
    },
    {
        "id": "7ad09b113bd2ad8c",
        "type": "http response",
        "z": "e5230b0e29472dd4",
        "name": "Token Expired",
        "statusCode": "401",
        "headers": {},
        "x": 1260,
        "y": 180,
        "wires": []
    },
    {
        "id": "75125138b9df11e5",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "Cleanup Operation data",
        "func": "const operation = msg.payload;\n\n/** Добавляем данные операции */\nmsg.process.operation = {\n    /** Идентификатор операции */\n    id: operation.id,\n    /** Номер операции */\n    number: operation.number,\n    /** Идентификатор шаблона операции */\n    operationTemplateId: operation.operationTemplateId,\n    /** Идентификатор Производственного заказа */\n    productionOrderId: operation.productionOrderId,\n    /** Идентификатор юзертаски */\n    userTaskId: operation.userTaskId,\n};\n\n/** Хранилища потребления и выпуска */\nlet produceStorageUnits = [];\nlet consumeStorageUnits = [];\n\n/** Берем только идентификаторы */\nproduceStorageUnits = operation.operationProduceStorageUnits.map(x => { return x.storageLocationId });\nconsumeStorageUnits = operation.operationConsumeStorageUnits.map(x => { return x.storageLocationId });\n\n/** Удаляем дубликаты */\nlet units = {\n    produceStorageUnits: Array.from(new Set(produceStorageUnits)),\n    consumeStorageUnits: Array.from(new Set(consumeStorageUnits)),\n};\n\n/** Добавляем данные в объект процесса */\nmsg.process.units = units;\n\n/** Все хранилища */\nmsg.units = [...units.produceStorageUnits, ...units.consumeStorageUnits];\nmsg.units = Array.from(new Set(msg.units));\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 300,
        "wires": [
            [
                "3b78c6016a65e372"
            ]
        ]
    },
    {
        "id": "3b78c6016a65e372",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "PrepReq Production Order",
        "func": "/** URL */\nmsg.url = `${ msg.s.url }:52449/api/ProductionOrder/${ msg.process.operation.productionOrderId }`;\n\n/** HEADERS */\nmsg.headers = {\n    authorization: msg.token,\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 360,
        "wires": [
            [
                "9f63c562a4cb5b5e"
            ]
        ]
    },
    {
        "id": "c45a80e9849a8631",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "Cleanup Operation data",
        "func": "const productionOrder = msg.payload;\n\n/** Добавляем номер Производственного заказа в объект процесса */\nmsg.process.productionOrder = {\n    id: productionOrder.id,\n    number: productionOrder.number,\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 360,
        "wires": [
            [
                "07e104e4a2e5d52f"
            ]
        ]
    },
    {
        "id": "d01b86dc92dea974",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "PrepReq Batches",
        "func": "const days = msg.s.batchCreatedTimeFrom;\nconst units = msg.units;\n\n/** Формируем строку даты с которой загружать партии */\nconst date = new Date(Date.now() - days * 24 * 60 * 60 * 1000).toISOString();\n\n/** Переменная параметров запроса */\nlet uri = '';\n\n/** Проходим по хранилищам (и SL, если включено), дополняем строку параметров */\nunits.forEach(x => {\n    uri += `StorageLocationIds=${ x }&`;\n});\n\n/** Дополняем строку параментров \n * Uncompleted=true - незавершенные включить\n * Completed=false - завершенные исключить\n * IncludeEvents=false - исключить данные эвентов\n * CreatedTimeFrom=${date} - ограничения по дате создания\n */\nuri += `Uncompleted=true&Completed=false&IncludeEvents=false&CreatedTimeFrom=${ date }`;\n\n/** URL */\nmsg.url = `${msg.s.url}:52448/api/Batch?${ uri }`;\n\n/** HEADERS */\nmsg.headers = {\n    authorization: msg.token,\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 560,
        "wires": [
            [
                "388feec3c5b2bdf9"
            ]
        ]
    },
    {
        "id": "d668deec18093c01",
        "type": "comment",
        "z": "e5230b0e29472dd4",
        "name": "TODO ->",
        "info": "",
        "x": 200,
        "y": 420,
        "wires": []
    },
    {
        "id": "d323d2c80982acea",
        "type": "change",
        "z": "e5230b0e29472dd4",
        "name": "ProcessToResponse",
        "rules": [
            {
                "t": "move",
                "p": "process",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 860,
        "wires": [
            [
                "6b961d6d71dbc99c"
            ]
        ]
    },
    {
        "id": "2a28b52786531cd6",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "Buffers",
        "func": "let consumeBuffer = [];\nlet produceBuffer = [];\n    \nlet tree = msg.process.tree;\n\nconst batches = msg.process.batches;\n\nconst updatedTree = tree.map(x => {\n    x.batches = batches.filter(b => b.storageLocationId == x.id);\n\n    let newChildren = [];\n\n    x.children.forEach(c => {\n        const obj = {\n            id: c,\n            batches: batches.filter(b => b.storageLocationId == c)\n        };\n        newChildren.push(obj);\n    })\n\n    return {\n        ...x,\n        children: newChildren,\n    };\n});\n\nconst units = msg.process.units;\n\nunits.consumeStorageUnits.forEach(x => {\n    const zone = updatedTree.find(t => t.id == x);\n    consumeBuffer.push(zone);\n});\n\nunits.produceStorageUnits.forEach(x => {\n    const zone = updatedTree.find(t => t.id == x);\n    produceBuffer.push(zone);\n});\n\nmsg.process.buffers = {\n    consume: consumeBuffer,\n    produce: produceBuffer,\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 860,
        "wires": [
            [
                "fcc1646a8e910bbf"
            ]
        ]
    },
    {
        "id": "fcc1646a8e910bbf",
        "type": "function",
        "z": "e5230b0e29472dd4",
        "name": "Cleanup",
        "func": "delete msg.process.units;\ndelete msg.process.tree;\ndelete msg.process.batches;\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 860,
        "wires": [
            [
                "d323d2c80982acea"
            ]
        ]
    },
    {
        "id": "6d4df41dae7ea338",
        "type": "debug",
        "z": "e5230b0e29472dd4",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 740,
        "wires": []
    },
    {
        "id": "0515371f424472a9",
        "type": "debug",
        "z": "e5230b0e29472dd4",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 40,
        "wires": []
    },
    {
        "id": "bfe68d92510f7cf8",
        "type": "comment",
        "z": "e5230b0e29472dd4",
        "name": "TODO ->",
        "info": "",
        "x": 260,
        "y": 500,
        "wires": []
    },
    {
        "id": "f95aee516ee749b8",
        "type": "http in",
        "z": "c2cffd502b9dd43b",
        "name": "Получение всех групп параметров",
        "url": "/groups",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 200,
        "wires": [
            [
                "4801b2d856944348"
            ]
        ]
    },
    {
        "id": "24ba22fb6fa75330",
        "type": "http in",
        "z": "c2cffd502b9dd43b",
        "name": "Получение указанной группы параметров",
        "url": "/group/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 320,
        "wires": [
            [
                "ed53451cc6fafa7c",
                "47e1beee7d0b4461"
            ]
        ]
    },
    {
        "id": "b7758272933cd4c6",
        "type": "http in",
        "z": "c2cffd502b9dd43b",
        "name": "Создание группы параметров",
        "url": "/",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 460,
        "wires": [
            [
                "c731a6bb4895ae50",
                "a83ae14ff61d3e8c",
                "b5d7f5e282103dc8"
            ]
        ]
    },
    {
        "id": "c17c81760a342b6e",
        "type": "http in",
        "z": "c2cffd502b9dd43b",
        "name": "Удаление группы параметров",
        "url": "/:id",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 560,
        "wires": [
            [
                "ac3dfea113126ef4"
            ]
        ]
    },
    {
        "id": "f07b22dccb54794e",
        "type": "http in",
        "z": "c2cffd502b9dd43b",
        "name": "Получение полного списка типов таргетов",
        "url": "/target_types",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 620,
        "wires": [
            [
                "5552708e5376a248"
            ]
        ]
    },
    {
        "id": "6d7714e68f4b7f70",
        "type": "inject",
        "z": "c2cffd502b9dd43b",
        "name": "Инициализация",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "object",
        "payloadType": "date",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "94a9c9ba5f562bdf"
            ]
        ]
    },
    {
        "id": "4801b2d856944348",
        "type": "subflow:6bff06d7846d79c6",
        "z": "c2cffd502b9dd43b",
        "name": "",
        "x": 500,
        "y": 200,
        "wires": [
            [
                "64b8ea747f146902"
            ]
        ]
    },
    {
        "id": "0659da6a146c4139",
        "type": "http response",
        "z": "c2cffd502b9dd43b",
        "name": "Возврат коллекции групп",
        "statusCode": "",
        "headers": {},
        "x": 1430,
        "y": 200,
        "wires": []
    },
    {
        "id": "ed53451cc6fafa7c",
        "type": "subflow:6bff06d7846d79c6",
        "z": "c2cffd502b9dd43b",
        "name": "",
        "x": 500,
        "y": 320,
        "wires": [
            [
                "e9e11507bc6a8a8d"
            ]
        ]
    },
    {
        "id": "c731a6bb4895ae50",
        "type": "subflow:6bff06d7846d79c6",
        "z": "c2cffd502b9dd43b",
        "name": "",
        "x": 500,
        "y": 460,
        "wires": [
            [
                "aedf9383d846f80e",
                "92d606e6c297f698",
                "51e52fbd15a2d57a"
            ]
        ]
    },
    {
        "id": "ac3dfea113126ef4",
        "type": "subflow:6bff06d7846d79c6",
        "z": "c2cffd502b9dd43b",
        "name": "",
        "x": 500,
        "y": 560,
        "wires": [
            [
                "15904984839e8c4c"
            ]
        ]
    },
    {
        "id": "5552708e5376a248",
        "type": "subflow:6bff06d7846d79c6",
        "z": "c2cffd502b9dd43b",
        "name": "",
        "x": 500,
        "y": 620,
        "wires": [
            [
                "6c0bac2e46604e8c"
            ]
        ]
    },
    {
        "id": "b2923c6e992a5d7e",
        "type": "http response",
        "z": "c2cffd502b9dd43b",
        "name": "Возврат группы",
        "statusCode": "",
        "headers": {},
        "x": 2940,
        "y": 240,
        "wires": []
    },
    {
        "id": "18b2cfac748de5fc",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "Обработка результатов",
        "func": "class Target{\n    constructor(id, type_id, name, description){\n        this.id = id;\n        this.type_id = type_id;\n        this.name = name;\n        this.description = description;\n    }\n}\n\nclass Combination{\n    constructor(id, group_id, targets, values){\n        this.id = id;\n        this.group_id = group_id;\n\n        this.targets = targets;\n        this.values = values;\n    }\n}\n\nclass Group {\n    constructor(id, name, created, description, lock, user_group_id, types, parameters, combinations) {\n        this.id = id;\n        this.created = created;\n        this.name = name;\n        this.description = description;\n        this.lock = lock;\n        this.user_group_id = user_group_id;\n        this.types = types;\n        this.parameters = parameters;\n        this.combinations = combinations;\n    }\n}\n\nlet counted = [];\nlet types = [];\nlet combinations = [];\nfor (const comb_id of msg.body.conbinationsData.keys()){\n    const data = msg.body.conbinationsData.get(comb_id);\n    let targets = [];\n    for (const row of data){\n        targets.push(new Target(\n            row.combination_target_id,\n            row.combination_type_id,\n            msg.targets.get(row.combination_target_id).name,\n            msg.targets.get(row.combination_target_id).description));\n    \n        if(!types.includes(row.combination_type_id)){\n            types.push(row.combination_type_id);\n        }\n    }\n\n    combinations.push(new Combination(comb_id, msg.body.groupData.group_id, targets, msg.body.values[comb_id]));\n}\n\nlet group = msg.body.groupData;\nmsg = {\n        payload: new Group(\n            group.group_id,\n            group.group_name,\n            group.group_created,\n            group.group_description,\n            group.group_lock,\n            group.group_group_id,\n            types,\n            msg.body.parameters,\n            combinations),\n        res: msg.res\n    };\n    \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2730,
        "y": 240,
        "wires": [
            [
                "b2923c6e992a5d7e",
                "7c9b5c3cc8f62b56",
                "01010778fa0e19f1"
            ]
        ]
    },
    {
        "id": "8e96ecf32222d742",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "Обработка результатов",
        "func": "class Group{\n    constructor(id, name, description, lock, user_group_id, types, created){\n        this.id = id;\n        this.name = name;\n        this.description = description;\n        this.lock = lock;\n        this.user_group_id = user_group_id;\n        this.types = types;\n        this.created = created;\n    }\n}\n\nfunction get_types(collection) {\n    let id = collection[0].group_id;\n    let result = []\n    collection.forEach(item => {\n        if (!result.includes(item.combination_type_id) && item.group_id === id && item.combination_type_id !== undefined && item.combination_type_id !== null) {\n            result.push(item.combination_type_id);\n        }\n    });\n\n    return result;\n}\n\nlet grouped = []\nif (Array.isArray(msg.payload)) {\n    if (msg.payload.length === 0){\n        msg.payload = [];\n        return msg;\n    }\n\n    let current = msg.payload[0].group_id;\n    let group = [];\n    msg.payload.forEach(item => {\n        if (item.group_id === current){\n            group.push(item);\n        } else {\n            if (group.length !== 0) {\n                grouped.push(group);\n            }\n            \n            current = item.group_id;\n            group = [item];\n        }\n    });\n\n    if (group.length !== 0) {\n        grouped.push(group);\n    }\n} else {\n    grouped.push(msg.payload);\n}\n\nmsg.payload = []\ngrouped.forEach(item =>{\n    if (Array.isArray(item)){\n        msg.payload.push(new Group(item[0].group_id, item[0].group_name, item[0].group_description, item[0].group_lock, item[0].group_group_id, get_types(item), item[0].group_created));\n    } else {\n        msg.payload.push(new Group(item.group_id, item.group_name, item.group_description, item.group_lock, item.group_group_id, [item.combination_type_id], item.group_created));\n    }\n})\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 200,
        "wires": [
            [
                "0659da6a146c4139"
            ]
        ]
    },
    {
        "id": "dddd40535d40d062",
        "type": "http response",
        "z": "c2cffd502b9dd43b",
        "name": "Возврат результата выполнения запроса.",
        "statusCode": "",
        "headers": {},
        "x": 1230,
        "y": 560,
        "wires": []
    },
    {
        "id": "15904984839e8c4c",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "Подготовка запроса",
        "func": "msg.payload = 'DECLARE @id uniqueidentifier = \\'' + msg.req.params.id + '\\'\\r\\n DELETE FROM [Universal].[dbo].[tblParameterGroup] WHERE [gId] = @id'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 560,
        "wires": [
            [
                "b429a407b3a85eb3"
            ]
        ]
    },
    {
        "id": "c02b1456d3776ef3",
        "type": "http response",
        "z": "c2cffd502b9dd43b",
        "name": "Возврат результата выполнения запроса.",
        "statusCode": "",
        "headers": {},
        "x": 1290,
        "y": 620,
        "wires": []
    },
    {
        "id": "f720f1bfa5ad4622",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "Переименование полей",
        "func": "if (Array.isArray(msg.payload)){\n    let result = [];\n    msg.payload.forEach(item => result.push({ id: item.gId, name: item.szName }));\n    msg.payload = result;\n} else {\n    msg.payload = { id: msg.payload.gId, name: msg.payload.szName };\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 620,
        "wires": [
            [
                "c02b1456d3776ef3"
            ]
        ]
    },
    {
        "id": "9373b9c5b8fb6eb6",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "Размещение результатов",
        "func": "class Parametr {\n    constructor(id, group_id, name, description, from, to, precision, numDef, strDef, dateDef) {\n        this.id = id;\n        this.group_id = group_id;\n        this.name = name;\n        this.description = description;\n        this.from = from;\n        this.to = to;\n        this.precision = precision;\n        this.default_number = numDef;\n        this.default_string = strDef;\n        this.default_date = dateDef;\n    }\n}\n\nclass Value {\n    constructor(id, parameter_id, string_value, num_value, date_value) {\n        this.id = id;\n        this.parameter_id = parameter_id;\n        this.string_value = string_value;\n        this.num_value = num_value;\n        this.date_value = date_value;\n    }\n}\n\nlet counted = []\nlet parameters = [];\nlet values = new Map();\nfor (let i = 0; i < msg.parameters.length; i++){\n    let row = msg.parameters[i];\n    if (!counted.includes(row.parameter_id)){\n        parameters.push(new Parametr(row.parameter_id,\n            row.group_id,\n            row.parameter_name,\n            row.parameter_description,\n            row.parameter_from,\n            row.parameter_to,\n            row.parameter_precision,\n            row.parameter_default_n,\n            row.parameter_default_str,\n            row.parameter_default_dt));\n\n        counted.push(row.parameter_id);\n    }\n\n    values.set(row.value_id, new Value(row.value_id, row.value_param_id, row.string_value, row.number_value, row.data_value));\n}\n\n//node.warn(values);\ncounted = []\nlet grouped = {}\nlet conbinations = new Map();\nlet counted_combinations = new Map();\nfor (let i = 0; i < msg.combinations.length; i++){\n    let row = msg.combinations[i];\n    if (!counted.includes(row.rs_combination_id)){\n        grouped[row.rs_combination_id] = {};\n        counted.push(row.rs_combination_id);\n    }\n    \n    if (!values.has(row.rs_value_id)){\n        continue;\n    }\n\n    let value = values.get(row.rs_value_id);\n    grouped[row.rs_combination_id][value.parameter_id] = value;\n    if (!conbinations.has(row.combination_id)){\n        conbinations.set(row.combination_id, []);\n        counted_combinations.set(row.combination_id, []);\n    }\n\n    let tmp = conbinations.get(row.combination_id);\n    let counted_combination = counted_combinations.get(row.combination_id);\n    if (!counted_combination.includes(row.combination_target_id)) {\n        tmp.push(row);\n        conbinations.set(row.combination_id, tmp);\n        counted_combination.push(row.combination_target_id)\n    }\n}\n\nmsg = { payload: { groupData: msg.payload[0], parameters: parameters, values: grouped, conbinationsData: conbinations }, topic: 'main' };\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 300,
        "wires": [
            [
                "e7fccc8fb54facc2",
                "27a6f188233b3f13"
            ]
        ]
    },
    {
        "id": "c5497bafa046fad5",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "Все таргеты",
        "func": "let result = {}\nif (Array.isArray(msg.payload)){\n    msg.payload.forEach(item => result[item.id] = {\n        col_id: item.col_id,\n        col_table: item.col_table,\n        col_name: item.col_name,\n        cold_description: item.cold_description\n    });\n} else {\n    result[msg.payload.id] = { \n        col_id: msg.payload.col_id,\n        col_table: msg.payload.col_table,\n        col_name: msg.payload.col_name,\n        cold_description: msg.payload.cold_description };\n}\n\nmsg.payload = result;\nmsg.topic = 'targets'\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 260,
        "wires": [
            [
                "e7fccc8fb54facc2",
                "888022a7abba01e5"
            ]
        ]
    },
    {
        "id": "e7fccc8fb54facc2",
        "type": "join",
        "z": "c2cffd502b9dd43b",
        "name": "Объединение объектов.",
        "mode": "custom",
        "build": "object",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2240,
        "y": 260,
        "wires": [
            [
                "ad6c8c58afbb6177"
            ]
        ]
    },
    {
        "id": "9fb87eefdf36f61b",
        "type": "http request",
        "z": "c2cffd502b9dd43b",
        "name": "Получение имени автора запроса",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 960,
        "y": 500,
        "wires": [
            [
                "2a8a17c38e871b5c"
            ]
        ]
    },
    {
        "id": "68f9528ae976d61d",
        "type": "join",
        "z": "c2cffd502b9dd43b",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1510,
        "y": 460,
        "wires": [
            [
                "bb85cc6e616c4bd6"
            ]
        ]
    },
    {
        "id": "2a8a17c38e871b5c",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "Смещение результата запроса",
        "func": "msg.topic = 'updater';\nmsg.payload = msg.payload.name;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 500,
        "wires": [
            [
                "68f9528ae976d61d"
            ]
        ]
    },
    {
        "id": "aedf9383d846f80e",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "Подготовка к объединению",
        "func": "msg.topic = 'main';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 460,
        "wires": [
            [
                "68f9528ae976d61d"
            ]
        ]
    },
    {
        "id": "bb85cc6e616c4bd6",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "Формирование запроса",
        "func": "let updater = msg.payload.updater;\nlet access = msg.payload.access;\nmsg.payload = msg.req.body;\nmsg.payload.updater = updater;\nmsg.updUser = msg.payload.updater\nmsg.payload.access = access;\n\nlet id = msg.payload.id;\nlet parameters = `DECLARE @user_group uniqueidentifier = '${msg.payload.user_group_id}'; `;\nparameters += `DECLARE @id uniqueidentifier = '${id}'; `;\nif (msg.payload.created != undefined && msg.payload.created == null){\n    parameters += `DECLARE @created datetime2 = CONVERT(datetime2, '${msg.payload.created}', 120); `;\n} else {\n    parameters += `DECLARE @created datetime2 = SYSUTCDATETIME(); `;\n}\n\nparameters += `DECLARE @updater nvarchar(255) = N'${msg.payload.updater}'; `;\nparameters += `DECLARE @name nvarchar(255) = N'${msg.payload.name}'; `;\nif (msg.payload.description != undefined && msg.payload.description != null) {\n    parameters += `DECLARE @description nvarchar(255) = N'${msg.payload.description}'; `;\n} else {\n    parameters += `DECLARE @description nvarchar(255) = N''; `;\n}\n\nif (msg.payload.lock){\n    parameters += 'DECLARE @lock bit = 1; ';\n} else {\n    parameters += 'DECLARE @lock bit = 0; ';\n}\n\nlet query = `\n${msg.payload.access}\nDELETE [Universal].[dbo].[tblParameterGroup] WHERE [gId] = @id AND [gUserGroupId] IN (SELECT id FROM @group_collection);\n\nINSERT INTO [Universal].[dbo].[tblParameterGroup] ([gId], [dtCreatedAt], [szName], [szDescription], [bLockDelete], [gUserGroupId])\nVALUES (@id, @created, @name, @description, @lock, @user_group);\n\nWITH [temp] AS (\n      SELECT [History].*, row_number() OVER (PARTITION BY [History].[gGroupId] ORDER BY [History].[dtUpdatedAt]) AS rows_count\n      FROM [Universal].[dbo].[tblUpdateHistory] AS [History]\n      WHERE [History].[gGroupId] = @id\n     )\n\nDELETE [temp] WHERE rows_count > 10;\nINSERT INTO [Universal].[dbo].[tblUpdateHistory] ([gGroupId], [dtUpdatedAt], [szUpdatedBy]) VALUES (@id, GETUTCDATE(), @updater); `;\n\nif (msg.payload.parameters !== undefined && msg.payload.parameters.length > 0) {\n    query += 'INSERT INTO [Universal].[dbo].[tblParameter] ([gId], [szName], [szDescription], [gGroupId], [dtFrom], [dtTo], [nPrecision], [nDefault], [szDefault], [dtDefault]) \\\n    VALUES';\n\n    let collection = msg.payload.parameters;\n    for (let index = 0; index < collection.length; index += 1){\n        let param_id = collection[index].id;\n        parameters += `DECLARE @param_id${index} uniqueidentifier = '${param_id}'; `;\n        parameters += `DECLARE @param_name${index} nvarchar(255) = N'${collection[index].name}'; `;\n        parameters += `DECLARE @param_description${index} nvarchar(255) = N'${collection[index].description}'; `;\n        if (collection[index].from != undefined && collection[index].from != null){\n            parameters += `DECLARE @param_from${index} datetime2 = CONVERT(datetime2, '${collection[index].from}', 120); `;\n        } else{\n            parameters += `DECLARE @param_from${index} datetime2 = NULL; `;\n        }\n        \n        if (collection[index].from != undefined && collection[index].to != null){\n            parameters += `DECLARE @param_to${index} datetime2 = CONVERT(datetime2, '${collection[index].to}', 120); `;\n        } else{\n            parameters += `DECLARE @param_to${index} datetime2 = NULL; `;\n        }\n\n        if (collection[index].default_number != undefined && collection[index].default_number != null) {\n            parameters += `DECLARE @param_num${index} float = ${collection[index].default_number}; `;\n        } else {\n            parameters += `DECLARE @param_num${index} float = NULL; `;\n        }\n\n        if (collection[index].default_string != undefined && collection[index].default_string != null) {\n            parameters += `DECLARE @param_str${index} nvarchar(255) = '${collection[index].default_string}'; `;\n        } else {\n            parameters += `DECLARE @param_str${index} nvarchar(255) = NULL; `;\n        }\n\n        if (collection[index].default_date != undefined && collection[index].default_date != null) {\n            parameters += `DECLARE @param_date${index} datetime2(7) = CONVERT(datetime2, '${collection[index].default_date}', 120); `;\n        } else {\n            parameters += `DECLARE @param_date${index} datetime2(7) = NULL; `;\n        }\n\n        parameters += `DECLARE @precision${index} int = ${collection[index].precision}; `;\n        query += `(@param_id${index}, @param_name${index}, @param_description${index}, @id, @param_from${index}, @param_to${index}, @precision${index}, @param_num${index}, @param_str${index}, @param_date${index}), `\n    }\n\n    query = query.substring(0, query.length - 2);\n}\n\nif (msg.payload.combinations !== undefined && msg.payload.combinations.length > 0) {\n\n    let add_values = false;\n    let add_comb = false;\n    let collection = msg.payload.combinations;\n    let comb_query = 'INSERT INTO [Universal].[dbo].[tblTargetCombination] ([gCombinationId], [gGroupId], [gTargetId], [gTargetTypeId]) \\\nVALUES ';\n\n    let values_query = 'INSERT INTO [Universal].[dbo].[tblValue] ([gId], [gParameterId], [nValue], [szValue], [dtValue]) \\\nVALUES ';\n\n    let relation_query = 'INSERT INTO [Universal].[dbo].[tblValueCombination] (combination_id, target_id, value_id, group_id) VALUES ';\n    for (let index = 0; index < collection.length; index += 1){\n        let values = [];\n        let targets = [];\n        let value_comb = Object.keys(collection[index].values).map(key => collection[index].values[key]);\n        parameters += `DECLARE @comb_id${index} uniqueidentifier = '${collection[index].id}'; `;\n        if (value_comb.length > 0){\n            for (let value_index = 0; value_index < value_comb.length; value_index += 1) {\n                let value_id = value_comb[value_index].id;\n                let param = `@value_id${index}${value_index}`;\n                values.push(param);\n                parameters += `DECLARE ${param} uniqueidentifier = '${value_id}'; `;\n                parameters += `DECLARE @param_id${index}${value_index} uniqueidentifier = '${value_comb[value_index].parameter_id}'; `;\n                if (value_comb[value_index].num_value != undefined){\n                    values_query += `(${param}, @param_id${index}${value_index}, ${value_comb[value_index].num_value}, NULL, NULL), `;\n                } else if (value_comb[value_index].string_value != undefined) {\n                    values_query += `(${param}, @param_id${index}${value_index}, NULL, '${value_comb[value_index].string_value}', NULL), `;\n                } else {\n                    values_query += `(${param}, @param_id${index}${value_index}, NULL, NULL, '${value_comb[value_index].date_value}'), `;\n                }\n            }\n\n            add_values = true;\n        }\n\n        let targets_comb = collection[index].targets;\n        if (targets_comb.length > 0){\n            for (let target_index = 0; target_index < targets_comb.length; target_index += 1) {\n                parameters += `DECLARE @target_id${index}${target_index} uniqueidentifier = '${targets_comb[target_index].id}'; `;\n                parameters += `DECLARE @type_id${index}${target_index} uniqueidentifier = '${targets_comb[target_index].type_id}'; `;\n                comb_query += `(@comb_id${index}, @id, @target_id${index}${target_index}, @type_id${index}${target_index}), `;\n                \n                targets.push(`@target_id${index}${target_index}`);\n            }\n\n            add_comb = true;\n        }\n\n        if (targets.length > 0 && values.length > 0){\n            for (let i = 0; i < targets.length; i += 1) {\n                for (let j = 0; j < values.length; j += 1) {\n                    relation_query += `(@comb_id${index}, ${targets[i]}, ${values[j]}, @id), `;\n                }\n            }\n        }\n    }\n\n    if (add_comb){\n        query += ` ${comb_query.substring(0, comb_query.length - 2)};`;\n    }\n\n    if (add_values) {\n        query += ` ${values_query.substring(0, values_query.length - 2)};`;\n    }\n\n    if (add_comb && add_values) {\n        query += ` ${relation_query.substring(0, relation_query.length - 2)};`;\n    }\n}\n\nmsg.payload.query = parameters + ' ' + query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 460,
        "wires": [
            [
                "b42cfc1849e667e5",
                "7ecb59163590a480"
            ]
        ]
    },
    {
        "id": "69e4573bb439340b",
        "type": "http in",
        "z": "c2cffd502b9dd43b",
        "name": "Получение всех конкретных таргетов.",
        "url": "/targets",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 680,
        "wires": [
            [
                "94008fcf0f4e8932"
            ]
        ]
    },
    {
        "id": "440e61dfebe2c5c1",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "Перемещение тела запроса",
        "func": "msg.payload = msg.payload.targets;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 660,
        "wires": [
            [
                "d21229a7d3934e66"
            ]
        ]
    },
    {
        "id": "d21229a7d3934e66",
        "type": "http response",
        "z": "c2cffd502b9dd43b",
        "name": "Возврат всех таргетов",
        "statusCode": "",
        "headers": {},
        "x": 1570,
        "y": 660,
        "wires": []
    },
    {
        "id": "92d606e6c297f698",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "Ограничения доступа",
        "func": "let result = 'DECLARE @group_collection table (id varchar(36))\\r\\n'\nif (msg.payload.idCollection !== null && msg.payload.idCollection.length > 0) {\n    result += 'INSERT INTO @group_collection (id) VALUES ';\n    if (Array.isArray(msg.payload.idCollection)) {\n        msg.payload.idCollection.forEach(function (id) {\n            result += '(\\'' + id + '\\'), ';\n        });\n\n        result = `${result.substring(0, result.length - 2)};\\r\\n`;\n    } else {\n        result += '(\\'' + msg.payload.idCollection + '\\')\\r\\n'\n    }\n}\n\nmsg.payload = result\nmsg.topic = 'access'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 420,
        "wires": [
            [
                "68f9528ae976d61d"
            ]
        ]
    },
    {
        "id": "64b8ea747f146902",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "Скрипт: все группы",
        "func": "let result = 'DECLARE @group_collection table (id varchar(36))\\r\\n'\nif (msg.payload.idCollection !== null && msg.payload.idCollection.length > 0){\n    result += 'INSERT INTO @group_collection (id) VALUES ';\n    if (Array.isArray(msg.payload.idCollection)){\n        msg.payload.idCollection.forEach(function(id) {\n            result += '(\\'' + id + '\\'), ';\n        });\n\n        result = `${result.substring(0, result.length - 2)};\\r\\n`;\n    } else {\n        result += '(\\'' + msg.payload.idCollection + '\\')\\r\\n'\n    }\n}\n\nmsg.payload = `${result}SELECT\n\t[Group].[gId] AS group_id,\n    [Group].[nKey] AS group_key,\n    [Group].[dtCreatedAt] AS group_created,\n    [Group].[szName] AS group_name,\n    [Group].[szDescription] AS group_description,\n    [Group].[bLockDelete] AS group_lock,\n    [Group].[gUserGroupId] AS group_group_id,\n\t[Combination].[gTargetTypeId] AS combination_type_id\nFROM [Universal].[dbo].[tblParameterGroup] AS [Group]\nLEFT JOIN [Universal].[dbo].[tblTargetCombination] AS [Combination] ON [Group].[gId] = [Combination].[gGroupId]\nWHERE [Group].[gUserGroupId] IN (SELECT id FROM @group_collection)\nORDER BY [Group].[gId]`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 200,
        "wires": [
            [
                "3da75686bca2985b"
            ]
        ]
    },
    {
        "id": "51e52fbd15a2d57a",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "Request",
        "func": "msg.url = `http://localhost:52431/api/User/${msg.TokenCheck.UserId}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 500,
        "wires": [
            [
                "9fb87eefdf36f61b"
            ]
        ]
    },
    {
        "id": "79be0ddcc57777a5",
        "type": "comment",
        "z": "c2cffd502b9dd43b",
        "name": "RK",
        "info": "",
        "x": 70,
        "y": 20,
        "wires": []
    },
    {
        "id": "6c2d208379830af3",
        "type": "http response",
        "z": "c2cffd502b9dd43b",
        "name": "Возврат: группа не найдена",
        "statusCode": "404",
        "headers": {},
        "x": 2740,
        "y": 280,
        "wires": []
    },
    {
        "id": "ad6c8c58afbb6177",
        "type": "subflow:0a0d93428c00a77c",
        "z": "c2cffd502b9dd43b",
        "name": "",
        "x": 2480,
        "y": 260,
        "wires": [
            [
                "18b2cfac748de5fc",
                "7932d3f694e40630"
            ],
            [
                "6c2d208379830af3"
            ]
        ]
    },
    {
        "id": "e9e11507bc6a8a8d",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "Скрипт: целевая группа",
        "func": "let result = 'DECLARE @group_collection table (id varchar(36))\\r\\n'\nif (msg.payload.idCollection !== null && msg.payload.idCollection.length > 0) {\n    result += 'INSERT INTO @group_collection (id) VALUES ';\n    if (Array.isArray(msg.payload.idCollection)) {\n        msg.payload.idCollection.forEach(function (id) {\n            result += '(\\'' + id + '\\'), ';\n        });\n\n        result = `${result.substring(0, result.length - 2)};\\r\\n`;\n    } else {\n        result += '(\\'' + msg.payload.idCollection + '\\')\\r\\n'\n    }\n}\n\nmsg.payload = `${result}\nDECLARE @id uniqueidentifier = '${msg.req.params.id}';\n\nSELECT\n\t[Group].[gId] AS group_id, [Group].[nKey] AS group_key, [Group].[dtCreatedAt] AS group_created, [Group].[szName] AS group_name, [Group].[szDescription] AS group_description, [Group].[bLockDelete] AS group_lock, [Group].[gUserGroupId] AS group_group_id\nFROM [Universal].[dbo].[tblParameterGroup] AS [Group]\nWHERE [Group].[gUserGroupId] IN (SELECT id FROM @group_collection) AND [Group].[gId] = @id\nORDER BY [Group].[gId]`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 320,
        "wires": [
            [
                "7d82a76c955b59cf",
                "ef3858ec9bdb6e4e"
            ]
        ]
    },
    {
        "id": "bb2ab9d0711c7514",
        "type": "http response",
        "z": "c2cffd502b9dd43b",
        "name": "Возврат: группа не найдена",
        "statusCode": "404",
        "headers": {},
        "x": 1200,
        "y": 380,
        "wires": []
    },
    {
        "id": "02287cea5d077d18",
        "type": "switch",
        "z": "c2cffd502b9dd43b",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1170,
        "y": 320,
        "wires": [
            [
                "e3965dc1a8c90190",
                "af506b9b50f055a8",
                "f638941b5a471f0d"
            ],
            [
                "bb2ab9d0711c7514"
            ]
        ]
    },
    {
        "id": "3fa3b67e0d3dd07d",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "Подготовка шапки цикла",
        "func": "msg.payload = {queries : [], targets: [] }\nmsg.types.forEach(item => msg.payload.queries.push(`SELECT '${item.id}' AS type_id, ${item.id_col} AS id, ${item.name} AS name, ${item.description} AS description FROM ${item.tbl};`));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 680,
        "wires": [
            [
                "a311ce699f83377e"
            ]
        ]
    },
    {
        "id": "8e1a44306cd47009",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "Перекладывание",
        "func": "class TargetData{\n    constructor(id){\n        this.type_id = id;\n        this.targets = [];\n    }\n}\n\nif (!Array.isArray(msg.targets) || msg.targets.length === 0){\n    return msg;\n}\n\nlet trg = new TargetData(msg.targets[0].type_id);\nmsg.targets.forEach(target => trg.targets.push({ id: target.id, type_id: target.type_id, name: target.name, description: target.description }));\nmsg.payload.targets.push(trg);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 720,
        "wires": [
            [
                "a311ce699f83377e"
            ]
        ]
    },
    {
        "id": "2820a6d1ab292aa0",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "rebuild",
        "func": "msg.payload = msg.payload.query\n//node.warn(msg.payload);\nvar DECLARE = parseDeclarations(msg.payload);\nDECLARE.push({\n    val: \"@group_collection\",\n    str: \"DECLARE @group_collection table (id varchar(36))\"\n});\n//node.warn(DECLARE);\nvar QUERIES = []\nvar bpArr = [];\nvar prevIndex = -1;\nwhile (msg.payload.indexOf('INSERT INTO', prevIndex + 1) != -1) {\n    var index = msg.payload.indexOf('INSERT INTO', prevIndex + 1)\n    bpArr.push(index);\n    prevIndex = index + 1;\n}\n//node.warn(bpArr);\n//node.warn(DECLARE);\n//определяем что можно просто свкопировать\nvar copyInsert = msg.payload.substring(bpArr[0], bpArr[4]);\nvar copyInsert_vals = extractElements(copyInsert)\n//node.warn(copyInsert_vals)\nvar copyInsert_query = \"\";\nvar ar_0 = removeDuplicates(copyInsert_vals)\nar_0.forEach(function (element) {\n    copyInsert_query += DECLARE.find(el => el.val == element).str;\n});\ncopyInsert_query += copyInsert;\nQUERIES.push(copyInsert_query);\n\n// то , что нельзая копирнуть\n// все делится на несколько строгих инсертов,от них и будем танцевать\n//node.warn(QUERIES);\n//node.warn(bpArr);\nvar INSERTS = [];\nINSERTS.push(\"INSERT INTO [Universal].[dbo].[tblTargetCombination] ([gCombinationId], [gGroupId], [gTargetId], [gTargetTypeId]) VALUES \");\nINSERTS.push(\"INSERT INTO [Universal].[dbo].[tblValue] ([gId], [gParameterId], [nValue], [szValue], [dtValue]) VALUES \");\nINSERTS.push(\"INSERT INTO [Universal].[dbo].[tblValueCombination] (combination_id, target_id, value_id, group_id) VALUES \");\nvar co = 4;\n//MAX => 180 pares of value like (...)\nINSERTS.forEach(function (INSERTS_elements) {\n    // node.warn(INSERTS_elements.length)\n    var split_string = \"\"\n    if ((co + 1) == 7) {\n        split_string = msg.payload.substring(bpArr[co], msg.payload.length)\n    }\n    else {\n        split_string = msg.payload.substring(bpArr[co], bpArr[co + 1])\n    }\n    var vals_arr = []// массив лбъектов все значений для инсерта\n    vals_arr = splitter_v3(split_string, INSERTS_elements.length)\n    var step = 180;\n    var i = 0;\n    //if (INSERTS_elements == 'INSERT INTO [Universal].[dbo].[tblValue] ([gId], [gParameterId], [nValue], [szValue], [dtValue]) VALUES ')\n    //               {node.warn(vals_arr);\n    //                   node.warn(co);\n    //                   node.warn(bpArr);\n    //  node.warn(msg.payload.substring(bpArr[4], bpArr[4 + 1]));\n    //              }\n   // node.warn(\"vals_arr\");\n   // node.warn(vals_arr);\n\n    while (i < vals_arr.length) {\n        var inner_i = i;\n        var inner_max = i + step;\n        var vals_to_declare = [];\n        var queryStr_declare = \"\";\n        var queryStr_values = \"\";\n       // node.warn(\"in cycle\");\n        if (inner_max < vals_arr.length) {\n            while (inner_i < inner_max) {\n                vals_arr[inner_i].vals.forEach(function (element) {\n                   // if (INSERTS_elements == 'INSERT INTO [Universal].[dbo].[tblValue] ([gId], [gParameterId], [nValue], [szValue], [dtValue]) VALUES ')\n                    //{node.warn(element);}\n                    vals_to_declare.push(element)\n                });\n\n                \n                    queryStr_values += vals_arr[inner_i].str + \",\";\n                \n                //vals_to_declare = vals_to_declare.filter((item, index) => vals_to_declare.indexOf(item) === index);\n                inner_i++;\n            }\n            vals_to_declare = vals_to_declare.filter((item, index) => vals_to_declare.indexOf(item) === index);\n        }\n        else {\n           // node.warn(\"step 1\");\n            inner_max = vals_arr.length;\n           // node.warn(inner_i);\n           // node.warn(inner_max - 1);\n            if((inner_max - 1) == 0)\n            {\n                //node.warn(\"step 2\");\n                vals_arr[inner_i].vals.forEach(function (element) {\n                    //if (INSERTS_elements == 'INSERT INTO [Universal].[dbo].[tblValue] ([gId], [gParameterId], [nValue], [szValue], [dtValue]) VALUES ') { node.warn(element); }\n                    vals_to_declare.push(element)\n                });\n                queryStr_values += vals_arr[inner_i].str\n\n            }\n            while (inner_i <= inner_max - 1) {\n                \n                vals_arr[inner_i].vals.forEach(function (element) {\n                    //if (INSERTS_elements == 'INSERT INTO [Universal].[dbo].[tblValue] ([gId], [gParameterId], [nValue], [szValue], [dtValue]) VALUES ') { node.warn(element); }\n                    vals_to_declare.push(element)\n                });\n\n                queryStr_values += vals_arr[inner_i].str + \",\";\n                //vals_to_declare = vals_to_declare.filter((item, index) => vals_to_declare.indexOf(item) === index);\n                inner_i++;\n            }\n            vals_to_declare = vals_to_declare.filter((item, index) => vals_to_declare.indexOf(item) === index);\n        }\n        \n        var ar_2 = removeDuplicates(vals_to_declare);\n        //node.warn(\"VALS TO DECLARE\");\n        // node.warn(vals_to_declare);\n        //if (INSERTS_elements == 'INSERT INTO [Universal].[dbo].[tblValue] ([gId], [gParameterId], [nValue], [szValue], [dtValue]) VALUES ') { node.warn(vals_to_declare); }\n        ar_2.forEach(function (element) {\n            //node.warn(element);\n            queryStr_declare += DECLARE.find(el => el.val == element).str;\n        });\n        queryStr_values = queryStr_values.substring(0, queryStr_values.length - 1)\n        //node.warn(\"queryStr_declare\");\n        //node.warn(queryStr_declare);\n        //node.warn(\"INSERTS_elements\");\n        //node.warn(INSERTS_elements);\n        //node.warn(\"queryStr_values\");\n       // node.warn(queryStr_values);\n        var q = queryStr_declare+\"\\n\" + INSERTS_elements+\"\\n\" + queryStr_values;\n        // msg.payload = q;\n        QUERIES.push(q);\n        i += step;\n    }\n\n    //заполняем declare\n    // node.warn(QUERIES);\n\n    co++;\n});\nQUERIES = QUERIES.map(str => str.replace(/'/g, \"''\"));\nmsg.payload = QUERIES;\nvar user_id =  Date.now().toString(36) + Math.random().toString(36).substring(2);\nmsg.user_id = user_id;\nnode.warn(QUERIES);\nreturn msg;\n\nfunction parseDeclarations(input) {\n    var regex = /DECLARE\\s+(@\\w+)\\s+(\\w+(?:\\(\\d+(?:,\\s*\\d+)*\\))?)\\s*=\\s*(.*?);/gs;\n    var result = [];\n    var match;\n    while ((match = regex.exec(input)) !== null) {\n        const variableName = match[1];\n        const variableType = match[2];\n        const variableValue = match[3];\n        result.push({\n            val: variableName,\n            str: `DECLARE ${variableName} ${variableType} = ${variableValue};`\n        });\n    }\n    //node.warn(result);\n    return result;\n}\nfunction extractElements(input) {\n    const regex = /@\\w+/g;\n    const matches = input.match(regex);\n    return matches || [];\n}\nfunction splitter_v3(inputString, elLen) {\n    inputString = inputString.substring(elLen, inputString.length)\n   //node.warn(inputString);\n    const elements = inputString.split('), (');\n    const cleanedElements = elements.map(el => el.replace(/[()]/g, ''));\n    const resultArray = cleanedElements.map(el => {\n        var vals = el.split(', ').filter(item => item.startsWith(\"@\"));\n        vals = hotFix(vals)\n        var str = \"(\"+el+\")\";\n        str = str.replace(/;/g, '');\n        //str = str.substring(0,str.length-2)+\")\"\n        return {\n            inp:el,\n            vals: vals,\n            //str: `(${str.join(', ')})`\n            str:str\n            //str:inputString\n        };\n    });\n    node.warn(\"splitter_v3\");\n    node.warn(resultArray);\n    return resultArray;\n}\n\nfunction removeDuplicates(arr) {\n    var normalizedArr = arr.map(item => item.replace(/\\s+/g, '').toLowerCase());\n    var uniqueArr = normalizedArr.filter((item, index) => {\n        return normalizedArr.indexOf(item) === index;\n    });\n    return uniqueArr.map(item => arr[normalizedArr.indexOf(item)]);\n}\n\nfunction hotFix(arr) {\n  return arr.map(str => {\n    let cleaned = str.replace(/[\\r\\n]+/g, '');\n    return cleaned.replace(/;[\\s]*$/, '');\n  });\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2090,
        "y": 520,
        "wires": [
            [
                "adf8e9432ecef1a9",
                "eaa7956e531e7f45"
            ]
        ]
    },
    {
        "id": "9b94eda06d29480d",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "function 69",
        "func": "//node.warn(msg);\nmsg.Query = `\nINSERT INTO [NRInserts].[dbo].[tblUniversalDirectoryBuffer_v2] (userid, query_packet) \nVALUES ('${msg.user_id}', '${msg.payload}');\n`;\n\n//msg.Query = msg.payload;\n//msg.payload = msg.payload + \"!!!\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 580,
        "wires": [
            [
                "7c0e5a7910fac1f1"
            ]
        ]
    },
    {
        "id": "37f9386a7258f042",
        "type": "catch",
        "z": "c2cffd502b9dd43b",
        "name": "cycle_upload",
        "scope": [
            "7c0e5a7910fac1f1"
        ],
        "uncaught": false,
        "x": 2190,
        "y": 680,
        "wires": [
            [
                "654bf8de64864e20"
            ]
        ]
    },
    {
        "id": "b4a7bc2b44818547",
        "type": "catch",
        "z": "c2cffd502b9dd43b",
        "name": "UberQuery",
        "scope": [
            "6de3b87ebfa9f296"
        ],
        "uncaught": false,
        "x": 2180,
        "y": 740,
        "wires": [
            [
                "654bf8de64864e20"
            ]
        ]
    },
    {
        "id": "654bf8de64864e20",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "function 4",
        "func": "msg.error = msg.error.message;\nmsg.errorWhere = msg.query;\nmsg.time = new Date().toISOString();\nmsg.statusCode = 204;//err\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2360,
        "y": 680,
        "wires": [
            [
                "2af9f0ed34a2937e",
                "3c04a1a70c3c8c8c"
            ]
        ]
    },
    {
        "id": "3c04a1a70c3c8c8c",
        "type": "http response",
        "z": "c2cffd502b9dd43b",
        "name": "Возврат результата выполнения запроса.",
        "statusCode": "",
        "headers": {},
        "x": 2950,
        "y": 480,
        "wires": []
    },
    {
        "id": "44b3499cd4e1a9c5",
        "type": "catch",
        "z": "c2cffd502b9dd43b",
        "name": "UberQuery",
        "scope": [
            "6de3b87ebfa9f296",
            "2820a6d1ab292aa0"
        ],
        "uncaught": false,
        "x": 2180,
        "y": 800,
        "wires": [
            [
                "654bf8de64864e20"
            ]
        ]
    },
    {
        "id": "b42cfc1849e667e5",
        "type": "switch",
        "z": "c2cffd502b9dd43b",
        "name": "",
        "property": "payload.query.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "4000",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "4000",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1930,
        "y": 460,
        "wires": [
            [
                "aefbb4bf7d5a33ba"
            ],
            [
                "2820a6d1ab292aa0"
            ]
        ]
    },
    {
        "id": "c9bc3484e636774e",
        "type": "delay",
        "z": "c2cffd502b9dd43b",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2470,
        "y": 520,
        "wires": [
            [
                "6de3b87ebfa9f296"
            ]
        ]
    },
    {
        "id": "2f4e63a96e5f39b1",
        "type": "delay",
        "z": "c2cffd502b9dd43b",
        "name": "",
        "pauseType": "delay",
        "timeout": "7",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2650,
        "y": 480,
        "wires": [
            [
                "3c04a1a70c3c8c8c",
                "2075dea176266185"
            ]
        ]
    },
    {
        "id": "eaa7956e531e7f45",
        "type": "debug",
        "z": "c2cffd502b9dd43b",
        "name": "debug 63",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2240,
        "y": 480,
        "wires": []
    },
    {
        "id": "a83ae14ff61d3e8c",
        "type": "debug",
        "z": "c2cffd502b9dd43b",
        "name": "debug 87",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 380,
        "wires": []
    },
    {
        "id": "47e1beee7d0b4461",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "function 26",
        "func": "\nlet timeNow = new Date();\n flow.set(\"get_group\", timeNow);\n\nnode.warn('node universal begin');\nnode.warn(timeNow.toString());\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "943976d1871e63d8",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "d": true,
        "name": "function 28",
        "func": "let _timeLast = flow.get(\"get_group\");\nlet timeNow = new Date();\nnode.warn('1 sql end');\nlet _time = (Number(timeNow) - Number(_timeLast))/1000\nnode.warn(_time.toString()+'s');\nnode.warn(timeNow.toString());\n\nnode.warn('go to other sql ');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "b5d7f5e282103dc8",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "function 29",
        "func": "\nlet timeNow = new Date();\n flow.set(\"create\", timeNow);\n\nnode.warn('node universal create begin');\nnode.warn(timeNow.toISOString());\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "2075dea176266185",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "function 30",
        "func": "let timeLSQL = flow.get(\"sql\");\n\nlet timeLast = flow.get(\"create\");\nlet timeNow = new Date();\nnode.warn('node universal create end');\nnode.warn(timeNow.toISOString());\nlet _time = (Number(timeNow) - Number(timeLast))/1000\nlet _timeSql = (Number(timeNow) - Number(timeLSQL))/1000\nnode.warn(_time.toString()+'s');\nnode.warn('sql time ='+_timeSql.toString()+'s');\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2910,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "7ecb59163590a480",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "function 31",
        "func": "let _timeLast = flow.get(\"create\");\n\n\nlet timeNow = new Date();\n\n let   timeLast = flow.set(\"sql\", timeNow);\n\nnode.warn('begin sql');\nlet _time = (Number(timeNow) - Number(_timeLast))/1000\nnode.warn(_time.toString()+'s');\nnode.warn(timeNow.toISOString());\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "e8e942b1a0c4eb4b",
        "type": "inject",
        "z": "c2cffd502b9dd43b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1560,
        "y": 100,
        "wires": [
            [
                "db93128692b18007",
                "567a4d3ee52de52f"
            ]
        ]
    },
    {
        "id": "567a4d3ee52de52f",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "function 32",
        "func": "let timeNow = new Date();\n let   timeLast = flow.set(\"sql\", timeNow);\n\nnode.warn('sql start');\nnode.warn(timeNow.toString());\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "18f3e495b79c8dfa",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "function 33",
        "func": "let timeLast = flow.get(\"sql\");\nlet timeNow = new Date();\n\nnode.warn('sql end');\nlet _time = (Number(timeNow) - Number(timeLast))/10000\nnode.warn(_time.toString()+'s');\nnode.warn(timeNow.toString());\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "ef3858ec9bdb6e4e",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "d": true,
        "name": "function 34",
        "func": "let _timeLast = flow.get(\"get_group\");\nlet timeNow = new Date();\nnode.warn('1 sql begin');\nlet _time = (Number(timeNow) - Number(_timeLast))/1000\nnode.warn(_time.toString()+'s');\nnode.warn(timeNow.toString());\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "888022a7abba01e5",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "d": true,
        "name": "function 35",
        "func": "let _timeLast = flow.get(\"get_group\");\nlet timeNow = new Date();\nnode.warn('target sql end');\nlet _time = (Number(timeNow) - Number(_timeLast))/1000\nnode.warn(_time.toString()+'s');\nnode.warn(timeNow.toString());\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "edcbcbfe2626f1bd",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "d": true,
        "name": "function 36",
        "func": "let _timeLast = flow.get(\"get_group\");\nlet timeNow = new Date();\nnode.warn('комбинации  sql end');\nlet _time = (Number(timeNow) - Number(_timeLast))/1000\nnode.warn(_time.toString()+'s');\nnode.warn(timeNow.toString());\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "7932d3f694e40630",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "d": true,
        "name": "function 23",
        "func": "let _timeLast = flow.get(\"get_group\");\nlet timeNow = new Date();\nnode.warn('target end');\nlet _time = (Number(timeNow) - Number(_timeLast))/1000\nnode.warn(_time.toString()+'s');\nnode.warn(timeNow.toString());\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2690,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "7c9b5c3cc8f62b56",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "function 27",
        "func": "let _timeLast = flow.get(\"get_group\");\nlet timeNow = new Date();\nnode.warn('node universal end');\nlet _time = (Number(timeNow) - Number(_timeLast))/1000\nnode.warn(_time.toString()+'s');\nnode.warn(timeNow.toString());\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2770,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "27a6f188233b3f13",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "d": true,
        "name": "function 37",
        "func": "let _timeLast = flow.get(\"get_group\");\nlet timeNow = new Date();\nnode.warn('размещение end');\nlet _time = (Number(timeNow) - Number(_timeLast))/1000\nnode.warn(_time.toString()+'s');\nnode.warn(timeNow.toString());\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2110,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "72c0a5b0cca9e7e3",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "d": true,
        "name": "function 38",
        "func": "let _timeLast = flow.get(\"get_group\");\nlet timeNow = new Date();\nnode.warn('параметры и значения sql end');\nlet _time = (Number(timeNow) - Number(_timeLast))/1000\nnode.warn(_time.toString()+'s');\nnode.warn(timeNow.toString());\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "01010778fa0e19f1",
        "type": "debug",
        "z": "c2cffd502b9dd43b",
        "name": "debug 89",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3120,
        "y": 180,
        "wires": []
    },
    {
        "id": "8ddd21a2c4b2e095",
        "type": "debug",
        "z": "c2cffd502b9dd43b",
        "name": "debug 88",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2300,
        "y": 80,
        "wires": []
    },
    {
        "id": "7672acdf108403b5",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "d": true,
        "name": "function 39",
        "func": "\nlet timeNow = new Date();\n flow.set(\"sql\", timeNow);\n\nnode.warn('sql begin');\nnode.warn(timeNow.toString());\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "5fe1c960833710dd",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "d": true,
        "name": "function 40",
        "func": "let _timeLast = flow.get(\"sql\");\nlet timeNow = new Date();\nnode.warn('sql end');\nlet _time = (Number(timeNow) - Number(_timeLast))/1000\nnode.warn(_time.toString()+'s');\nnode.warn(timeNow.toString());\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "3ea0a58d3ef8f2ed",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "function 7",
        "func": "let rawCombinations = msg.combinations;\nlet s = '';\n\nlet combinations = [];\nlet types = [];\nmsg.types.forEach(obj => {\n\n if(!types.includes(obj.gTargetTypeId)){\n            types.push(obj.gTargetTypeId);\n        }\n\n});\n\nrawCombinations.forEach(obj => {\n\nlet array = JSON.parse(obj.values); // теперь у тебя массив объектов\nlet values = {};\n\narray.forEach(item => {\n    values[item.parameter_id] = item;\n});\n\nobj.values = values\n\nlet combination = {\n        id: obj.id,\n        group_id: obj.group_id,\n        targets: JSON.parse(obj.targets),\n         values: values,\n        }\n\n    // Добавляем объект в массив\n    combinations.push(combination);\n\n});\nmsg.combinations = combinations;\nmsg.types = types;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 340,
        "wires": [
            [
                "772eb4435f28eb95"
            ]
        ]
    },
    {
        "id": "d1316c293adc5a0b",
        "type": "http response",
        "z": "c2cffd502b9dd43b",
        "name": "Возврат группы",
        "statusCode": "",
        "headers": {},
        "x": 2540,
        "y": 320,
        "wires": []
    },
    {
        "id": "772eb4435f28eb95",
        "type": "function",
        "z": "c2cffd502b9dd43b",
        "name": "Обработка результатов",
        "func": "\n\nclass Group {\n    constructor(id, name, created, description, lock, user_group_id, types, parameters, combinations) {\n        this.id = id;\n        this.created = created;\n        this.name = name;\n        this.description = description;\n        this.lock = lock;\n        this.user_group_id = user_group_id;\n        this.types = types;\n        this.parameters = parameters;\n        this.combinations = combinations;\n    }\n}\n\nmsg = {\n        payload: new Group(\n            msg.payload[0].group_id,\n            msg.payload[0].group_name,\n            msg.payload[0].group_created,\n            msg.payload[0].group_description,\n            msg.payload[0].group_lock,\n            msg.payload[0].group_group_id,\n            msg.types,\n            msg.parameters,\n            msg.combinations),\n        res: msg.res\n    };\n    \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 340,
        "wires": [
            [
                "d1316c293adc5a0b",
                "8ddd21a2c4b2e095",
                "7c9b5c3cc8f62b56"
            ]
        ]
    },
    {
        "id": "a311ce699f83377e",
        "type": "loop",
        "z": "c2cffd502b9dd43b",
        "name": "Получение таргетов кадого типа",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "payload.queries",
        "enumerationType": "msg",
        "limit": "15000",
        "loopPayload": "loop-orig",
        "finalPayload": "final-last",
        "x": 1020,
        "y": 680,
        "wires": [
            [
                "440e61dfebe2c5c1"
            ],
            [
                "6d3fa5520ea15857"
            ]
        ]
    },
    {
        "id": "adf8e9432ecef1a9",
        "type": "loop",
        "z": "c2cffd502b9dd43b",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "payload",
        "enumerationType": "msg",
        "limit": "10000",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 2270,
        "y": 520,
        "wires": [
            [
                "c9bc3484e636774e"
            ],
            [
                "9b94eda06d29480d"
            ]
        ]
    },
    {
        "id": "942b36fd5ea12637",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Targets",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": "0",
        "query": "USE [Universal]\r\nSET ANSI_NULLS ON\r\nSET QUOTED_IDENTIFIER ON\r\n\r\nIF OBJECT_ID('tblTarget', 'U') IS NULL\r\nCREATE TABLE tblTarget (\r\n    [gId] [uniqueidentifier] NOT NULL,\r\n\t[szName] nvarchar(255) NOT NULL,\r\n\t[szTable] nvarchar(255) NOT NULL,\r\n\t[szIdColumn] nvarchar(255) NOT NULL,\r\n\t[szNameColumn] nvarchar(255) NOT NULL,\r\n\t[szDescriptionColumn] nvarchar(255) NOT NULL,\r\n    CONSTRAINT [PK_tblTarget] PRIMARY KEY CLUSTERED ([gId] ASC) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY];\r\n\r\nBEGIN\r\n    IF NOT EXISTS (SELECT * FROM [dbo].[tblTarget] WHERE [gId] = '4fb87f3a-9292-441e-aa4e-32a66ad28d68')\r\n    BEGIN\r\n        INSERT INTO [dbo].[tblTarget] ([gId], [szName], [szTable], [szIdColumn], [szNameColumn], [szDescriptionColumn])\r\n        VALUES ('4fb87f3a-9292-441e-aa4e-32a66ad28d68', N'Материалы', '[BaseClassifiers].[dbo].[tblMaterial]', 'gId', 'szName', 'szDescription')\r\n    END\r\n   \r\n    IF NOT EXISTS (SELECT * FROM [dbo].[tblTarget] WHERE [gId] = 'd89bb51d-ab91-4460-8b94-e64bcfca892e')\r\n    BEGIN\r\n        INSERT INTO [dbo].[tblTarget] ([gId], [szName], [szTable], [szIdColumn], [szNameColumn], [szDescriptionColumn])\r\n        VALUES ('d89bb51d-ab91-4460-8b94-e64bcfca892e', N'Оборудование', '[BaseClassifiers].[dbo].[tblEquipmentTree]', 'gId', 'szName', 'szDescription')\r\n    END\r\n   \r\n    IF NOT EXISTS (SELECT * FROM [dbo].[tblTarget] WHERE [gId] = '949938df-93b5-4f99-8937-66a0822032e4')\r\n    BEGIN\r\n        INSERT INTO [dbo].[tblTarget] ([gId], [szName], [szTable], [szIdColumn], [szNameColumn], [szDescriptionColumn])\r\n        VALUES ('949938df-93b5-4f99-8937-66a0822032e4', N'Контрагенты', '[BaseClassifiers].[dbo].[tblCounterparty]', 'gId', 'szCode', 'szName')\r\n    END\r\n   \r\n    IF NOT EXISTS (SELECT * FROM [dbo].[tblTarget] WHERE [gId] = '5bd7105d-8651-4d68-836d-fc35634945c2')\r\n    BEGIN\r\n        INSERT INTO [dbo].[tblTarget] ([gId], [szName], [szTable], [szIdColumn], [szNameColumn], [szDescriptionColumn])\r\n        VALUES ('5bd7105d-8651-4d68-836d-fc35634945c2', N'Анализы', '[QAMasterData].[dbo].[tblInspectionCharacteristic]', 'gId', 'szCode', 'szDescription')\r\n    END\r\n   \r\n    IF NOT EXISTS (SELECT * FROM [dbo].[tblTarget] WHERE [gId] = '78D3D742-F402-4951-B206-56D3E94F11B5')\r\n    BEGIN\r\n        INSERT INTO [dbo].[tblTarget] ([gId], [szName], [szTable], [szIdColumn], [szNameColumn], [szDescriptionColumn])\r\n        VALUES ('78D3D742-F402-4951-B206-56D3E94F11B5', N'Планы анализов', '[QAMasterData].[dbo].[tblInspectionMeasurementTemplate]', 'gId', 'szDescription', 'szDescription')\r\n    END\r\nEND\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 480,
        "y": 100,
        "wires": [
            [
                "7f6508f1970eb74d"
            ]
        ]
    },
    {
        "id": "3da75686bca2985b",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Выполнение запроса",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": "0",
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "msg",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 960,
        "y": 200,
        "wires": [
            [
                "8e96ecf32222d742"
            ]
        ]
    },
    {
        "id": "7f6508f1970eb74d",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "ParameterGroup",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": "0",
        "query": "USE [Universal]\r\nSET ANSI_NULLS ON\r\nSET QUOTED_IDENTIFIER ON\r\n\r\nIF OBJECT_ID('tblParameterGroup', 'U') IS NULL\r\nBEGIN\r\n\tCREATE TABLE tblParameterGroup (\r\n\t\t[gId] [uniqueidentifier] NOT NULL,\r\n\t\t[nKey] [int] IDENTITY(1,1) NOT NULL,\r\n\t\t[dtCreatedAt] datetime2(7) NOT NULL,\r\n\t\t[szName] nvarchar(255) NOT NULL,\r\n\t\t[szDescription] nvarchar(255) NOT NULL,\r\n\t\t[bLockDelete] bit NOT NULL,\r\n\t\t[gUserGroupId] [uniqueidentifier] NOT NULL,\r\n\t\tCONSTRAINT [PK_tblParameterGroup ] PRIMARY KEY CLUSTERED ([gId] ASC) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],\r\n\t\tCONSTRAINT [AK_tblParameterGroup_nKey] UNIQUE NONCLUSTERED ([nKey] ASC) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\r\n\t) ON [PRIMARY]\r\n\r\n\tCREATE TABLE [dbo].[tblUpdateHistory] ([gGroupId] [uniqueidentifier] NOT NULL, [dtUpdatedAt] datetime2(7) NOT NULL, [szUpdatedBy] nvarchar(255) NOT NULL, CONSTRAINT [PK_tblUpdateHistory ] PRIMARY KEY CLUSTERED ([gGroupId], [dtUpdatedAt] ASC))\r\nEND\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 650,
        "y": 100,
        "wires": [
            [
                "414973447d348ead"
            ]
        ]
    },
    {
        "id": "414973447d348ead",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "TargetCombination",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": "0",
        "query": "USE [Universal]\r\nSET ANSI_NULLS ON\r\nSET QUOTED_IDENTIFIER ON\r\n\r\nIF OBJECT_ID('tblTargetCombination', 'U') IS NULL\r\nBEGIN\r\n\tCREATE TABLE tblTargetCombination (\r\n\t\t[gCombinationId] [uniqueidentifier] NOT NULL,\r\n\t\t[gGroupId] [uniqueidentifier] NOT NULL,\r\n\t\t[gTargetId] [uniqueidentifier] NOT NULL,\r\n\t\t[gTargetTypeId] [uniqueidentifier] NOT NULL,\r\n\t\tCONSTRAINT [PK_tblTargetCombination ] PRIMARY KEY CLUSTERED ([gCombinationId], [gTargetId], [gGroupId] ASC) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\r\n\t) ON [PRIMARY]\r\n\t\r\n\tALTER TABLE [dbo].[tblTargetCombination]  WITH CHECK ADD CONSTRAINT [FK_Combination_Group] FOREIGN KEY([gGroupId]) REFERENCES [dbo].[tblParameterGroup] ([gId])\tON DELETE CASCADE\r\n\tALTER TABLE [dbo].[tblTargetCombination]  WITH CHECK ADD CONSTRAINT [FK_Combination_Target] FOREIGN KEY([gTargetTypeId]) REFERENCES [dbo].[tblTarget] ([gId])\tON DELETE CASCADE\r\n\r\n\tCREATE INDEX [INDEX_Combination_gCombinationId]\tON tblTargetCombination (gCombinationId);\r\nEND\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 850,
        "y": 100,
        "wires": [
            [
                "2469dc0d3fa1a927"
            ]
        ]
    },
    {
        "id": "2469dc0d3fa1a927",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Parameter",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": "0",
        "query": "USE [Universal]\r\nSET ANSI_NULLS ON\r\nSET QUOTED_IDENTIFIER ON\r\n\r\nIF OBJECT_ID('tblParameter', 'U') IS NULL\r\nBEGIN\r\n\tCREATE TABLE tblParameter (\r\n\t\t[gId] [uniqueidentifier] NOT NULL,\r\n\t\t[nKey] [int] IDENTITY(1,1) NOT NULL,\r\n\t    [szName] nvarchar(255) NOT NULL,\r\n\t    [szDescription] nvarchar(255) NOT NULL,\r\n\t\t[gGroupId] [uniqueidentifier] NOT NULL,\r\n\t\t[dtFrom] datetime2(7),\r\n\t\t[dtTo] datetime2(7),\r\n\t\t[nDefault] int,\r\n\t\t[szDefault] nvarchar(255),\r\n\t\t[dtDefault] datetime2(7),\r\n        [nPrecision] int,\r\n\t\tCONSTRAINT [PK_tblParameter] PRIMARY KEY CLUSTERED ([gId] ASC) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],\r\n\t\tCONSTRAINT [AK_tblParameter_nKey] UNIQUE NONCLUSTERED ([nKey] ASC) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\r\n\t) ON [PRIMARY]\r\n\t\r\n\tALTER TABLE [dbo].[tblParameter]  WITH CHECK ADD CONSTRAINT [FK_Parameter_Group] FOREIGN KEY([gGroupId]) REFERENCES [dbo].[tblParameterGroup] ([gId]) ON DELETE CASCADE\r\nEND\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1030,
        "y": 100,
        "wires": [
            [
                "91cf6639b2f69e80"
            ]
        ]
    },
    {
        "id": "7d82a76c955b59cf",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Выполнение запроса",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": "0",
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "msg",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 980,
        "y": 320,
        "wires": [
            [
                "02287cea5d077d18",
                "943976d1871e63d8"
            ]
        ]
    },
    {
        "id": "b429a407b3a85eb3",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Удаление группы",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": "0",
        "query": "DECLARE @id varchar(36) = msg.req.params.id\r\nDELETE FROM [dbo].[tblParameterGroup] WHERE [gId] = @id",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "msg",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 950,
        "y": 560,
        "wires": [
            [
                "dddd40535d40d062"
            ]
        ]
    },
    {
        "id": "6c0bac2e46604e8c",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Получение всех таргетов",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": "0",
        "query": "SELECT * FROM [Universal].[dbo].[tblTarget]",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 750,
        "y": 620,
        "wires": [
            [
                "f720f1bfa5ad4622"
            ]
        ]
    },
    {
        "id": "af506b9b50f055a8",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Все таргеты",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT\r\n [gId] AS id,\r\n [szName] AS name,\r\n [szIdColumn] AS col_id,\r\n [szTable] AS col_table,\r\n [szNameColumn] AS col_name,\r\n [szDescriptionColumn] cold_description\r\nFROM [Universal].[dbo].[tblTarget]",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1370,
        "y": 260,
        "wires": [
            [
                "c5497bafa046fad5"
            ]
        ]
    },
    {
        "id": "94008fcf0f4e8932",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Расположение таргетов",
        "outField": "types",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT\r\n    [gId] AS id,\r\n    [szTable] AS tbl,\r\n    [szIdColumn] AS id_col,\r\n    [szNameColumn] AS name,\r\n    [szDescriptionColumn] AS description\r\n\r\nFROM [Universal].[dbo].[tblTarget]",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 490,
        "y": 680,
        "wires": [
            [
                "3fa3b67e0d3dd07d"
            ]
        ]
    },
    {
        "id": "94a9c9ba5f562bdf",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "База данных",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "IF DB_ID('Universal') IS NULL AND DB_ID('[Universal]') IS NULL\r\nBEGIN\r\n\tCREATE DATABASE [Universal];\r\nEND;",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 330,
        "y": 100,
        "wires": [
            [
                "942b36fd5ea12637"
            ]
        ]
    },
    {
        "id": "91cf6639b2f69e80",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Value",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": "0",
        "query": "USE [Universal]\r\nSET ANSI_NULLS ON\r\nSET QUOTED_IDENTIFIER ON\r\n\r\nIF OBJECT_ID('tblValue', 'U') IS NULL\r\nBEGIN\r\n\tCREATE TABLE tblValue (\r\n\t\t[gId] [uniqueidentifier] NOT NULL,\r\n        [gParameterId] [uniqueidentifier] NOT NULL,\r\n\t    [szValue] nvarchar(255),\r\n\t    [dtValue] datetime2(7),\r\n\t    [nValue] real,\r\n\t\tCONSTRAINT [PK_tblValue ] PRIMARY KEY CLUSTERED ([gId] ASC) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\r\n\t) ON [PRIMARY]\r\n\t\r\n\tALTER TABLE [dbo].[tblValue] WITH CHECK ADD CONSTRAINT [FK_Value_Parameter] FOREIGN KEY([gParameterId]) REFERENCES [dbo].[tblParameter] ([gId]) ON DELETE CASCADE\r\n\r\n\tCREATE TABLE tblValueCombination (combination_id [uniqueidentifier] NOT NULL, value_id [uniqueidentifier] NOT NULL, [target_id] [uniqueidentifier] NOT NULL, [group_id] [uniqueidentifier] NOT NULL\r\n\tCONSTRAINT [PK_value_combination_id ] PRIMARY KEY CLUSTERED ([value_id], [combination_id], [target_id] ASC) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\r\n\t) ON [PRIMARY];\r\n\r\n\tALTER TABLE tblValueCombination WITH CHECK ADD CONSTRAINT [FK_Value_Combination] FOREIGN KEY([value_id]) REFERENCES [dbo].[tblValue] ([gId]) ON DELETE CASCADE\r\n\tALTER TABLE tblValueCombination WITH CHECK ADD CONSTRAINT [FK_Combination_Value] FOREIGN KEY([combination_id], [target_id], [group_id]) REFERENCES [dbo].[tblTargetCombination] ([gCombinationId], [gTargetId], [gGroupId])\r\nEND\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1170,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "0f6743216e5844b8",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Таргеты и связки со значениями",
        "outField": "combinations",
        "returnType": "0",
        "throwErrors": 1,
        "query": "SELECT\r\n\t[Combination].[gCombinationId] AS combination_id, [Combination].[gGroupId] AS combination_group, [Combination].[gTargetId] AS combination_target_id, [Combination].[gTargetTypeId] AS combination_type_id,\r\n\t[RS].combination_id AS rs_combination_id, [RS].value_id AS rs_value_id, [RS].target_id AS rs_target_id\r\nFROM [Universal].[dbo].[tblTargetCombination] AS [Combination] WITH (NOLOCK)\r\nLEFT JOIN [Universal].[dbo].[tblValueCombination] AS [RS] WITH (NOLOCK) ON [RS].combination_id = [Combination].[gCombinationId]\r\nWHERE [Combination].[gGroupId] = @id",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": false,
        "params": [
            {
                "output": false,
                "name": "id",
                "type": "uniqueidentifier",
                "valueType": "msg",
                "value": "req.params.id",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 1680,
        "y": 300,
        "wires": [
            [
                "9373b9c5b8fb6eb6",
                "edcbcbfe2626f1bd"
            ]
        ]
    },
    {
        "id": "e3965dc1a8c90190",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "d": true,
        "mssqlCN": "a0513bd15284c98d",
        "name": "Параметры и значения",
        "outField": "parameters",
        "returnType": "0",
        "throwErrors": 1,
        "query": "SELECT\r\n[Parameter].[gId] AS parameter_id, [Parameter].[nKey] AS parameter_key, [Parameter].[gGroupId] AS parameter_group,\t[Parameter].[szName] AS parameter_name, [Parameter].[szDescription] AS parameter_description, [Parameter].[dtFrom] AS parameter_from, [Parameter].[dtTo] AS parameter_to, [Parameter].[nPrecision] AS parameter_precision,[Parameter].[nDefault] AS parameter_default_n, [Parameter].[szDefault] AS parameter_default_str, [Parameter].[dtDefault] AS parameter_default_dt,\r\n[Value].[gId] AS value_id, [Value].[gParameterId] AS value_param_id, [Value].[szValue] AS string_value, [Value].[dtValue] AS data_value, [Value].[nValue] AS number_value\r\nFROM [Universal].[dbo].[tblParameter] AS [Parameter]\r\nLEFT JOIN [Universal].[dbo].[tblValue] AS [Value] ON [Value].[gParameterId] = [Parameter].[gId]\r\nWHERE [Parameter].[gGroupId] = @id",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "id",
                "type": "uniqueidentifier",
                "valueType": "msg",
                "value": "req.params.id",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 1410,
        "y": 300,
        "wires": [
            [
                "72c0a5b0cca9e7e3",
                "7672acdf108403b5",
                "0f6743216e5844b8"
            ]
        ]
    },
    {
        "id": "6d3fa5520ea15857",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Выполнение запроса",
        "outField": "targets",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "loop.value",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1300,
        "y": 720,
        "wires": [
            [
                "8e1a44306cd47009"
            ]
        ]
    },
    {
        "id": "aefbb4bf7d5a33ba",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Выполнение запроса",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": "0",
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload.query",
        "queryOptType": "msg",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 2480,
        "y": 400,
        "wires": [
            [
                "3c04a1a70c3c8c8c"
            ]
        ]
    },
    {
        "id": "7c0e5a7910fac1f1",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "cycle_upload",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "Query",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 2330,
        "y": 580,
        "wires": [
            [
                "adf8e9432ecef1a9"
            ]
        ]
    },
    {
        "id": "6de3b87ebfa9f296",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a68c9f523b695218",
        "name": "UberQuery",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "EXEC [dbo].sp_addUberQuery '{{{user_id}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 2470,
        "y": 460,
        "wires": [
            [
                "2f4e63a96e5f39b1"
            ]
        ]
    },
    {
        "id": "2af9f0ed34a2937e",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a68c9f523b695218",
        "name": "toError",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "insert into [dbo].[tblUniversalDirectoryErrors] (szError,dtTimestamp,szUser,szErrorDetails)\r\nvalues ('NR_error','{{{time}}}','{{{updUser}}}','{{{errorWhere}}}')",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 2550,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "db93128692b18007",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Все таргеты",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT\r\n\t[Combination].[gCombinationId] AS combination_id, [Combination].[gGroupId] AS combination_group, [Combination].[gTargetId] AS combination_target_id, [Combination].[gTargetTypeId] AS combination_type_id,\r\n\t[RS].combination_id AS rs_combination_id, [RS].value_id AS rs_value_id, [RS].target_id AS rs_target_id\r\nFROM [Universal].[dbo].[tblTargetCombination] AS [Combination]\r\nLEFT JOIN [Universal].[dbo].[tblValueCombination] AS [RS] ON [RS].combination_id = [Combination].[gCombinationId]\r\nWHERE [Combination].[gGroupId] = '179916B2-F14B-4D64-B5D2-7DD0BC26085C'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1750,
        "y": 100,
        "wires": [
            [
                "18f3e495b79c8dfa"
            ]
        ]
    },
    {
        "id": "f6dc40f0e193dab4",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Таргеты и связки со значениями",
        "outField": "combinations",
        "returnType": "0",
        "throwErrors": 1,
        "query": "--DECLARE @gGroupId UNIQUEIDENTIFIER = 'cd0ec1d9-e607-475e-ae58-6d70b6714aab';\r\n--DECLARE @gGroupId UNIQUEIDENTIFIER = '179916B2-F14B-4D64-B5D2-7DD0BC26085C'\r\n-- Используем ВРЕМЕННУЮ ТАБЛИЦУ\r\nIF OBJECT_ID('tempdb..#targets') IS NOT NULL DROP TABLE #targets;\r\n\r\nCREATE TABLE #targets (\r\n    _id NVARCHAR(36),\r\n    _type_id NVARCHAR(36),\r\n    _name NVARCHAR(255),\r\n    _description NVARCHAR(255)\r\n);\r\nCREATE CLUSTERED INDEX IX_targets_id_type ON #targets (_id, _type_id);\r\n\r\n-- Курсор по target'ам\r\nDECLARE @targetId UNIQUEIDENTIFIER;\r\nDECLARE @targetTypeId UNIQUEIDENTIFIER;\r\n\r\nDECLARE @szTable NVARCHAR(MAX);\r\nDECLARE @szIdColumn NVARCHAR(128);\r\nDECLARE @szNameColumn NVARCHAR(128);\r\nDECLARE @szDescriptionColumn NVARCHAR(128);\r\nDECLARE @sql NVARCHAR(MAX);\r\n\r\nDECLARE cur CURSOR FOR\r\n\r\nwith targetPairs AS\r\n(\r\nSELECT gTargetId, gTargetTypeId\r\nFROM [Universal].[dbo].tblTargetCombination\r\nWHERE gGroupId = @gGroupId\r\nGROUP BY gTargetId, gTargetTypeId\r\n)\r\nSELECT gTargetId, gTargetTypeId FROM targetPairs\r\n\r\nOPEN cur;\r\nFETCH NEXT FROM cur INTO @targetId, @targetTypeId;\r\n\r\nWHILE @@FETCH_STATUS = 0\r\nBEGIN\r\n    -- Получаем параметры из tblTarget\r\n    SELECT \r\n        @szTable = szTable,\r\n        @szIdColumn = szIdColumn,\r\n        @szNameColumn = szNameColumn,\r\n        @szDescriptionColumn = szDescriptionColumn\r\n    FROM [Universal].[dbo].tblTarget\r\n    WHERE gId = @targetTypeId;\r\n\r\n    -- Строим и выполняем динамический SQL\r\n    SET @sql = N'\r\n        INSERT INTO #targets (_id, _type_id, _name, _description)\r\n        SELECT \r\n            N''' + CAST(@targetId AS NVARCHAR(36)) + ''',\r\n            N''' + CAST(@targetTypeId AS NVARCHAR(36)) + ''',\r\n            CAST([' + @szNameColumn + '] AS NVARCHAR(255)),\r\n            CAST([' + @szDescriptionColumn + '] AS NVARCHAR(255))\r\n        FROM ' + @szTable + '\r\n        WHERE [' + @szIdColumn + '] = ''' + CAST(@targetId AS NVARCHAR(36)) + ''';';\r\n\r\n    EXEC sp_executesql @sql;\r\n\r\n    FETCH NEXT FROM cur INTO @targetId, @targetTypeId;\r\nEND\r\n\r\nCLOSE cur;\r\nDEALLOCATE cur;\r\n\r\n-- Смотрим результат\r\n--SELECT * FROM #targets;\r\n\r\nSELECT \r\n    tc.gCombinationId as [id],\r\n    tc.gGroupId as [group_id],\r\n\r\n    -- JSON targets\r\n(\r\n    SELECT \r\n        tg._id AS [id],\r\n        tg._type_id AS [type_id],\r\n        tg._name AS [name],\r\n        tg._description AS [description]\r\n    FROM #targets tg\r\n    JOIN [Universal].[dbo].tblTargetCombination vc WITH (NOLOCK)\r\n        ON vc.gTargetId = tg._id AND vc.gTargetTypeId = tg._type_id\r\n    WHERE vc.gCombinationId = tc.gCombinationId AND vc.gGroupId = tc.gGroupId\r\n  order by tg._type_id\r\n    FOR JSON PATH, INCLUDE_NULL_VALUES\r\n) AS targets,\r\n\r\n    -- JSON values\r\n    '[' + \r\n    STUFF((SELECT DISTINCT\r\n        ',' + \r\n        '{\"id\":' + ISNULL('\"' + REPLACE(v.gId, '\"', '\\\"') + '\"', 'null') +\r\n        ',\"parameter_id\":' + ISNULL('\"' + REPLACE(v.gParameterId, '\"', '\\\"') + '\"', 'null') +\r\n        ',\"string_value\":' + ISNULL('\"' + REPLACE(v.szValue, '\"', '\\\"') + '\"', 'null') +\r\n        ',\"num_value\":' + ISNULL(CAST(v.nValue AS NVARCHAR), 'null') +\r\n        ',\"date_value\":' + \r\n            CASE \r\n                WHEN v.dtValue IS NOT NULL THEN '\"' + CONVERT(NVARCHAR, v.dtValue, 126) + '\"'\r\n                ELSE 'null'\r\n            END +\r\n        '}'\r\n    FROM [Universal].[dbo].tblValue v\r\n    inner JOIN  [Universal].[dbo].tblValueCombination vc ON vc.value_id = v.gId\r\n    WHERE vc.combination_id = tc.gCombinationId AND vc.group_id = tc.gGroupId\r\n    FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') + \r\n    ']' AS [values]\r\n\r\nFROM [Universal].[dbo].tblTargetCombination tc\r\nWHERE tc.gGroupId = @gGroupId \r\nGROUP BY tc.gCombinationId, tc.gGroupId ;",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": false,
        "params": [
            {
                "output": false,
                "name": "gGroupId",
                "type": "uniqueidentifier",
                "valueType": "msg",
                "value": "req.params.id",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 1680,
        "y": 360,
        "wires": [
            [
                "5fe1c960833710dd",
                "0e3ab0258e4417d8"
            ]
        ]
    },
    {
        "id": "f638941b5a471f0d",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Параметры и значения",
        "outField": "parameters",
        "returnType": "0",
        "throwErrors": 1,
        "query": "SELECT \r\n[Parameter].[gId] AS [id],\r\n[Parameter].[gGroupId] AS [group_id],\r\n[Parameter].[szName] AS [name],\r\n[Parameter].[szDescription] AS [description],\r\n[Parameter].[dtFrom] AS [from],\r\n[Parameter].[dtTo] AS [to],\r\n[Parameter].[nPrecision] AS [precision],\r\n[Parameter].[nDefault] AS [default_number], \r\n[Parameter].[szDefault] AS [default_string],\r\n[Parameter].[dtDefault] AS [default_date]\r\nFROM [Universal].[dbo].[tblParameter] AS [Parameter]\r\nWHERE [Parameter].[gGroupId] = @id",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "id",
                "type": "uniqueidentifier",
                "valueType": "msg",
                "value": "req.params.id",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 1410,
        "y": 340,
        "wires": [
            [
                "f6dc40f0e193dab4"
            ]
        ]
    },
    {
        "id": "0e3ab0258e4417d8",
        "type": "MSSQL",
        "z": "c2cffd502b9dd43b",
        "mssqlCN": "a0513bd15284c98d",
        "name": "Таргеты и связки со значениями",
        "outField": "types",
        "returnType": "0",
        "throwErrors": 1,
        "query": "SELECT distinct\r\nt.gTargetTypeId \r\nFROM [Universal].[dbo].tblTargetCombination as t\r\nWHERE t.gGroupId = @gGroupId\r\norder by  t.gTargetTypeId ",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": false,
        "params": [
            {
                "output": false,
                "name": "gGroupId",
                "type": "uniqueidentifier",
                "valueType": "msg",
                "value": "req.params.id",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 2000,
        "y": 400,
        "wires": [
            [
                "3ea0a58d3ef8f2ed"
            ]
        ]
    },
    {
        "id": "fd9efa8c2a611468",
        "type": "http in",
        "z": "4dade99a66dcc028",
        "name": "",
        "url": "/api/ReceptionBatch",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "f6ce7e2df50106b5"
            ]
        ]
    },
    {
        "id": "f0d017cc33493941",
        "type": "http response",
        "z": "4dade99a66dcc028",
        "name": "",
        "statusCode": "",
        "headers": {
            "Content-type": "application/json"
        },
        "x": 1490,
        "y": 280,
        "wires": []
    },
    {
        "id": "2d5fbbc35da986c2",
        "type": "function",
        "z": "4dade99a66dcc028",
        "name": "prepare response",
        "func": "msg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 280,
        "wires": [
            [
                "f6ee2837120032a3"
            ]
        ]
    },
    {
        "id": "f4a0579ae47efcab",
        "type": "http in",
        "z": "4dade99a66dcc028",
        "name": "",
        "url": "/api/ReceptionBatch",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "3005f493d6a94385"
            ]
        ]
    },
    {
        "id": "4a1d7ff0d7a6b1d9",
        "type": "http response",
        "z": "4dade99a66dcc028",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1600,
        "y": 400,
        "wires": []
    },
    {
        "id": "f3174f31b22e9107",
        "type": "function",
        "z": "4dade99a66dcc028",
        "name": "prepare response",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 400,
        "wires": [
            [
                "6d045dc0a3c05437"
            ]
        ]
    },
    {
        "id": "4e0abd16f2d80adc",
        "type": "http in",
        "z": "4dade99a66dcc028",
        "name": "",
        "url": "/api/ReceptionBatch",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 500,
        "wires": [
            [
                "966c82d7a1f712dd"
            ]
        ]
    },
    {
        "id": "4eb9fe04a5505f98",
        "type": "http response",
        "z": "4dade99a66dcc028",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1600,
        "y": 500,
        "wires": []
    },
    {
        "id": "ddc43b44f91b5ae7",
        "type": "function",
        "z": "4dade99a66dcc028",
        "name": "prepare response",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 500,
        "wires": [
            [
                "d73bf91a08816792"
            ]
        ]
    },
    {
        "id": "f6ce7e2df50106b5",
        "type": "json",
        "z": "4dade99a66dcc028",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 390,
        "y": 280,
        "wires": [
            [
                "694c44a7584e5219",
                "0d9a3249cc746326"
            ]
        ]
    },
    {
        "id": "f6ee2837120032a3",
        "type": "json",
        "z": "4dade99a66dcc028",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1310,
        "y": 280,
        "wires": [
            [
                "f0d017cc33493941",
                "4f6bb52aac793da7"
            ]
        ]
    },
    {
        "id": "3005f493d6a94385",
        "type": "json",
        "z": "4dade99a66dcc028",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 430,
        "y": 400,
        "wires": [
            [
                "fc26a38774f6e5ab"
            ]
        ]
    },
    {
        "id": "6d045dc0a3c05437",
        "type": "json",
        "z": "4dade99a66dcc028",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1410,
        "y": 400,
        "wires": [
            [
                "4a1d7ff0d7a6b1d9"
            ]
        ]
    },
    {
        "id": "d73bf91a08816792",
        "type": "json",
        "z": "4dade99a66dcc028",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1410,
        "y": 500,
        "wires": [
            [
                "4eb9fe04a5505f98"
            ]
        ]
    },
    {
        "id": "966c82d7a1f712dd",
        "type": "json",
        "z": "4dade99a66dcc028",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 410,
        "y": 500,
        "wires": [
            [
                "30d1029ca28a73b7"
            ]
        ]
    },
    {
        "id": "694c44a7584e5219",
        "type": "function",
        "z": "4dade99a66dcc028",
        "name": "PrepareBatchIds",
        "func": "msg.BatchIds = msg.payload.BatchIds.map(x => \"'\" + x + \"'\").join(\",\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 280,
        "wires": [
            [
                "2355d4301c315ec8"
            ]
        ]
    },
    {
        "id": "880bc281cdf3b2c0",
        "type": "http in",
        "z": "4dade99a66dcc028",
        "name": "",
        "url": "/api/ReceptionBatch/byShipment",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 620,
        "wires": [
            [
                "9464b6b350532a19"
            ]
        ]
    },
    {
        "id": "920b9142990d47dd",
        "type": "http response",
        "z": "4dade99a66dcc028",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1320,
        "y": 620,
        "wires": []
    },
    {
        "id": "b5b44db0945b71f4",
        "type": "function",
        "z": "4dade99a66dcc028",
        "name": "prepare response",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 620,
        "wires": [
            [
                "1ff94fed34aa1b8b"
            ]
        ]
    },
    {
        "id": "9464b6b350532a19",
        "type": "json",
        "z": "4dade99a66dcc028",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 450,
        "y": 620,
        "wires": [
            [
                "2f13cb8d36945960"
            ]
        ]
    },
    {
        "id": "1ff94fed34aa1b8b",
        "type": "json",
        "z": "4dade99a66dcc028",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1130,
        "y": 620,
        "wires": [
            [
                "920b9142990d47dd"
            ]
        ]
    },
    {
        "id": "0d9a3249cc746326",
        "type": "debug",
        "z": "4dade99a66dcc028",
        "name": "debug 255",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 160,
        "wires": []
    },
    {
        "id": "4f6bb52aac793da7",
        "type": "debug",
        "z": "4dade99a66dcc028",
        "name": "debug 256",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 180,
        "wires": []
    },
    {
        "id": "30d1029ca28a73b7",
        "type": "loop",
        "z": "4dade99a66dcc028",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "payload",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 630,
        "y": 500,
        "wires": [
            [
                "ddc43b44f91b5ae7"
            ],
            [
                "4a27feea6f312e7c"
            ]
        ]
    },
    {
        "id": "fc26a38774f6e5ab",
        "type": "loop",
        "z": "4dade99a66dcc028",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "payload",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 630,
        "y": 400,
        "wires": [
            [
                "f3174f31b22e9107"
            ],
            [
                "a008e5f5d0637036"
            ]
        ]
    },
    {
        "id": "2355d4301c315ec8",
        "type": "MSSQL",
        "z": "4dade99a66dcc028",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Get ReceptionBatch",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT [gBatchId] as BatchId\r\n      ,[nQuantity] as Quantity\r\n  FROM [ReceptionRuntime].[dbo].[tblReceptionBatch]\r\n  where gBatchId in ({{{BatchIds}}})",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 860,
        "y": 280,
        "wires": [
            [
                "2d5fbbc35da986c2"
            ]
        ]
    },
    {
        "id": "a008e5f5d0637036",
        "type": "MSSQL",
        "z": "4dade99a66dcc028",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Create ReceptionBatch",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": " insert into [ReceptionRuntime].[dbo].[tblReceptionBatch]\r\n  values('{{{payload.BatchId}}}', {{{payload.Quantity}}})",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 950,
        "y": 400,
        "wires": [
            [
                "fc26a38774f6e5ab"
            ]
        ]
    },
    {
        "id": "4a27feea6f312e7c",
        "type": "MSSQL",
        "z": "4dade99a66dcc028",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "Update ReceptionBatch",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "update [ReceptionRuntime].[dbo].[tblReceptionBatch]\r\nset nQuantity = {{{payload.Quantity}}}\r\n where gBatchId = '{{{payload.BatchId}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 890,
        "y": 500,
        "wires": [
            [
                "30d1029ca28a73b7"
            ]
        ]
    },
    {
        "id": "2f13cb8d36945960",
        "type": "MSSQL",
        "z": "4dade99a66dcc028",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "CreateBatches",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "  insert into [ReceptionRuntime].[dbo].[tblReceptionBatch]\r\n  select b.gId, b.nQuantity from BatchManagementDb.dbo.tblBatch  b\r\n  where gShipmentId = '{{{payload.ShipmentId}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 660,
        "y": 620,
        "wires": [
            [
                "b5b44db0945b71f4"
            ]
        ]
    },
    {
        "id": "ccee56ade5f4a9c1",
        "type": "http in",
        "z": "1599604f489b25c7",
        "name": "",
        "url": "api/calculateWeightDeviation",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 280,
        "wires": [
            [
                "bbb5bbebf9ba8d08",
                "ee662ac6a082b9a0"
            ]
        ]
    },
    {
        "id": "7151cfbe2c0f044e",
        "type": "inject",
        "z": "1599604f489b25c7",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"MaterialId\":\"EEF5FF07-0E17-41B6-ABCF-001B8BC88100\",\"Weight\":50,\"PlanWeight\":40}",
        "payloadType": "json",
        "x": 180,
        "y": 160,
        "wires": [
            [
                "bbb5bbebf9ba8d08"
            ]
        ]
    },
    {
        "id": "d2d7496673b2cdf3",
        "type": "switch",
        "z": "1599604f489b25c7",
        "name": "",
        "property": "Deviation",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 280,
        "wires": [
            [
                "575d7a92576d6b0e"
            ],
            [
                "05dad79819c1897a"
            ]
        ]
    },
    {
        "id": "05dad79819c1897a",
        "type": "function",
        "z": "1599604f489b25c7",
        "name": "function 1",
        "func": "let resultWeight;\n\nif(msg.payload.PlanWeight > msg.payload.Weight && msg.payload.PlanWeight > msg.payload.Weight + msg.Deviation[0].Value)\n{\n    resultWeight = msg.payload.Weight + msg.Deviation[0].Value;\n    node.warn(\"1 \" + resultWeight);\n}\nif(msg.payload.PlanWeight > msg.payload.Weight && msg.payload.PlanWeight <= msg.payload.Weight + msg.Deviation[0].Value)\n{\n    resultWeight = msg.payload.PlanWeight;\n    node.warn(\"2 \" + resultWeight);\n}   \nif (msg.payload.PlanWeight < msg.payload.Weight && msg.payload.PlanWeight + msg.Deviation[0].Value < msg.payload.Weight)\n{\n    resultWeight = msg.payload.Weight - msg.Deviation[0].Value;\n    node.warn(\"3 \" + resultWeight);\n}\nif (msg.payload.PlanWeight < msg.payload.Weight && msg.payload.PlanWeight + msg.Deviation[0].Value >= msg.payload.Weight)\n{\n    resultWeight = msg.payload.PlanWeight;\n    node.warn(\"4 \" + resultWeight);\n}\nif (msg.payload.PlanWeight === msg.payload.Weight)\n{\n    resultWeight = msg.payload.PlanWeight;\n    node.warn(\"5 \" + resultWeight);\n}\nlet Resault = {\n    ResultWeight: resultWeight,\n}\nmsg.payload = Resault;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 360,
        "wires": [
            [
                "8f32c942a56c2296",
                "2ab6769e5d07488f"
            ]
        ]
    },
    {
        "id": "8f32c942a56c2296",
        "type": "http response",
        "z": "1599604f489b25c7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1150,
        "y": 360,
        "wires": []
    },
    {
        "id": "575d7a92576d6b0e",
        "type": "change",
        "z": "1599604f489b25c7",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.Weight",
                "pt": "msg",
                "to": "payload.resultWeight",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 160,
        "wires": [
            [
                "a63f84919f0d7bae",
                "2c084207fde9859b"
            ]
        ]
    },
    {
        "id": "a63f84919f0d7bae",
        "type": "http response",
        "z": "1599604f489b25c7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1230,
        "y": 160,
        "wires": []
    },
    {
        "id": "6d4e7fa9c4dff15c",
        "type": "comment",
        "z": "1599604f489b25c7",
        "name": "AA",
        "info": "поулчаем данные ид материала,плановый вес и итоговый вес.\nполучаем значение допуска по материалу из справочника по материалу\nлогика расчета веса по допуску",
        "x": 70,
        "y": 60,
        "wires": []
    },
    {
        "id": "ee662ac6a082b9a0",
        "type": "debug",
        "z": "1599604f489b25c7",
        "name": "debug 228",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 360,
        "wires": []
    },
    {
        "id": "e8923c41be40e93e",
        "type": "debug",
        "z": "1599604f489b25c7",
        "name": "debug 229",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 360,
        "wires": []
    },
    {
        "id": "2ab6769e5d07488f",
        "type": "debug",
        "z": "1599604f489b25c7",
        "name": "debug 230",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 420,
        "wires": []
    },
    {
        "id": "2c084207fde9859b",
        "type": "debug",
        "z": "1599604f489b25c7",
        "name": "debug 231",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 260,
        "wires": []
    },
    {
        "id": "bbb5bbebf9ba8d08",
        "type": "MSSQL",
        "z": "1599604f489b25c7",
        "mssqlCN": "a0513bd15284c98d",
        "name": "SelectDeviation",
        "outField": "Deviation",
        "returnType": 0,
        "throwErrors": 1,
        "query": "\r\nSelect Val.nValue as Value\r\n   from [BaseClassifiers].[dbo].[tblMaterial] Mat\r\n      join [Universal].[dbo].[tblTargetCombination] TC\r\n         on TC.gTargetid = Mat.gId\r\n            join [Universal].[dbo].[tblParameter] Par\r\n               on TC.gGroupId = Par.gGroupId\r\n                  join [Universal].[dbo].[tblValue] Val\r\n                     on Par.gId = Val.gParameterId\r\n                        join [Universal].[dbo].[tblValueCombination] VC\r\n                           on Val.gId = VC.value_id\r\n                              join [Universal].[dbo].[tblParameterGroup] PG\r\n                                 on Par.gGroupId = PG.gId\r\n      \r\n\r\n  where Par.szName = N'Значение допуска' and PG.szName = N'Допуск' and Mat.gId = '{{{payload.MaterialId}}}' and TC.gCombinationId = VC.combination_id",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 500,
        "y": 280,
        "wires": [
            [
                "d2d7496673b2cdf3",
                "e8923c41be40e93e"
            ]
        ]
    },
    {
        "id": "f44fd90c461d20fd",
        "type": "http in",
        "z": "1a2e5283742c6999",
        "name": "",
        "url": "api/reception/shipment/complete",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 180,
        "wires": [
            [
                "92c253b0134360bc"
            ]
        ]
    },
    {
        "id": "f29df435f0de1982",
        "type": "function",
        "z": "1a2e5283742c6999",
        "name": "PreapreResponse",
        "func": "msg.statusCode=404;\nmsg.payload = {\n    Messages: { \"Russian\": [msg.message] },\n    ExceptionType: \"SolisoftEntityNotFoundException\",\n    StatusCode: msg.statusCode\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 600,
        "wires": [
            [
                "5909ccfe62362e23",
                "7448755cbfd09a98"
            ]
        ]
    },
    {
        "id": "0164b49d4445cd13",
        "type": "function",
        "z": "1a2e5283742c6999",
        "name": "ProductionOrderEmpty",
        "func": "if(msg.message == null)\n{\n    msg.message = \"\";\n}\n\nmsg.message += \"Не получилось создать заказ на производство на этот материал.\\n\"\nif (msg.payload.messages != undefined\n    && msg.payload.messages != null\n    && msg.payload.messages.length > 0)\n{\n    msg.message += msg.payload.messages[0];\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 560,
        "wires": [
            [
                "f29df435f0de1982"
            ]
        ]
    },
    {
        "id": "7448755cbfd09a98",
        "type": "http response",
        "z": "1a2e5283742c6999",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2570,
        "y": 600,
        "wires": []
    },
    {
        "id": "3d2d9adcfd58d4ee",
        "type": "function",
        "z": "1a2e5283742c6999",
        "name": "ProcessEmpty",
        "func": "if(msg.message == null)\n{\n    msg.message = \"\";\n}\n\nmsg.message += \"Не получилось создать процесс.\\n\"\n\nif (msg.payload.messages != undefined\n    && msg.payload.messages != null\n    && msg.payload.messages.length > 0)\n{\n    msg.message += msg.payload.messages[0];\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 620,
        "wires": [
            [
                "f29df435f0de1982"
            ]
        ]
    },
    {
        "id": "db2c5222d8f9c0bd",
        "type": "function",
        "z": "1a2e5283742c6999",
        "name": "StartProcessError",
        "func": "if(msg.message == null)\n{\n    msg.message = \"\";\n}\n\n\n\nmsg.message += \"Не получилось запустить процесс.\\n\"\n\nif (msg.payload.messages != undefined\n    && msg.payload.messages != null\n    && msg.payload.messages.length > 0)\n{\n    msg.message += msg.payload.messages[0];\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 680,
        "wires": [
            [
                "f29df435f0de1982"
            ]
        ]
    },
    {
        "id": "5909ccfe62362e23",
        "type": "debug",
        "z": "1a2e5283742c6999",
        "name": "debug 242",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 400,
        "wires": []
    },
    {
        "id": "ecf982abdd9274ef",
        "type": "function",
        "z": "1a2e5283742c6999",
        "name": "PrepareCreateProductionOrderRequest",
        "func": "msg.payload\n= \n{\n    OrderTemplateId: msg.shipmentData[0].orderTemplateId,\n    PlanAmount: msg.shipmentData[0].processAmount,\n    PlanStart: msg.shipmentData[0].planDate,\n    ShiftRuntimeId: msg.shipmentData[0].shiftId,\n    FinalEquipmentId: msg.shipmentData[0].equipmentId,\n    CreateTypeId: msg.shipmentData[0].createTypeId,\n};\n\nmsg.url = \"http://localhost:52449/api/ProductionOrder/createByOrderTemplateId\";\nmsg.method = \"PUT\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 580,
        "wires": [
            [
                "c6c1a76e9a4c89d2"
            ]
        ]
    },
    {
        "id": "c6c1a76e9a4c89d2",
        "type": "http request",
        "z": "1a2e5283742c6999",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-type",
                "valueType": "other",
                "valueValue": "application/json"
            },
            {
                "keyType": "other",
                "keyValue": "initiator-user",
                "valueType": "msg",
                "valueValue": "UserId"
            }
        ],
        "x": 850,
        "y": 580,
        "wires": [
            [
                "2cf2e994b1f6f53b",
                "3656bd7fff360f75"
            ]
        ]
    },
    {
        "id": "2cf2e994b1f6f53b",
        "type": "switch",
        "z": "1a2e5283742c6999",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1030,
        "y": 580,
        "wires": [
            [
                "affcfdeebc018384"
            ],
            [
                "0164b49d4445cd13"
            ]
        ]
    },
    {
        "id": "26f66217c5bcb649",
        "type": "function",
        "z": "1a2e5283742c6999",
        "name": "PrepareCreateProcessRequest",
        "func": "msg.payload\n= \n{\n    OperationId: msg.ProductionOrder.operations[0].id,\n    ProcessAmount: msg.shipmentData[0].processAmount,\n    EquipmentId: msg.shipmentData[0].equipmentId,\n    BillOfMaterialId: msg.bom[0] != null ? msg.bom[0].id : null,\n    CreateTypeId: 1\n};\n\nmsg.url = \"http://localhost:52449/api/Process\";\nmsg.method = \"POST\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 660,
        "wires": [
            [
                "cc7a2c752861dc2b"
            ]
        ]
    },
    {
        "id": "25a09ff10bdb938e",
        "type": "switch",
        "z": "1a2e5283742c6999",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1110,
        "y": 660,
        "wires": [
            [
                "61dc2ecc7d8e5f73"
            ],
            [
                "3d2d9adcfd58d4ee"
            ]
        ]
    },
    {
        "id": "04fbb51d0b308aec",
        "type": "function",
        "z": "1a2e5283742c6999",
        "name": "PrepareReceptionBatches",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 900,
        "wires": [
            [
                "e9f86d14997c7c47"
            ]
        ]
    },
    {
        "id": "e9f86d14997c7c47",
        "type": "function",
        "z": "1a2e5283742c6999",
        "name": "PrepareOuttakeRequest",
        "func": "msg.payload\n= \n{\n    StorageLocationId: msg.ReceptionBatches[0].outtakeId,\n    MaterialId: msg.shipmentData[0].materialId,\n    Quantity: msg.ReceptionBatches[0].quantitySum,\n};\n\nmsg.url = \"http://localhost:52448/api/Operation/outtakeByMaterial\";\nmsg.method = \"PUT\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 900,
        "wires": [
            [
                "68f748805e79c5ee"
            ]
        ]
    },
    {
        "id": "0d4a02834fb46251",
        "type": "function",
        "z": "1a2e5283742c6999",
        "name": "PrepareCreateBatchRequest",
        "func": "msg.StorageLocationId = msg.payload.intakeId;\nmsg.Batch = msg.payload;\n\nmsg.payload\n= \n{\n    OperationId: msg.ProductionOrder.operations[0].id,\n    StorageLocationId: msg.StorageLocationId,\n    MaterialId: msg.shipmentData[0].materialId,\n    BatchNumber: msg.payload.szBatchNumber,\n    SupplierNumber: msg.payload.szSupplierNumber,\n    Comment: msg.payload.szComment,\n    Expiration: msg.payload.dtExpiration,\n    PackagingDate: msg.payload.dtPackagingDate,\n    NumberSap: msg.payload.szNumberSAP,\n    ProcessId: msg.Process.id\n};\n\nmsg.url = \"http://localhost:52448/api/Operation/Create\";\nmsg.method = \"PUT\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1000,
        "wires": [
            [
                "3f33244e2693e58d"
            ]
        ]
    },
    {
        "id": "72b26726b0d4a72f",
        "type": "function",
        "z": "1a2e5283742c6999",
        "name": "OuttakeEmpty",
        "func": "if(msg.message == null)\n{\n    msg.message = \"\";\n}\n\nmsg.message += \"Не получилось сделать выпуск.\\n\"\n\nif (msg.payload.messages != undefined\n    && msg.payload.messages != null\n    && msg.payload.messages.length > 0)\n{\n    msg.message += msg.payload.messages[0];\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 900,
        "wires": [
            [
                "f29df435f0de1982"
            ]
        ]
    },
    {
        "id": "92c253b0134360bc",
        "type": "json",
        "z": "1a2e5283742c6999",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 230,
        "y": 460,
        "wires": [
            [
                "b3470d65499fcd60"
            ]
        ]
    },
    {
        "id": "f8f92478a4cfa11a",
        "type": "function",
        "z": "1a2e5283742c6999",
        "name": "PrepareStartProcessRequest",
        "func": "\nmsg.method = \"POST\"\n\nmsg.url = \"http://localhost:5280/api/UserTasks/do_action/\" + msg.Process.userTaskId + \"/InProcess\"\nmsg.payload = {\n    A:\"aa\"\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 800,
        "wires": [
            [
                "a54c475337178ead"
            ]
        ]
    },
    {
        "id": "0e7f5eea26e8a6d4",
        "type": "switch",
        "z": "1a2e5283742c6999",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 800,
        "wires": [
            [
                "410a80eed28ccfdd"
            ],
            [
                "db2c5222d8f9c0bd"
            ]
        ]
    },
    {
        "id": "05e5362f854c71bf",
        "type": "function",
        "z": "1a2e5283742c6999",
        "name": "BatchEmpty",
        "func": "if(msg.message == null)\n{\n    msg.message = \"\";\n}\n\nmsg.message += \"Не получилоось создать партию.\\n\"\n\nif (msg.payload.messages != undefined\n    && msg.payload.messages != null\n    && msg.payload.messages.length > 0)\n{\n    msg.message += msg.payload.messages[0];\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 1000,
        "wires": [
            [
                "f29df435f0de1982"
            ]
        ]
    },
    {
        "id": "cc7a2c752861dc2b",
        "type": "http request",
        "z": "1a2e5283742c6999",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-type",
                "valueType": "other",
                "valueValue": "application/json"
            },
            {
                "keyType": "other",
                "keyValue": "initiator-user",
                "valueType": "msg",
                "valueValue": "UserId"
            }
        ],
        "x": 910,
        "y": 660,
        "wires": [
            [
                "25a09ff10bdb938e"
            ]
        ]
    },
    {
        "id": "a54c475337178ead",
        "type": "http request",
        "z": "1a2e5283742c6999",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-type",
                "valueType": "other",
                "valueValue": "application/json"
            },
            {
                "keyType": "other",
                "keyValue": "initiator-user",
                "valueType": "msg",
                "valueValue": "UserId"
            }
        ],
        "x": 690,
        "y": 800,
        "wires": [
            [
                "0e7f5eea26e8a6d4"
            ]
        ]
    },
    {
        "id": "68f748805e79c5ee",
        "type": "http request",
        "z": "1a2e5283742c6999",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-type",
                "valueType": "other",
                "valueValue": "application/json"
            },
            {
                "keyType": "other",
                "keyValue": "initiator-user",
                "valueType": "msg",
                "valueValue": "UserId"
            }
        ],
        "x": 1250,
        "y": 900,
        "wires": [
            [
                "6a31114b9805f1b9"
            ]
        ]
    },
    {
        "id": "6a31114b9805f1b9",
        "type": "switch",
        "z": "1a2e5283742c6999",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1450,
        "y": 900,
        "wires": [
            [
                "23c74eafcde56f3b"
            ],
            [
                "72b26726b0d4a72f"
            ]
        ]
    },
    {
        "id": "d75aa3202c671f77",
        "type": "function",
        "z": "1a2e5283742c6999",
        "name": "IntakeEmpty",
        "func": "if(msg.message == null)\n{\n    msg.message = \"\";\n}\n\nmsg.message += \"Не получилось сделать потребление.\\n\"\n\nif (msg.payload.messages != undefined\n    && msg.payload.messages != null\n    && msg.payload.messages.length > 0)\n{\n    msg.message += msg.payload.messages[0];\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 1100,
        "wires": [
            [
                "f29df435f0de1982"
            ]
        ]
    },
    {
        "id": "d9eb2fcdbe4bace2",
        "type": "switch",
        "z": "1a2e5283742c6999",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1070,
        "y": 1000,
        "wires": [
            [
                "4429576299871cd3"
            ],
            [
                "05e5362f854c71bf"
            ]
        ]
    },
    {
        "id": "3f33244e2693e58d",
        "type": "http request",
        "z": "1a2e5283742c6999",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-type",
                "valueType": "other",
                "valueValue": "application/json"
            },
            {
                "keyType": "other",
                "keyValue": "initiator-user",
                "valueType": "msg",
                "valueValue": "UserId"
            }
        ],
        "x": 830,
        "y": 1000,
        "wires": [
            [
                "d9eb2fcdbe4bace2"
            ]
        ]
    },
    {
        "id": "4429576299871cd3",
        "type": "function",
        "z": "1a2e5283742c6999",
        "name": "PrepareIntakeRequest",
        "func": "msg.payload\n= \n{\n    OperationId: msg.ProductionOrder.operations[0].id,\n    ProcessId: msg.Process.id,\n    StorageLocationId: msg.StorageLocationId,\n    MaterialId: msg.shipmentData[0].materialId,\n    Quantity: msg.Batch.nQuantity,\n    BatchId: msg.payload.id\n};\n\nmsg.url = \"http://localhost:52448/api/Operation/Intake\";\nmsg.method = \"PUT\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1120,
        "wires": [
            [
                "bce4394768167a86"
            ]
        ]
    },
    {
        "id": "8a77a64b40e21f1c",
        "type": "switch",
        "z": "1a2e5283742c6999",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1090,
        "y": 1120,
        "wires": [
            [
                "23c74eafcde56f3b"
            ],
            [
                "d75aa3202c671f77"
            ]
        ]
    },
    {
        "id": "bce4394768167a86",
        "type": "http request",
        "z": "1a2e5283742c6999",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-type",
                "valueType": "other",
                "valueValue": "application/json"
            },
            {
                "keyType": "other",
                "keyValue": "initiator-user",
                "valueType": "msg",
                "valueValue": "UserId"
            }
        ],
        "x": 850,
        "y": 1120,
        "wires": [
            [
                "8a77a64b40e21f1c"
            ]
        ]
    },
    {
        "id": "affcfdeebc018384",
        "type": "function",
        "z": "1a2e5283742c6999",
        "name": "SetProductionOrder",
        "func": "msg.ProductionOrder = msg.payload;\nmsg.operationTemplateId = msg.payload.operations[0].operationTemplateId;\nmsg.materialId = msg.shipmentData[0].materialId;\nmsg.accessId = msg.payload.accessId;\nmsg.planDate = msg.shipmentData[0].planDate.toISOString();\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 660,
        "wires": [
            [
                "b1aaf6669ada2630"
            ]
        ]
    },
    {
        "id": "61dc2ecc7d8e5f73",
        "type": "function",
        "z": "1a2e5283742c6999",
        "name": "SetProcess",
        "func": "msg.Process = msg.payload[0];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 800,
        "wires": [
            [
                "f8f92478a4cfa11a"
            ]
        ]
    },
    {
        "id": "855516e7e816d408",
        "type": "function",
        "z": "1a2e5283742c6999",
        "name": "PreapreResponse",
        "func": "msg.statusCode=200;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 960,
        "wires": [
            [
                "0d1f5aa2176926fa"
            ]
        ]
    },
    {
        "id": "44af92aa143806ac",
        "type": "subflow:37b786771d50fd31",
        "z": "1a2e5283742c6999",
        "name": "",
        "x": 630,
        "y": 480,
        "wires": [
            [
                "4ae6b5e21edb1b3c",
                "1cf8ae0a1979671d"
            ],
            []
        ]
    },
    {
        "id": "1cf8ae0a1979671d",
        "type": "debug",
        "z": "1a2e5283742c6999",
        "name": "debug 257",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 400,
        "wires": []
    },
    {
        "id": "b3470d65499fcd60",
        "type": "function",
        "z": "1a2e5283742c6999",
        "name": "SetSourceRequest",
        "func": "msg.sourceRequest = msg.payload;\n\nmsg.UserId = msg.req.headers[\"initiator-user\"];\nif (msg.UserId == null) {\n    msg.UserId = msg.payload.UserId;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 480,
        "wires": [
            [
                "44af92aa143806ac"
            ]
        ]
    },
    {
        "id": "ce5ea3ac8d30a1f5",
        "type": "debug",
        "z": "1a2e5283742c6999",
        "name": "debug 258",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 720,
        "wires": []
    },
    {
        "id": "3656bd7fff360f75",
        "type": "debug",
        "z": "1a2e5283742c6999",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 520,
        "wires": []
    },
    {
        "id": "08702d284c97ac34",
        "type": "debug",
        "z": "1a2e5283742c6999",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 840,
        "wires": []
    },
    {
        "id": "0c2d5acfa07ce307",
        "type": "debug",
        "z": "1a2e5283742c6999",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 1140,
        "wires": []
    },
    {
        "id": "76743940f814244e",
        "type": "function",
        "z": "1a2e5283742c6999",
        "name": "prep data",
        "func": "msg.payload ={\n    status:msg.SQL[0].nStatusNew,\n     shipmentId:msg.SQL[0].gShipmentId\n     };                                      \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 960,
        "wires": [
            [
                "87326a873f1ffd6a"
            ]
        ]
    },
    {
        "id": "87326a873f1ffd6a",
        "type": "http request",
        "z": "1a2e5283742c6999",
        "name": "/api/Shipment/SetStatus",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "query",
        "url": "{{{Config.ReceptionUrl}}}/api/Shipment/SetStatus",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-Type",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 2410,
        "y": 960,
        "wires": [
            [
                "7448755cbfd09a98"
            ]
        ]
    },
    {
        "id": "23c74eafcde56f3b",
        "type": "loop",
        "z": "1a2e5283742c6999",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "ReceptionBatches",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 250,
        "y": 1000,
        "wires": [
            [
                "855516e7e816d408"
            ],
            [
                "0d4a02834fb46251",
                "0c2d5acfa07ce307"
            ]
        ]
    },
    {
        "id": "4ae6b5e21edb1b3c",
        "type": "MSSQL",
        "z": "1a2e5283742c6999",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "GetInitDataForProductionOrder",
        "outField": "shipmentData",
        "returnType": 0,
        "throwErrors": 1,
        "query": "select \r\ntop 1\r\ns.gMaterialId as N'materialId',\r\n1 as N'createTypeId',\r\ns.gId as N'shipmentId',\r\ns.nActualAmount as N'processAmount',\r\ns.gEquipmentTreeId as N'equipmentId',\r\ns.dtPlanDate as N'planDate',\r\nsr.gId as N'shiftId',\r\not.gId as N'orderTemplateId'\r\nfrom (select * from ReceptionRuntime.dbo.tblShipment where gId = '{{{sourceRequest.ShipmentId}}}') s\r\njoin ProductionManagementMasterData.dbo.tblOrderTemplate ot on ot.gAccessId = s.gAccessId \r\nand ot.gMaterialId = s.gMaterialId \r\nleft join BaseClassifiers.dbo.tblShiftRuntime sr on sr.gPlantId = s.gAccessId and sr.dtStart <= GETUTCDATE() and sr.dtEnd >= GETUTCDATE()",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 250,
        "y": 580,
        "wires": [
            [
                "ecf982abdd9274ef"
            ]
        ]
    },
    {
        "id": "b1aaf6669ada2630",
        "type": "MSSQL",
        "z": "1a2e5283742c6999",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "GetInitDataForProcess",
        "outField": "bom",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT top 1 gId as N'id'\r\n  FROM [ProductionManagementMasterData].[dbo].[tblBillOfMaterial]\r\n  where 1=1\r\n  and [gMaterialId] = '{{{materialId}}}'\r\n  and [bIsActive] = 1\r\n  and [gAccessId] = '{{{accessId}}}'\r\n  and dtValidFrom <= '{{{planDate}}}'\r\n  and ((dtValidTill is null) or (dtValidTill >= '{{{planDate}}}'))\r\n  order by nKey desc",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 360,
        "y": 660,
        "wires": [
            [
                "26f66217c5bcb649",
                "ce5ea3ac8d30a1f5"
            ]
        ]
    },
    {
        "id": "410a80eed28ccfdd",
        "type": "MSSQL",
        "z": "1a2e5283742c6999",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "GetReceptionBatches",
        "outField": "ReceptionBatches",
        "returnType": 0,
        "throwErrors": 1,
        "query": "\r\n    select rb.*,\r\n\tbuf.gTargetStorageLocationId as N'intakeId',\r\n\tb.StorageLocationId as N'outtakeId',\r\n\t\t(Sum(rb.nQuantity) OVER ()) as N'quantitySum',\r\n\tb.szBatchNumber,\r\n\tb.szSupplierNumber,\r\n\tb.szComment,\r\n\tb.dtExpiration,\r\n\tb.dtPackagingDate,\r\n\tb.szNumberSAP\r\n  from (select * from BatchManagementDb.dbo.tblBatch where gShipmentId = '{{{sourceRequest.ShipmentId}}}') b\r\n  join ReceptionRuntime.dbo.tblReceptionBatch rb on rb.gBatchId = b.gId\r\n  join ReceptionRuntime.dbo.tblReceptionBuffer buf on buf.gBatchId = b.gId",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 240,
        "y": 900,
        "wires": [
            [
                "04fbb51d0b308aec",
                "08702d284c97ac34"
            ]
        ]
    },
    {
        "id": "0d1f5aa2176926fa",
        "type": "MSSQL",
        "z": "1a2e5283742c6999",
        "mssqlCN": "6c4551b7b08b27f9",
        "name": "sp_GetShipmentStatus",
        "outField": "SQL",
        "returnType": 0,
        "throwErrors": 1,
        "query": "dbExchange.dbo.sp_GetShipmentStatus ",
        "modeOpt": "",
        "modeOptType": "execute",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "gShipmentId",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "sourceRequest.ShipmentId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "szEventType",
                "type": "NVarChar(25)",
                "valueType": "str",
                "value": "Complete",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 2030,
        "y": 960,
        "wires": [
            [
                "76743940f814244e"
            ]
        ]
    },
    {
        "id": "338fdc525d2b43c5",
        "type": "inject",
        "z": "e08887c0e6e05d68",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 60,
        "wires": [
            [
                "196e2b9dc59ad38d",
                "b07d77eafd319c23"
            ]
        ]
    },
    {
        "id": "b77d7329bb23939c",
        "type": "comment",
        "z": "e08887c0e6e05d68",
        "name": "Create tbl if not eixst",
        "info": "",
        "x": 130,
        "y": 60,
        "wires": []
    },
    {
        "id": "1b1e8daa1bbeb1d9",
        "type": "http in",
        "z": "e08887c0e6e05d68",
        "name": "",
        "url": "/api/prodCycleControlRules",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 340,
        "wires": [
            [
                "611014b367f253df",
                "1495e6dfa073aeb2"
            ]
        ]
    },
    {
        "id": "31ef19cd49c87bd7",
        "type": "comment",
        "z": "e08887c0e6e05d68",
        "name": "AG",
        "info": "",
        "x": 90,
        "y": 20,
        "wires": []
    },
    {
        "id": "cd9e6b7b3ceb74ee",
        "type": "http response",
        "z": "e08887c0e6e05d68",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 340,
        "wires": []
    },
    {
        "id": "b18f1c0d29df847a",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 209",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 380,
        "wires": []
    },
    {
        "id": "1495e6dfa073aeb2",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 210",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 300,
        "wires": []
    },
    {
        "id": "79fd30dc0d0d98dd",
        "type": "inject",
        "z": "e08887c0e6e05d68",
        "name": "/api/tblCycleControlRule",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"id\":\"FE99174C-1589-4E96-BC14-71CEB115E959\",\"InspectionMeasurementTemplateId\":null,\"OperationTemplateId\":\"D7089B51-ADAB-493F-B7DB-07A8DB3A344B1\",\"MaterialId\":\"A33A6964-C506-4EE4-A758-3339E050B2FE\",\"StorageLocationId\":\"C1E13DED-5DBA-4AD9-9FEF-93BD76E5EF99\",\"CycleStatus\":\"OK\",\"ChecklistAutoGenerationTemplateId\":null,\"EquipmentId\":\"szEquipmentIds\",\"RuleType\":\"1\"}",
        "payloadType": "json",
        "x": 940,
        "y": 340,
        "wires": [
            [
                "bb1203f63211ed73"
            ]
        ]
    },
    {
        "id": "3e5a49d3c2851c4f",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 211",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 60,
        "wires": []
    },
    {
        "id": "77966ffc5d17f2a3",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 212",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 340,
        "wires": []
    },
    {
        "id": "bb1203f63211ed73",
        "type": "http request",
        "z": "e08887c0e6e05d68",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:1881/api/prodCycleControlRules",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1130,
        "y": 340,
        "wires": [
            [
                "77966ffc5d17f2a3"
            ]
        ]
    },
    {
        "id": "51c4cdf31e565802",
        "type": "inject",
        "z": "e08887c0e6e05d68",
        "name": "/api/tblCycleControlRule/id",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "FE99174C-1589-4E96-BC14-71CEB115E956",
        "payloadType": "str",
        "x": 1310,
        "y": 580,
        "wires": [
            [
                "05906f046e10cfa7"
            ]
        ]
    },
    {
        "id": "05906f046e10cfa7",
        "type": "http request",
        "z": "e08887c0e6e05d68",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:1881/api/tblCycleControlRule/ReadId",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1510,
        "y": 580,
        "wires": [
            [
                "9159e1a8d22437fd"
            ]
        ]
    },
    {
        "id": "9159e1a8d22437fd",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 213",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 580,
        "wires": []
    },
    {
        "id": "f1f81f115661581f",
        "type": "comment",
        "z": "e08887c0e6e05d68",
        "name": "Add new rule",
        "info": "",
        "x": 110,
        "y": 300,
        "wires": []
    },
    {
        "id": "fe03eb82bb838601",
        "type": "http in",
        "z": "e08887c0e6e05d68",
        "name": "",
        "url": "/api/prodCycleControlRules",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 460,
        "wires": [
            [
                "b08c65305199f6c0",
                "14d418b16912ccf8"
            ]
        ]
    },
    {
        "id": "9d8013bc1922d722",
        "type": "http response",
        "z": "e08887c0e6e05d68",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 460,
        "wires": []
    },
    {
        "id": "8a37f6df3474843e",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 214",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 500,
        "wires": []
    },
    {
        "id": "14d418b16912ccf8",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 215",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 420,
        "wires": []
    },
    {
        "id": "e7c2510e1d0c74c5",
        "type": "comment",
        "z": "e08887c0e6e05d68",
        "name": "UpdateRuleId",
        "info": "",
        "x": 110,
        "y": 420,
        "wires": []
    },
    {
        "id": "ba03af5a777b0d2b",
        "type": "inject",
        "z": "e08887c0e6e05d68",
        "name": "/api/tblCycleControlRule",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"gid\":\"FE99174C-1589-4E96-BC14-71CEB115E959\",\"gInspectionMeasurementTemplateId\":\"702DC786-3D51-4C4C-A5BF-AB20DFCCB2AF\",\"gCycleId\":\"D7089B51-ADAB-493F-B7DB-07A8DB3A344B1\",\"gMaterialId\":\"A33A6964-C506-4EE4-A758-3339E050B2FE\",\"gStorageLocationId\":\"C1E13DED-5DBA-4AD9-9FEF-93BD76E5EF99\",\"szCycleStatus\":\"OK\",\"gChecklistAutoGenerationTemplateId\":\"CC61D09A-8494-4569-A1F5-550730E31C5C\",\"szEquipmentIds\":\"szEquipmentIds\",\"nCycleType\":\"10\"}",
        "payloadType": "json",
        "x": 940,
        "y": 460,
        "wires": [
            [
                "df9d05d2f2726aaf"
            ]
        ]
    },
    {
        "id": "92f2015447a3095b",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 216",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 460,
        "wires": []
    },
    {
        "id": "df9d05d2f2726aaf",
        "type": "http request",
        "z": "e08887c0e6e05d68",
        "name": "",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:1881/api/tblCycleControlRule",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1130,
        "y": 460,
        "wires": [
            [
                "92f2015447a3095b"
            ]
        ]
    },
    {
        "id": "65795eda213c71c7",
        "type": "http in",
        "z": "e08887c0e6e05d68",
        "name": "",
        "url": "/api/prodCycleControlRules/:OperationId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 580,
        "wires": [
            [
                "be403d5c1ddb04ec",
                "9da3296211e5bdeb"
            ]
        ]
    },
    {
        "id": "54d97f7351b6b5b5",
        "type": "http response",
        "z": "e08887c0e6e05d68",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1050,
        "y": 580,
        "wires": []
    },
    {
        "id": "1631a7a6c9cab8ef",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 217",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 640,
        "wires": []
    },
    {
        "id": "9da3296211e5bdeb",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 218",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 540,
        "wires": []
    },
    {
        "id": "9d08a12d2bfd2d7e",
        "type": "comment",
        "z": "e08887c0e6e05d68",
        "name": "ReadRuleId",
        "info": "",
        "x": 110,
        "y": 540,
        "wires": []
    },
    {
        "id": "a749eb680e6d2664",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 219",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 740,
        "wires": []
    },
    {
        "id": "2e80547f75daae14",
        "type": "inject",
        "z": "e08887c0e6e05d68",
        "name": "/api/tblCycleControlRule",
        "props": [
            {
                "p": "req.params",
                "v": "FE99174C-1589-4E96-BC14-71CEB115E956",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 940,
        "y": 700,
        "wires": [
            [
                "075f45e5529dde4c"
            ]
        ]
    },
    {
        "id": "075f45e5529dde4c",
        "type": "http request",
        "z": "e08887c0e6e05d68",
        "name": "",
        "method": "DELETE",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:1881/api/tblCycleControlRule/:id",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1130,
        "y": 700,
        "wires": [
            [
                "d58e98e0bf3cf5f8"
            ]
        ]
    },
    {
        "id": "d58e98e0bf3cf5f8",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 220",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 700,
        "wires": []
    },
    {
        "id": "2e4151da4103ba89",
        "type": "http in",
        "z": "e08887c0e6e05d68",
        "name": "",
        "url": "/api/prodCycleControlRules/:RuleId",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 700,
        "wires": [
            [
                "558bb4f3abc36b34",
                "696e80a76efb2093"
            ]
        ]
    },
    {
        "id": "fde7408e1dd351bd",
        "type": "http response",
        "z": "e08887c0e6e05d68",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 700,
        "wires": []
    },
    {
        "id": "696e80a76efb2093",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 221",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "req",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 640,
        "wires": []
    },
    {
        "id": "cd62ce196e3ffa12",
        "type": "comment",
        "z": "e08887c0e6e05d68",
        "name": "DeleteRuleId",
        "info": "",
        "x": 110,
        "y": 660,
        "wires": []
    },
    {
        "id": "a20e42e60e2f942f",
        "type": "catch",
        "z": "e08887c0e6e05d68",
        "name": "",
        "scope": [
            "b07d77eafd319c23"
        ],
        "uncaught": false,
        "x": 1000,
        "y": 60,
        "wires": [
            [
                "eac9d840227b16ad"
            ]
        ]
    },
    {
        "id": "eac9d840227b16ad",
        "type": "subflow:f8fc59a8d3d93ef9",
        "z": "e08887c0e6e05d68",
        "name": "",
        "x": 1190,
        "y": 60,
        "wires": [
            [
                "da1482cdb06977b9"
            ]
        ]
    },
    {
        "id": "da1482cdb06977b9",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "Debug Save Catch Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 60,
        "wires": []
    },
    {
        "id": "1215a517f72e3067",
        "type": "comment",
        "z": "e08887c0e6e05d68",
        "name": "Для теста API",
        "info": "",
        "x": 1200,
        "y": 160,
        "wires": []
    },
    {
        "id": "8bf9a3f5062d6289",
        "type": "http in",
        "z": "e08887c0e6e05d68",
        "name": "",
        "url": "/api/ProductionCycle",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 800,
        "wires": [
            [
                "bc5c44c0c57e9d59",
                "04359e860b96483d"
            ]
        ]
    },
    {
        "id": "b3762951746373b9",
        "type": "http response",
        "z": "e08887c0e6e05d68",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 800,
        "wires": []
    },
    {
        "id": "d9a8b678d2bb2223",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 254",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 840,
        "wires": []
    },
    {
        "id": "04359e860b96483d",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 255",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 760,
        "wires": []
    },
    {
        "id": "373c495dc2ac321e",
        "type": "inject",
        "z": "e08887c0e6e05d68",
        "name": "POST /api/ProductionCycle",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"gid\":\"FE99174C-1589-4E96-BC14-71CEB115E956\",\"dtStartedAt\":\"2025-02-04 08:22:26.643\",\"gEquipmentId\":\"1FB335CD-C112-4994-8DD4-8A43DD9CED91\",\"szStep\":\"New\"}",
        "payloadType": "json",
        "x": 930,
        "y": 800,
        "wires": [
            [
                "48e55c2de0ba23e8"
            ]
        ]
    },
    {
        "id": "bbf3b2eed171faaf",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 256",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 800,
        "wires": []
    },
    {
        "id": "48e55c2de0ba23e8",
        "type": "http request",
        "z": "e08887c0e6e05d68",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:1881/api/ProductionCycle",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1130,
        "y": 800,
        "wires": [
            [
                "bbf3b2eed171faaf"
            ]
        ]
    },
    {
        "id": "30c904eb47ce4465",
        "type": "comment",
        "z": "e08887c0e6e05d68",
        "name": "Add new cycle(start cycle)",
        "info": "",
        "x": 150,
        "y": 760,
        "wires": []
    },
    {
        "id": "7b23493622b67a4a",
        "type": "http in",
        "z": "e08887c0e6e05d68",
        "name": "",
        "url": "/api/ProductionCycle",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 920,
        "wires": [
            [
                "25a42dea2edd1b3e",
                "bb3ce5f6ab702795"
            ]
        ]
    },
    {
        "id": "103ec5aa8810ddf2",
        "type": "http response",
        "z": "e08887c0e6e05d68",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 920,
        "wires": []
    },
    {
        "id": "7f18448b6cb2d958",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 257",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 960,
        "wires": []
    },
    {
        "id": "bb3ce5f6ab702795",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 258",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 880,
        "wires": []
    },
    {
        "id": "e251de2cdc67d3b6",
        "type": "comment",
        "z": "e08887c0e6e05d68",
        "name": "UpdateCycleId(stop cycle)",
        "info": "",
        "x": 150,
        "y": 880,
        "wires": []
    },
    {
        "id": "98cac520b1d7c554",
        "type": "inject",
        "z": "e08887c0e6e05d68",
        "name": "PUT /api/ProductionCycle",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "FE99174C-1589-4E96-BC14-71CEB115E956",
        "payloadType": "str",
        "x": 930,
        "y": 920,
        "wires": [
            [
                "c2c200285baeeddb"
            ]
        ]
    },
    {
        "id": "68cd3b77f41f767f",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 259",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 920,
        "wires": []
    },
    {
        "id": "c2c200285baeeddb",
        "type": "http request",
        "z": "e08887c0e6e05d68",
        "name": "",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:1881/api/ProductionCycle",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1130,
        "y": 920,
        "wires": [
            [
                "68cd3b77f41f767f"
            ]
        ]
    },
    {
        "id": "9c3453a071427443",
        "type": "http in",
        "z": "e08887c0e6e05d68",
        "name": "",
        "url": "/api/prodCycleControlRules/:RuleType/:OperationTemplateId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 220,
        "wires": [
            [
                "383f5bd1c55e5471",
                "b4b1bfcc45ce1215"
            ]
        ]
    },
    {
        "id": "6830c389f9d41e8b",
        "type": "http response",
        "z": "e08887c0e6e05d68",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 970,
        "y": 180,
        "wires": []
    },
    {
        "id": "4e23c31a97bad862",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 220,
        "wires": []
    },
    {
        "id": "b4b1bfcc45ce1215",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 26",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 180,
        "wires": []
    },
    {
        "id": "544b9458fbbcba9e",
        "type": "inject",
        "z": "e08887c0e6e05d68",
        "name": "/api/tblCycleControlRule",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1230,
        "y": 220,
        "wires": [
            [
                "76b1adb5b7ed2a3b"
            ]
        ]
    },
    {
        "id": "e07141df0f19d2d1",
        "type": "debug",
        "z": "e08887c0e6e05d68",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 220,
        "wires": []
    },
    {
        "id": "76b1adb5b7ed2a3b",
        "type": "http request",
        "z": "e08887c0e6e05d68",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:1881/api/tblCycleControlRule",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1420,
        "y": 220,
        "wires": [
            [
                "e07141df0f19d2d1"
            ]
        ]
    },
    {
        "id": "35172482df867245",
        "type": "comment",
        "z": "e08887c0e6e05d68",
        "name": "Get all rules",
        "info": "",
        "x": 110,
        "y": 180,
        "wires": []
    },
    {
        "id": "7452f4318f4e1b1d",
        "type": "function",
        "z": "e08887c0e6e05d68",
        "name": "ConvertToCycleControlRule",
        "func": "if(msg.payload[0])\n{\n   let cycleControlRule = {\n      Id: msg.payload[0].Id,\n      InspectionMeasurementTemplateId: msg.payload[0].InspectionMeasurementTemplateId,\n      MaterialId: msg.payload[0].MaterialId,\n      StorageLocationId: msg.payload[0].StorageLocationId,\n      CycleStatus: msg.payload[0].CycleStatus,\n      ChecklistAutoGenerationTemplateId: msg.payload[0].ChecklistAutoGenerationTemplateId,\n      EquipmentId: msg.payload[0].EquipmentId\n   }\n   msg.payload = cycleControlRule;\n}\nelse\n{\n   msg.statusCode = 404;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 580,
        "wires": [
            [
                "54d97f7351b6b5b5",
                "1631a7a6c9cab8ef"
            ]
        ]
    },
    {
        "id": "b07d77eafd319c23",
        "type": "MSSQL",
        "z": "e08887c0e6e05d68",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "tblCycleControlRule",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "USE [ProductionManagementMasterData]\r\nIF NOT EXISTS\r\n(\r\n      SELECT 1 \r\n      FROM INFORMATION_SCHEMA.TABLES \r\n      WHERE TABLE_NAME='tblCycleControlRule'-- TABLE_TYPE='BASE TABLE' \r\n) \r\nBEGIN\r\n\r\nCREATE TABLE [dbo].[tblCycleControlRule](\r\n\t[gId] [uniqueidentifier] NOT NULL,\r\n\t[nKey] [int] IDENTITY(1,1) NOT NULL,\r\n\t[gOperationTemplateId] [uniqueidentifier] not null,\r\n\t[dtCreatedAt] [datetime2](7) NOT NULL,\r\n\t[gInspectionMeasurementTemplateId] [uniqueidentifier] NOT NULL,\r\n\t[gMaterialId] [uniqueidentifier] NOT NULL,\r\n\t[gStorageLocationId] [uniqueidentifier] NOT NULL,\r\n\t[szCycleStatus] [nvarchar](200) NOT NULL,\r\n\t[gChecklistAutoGenerationTemplateId] [uniqueidentifier] NOT NULL,\r\n\t[szEquipmentId] [nvarchar](max) NOT NULL,\r\n\t[nRuleType] [int] NOT NULL,\r\n CONSTRAINT [PK_Table_1] PRIMARY KEY CLUSTERED \r\n(\r\n\t[gId] ASC\r\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\r\n) ON [PRIMARY]\r\nEND",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 540,
        "y": 60,
        "wires": [
            [
                "3e5a49d3c2851c4f"
            ]
        ]
    },
    {
        "id": "196e2b9dc59ad38d",
        "type": "MSSQL",
        "z": "e08887c0e6e05d68",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "tblProductionCycle",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "USE ProductionManagementRunTimeDb;\r\nIF NOT EXISTS\r\n(\r\n      SELECT 1 \r\n      FROM INFORMATION_SCHEMA.TABLES \r\n      WHERE TABLE_NAME='tblProductionCycle'-- TABLE_TYPE='BASE TABLE' \r\n) \r\nBEGIN\r\nCREATE TABLE [dbo].[tblProductionCycle](\r\n\t[gId] [uniqueidentifier] NOT NULL,\r\n\t[nKey] [int] IDENTITY(1,1) NOT NULL,\r\n\t[dtStartedAt] [datetime2](7) NOT NULL,\r\n\t[dtCompletedAt] [datetime2](7) NULL,\r\n\t[gEquipmentId] [uniqueidentifier] NOT NULL,\r\n\t[szStep] [nvarchar](50) NOT NULL,\r\n CONSTRAINT [PK_tblProductionCycle] PRIMARY KEY CLUSTERED \r\n(\r\n\t[nKey] ASC\r\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\r\n) --ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];\r\n\r\nEND",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 530,
        "y": 120,
        "wires": [
            [
                "3e5a49d3c2851c4f"
            ]
        ]
    },
    {
        "id": "611014b367f253df",
        "type": "MSSQL",
        "z": "e08887c0e6e05d68",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "tblCycleControlRule",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "INSERT INTO [ProductionManagementMasterData].[dbo].[tblCycleControlRule]\r\n           (\r\n           [gInspectionMeasurementTemplateId]\r\n           ,[gMaterialId]\r\n           ,[gStorageLocationId]\r\n           ,[szCycleStatus]\r\n           ,[gChecklistAutoGenerationTemplateId]\r\n           ,[szEquipmentId]\r\n           ,[nRuleType]\r\n           ,[gOperationTemplateId])\r\n     VALUES\r\n           (\r\n            TRY_CAST('{{{payload.InspectionMeasurementTemplateId}}}'  as uniqueidentifier)\r\n           ,TRY_CAST('{{{payload.MaterialId}}}' as uniqueidentifier)\r\n           ,TRY_CAST('{{{payload.StorageLocationId}}}'  as uniqueidentifier)\r\n           ,'{{{payload.CycleStatus}}}'\r\n            ,TRY_CAST('{{{payload.ChecklistAutoGenerationTemplateId}}}'  as uniqueidentifier)\r\n           ,'{{{payload.EquipmentId}}}'\r\n           ,'{{{payload.RuleType}}}'\r\n           ,'{{{payload.OperationTemplateId}}}')\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 420,
        "y": 340,
        "wires": [
            [
                "b18f1c0d29df847a",
                "cd9e6b7b3ceb74ee"
            ]
        ]
    },
    {
        "id": "b08c65305199f6c0",
        "type": "MSSQL",
        "z": "e08887c0e6e05d68",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "tblCycleControlRule",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "UPDATE [ProductionManagementMasterData].[dbo].[tblCycleControlRule]\r\nSET [gInspectionMeasurementTemplateId] = TRY_CAST ('{{{payload.InspectionMeasurementTemplateId}}}' as uniqueidentifier),\r\n    [gMaterialId] = TRY_CAST ('{{{payload.MaterialId}}}' as uniqueidentifier),\r\n    [gStorageLocationId] = TRY_CAST ('{{{payload.StorageLocationId}}}' as uniqueidentifier),\r\n    [szCycleStatus] = '{{{payload.CycleStatus}}}',\r\n    [gChecklistAutoGenerationTemplateId] = TRY_CAST ('{{{payload.ChecklistAutoGenerationTemplateId}}}' as uniqueidentifier),\r\n    [szEquipmentId] = '{{{payload.EquipmentId}}}'\r\nWHERE [gId] = '{{{payload.Id}}}'\r\n\r\nSelect 'Success';",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 440,
        "y": 460,
        "wires": [
            [
                "8a37f6df3474843e",
                "9d8013bc1922d722"
            ]
        ]
    },
    {
        "id": "be403d5c1ddb04ec",
        "type": "MSSQL",
        "z": "e08887c0e6e05d68",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "tblCycleControlRule",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "USE [ProductionManagementMasterData]\r\nSELECT gId as Id, \r\ngInspectionMeasurementTemplateId as InspectionMeasurementTemplateId,\r\ngMaterialId as MaterialId,\r\ngStorageLocationId as StorageLocationId,\r\nszCycleStatus as CycleStatus,\r\ngChecklistAutoGenerationTemplateId as ChecklistAutoGenerationTemplateId,\r\nszEquipmentId as EquipmentId,\r\nnRuleType as RuleType\r\nFROM [dbo].[tblCycleControlRule]\r\nWHERE [gId] = '{{{req.params.OperationId}}}';\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 520,
        "y": 580,
        "wires": [
            [
                "7452f4318f4e1b1d"
            ]
        ]
    },
    {
        "id": "558bb4f3abc36b34",
        "type": "MSSQL",
        "z": "e08887c0e6e05d68",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "tblCycleControlRule",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "USE [ProductionManagementMasterData]\r\nDELETE FROM [dbo].[tblCycleControlRule]\r\nWHERE [gId] = '{{{req.params.RuleId}}}'\r\n\r\n\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 480,
        "y": 700,
        "wires": [
            [
                "a749eb680e6d2664",
                "fde7408e1dd351bd"
            ]
        ]
    },
    {
        "id": "bc5c44c0c57e9d59",
        "type": "MSSQL",
        "z": "e08887c0e6e05d68",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "tblProductionCycle",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "USE [ProductionManagementRunTimeDb]\r\nINSERT INTO [dbo].[tblProductionCycle]\r\n           ([gId]\r\n           ,[dtStartedAt]\r\n           ,[dtCompletedAt]\r\n           ,[gEquipmentId]\r\n           ,[szStep])\r\n     VALUES\r\n           ('{{{payload.gid}}}'\r\n           ,GETUTCDATE()\r\n           ,NULL\r\n           ,'{{{payload.gEquipmentId}}}'\r\n           ,'{{{payload.szStep}}}')",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 410,
        "y": 800,
        "wires": [
            [
                "d9a8b678d2bb2223",
                "b3762951746373b9"
            ]
        ]
    },
    {
        "id": "25a42dea2edd1b3e",
        "type": "MSSQL",
        "z": "e08887c0e6e05d68",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "tblProductionCycle",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "USE [ProductionManagementRunTimeDb]\r\nUPDATE [dbo].[tblProductionCycle]\r\nSET [dtCompletedAt] = GETUTCDATE()\r\nWHERE [gId] = '{{{payload}}}';",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 430,
        "y": 920,
        "wires": [
            [
                "7f18448b6cb2d958",
                "103ec5aa8810ddf2"
            ]
        ]
    },
    {
        "id": "383f5bd1c55e5471",
        "type": "MSSQL",
        "z": "e08887c0e6e05d68",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "tblCycleControlRule",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "USE [ProductionManagementMasterData]\r\nSELECT gId as Id, \r\ngInspectionMeasurementTemplateId as InspectionMeasurementTemplateId,\r\ngMaterialId as MaterialId,\r\ngStorageLocationId as StorageLocationId,\r\nszCycleStatus as CycleStatus,\r\ngChecklistAutoGenerationTemplateId as ChecklistAutoGenerationTemplateId,\r\nszEquipmentId as EquipmentId,\r\nnRuleType as RuleType\r\n FROM [dbo].[tblCycleControlRule]\r\nwhere nRuleType = '{{{req.params.RuleType}}}' and gOperationTemplateId = '{{{req.params.OperationTemplateId}}}'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 750,
        "y": 220,
        "wires": [
            [
                "4e23c31a97bad862",
                "6830c389f9d41e8b"
            ]
        ]
    },
    {
        "id": "93fea56f86011981",
        "type": "http in",
        "z": "1f4d96a137cd98c2",
        "name": "",
        "url": "/api/qualityPeriodicalValues/:qualityPeriodicalValueId",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 500,
        "wires": [
            [
                "26b6cd5eb293a6ae"
            ]
        ]
    },
    {
        "id": "9924f0f2db5399ea",
        "type": "debug",
        "z": "1f4d96a137cd98c2",
        "name": "debug 38",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 180,
        "wires": []
    },
    {
        "id": "a0c114f0e77dc922",
        "type": "subflow:ca94f48e1f18b542",
        "z": "1f4d96a137cd98c2",
        "name": "",
        "x": 1510,
        "y": 500,
        "wires": [
            [
                "d06adbacb569a364"
            ]
        ]
    },
    {
        "id": "d06adbacb569a364",
        "type": "subflow:f2924807aef52857",
        "z": "1f4d96a137cd98c2",
        "name": "",
        "x": 1700,
        "y": 500,
        "wires": [
            [
                "e6e4792b8786191b"
            ]
        ]
    },
    {
        "id": "27d2370a93dcfd2d",
        "type": "http request",
        "z": "1f4d96a137cd98c2",
        "name": "htttp put CalculateGrade",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.ReceptionUrl}}}/api/Grade/CalculateGrade",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1010,
        "y": 260,
        "wires": [
            [
                "45b4f9bf6b9b5c48"
            ]
        ]
    },
    {
        "id": "d3571ca1837e9d02",
        "type": "http response",
        "z": "1f4d96a137cd98c2",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1450,
        "y": 80,
        "wires": []
    },
    {
        "id": "95bbe7cbc540e752",
        "type": "function",
        "z": "1f4d96a137cd98c2",
        "name": "result",
        "func": "msg.payload = {};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 100,
        "wires": [
            [
                "d3571ca1837e9d02",
                "9924f0f2db5399ea"
            ]
        ]
    },
    {
        "id": "5fc9432df6beba0b",
        "type": "inject",
        "z": "1f4d96a137cd98c2",
        "name": "",
        "props": [
            {
                "p": "req.params.qualityPeriodicalValueId",
                "v": "5AC864F0-9C10-4A9C-B8E4-08DC4D7DEE9A",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 300,
        "y": 380,
        "wires": [
            [
                "26b6cd5eb293a6ae"
            ]
        ]
    },
    {
        "id": "3cf258dc81474fef",
        "type": "comment",
        "z": "1f4d96a137cd98c2",
        "name": "YB",
        "info": "",
        "x": 110,
        "y": 60,
        "wires": []
    },
    {
        "id": "9c5bee993a86a7bd",
        "type": "function",
        "z": "1f4d96a137cd98c2",
        "name": "Data CalculateGrade",
        "func": "msg.payload = {\n    InspectionLotId:  msg.loop.value.InspectionLotId\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 260,
        "wires": [
            [
                "27d2370a93dcfd2d"
            ]
        ]
    },
    {
        "id": "45b4f9bf6b9b5c48",
        "type": "function",
        "z": "1f4d96a137cd98c2",
        "name": "Patch InspectionMeasurement IsClose True",
        "func": "msg.Id = msg.loop.value.InspectionMeasurementId;\nmsg.method = \"PATCH\";\nmsg.payload = {\n    IsCompleted:  true\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 260,
        "wires": [
            [
                "e798a088f7382fe0"
            ]
        ]
    },
    {
        "id": "e798a088f7382fe0",
        "type": "http request",
        "z": "1f4d96a137cd98c2",
        "name": "htttp patch InspectionMeasurement",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.QAUrl}}}/api/InspectionMeasurement/{{{Id}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1640,
        "y": 260,
        "wires": [
            [
                "c2c9b20fadf42276"
            ]
        ]
    },
    {
        "id": "8fb881bccfb69fe2",
        "type": "function",
        "z": "1f4d96a137cd98c2",
        "name": "Сonvert data to string",
        "func": "let data = msg.InspectionLots;\n\n// Формируем массив идентификаторов измерений\nlet inspectionMeasurementIds = data.map(row => row.InspectionMeasurementId);\n// Преобразуем массив в строку, разделённую запятыми\nmsg.InspectionMeasurementIds = inspectionMeasurementIds.join(\", \");\n\n// Формируем массив идентификаторов лотов\nlet inspectionLotIds = data.map(row => row.InspectionLotId);\n// Преобразуем массив в строку, разделённую запятыми\nmsg.InspectionLotIds = inspectionLotIds.join(\", \");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 500,
        "wires": [
            [
                "a234cd3a547d9091"
            ]
        ]
    },
    {
        "id": "a6f61eefb0af6832",
        "type": "function",
        "z": "1f4d96a137cd98c2",
        "name": "Patch bulkAutoData",
        "func": "msg.method = \"PATCH\";\nvar array = [];\n\nmsg.InspectionCharacteristicValues.forEach(function(x) {\n   var element = {\n    Id: x.Id,\n    NumericData: {\n        Value: x.Value\n    }\n   };\n   array.push(element) \n});\n\nmsg.payload = {values: array};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 420,
        "wires": [
            [
                "4e832f97d53f5f2a"
            ]
        ]
    },
    {
        "id": "4e832f97d53f5f2a",
        "type": "http request",
        "z": "1f4d96a137cd98c2",
        "name": "htttp patch bulkAutoData",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.QAUrl}}}/api/InspectionCharacteristicValue",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-type",
                "valueType": "other",
                "valueValue": "application/json"
            },
            {
                "keyType": "other",
                "keyValue": "x-type",
                "valueType": "other",
                "valueValue": "bulkAutoData"
            }
        ],
        "x": 2450,
        "y": 420,
        "wires": [
            [
                "c2c9b20fadf42276"
            ]
        ]
    },
    {
        "id": "8a8563ba3823bf5e",
        "type": "function",
        "z": "1f4d96a137cd98c2",
        "name": "Patch InspectionMeasurement IsClose False",
        "func": "msg.Id = msg.loop.value.InspectionMeasurementId;\nmsg.method = \"PATCH\";\nmsg.payload = {\n    IsCompleted:  false\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 500,
        "wires": [
            [
                "9c06345861f9e915"
            ]
        ]
    },
    {
        "id": "9c06345861f9e915",
        "type": "http request",
        "z": "1f4d96a137cd98c2",
        "name": "htttp patch InspectionMeasurement",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.QAUrl}}}/api/InspectionMeasurement/{{{Id}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 2600,
        "y": 500,
        "wires": [
            [
                "e6e4792b8786191b"
            ]
        ]
    },
    {
        "id": "a234cd3a547d9091",
        "type": "switch",
        "z": "1f4d96a137cd98c2",
        "name": "",
        "property": "InspectionMeasurementIds",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 500,
        "wires": [
            [
                "f721cd2d61f77227"
            ],
            [
                "b5e4343c2bab7049",
                "a541642d82344551"
            ]
        ]
    },
    {
        "id": "f721cd2d61f77227",
        "type": "function",
        "z": "1f4d96a137cd98c2",
        "name": "Сonvert data to string",
        "func": "msg.Id = msg.req.params.qualityPeriodicalValueId;\nmsg.method = \"PATCH\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 100,
        "wires": [
            [
                "278fe83a84cd319f"
            ]
        ]
    },
    {
        "id": "278fe83a84cd319f",
        "type": "http request",
        "z": "1f4d96a137cd98c2",
        "name": "htttp patch QualityPeriodicalValue Confirm",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{Config.WorkflowUrl}}}/api/QualityPeriodicalValue/Confirm/{{{Id}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Token"
            }
        ],
        "x": 1040,
        "y": 100,
        "wires": [
            [
                "95bbe7cbc540e752"
            ]
        ]
    },
    {
        "id": "a541642d82344551",
        "type": "debug",
        "z": "1f4d96a137cd98c2",
        "name": "debug 55",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 420,
        "wires": []
    },
    {
        "id": "c2c9b20fadf42276",
        "type": "loop",
        "z": "1f4d96a137cd98c2",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "InspectionLots",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 450,
        "y": 260,
        "wires": [
            [
                "f721cd2d61f77227"
            ],
            [
                "9c5bee993a86a7bd"
            ]
        ]
    },
    {
        "id": "e6e4792b8786191b",
        "type": "loop",
        "z": "1f4d96a137cd98c2",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "InspectionLots",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 1930,
        "y": 500,
        "wires": [
            [
                "a6f61eefb0af6832"
            ],
            [
                "8a8563ba3823bf5e"
            ]
        ]
    },
    {
        "id": "26b6cd5eb293a6ae",
        "type": "MSSQL",
        "z": "1f4d96a137cd98c2",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "GetInspectionLots",
        "outField": "InspectionLots",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @qualityPeriodicalValueId uniqueidentifier = @qualityPeriodicalValueIdInfo;\r\nDECLARE @settingName nvarchar(255) = N'SortMilk'; -- по умолчанию\r\nDECLARE @gInspectionCharacteristicId uniqueidentifier,\r\n\t\t@gAccessId uniqueidentifier;\r\n\r\nDECLARE @startedAt DATETIME2, @stoppedAt DATETIME2;\r\n\r\n-- Извлекаем значение dtStartedAt, dtStoppedAt и gAccessId\r\nSELECT \r\n    @startedAt = dtStartedAt, \r\n    @stoppedAt = dtStoppedAt,\r\n\t@gAccessId = gAccessId\r\nFROM [WorkflowData].[dbo].[tblQualityPeriodicalValues]\r\nWHERE \r\n\tgId = @qualityPeriodicalValueId\r\n\r\n-- Получаем идентификатор аналаза\r\nSELECT TOP(1)\r\n\t@gInspectionCharacteristicId = ih.gId\r\nFROM [ReceptionMasterData].[dbo].[tblSetting] s\r\nINNER JOIN [QAMasterData].[dbo].[tblInspectionCharacteristic] ih ON ih.szCode = s.szValue\r\nWHERE s.szName = @settingName and s.gAccessId = @gAccessId\r\n\r\n-- Выбираем данные, где дата создания попадает в динамически полученный диапазон\r\nSELECT\r\n\til.gId as InspectionLotId,\r\n\tim.gId as InspectionMeasurementId\r\nFROM [BatchManagementDb].[dbo].[tblInspectionLot] il\r\nINNER JOIN [QARunTimeData].[dbo].[tblInspectionMeasurement] im \r\n\tON im.gId = il.gInspectionMeasurementId\r\nINNER JOIN [QARunTimeData].[dbo].[tblInspectionCharacteristicValue] icv \r\n\tON icv.gInspectionMeasurementId = im.gId\r\nWHERE il.gAccessId = @gAccessId \r\n  AND im.bIsCompleted = 1\r\n  AND im.bIsCanceled = 0\r\n  AND (il.dtCreatedAt >= @startedAt AND il.dtCreatedAt <= @stoppedAt)\r\n  AND icv.gInspectionCharacteristicId = @gInspectionCharacteristicId;",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "qualityPeriodicalValueIdInfo",
                "type": "UniqueIdentifier",
                "valueType": "msg",
                "value": "req.params.qualityPeriodicalValueId",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 530,
        "y": 500,
        "wires": [
            [
                "8fb881bccfb69fe2"
            ]
        ]
    },
    {
        "id": "b5e4343c2bab7049",
        "type": "MSSQL",
        "z": "1f4d96a137cd98c2",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "GetInspectionCharacteristicValues",
        "outField": "InspectionCharacteristicValues",
        "returnType": "0",
        "throwErrors": 1,
        "query": "DECLARE @gInspectionLot NVARCHAR(max) = @InspectionLotIdsInfo;\r\nDECLARE @InspectionMeasurementIds NVARCHAR(max) = @InspectionMeasurementIdsInfo;\r\n\r\nDECLARE @gAccessId UNIQUEIDENTIFIER,\r\n        @gMaterilaId UNIQUEIDENTIFIER,\r\n        @gCounterpartyId UNIQUEIDENTIFIER;\r\n\r\n-- Получаем значения параметров для доступа, материала и контрагента\r\nSELECT \r\n    @gAccessId = il.gAccessId,\r\n    @gMaterilaId = b.gMaterialId,\r\n    @gCounterpartyId = d.gCounterpartyId\r\nFROM [BatchManagementDb].[dbo].[tblInspectionLot] il\r\nINNER JOIN [BatchManagementDb].[dbo].[tblBatch] b ON b.gId = il.gBatchId\r\nINNER JOIN [ReceptionRuntime].[dbo].[tblDelivery] d ON d.gId = b.gDeliveryId\r\nWHERE il.gId = @gInspectionLot;\r\n\r\nSELECT \r\n    icv.gId as Id,\r\n    qpv.nValue as [Value]\r\nFROM [QARunTimeData].[dbo].[tblInspectionCharacteristicValue] icv\r\nINNER JOIN (\r\n    -- Разбиваем строку с GUID по запятой и обрезаем пробелы\r\n    SELECT CAST(LTRIM(RTRIM([value])) AS UNIQUEIDENTIFIER) AS splittedId\r\n    FROM STRING_SPLIT(@InspectionMeasurementIds, ',')\r\n) AS vtInspectionMeasurement\r\n    ON icv.gInspectionMeasurementId = vtInspectionMeasurement.splittedId\r\nINNER JOIN [WorkflowData].[dbo].[tblQualityPeriodicalValues] qpv\r\n    ON icv.gInspectionCharacteristicId = qpv.gInspectionCharacteristicId\r\n       AND qpv.gMaterialId = @gMaterilaId\r\n       AND qpv.gCounterpartyId = @gCounterpartyId\r\n       AND qpv.gAccessId = @gAccessId;",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [
            {
                "output": false,
                "name": "InspectionLotIdsInfo",
                "type": "NVARCHAR(max)",
                "valueType": "msg",
                "value": "InspectionLotIds",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "InspectionMeasurementIdsInfo",
                "type": "NVARCHAR(max)",
                "valueType": "msg",
                "value": "InspectionMeasurementIds",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 1240,
        "y": 500,
        "wires": [
            [
                "a0c114f0e77dc922"
            ]
        ]
    },
    {
        "id": "be3362d0272b5407",
        "type": "http in",
        "z": "d777152b3003d7b9",
        "name": "",
        "url": "/api/fileManager/sql/stringParameters",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 300,
        "y": 220,
        "wires": [
            [
                "4be2b8e4a6db903d",
                "70654da8379610ce"
            ]
        ]
    },
    {
        "id": "80e7423939098a88",
        "type": "function",
        "z": "d777152b3003d7b9",
        "name": "function 6",
        "func": "msg.payload = msg.payload.map(x => x.SPECIFIC_NAME);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 220,
        "wires": [
            [
                "9eaacb77524bad24"
            ]
        ]
    },
    {
        "id": "9eaacb77524bad24",
        "type": "json",
        "z": "d777152b3003d7b9",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 910,
        "y": 220,
        "wires": [
            [
                "61607552505d4c9e",
                "7b93b7a3a17d7bd4"
            ]
        ]
    },
    {
        "id": "61607552505d4c9e",
        "type": "http response",
        "z": "d777152b3003d7b9",
        "name": "",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1060,
        "y": 220,
        "wires": []
    },
    {
        "id": "403fb14b98131daf",
        "type": "inject",
        "z": "d777152b3003d7b9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 360,
        "y": 320,
        "wires": [
            [
                "4be2b8e4a6db903d"
            ]
        ]
    },
    {
        "id": "7b93b7a3a17d7bd4",
        "type": "debug",
        "z": "d777152b3003d7b9",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 300,
        "wires": []
    },
    {
        "id": "70654da8379610ce",
        "type": "debug",
        "z": "d777152b3003d7b9",
        "name": "debug 41",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 120,
        "wires": []
    },
    {
        "id": "4be2b8e4a6db903d",
        "type": "MSSQL",
        "z": "d777152b3003d7b9",
        "mssqlCN": "ee9e2bd745da9976",
        "name": "GetStringParams",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT SPECIFIC_NAME\r\n  FROM [FileManagerDb].INFORMATION_SCHEMA.ROUTINES\r\n WHERE ROUTINE_TYPE = 'PROCEDURE'\r\n and SPECIFIC_NAME like N'%Filter%'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 590,
        "y": 220,
        "wires": [
            [
                "80e7423939098a88"
            ]
        ]
    },
    {
        "id": "da4514f41a57d5f7",
        "type": "http in",
        "z": "bffde752cab0f07d",
        "name": "",
        "url": "/api/reverseBatch",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 200,
        "wires": [
            [
                "76f0a6b8b9f34405",
                "5f1d278102bff5e6"
            ]
        ]
    },
    {
        "id": "a2711436e2f7d7d5",
        "type": "http response",
        "z": "bffde752cab0f07d",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1200,
        "y": 200,
        "wires": []
    },
    {
        "id": "76f0a6b8b9f34405",
        "type": "debug",
        "z": "bffde752cab0f07d",
        "name": "debug 56",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 300,
        "wires": []
    },
    {
        "id": "7aea4d3770e0ec27",
        "type": "http request",
        "z": "bffde752cab0f07d",
        "name": "ReverseBatch",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://10.70.6.61:52448/api/Operation/ReverseBatch",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "token"
            },
            {
                "keyType": "other",
                "keyValue": "Content-type",
                "valueType": "other",
                "valueValue": "application/json"
            },
            {
                "keyType": "other",
                "keyValue": "initiator-user",
                "valueType": "msg",
                "valueValue": "UserId"
            }
        ],
        "x": 1040,
        "y": 200,
        "wires": [
            [
                "a2711436e2f7d7d5",
                "972789cea4f2ae7e"
            ]
        ]
    },
    {
        "id": "5f1d278102bff5e6",
        "type": "function",
        "z": "bffde752cab0f07d",
        "name": "Init",
        "func": "msg.requestData = msg.payload;\nmsg.UserId = msg.req.headers[\"initiator-user\"];\nif(msg.UserId == null)\n{\n    msg.UserId = msg.payload.UserId;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 200,
        "wires": [
            [
                "1fb5ad5efececa15"
            ]
        ]
    },
    {
        "id": "972789cea4f2ae7e",
        "type": "debug",
        "z": "bffde752cab0f07d",
        "name": "debug 58",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 300,
        "wires": []
    },
    {
        "id": "32aed47d6b613d5a",
        "type": "function",
        "z": "bffde752cab0f07d",
        "name": "SetPayload",
        "func": "msg.payload = msg.requestData;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 200,
        "wires": [
            [
                "7ba37151259be95f"
            ]
        ]
    },
    {
        "id": "7ba37151259be95f",
        "type": "json",
        "z": "bffde752cab0f07d",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 850,
        "y": 200,
        "wires": [
            [
                "7aea4d3770e0ec27"
            ]
        ]
    },
    {
        "id": "1fb5ad5efececa15",
        "type": "subflow:6bff06d7846d79c6",
        "z": "bffde752cab0f07d",
        "name": "",
        "x": 540,
        "y": 280,
        "wires": [
            [
                "c200d72824072dab"
            ]
        ]
    },
    {
        "id": "c200d72824072dab",
        "type": "function",
        "z": "bffde752cab0f07d",
        "name": "SetUserId",
        "func": "if (msg.UserId == null || msg.UserId == undefined)\n{\n    msg.UserId = msg.TokenCheck.UserId;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 280,
        "wires": [
            [
                "32aed47d6b613d5a"
            ]
        ]
    },
    {
        "id": "beba6f774a1dd9ed",
        "type": "inject",
        "z": "fca5a13dcb9d9826",
        "name": "",
        "props": [],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 200,
        "wires": [
            [
                "59f6cf8c3e0de7b6"
            ]
        ]
    },
    {
        "id": "06d5a4a46f9ad694",
        "type": "debug",
        "z": "fca5a13dcb9d9826",
        "name": "debug 59",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 160,
        "wires": []
    },
    {
        "id": "974f9322f8d6bb3a",
        "type": "function",
        "z": "fca5a13dcb9d9826",
        "name": "to",
        "func": "msg.topic = \"Не хватка навесок для ПЗ\"\n//msg.from = \"MES_PA_Setting@hochland.com\";\nmsg.from = \"katerinake@mail.ru\"\n//msg.to = msg.Emails[0].toEmail\nmsg.to = \"yekaterina.kobets@solisoft.group\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 300,
        "wires": [
            [
                "21ac2298c1315b14"
            ]
        ]
    },
    {
        "id": "0aaea5e3c809488c",
        "type": "debug",
        "z": "fca5a13dcb9d9826",
        "name": "debug 61",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 260,
        "wires": []
    },
    {
        "id": "91473ef7b5d557ec",
        "type": "template",
        "z": "fca5a13dcb9d9826",
        "name": "Body Email",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n\n<head></head>\n\n<body>\n    <table border=\"1\" cellspacing=\"0\" class=\"MsoTableGrid\"\n        style=\"border-collapse:collapse; border:solid windowtext 1.0pt; width:618px\">\n        <caption>\n            <b style=\"text-align:center\">\n                <span style=\"font-size:14pt\"><span style=\"font-family:Calibri,sans-serif\"><span style=\"color:black\">\n                    Для ПЗ на следующую смену {{{ShiftLiter}}} не хватает навесок для следущих материалов:\n                </span></span></span>\n            </b>\n        </caption>\n        <tbody>\n            <tr>\n                <td style=\"background-color:#d9e2f3; width:30pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\">MaterialId</span></span>\n                    </p>\n                </td>\n                <td style=\"background-color:#d9e2f3; width:10pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\"><span style=\"color:black\">MaterialName</span></span></span>\n                    </p>\n                </td>\n                <td style=\"background-color:#d9e2f3; width:10pt\">\n                    <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\">\n                        <span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\"><span style=\"color:black\">MissingAmount</span></span></span>\n                    </p>\n                </td>\n            </tr>\n            <tr>\n                {{{httpStr}}}\n            </tr> \n        </tbody> \n    </body> \n</html>\n",
        "output": "str",
        "x": 610,
        "y": 260,
        "wires": [
            [
                "a92628043d4be1bf"
            ]
        ]
    },
    {
        "id": "b0fcb8e3a6f6b458",
        "type": "function",
        "z": "fca5a13dcb9d9826",
        "name": "AnalysisDataRow",
        "func": "msg.httpStr=''\nlet FieldStart = `<td style=\"width:30pt\"> <p style=\"margin-left:0cm; margin-right:0cm; text-align:center\"><span style=\"font-size:11pt\"><span style=\"font-family:Calibri,sans-serif\">`\nlet FieldEnd = `</span></span ></p ></td >`\n\n// Формирование динамического шаблона для отправки в email для материала данного завода\nmsg.Data.forEach(el => {\n    if (el.gAccessId == msg.PlantId){\n        msg.httpStr += `<tr>` + FieldStart + el.gMaterialId + FieldEnd + FieldStart + el.MaterialName + FieldEnd +FieldStart + el.MissingAmount + FieldEnd + `</tr>`\n    }\n});\n\nif (msg.httpStr == ''){\n    return null;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 260,
        "wires": [
            [
                "91473ef7b5d557ec"
            ]
        ]
    },
    {
        "id": "d00cc8c885ae6ad3",
        "type": "switch",
        "z": "fca5a13dcb9d9826",
        "name": "IsData",
        "property": "Data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "undefined",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1170,
        "y": 200,
        "wires": [
            [
                "b0fcb8e3a6f6b458",
                "06d5a4a46f9ad694"
            ],
            []
        ]
    },
    {
        "id": "3969353eb8e52c89",
        "type": "comment",
        "z": "fca5a13dcb9d9826",
        "name": "DTr",
        "info": "Какое время для начала каждой смены?\nНужно ли указывать в email для какой смены не хватает материалов для ПЗ\nНужно ли отфильтровывать MissingAmount с 0\nКак происходит поиск email",
        "x": 90,
        "y": 20,
        "wires": []
    },
    {
        "id": "59f6cf8c3e0de7b6",
        "type": "function",
        "z": "fca5a13dcb9d9826",
        "name": "Time",
        "func": "let QA = global.get(\"QAShiftStart\")\nif (QA == undefined){\n    node.warn(\"Глобальный справочник не сформирован\")\n    return null;\n}\n\n// Сверяем данное время и время из глобального справочника для каждого завода\nlet keys = Object.keys(QA);\nkeys.forEach(key =>{\n\n    msg.PlantId = QA[key].PlantId\n    let currentTime = new Date(Date.now())\n    let comparisonTime  = new Date(QA[key].TimeStart);\n\n\n    if (currentTime.getFullYear() === comparisonTime.getFullYear() &&\n        currentTime.getMonth() === comparisonTime.getMonth() &&\n        currentTime.getDate() === comparisonTime.getDate() &&\n        currentTime.getHours() === comparisonTime.getHours() &&\n        currentTime.getMinutes() === comparisonTime.getMinutes()){\n\n        msg.ShiftLiter = QA[key].ShiftLiter\n        if (key == \"RAOS\"){\n            msg.requestStr = \"Notice Email (Naveska 12h) RAOS\"\n        }\n        else if (key == \"Prohorovka\"){\n            msg.requestStr = \"Notice Email (Naveska 12h) PRO\"\n        }\n\n        node.send(msg)\n    }\n})\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 200,
        "wires": [
            [
                "762ef3981fdf6c71"
            ]
        ]
    },
    {
        "id": "546be2f6a019b759",
        "type": "inject",
        "z": "fca5a13dcb9d9826",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 460,
        "wires": [
            [
                "a219bd40bcf1437b"
            ]
        ]
    },
    {
        "id": "520a01e1a7c942e7",
        "type": "function",
        "z": "fca5a13dcb9d9826",
        "name": "SetGlobalVariable",
        "func": "let obj = {\n    RAOS: {\n        PlantId: '898634A9-46B5-40C7-8267-C4641FC4C3AD',\n        TimeStart: msg.payload[0].RAOS,\n        ShiftLiter: msg.payload[0].ShiftLiter\n    },\n    Prohorovka: {\n        PlantId: '449BF86B-8CDA-4462-AEBD-08651E38A5DB',\n        TimeStart: msg.payload[2].PRO,\n        ShiftLiter: msg.payload[2].ShiftLiter\n    }\n    \n}\nglobal.set(\"QAShiftStart\", obj)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "85795e0d13ed504b",
        "type": "debug",
        "z": "fca5a13dcb9d9826",
        "name": "debug 62",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 460,
        "wires": []
    },
    {
        "id": "b1b41948c0a2e597",
        "type": "function",
        "z": "fca5a13dcb9d9826",
        "name": "SetGlobalVariable",
        "func": "//Устанавливаем глобальную переменную времени\nlet RAOS = {\n    TimeStart: '',\n    ShiftLiter: ''\n}\nlet PRO = {\n    TimeStart: '',\n    ShiftLiter: ''\n}\n\nif (msg.Times == undefined){\n    msg.error = \"Не найдено следующее время старта завода: \" + msg.PlantId\n    return [msg, null]\n}\n\nmsg.Times.forEach(el => {\n    if(el.RAOS != null)\n    {\n        if (RAOS[\"TimeStart\"] == ''){\n            RAOS[\"TimeStart\"] = el.RAOS,\n            RAOS[\"ShiftLiter\"] = el.ShiftLiter\n        }\n    }\n    if (el.PRO != null) {\n        if (PRO[\"TimeStart\"] == '') {\n            PRO[\"TimeStart\"] = el.PRO,\n            PRO[\"ShiftLiter\"] = el.ShiftLiter\n        }\n    }\n});\n\nlet obj = {\n    RAOS: {\n        PlantId: '898634A9-46B5-40C7-8267-C4641FC4C3AD',\n        TimeStart: RAOS.TimeStart,\n        ShiftLiter: RAOS.ShiftLiter\n    },\n    Prohorovka: {\n        PlantId: '449BF86B-8CDA-4462-AEBD-08651E38A5DB',\n        TimeStart: PRO.TimeStart,\n        ShiftLiter: PRO.ShiftLiter\n    }\n    \n}\nglobal.set(\"QAShiftStart\", obj)\nreturn [null, msg];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 200,
        "wires": [
            [
                "14cd6b9c17a8889f"
            ],
            [
                "5b2b3dd6180cecee"
            ]
        ]
    },
    {
        "id": "1af3aaa2d7e235cd",
        "type": "function",
        "z": "fca5a13dcb9d9826",
        "name": "Установка времени в ручную",
        "func": "let obj = {\n    RAOS: {\n        PlantId: '898634A9-46B5-40C7-8267-C4641FC4C3AD',\n        TimeStart: \"2025-04-01T07:59:30.000Z\",\n        ShiftLiter: \"C\"\n    },\n    Prohorovka: {\n        PlantId: '449BF86B-8CDA-4462-AEBD-08651E38A5DB',\n        TimeStart: \"2025-04-01T10:59:00.000Z\",\n        ShiftLiter: \"D\"\n    }\n    \n}\nglobal.set(\"QAShiftStart\", obj)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 500,
        "wires": [
            [
                "85795e0d13ed504b"
            ]
        ]
    },
    {
        "id": "25b3caf8a0fe8e58",
        "type": "catch",
        "z": "fca5a13dcb9d9826",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 210,
        "y": 560,
        "wires": [
            [
                "a9bb42420d74399b"
            ]
        ]
    },
    {
        "id": "d4fa81fa14f772f7",
        "type": "debug",
        "z": "fca5a13dcb9d9826",
        "name": "Debug Save Catch Data",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 560,
        "wires": []
    },
    {
        "id": "a9bb42420d74399b",
        "type": "subflow:f8fc59a8d3d93ef9",
        "z": "fca5a13dcb9d9826",
        "name": "",
        "x": 410,
        "y": 560,
        "wires": [
            [
                "d4fa81fa14f772f7"
            ]
        ]
    },
    {
        "id": "14cd6b9c17a8889f",
        "type": "link out",
        "z": "fca5a13dcb9d9826",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "efa8280194db233f"
        ],
        "x": 965,
        "y": 160,
        "wires": []
    },
    {
        "id": "efa8280194db233f",
        "type": "link in",
        "z": "fca5a13dcb9d9826",
        "name": "link in 3",
        "links": [
            "14cd6b9c17a8889f"
        ],
        "x": 215,
        "y": 520,
        "wires": [
            [
                "a9bb42420d74399b"
            ]
        ]
    },
    {
        "id": "a92628043d4be1bf",
        "type": "MSSQL",
        "z": "fca5a13dcb9d9826",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "FindsEmails",
        "outField": "Emails",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @Emals VARCHAR(8000) \r\nSELECT @Emals=  COALESCE(@Emals+ '; ', '') + u.NormalizedEmail    \r\nFROM [UserManagement].[dbo].[AspNetUsers] u\r\n\tINNER JOIN [UserManagement].[dbo].[tblUserUserGroupRelation] r ON u.Id=r.UserId\r\n\tINNER JOIN [UserManagement].[dbo].[tblUserGroup] g ON g.gId=r.UserGroupId\r\n  where g.szName ='OEE users'---{{{reuqestStr}}} \r\n\r\n\r\nSELECT @Emals as 'toEmail'",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 790,
        "y": 260,
        "wires": [
            [
                "0aaea5e3c809488c",
                "974f9322f8d6bb3a"
            ]
        ]
    },
    {
        "id": "5b2b3dd6180cecee",
        "type": "MSSQL",
        "z": "fca5a13dcb9d9826",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "FindMissingAmount",
        "outField": "Data",
        "returnType": 0,
        "throwErrors": 1,
        "query": "CREATE TABLE #TempTable (\r\n    gMaterialId VARCHAR(255),\r\n    MaterialName VARCHAR(255),\r\n    RequiredAmount DECIMAL(18, 5) NULL,\r\n    ActualAmount DECIMAL(18, 5) NULL,\r\n    MissingAmount DECIMAL(18, 5),\r\n    gAccessId VARCHAR(255)\r\n);\r\n\r\nINSERT INTO #TempTable \r\nSELECT * FROM [dbExchange].[dbo].[tblTemp]   --EXEC [FileManagerDb].[dbo].[FindBatches];\r\n\r\nSELECT gMaterialId, MaterialName, MissingAmount, gAccessId\r\nFROM #TempTable;\r\n\r\nDROP TABLE #TempTable;",
        "modeOpt": "",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 990,
        "y": 200,
        "wires": [
            [
                "d00cc8c885ae6ad3"
            ]
        ]
    },
    {
        "id": "a219bd40bcf1437b",
        "type": "MSSQL",
        "z": "fca5a13dcb9d9826",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @Tbl TABLE (RAOS DATETIME2(7), PRO DATETIME2(7), ShiftLiter VARCHAR(1));\r\n\r\n-- Вставляем данные для RAOS\r\nINSERT INTO @Tbl (RAOS, ShiftLiter)\r\nSELECT dtStart, szName \r\nFROM [BaseClassifiers].[dbo].[tblShiftRuntime]\r\nWHERE gPlantId = '898634A9-46B5-40C7-8267-C4641FC4C3AD' \r\n  AND dtStart < DATEADD(DAY, 1, GETDATE()) \r\n  AND dtStart > GETDATE();\r\n\r\n-- Вставляем данные для Prohorovky\r\nINSERT INTO @Tbl (PRO, ShiftLiter)\r\nSELECT dtStart, szName \r\nFROM [BaseClassifiers].[dbo].[tblShiftRuntime]\r\nWHERE gPlantId = '449BF86B-8CDA-4462-AEBD-08651E38A5DB' \r\n  AND dtStart < DATEADD(DAY, 1, GETDATE()) \r\n  AND dtStart > GETDATE();\r\n\r\n-- Выбираем все данные из временной таблицы\r\nSELECT * FROM @Tbl;",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 420,
        "y": 460,
        "wires": [
            [
                "1af3aaa2d7e235cd"
            ]
        ]
    },
    {
        "id": "762ef3981fdf6c71",
        "type": "MSSQL",
        "z": "fca5a13dcb9d9826",
        "mssqlCN": "b4d4fed8c8768eee",
        "name": "FindNewTimeStart",
        "outField": "Times",
        "returnType": 0,
        "throwErrors": 1,
        "query": "DECLARE @Tbl TABLE (RAOS DATETIME2(7), PRO DATETIME2(7), ShiftLiter VARCHAR(1));\r\n\r\n-- Вставляем данные для RAOS\r\nINSERT INTO @Tbl (RAOS, ShiftLiter)\r\nSELECT dtStart, szName \r\nFROM [BaseClassifiers].[dbo].[tblShiftRuntime]\r\nWHERE gPlantId = '898634A9-46B5-40C7-8267-C4641FC4C3AD' \r\n  AND dtStart < DATEADD(DAY, 1, GETDATE()) \r\n  AND dtStart > GETDATE();\r\n\r\n-- Вставляем данные для Prohorovky\r\nINSERT INTO @Tbl (PRO, ShiftLiter)\r\nSELECT dtStart, szName \r\nFROM [BaseClassifiers].[dbo].[tblShiftRuntime]\r\nWHERE gPlantId = '449BF86B-8CDA-4462-AEBD-08651E38A5DB' \r\n  AND dtStart < DATEADD(DAY, 1, GETDATE()) \r\n  AND dtStart > GETDATE();\r\n\r\n-- Выбираем все данные из временной таблицы\r\nSELECT * FROM @Tbl;",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 550,
        "y": 200,
        "wires": [
            [
                "b1b41948c0a2e597"
            ]
        ]
    },
    {
        "id": "21ac2298c1315b14",
        "type": "e-mail",
        "z": "fca5a13dcb9d9826",
        "server": "smtp.mail.ru",
        "port": "465",
        "authtype": "NONE",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "",
        "dname": "",
        "x": 1070,
        "y": 320,
        "wires": []
    }
]